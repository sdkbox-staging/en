{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\n\n\nSDKBOX makes it super EASY and FREE for Cocos2d-x developers to integrate 3rd party SDKs into their games. We do all the hard, tedious and tricky work so that developers won\u2019t have to. All services are tested and certified. No matter which version of the game engine you are using, C++ or Javascript or Lua, SDKBOX will reduce your integration time from a typical 1~2 weeks down to less than a day. No hassle, no friction.\n\n\nSDKBOX Installer\n is a command line tool. It lets your integrate a service with a single line of command. Example:\n\n\nsdkbox import iap\n\n\n\n\nSDKBOX plugins\n are certified wrapper libraries for supported 3rd party libraries like: Tune, AdColony, AgeCheq, Chartboost, Facebook, Flurry Analytics, Fyber, Google Analytics, IAP, Kochava, Review, Soomla, and Vungle.\n\n\nCheck out more information at: \nhttp://sdkbox.com", 
            "title": "Overview"
        }, 
        {
            "location": "/#overview", 
            "text": "SDKBOX makes it super EASY and FREE for Cocos2d-x developers to integrate 3rd party SDKs into their games. We do all the hard, tedious and tricky work so that developers won\u2019t have to. All services are tested and certified. No matter which version of the game engine you are using, C++ or Javascript or Lua, SDKBOX will reduce your integration time from a typical 1~2 weeks down to less than a day. No hassle, no friction.  SDKBOX Installer  is a command line tool. It lets your integrate a service with a single line of command. Example:  sdkbox import iap  SDKBOX plugins  are certified wrapper libraries for supported 3rd party libraries like: Tune, AdColony, AgeCheq, Chartboost, Facebook, Flurry Analytics, Fyber, Google Analytics, IAP, Kochava, Review, Soomla, and Vungle.  Check out more information at:  http://sdkbox.com", 
            "title": "Overview"
        }, 
        {
            "location": "/installer/", 
            "text": "SDKBOX: Installing SDKBOX Plugins using the Installer\n\n\nGet the Installer\n\n\nYou can get SDKBOX Installer using either one of the following methods:\n\n\n\n\n(Recommended) Paste the script below into a terminal/prompt. It will explain what it does and setup everything to run the installer: \n\n\n\n\npython -c \nimport urllib; s = urllib.urlopen('https://raw.githubusercontent.com/sdkbox-doc/en/master/install/install.py').read(); exec s\n\n\n\n\n\n\n\nOr, download the \nzip file\n). And then, make sure you know the path to where you downloaded the SDKBOX installer. (you can always put it in \n/usr/local/bin\n)\n\n\n\n\nInstalling for OS X\n\n\n\n\nFrom a command-line, \ncd\n to your applications root directory. Example:\n\n\n\n\ncd ~/MyGame\n\n\n\n\n\n\nNow, you can install your plugin using the SDKBOX installer. Example:\n\n\n\n\nsdkbox import facebook\n\n\n\n\nInstalling for Windows\n\n\n\n\nFrom a command-prompt, change to your applications root directory. Example:\n\n\n\n\nc:\\Users\\\nMY_USER_ID\n\\MyGame\n\n\n\n\n\n\nNow, you can install your plugin using the SDKBOX installer. Example:\n\n\n\n\nsdkbox import facebook\n\n\n\n\nWhat Next?\n\n\nThe SDKBOX installer takes care of most of what you need. However, there are still a few manual steps that you must complete. After the installer runs it outputs a list of the remaining steps that you need to perform, referring to the plugin bundle PDF. Example output from running the above command:\n\n\n$ sdkbox import facebook\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.7.1\n\n\n  *****************************\n  ******** Manual Step ********\n  *****************************\n\n1. Edit \nproject.properties\n\n   Set \ntarget=android-15\n\n\nPlease reference the online documentation to finish the integration:\nhttp://sdkbox-doc.github.io/en/plugins/facebook/v3-cpp/\nInstallation Successful :)\n\n\n\n\nOther Installer options.\n\n\nSwitches\n\n\nThe SDKBOX Installer has several switches that you can use. You can always see these by running \nsdkbox\n by itself or using the \n-h\n help switch:\n\n\n$ sdkbox\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\n Copyright (c) 2015 Chukong Technologies Inc. v0.5.7.1\n usage: sdkbox [-h] [-v] [-p [PROJECT]] [-b [PLUGIN]] [-D SYMBOL] [-q]\n               [-d [DAYS]] [--china] [--dryrun] [--forcedownload] [--noupdate]\n               [--patcherrors] [--nopatching]\n               {import,info,update,restore,list,clean,symbols}\n\n Import SDKBOX packages into Cocos2d-x projects\n\n positional arguments:\n   {import,info,update,restore,list,clean,symbols}\n                         issue sdkbox installer command\n\n\n\n\n\n\n\n\n\n\nswitch\n\n\nalternate switch\n\n\nwhat it does\n\n\n\n\n\n\n\n\n\n\n-h\n\n\n--help\n\n\nshow this help message and exit\n\n\n\n\n\n\n-v\n\n\n--verbose\n\n\nspecify verbosity level\n\n\n\n\n\n\n-p PROJECT\n\n\n--project PROJECT\n\n\npath to project root (defaults to .)\n\n\n\n\n\n\n-b PLUGIN\n\n\n--plugin PLUGIN\n\n\nspecify path to plugin (defaults to .)\n\n\n\n\n\n\n-D SYMBOL\n\n\n--symbol SYMBOL\n\n\ndefine a symbol for the package script\n\n\n\n\n\n\n-q\n\n\n--nohelp\n\n\ndon't open online documentation after installation.\n\n\n\n\n\n\n-d [DAYS]\n\n\n--days [DAYS]\n\n\nspecify number of days of logs and packages to keep\n\n\n\n\n\n\n\n\n--china\n\n\nuse China based server instead of US\n\n\n\n\n\n\n\n\n--dryrun\n\n\ntest install before performing.\n\n\n\n\n\n\n\n\n--forcedownload\n\n\nforce download of package even if it is already downloaded.\n\n\n\n\n\n\n\n\n--noupdate\n\n\nignore available updates.\n\n\n\n\n\n\n\n\n--patcherrors\n\n\npatch failures are counted as errors instead of warnings.\n\n\n\n\n\n\n\n\n--nopatching\n\n\nskip all patching commands when executing package script.\n\n\n\n\n\n\n\n\nCommands:\n\n\nThe SDKBOX Installer has several commands that you can use. You can always see these by running \nsdkbox\n by itself or using the \n-h\n help switch:\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimport [name]\n\n\nimports the package 'name' into your project. For a list of names, see the list command. You can also specify local archived packages or a directory by specifying the -b option (see above).\n\n\n\n\n\n\nupdate\n\n\nre-imports all imported packages to update them to the latest version. If you have imported packages prior to SDKBOX v0.5.6.19 then you must manually import your packages again to add them to the package manifest.\n\n\n\n\n\n\ninfo\n\n\ndisplays the packages that have been imported into your project. If you have packages imported that are not in the package manifest, SDKBOX will alert you as to which packages it thinks are imported.\n\n\n\n\n\n\nrestore\n\n\nrestores your project to the latest backup that can be found. If you have made changes to your project files since importing, this will overwrite your changes, so use carefully.\n\n\n\n\n\n\nlist\n\n\nlist available and cached packages installed on your machine. The package repository is located in your home directory.\n\n\n\n\n\n\nclean [N]\n\n\nremoves all packages older than N days.\n\n\n\n\n\n\nsymbols\n\n\ndisplays the symbols that are used to drive the import process. These symbols are very useful for debugging, so if you have issues, and post on the forums, please include the symbols if possible.\n\n\n\n\n\n\n\n\nExamples:\n\n\n// Add 'In App Purchase' plugin to your game\n$ sdkbox import -b iap -p /path/to/your/cocos2dx/game/\n\n\n\n\n// The -b option may be omitted and -p too if you are in your project directory\n$ sdkbox import iap\n\n\n\n\n// If you have a package directory you may specify it too\n$ sdkbox -b /path/to/your/package\n\n\n\n\n// List all available packages on the server\n$ sdkbox list\n\n\n\n\n//Show all package imported into your project\n$ sdkbox info\n\n\n\n\n//clean logs and packages older than 5 days\n$ sdkbox clean 5\n\n\n\n\nStaying Up-to-date\n\n\nThe SDKBOX installer automatically checks for updates to itself. It will ask for your permission before updating. This will allow you to stay current and also automatically pull updates to your plugin bundles when they become available.\n\n\n$ sdkbox\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6.24\n\nA newer version of SDKBOX is available, would you like to update to v0.5.7.1?\nPlease type Yes, No or Quit Yes\nupdated SDKBOX v0.5.6.18 to v0.5.7.1 at sdkbox", 
            "title": "Installer"
        }, 
        {
            "location": "/installer/#sdkbox-installing-sdkbox-plugins-using-the-installer", 
            "text": "Get the Installer  You can get SDKBOX Installer using either one of the following methods:   (Recommended) Paste the script below into a terminal/prompt. It will explain what it does and setup everything to run the installer:    python -c  import urllib; s = urllib.urlopen('https://raw.githubusercontent.com/sdkbox-doc/en/master/install/install.py').read(); exec s    Or, download the  zip file ). And then, make sure you know the path to where you downloaded the SDKBOX installer. (you can always put it in  /usr/local/bin )   Installing for OS X   From a command-line,  cd  to your applications root directory. Example:   cd ~/MyGame   Now, you can install your plugin using the SDKBOX installer. Example:   sdkbox import facebook  Installing for Windows   From a command-prompt, change to your applications root directory. Example:   c:\\Users\\ MY_USER_ID \\MyGame   Now, you can install your plugin using the SDKBOX installer. Example:   sdkbox import facebook  What Next?  The SDKBOX installer takes care of most of what you need. However, there are still a few manual steps that you must complete. After the installer runs it outputs a list of the remaining steps that you need to perform, referring to the plugin bundle PDF. Example output from running the above command:  $ sdkbox import facebook\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.7.1\n\n\n  *****************************\n  ******** Manual Step ********\n  *****************************\n\n1. Edit  project.properties \n   Set  target=android-15 \n\nPlease reference the online documentation to finish the integration:\nhttp://sdkbox-doc.github.io/en/plugins/facebook/v3-cpp/\nInstallation Successful :)  Other Installer options.  Switches  The SDKBOX Installer has several switches that you can use. You can always see these by running  sdkbox  by itself or using the  -h  help switch:  $ sdkbox\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\n Copyright (c) 2015 Chukong Technologies Inc. v0.5.7.1\n usage: sdkbox [-h] [-v] [-p [PROJECT]] [-b [PLUGIN]] [-D SYMBOL] [-q]\n               [-d [DAYS]] [--china] [--dryrun] [--forcedownload] [--noupdate]\n               [--patcherrors] [--nopatching]\n               {import,info,update,restore,list,clean,symbols}\n\n Import SDKBOX packages into Cocos2d-x projects\n\n positional arguments:\n   {import,info,update,restore,list,clean,symbols}\n                         issue sdkbox installer command     switch  alternate switch  what it does      -h  --help  show this help message and exit    -v  --verbose  specify verbosity level    -p PROJECT  --project PROJECT  path to project root (defaults to .)    -b PLUGIN  --plugin PLUGIN  specify path to plugin (defaults to .)    -D SYMBOL  --symbol SYMBOL  define a symbol for the package script    -q  --nohelp  don't open online documentation after installation.    -d [DAYS]  --days [DAYS]  specify number of days of logs and packages to keep     --china  use China based server instead of US     --dryrun  test install before performing.     --forcedownload  force download of package even if it is already downloaded.     --noupdate  ignore available updates.     --patcherrors  patch failures are counted as errors instead of warnings.     --nopatching  skip all patching commands when executing package script.     Commands:  The SDKBOX Installer has several commands that you can use. You can always see these by running  sdkbox  by itself or using the  -h  help switch:     Command  Description      import [name]  imports the package 'name' into your project. For a list of names, see the list command. You can also specify local archived packages or a directory by specifying the -b option (see above).    update  re-imports all imported packages to update them to the latest version. If you have imported packages prior to SDKBOX v0.5.6.19 then you must manually import your packages again to add them to the package manifest.    info  displays the packages that have been imported into your project. If you have packages imported that are not in the package manifest, SDKBOX will alert you as to which packages it thinks are imported.    restore  restores your project to the latest backup that can be found. If you have made changes to your project files since importing, this will overwrite your changes, so use carefully.    list  list available and cached packages installed on your machine. The package repository is located in your home directory.    clean [N]  removes all packages older than N days.    symbols  displays the symbols that are used to drive the import process. These symbols are very useful for debugging, so if you have issues, and post on the forums, please include the symbols if possible.     Examples:  // Add 'In App Purchase' plugin to your game\n$ sdkbox import -b iap -p /path/to/your/cocos2dx/game/  // The -b option may be omitted and -p too if you are in your project directory\n$ sdkbox import iap  // If you have a package directory you may specify it too\n$ sdkbox -b /path/to/your/package  // List all available packages on the server\n$ sdkbox list  //Show all package imported into your project\n$ sdkbox info  //clean logs and packages older than 5 days\n$ sdkbox clean 5  Staying Up-to-date  The SDKBOX installer automatically checks for updates to itself. It will ask for your permission before updating. This will allow you to stay current and also automatically pull updates to your plugin bundles when they become available.  $ sdkbox\n _______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6.24\n\nA newer version of SDKBOX is available, would you like to update to v0.5.7.1?\nPlease type Yes, No or Quit Yes\nupdated SDKBOX v0.5.6.18 to v0.5.7.1 at sdkbox", 
            "title": "SDKBOX: Installing SDKBOX Plugins using the Installer"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/", 
            "text": "Achievements\n\n\nPrerequisites\n\n\nCurrently, \nAchievements\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Achievement\n\n\nBefore initializing achievements for Playphone:\n\n\n\n\nRegister as a Playphone developer in the \nPlayphone Developer Portal\n\n\nCreate a new game and setup achievements for that game in the \nPlayphone\n   Developer Portal\n.\n\n\nSetup Playphone configuration by following the JSON Configuration step as outlined in \nPlayphone plugin documentation\n\n\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginAchievement/PluginAchievement.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAchievement::init();\n     sdkbox::IAP::init();\n}\n\n\n\n\nUsing Achievement\n\n\nunlock achievement\n\n\nsdkbox::PluginAchievement::unlock(achievementId);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\nstatic void unlock ( const std::string \n achievementId ) ;\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAchievement\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAchievement.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginAchievement.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Achievements with C++"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/#achievements", 
            "text": "", 
            "title": "Achievements"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/#prerequisites", 
            "text": "Currently,  Achievements  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/#usage", 
            "text": "Initialize Achievement  Before initializing achievements for Playphone:   Register as a Playphone developer in the  Playphone Developer Portal  Create a new game and setup achievements for that game in the  Playphone\n   Developer Portal .  Setup Playphone configuration by following the JSON Configuration step as outlined in  Playphone plugin documentation   Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginAchievement/PluginAchievement.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAchievement::init();\n     sdkbox::IAP::init();\n}  Using Achievement  unlock achievement  sdkbox::PluginAchievement::unlock(achievementId);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;  static void unlock ( const std::string   achievementId ) ;  Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Achievement  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAchievement.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginAchievement.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/achievement/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/achievement/v3-js/", 
            "text": "Achievements\n\n\nPrerequisites\n\n\nCurrently, \nAchievements\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Achievement JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAchievementJS.hpp\n\n#include \nPluginAchievementJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAchievementJS);\nsc-\naddRegisterCallback(register_all_PluginAchievementJS_helper);\n\n\n\n\nInitialize Achievement\n\n\nBefore initializing achievements for Playphone:\n\n\n\n\nRegister as a Playphone developer in the \nPlayphone Developer Portal\n\n\nCreate a new game and setup achievements for that game in the \nPlayphone\n   Developer Portal\n.\n\n\nSetup Playphone configuration by following the JSON Configuration step as outlined in \nPlayphone plugin documentation\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAchievement.init();\nsdkbox.IAP.init();\n\n\n\n\nUsing Achievement\n\n\nunlock achievement\n\n\nsdkbox.PluginAchievement.unlock(achievementId);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAchievement.init();\n\n\n\n\nsdkbox.PluginAchievement.unlock(achievementId);\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAchievement\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAchievement.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginAchievement.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Achievements with Javascript"
        }, 
        {
            "location": "/plugins/achievement/v3-js/#achievements", 
            "text": "", 
            "title": "Achievements"
        }, 
        {
            "location": "/plugins/achievement/v3-js/#prerequisites", 
            "text": "Currently,  Achievements  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/achievement/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/achievement/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Achievement JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAchievementJS.hpp \n#include  PluginAchievementJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAchievementJS);\nsc- addRegisterCallback(register_all_PluginAchievementJS_helper);  Initialize Achievement  Before initializing achievements for Playphone:   Register as a Playphone developer in the  Playphone Developer Portal  Create a new game and setup achievements for that game in the  Playphone\n   Developer Portal .  Setup Playphone configuration by following the JSON Configuration step as outlined in  Playphone plugin documentation   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAchievement.init();\nsdkbox.IAP.init();  Using Achievement  unlock achievement  sdkbox.PluginAchievement.unlock(achievementId);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/achievement/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAchievement.init();  sdkbox.PluginAchievement.unlock(achievementId);  Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/achievement/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/achievement/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Achievement  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAchievement.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/achievement/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginAchievement.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/achievement/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/", 
            "text": "Achievements\n\n\nPrerequisites\n\n\nCurrently, \nAchievements\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Achievement\n\n\nBefore initializing achievements for Playphone:\n\n\n\n\nRegister as a Playphone developer in the \nPlayphone Developer Portal\n\n\nCreate a new game and setup achievements for that game in the \nPlayphone\n   Developer Portal\n.\n\n\nSetup Playphone configuration by following the JSON Configuration step as outlined in \nPlayphone plugin documentation\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAchievement:init();\nsdkbox.IAP:init();\n\n\n\n\nUsing Achievement\n\n\nunlock achievement\n\n\nsdkbox.PluginAchievement:unlock(achievementId)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAchievement:init()\n\n\n\n\nsdkbox.PluginAchievement:unlock(achievementId)\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAchievement\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAchievement.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginAchievement.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Achievements with Lua"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/#achievements", 
            "text": "", 
            "title": "Achievements"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/#prerequisites", 
            "text": "Currently,  Achievements  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/#usage", 
            "text": "Initialize Achievement  Before initializing achievements for Playphone:   Register as a Playphone developer in the  Playphone Developer Portal  Create a new game and setup achievements for that game in the  Playphone\n   Developer Portal .  Setup Playphone configuration by following the JSON Configuration step as outlined in  Playphone plugin documentation   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAchievement:init();\nsdkbox.IAP:init();  Using Achievement  unlock achievement  sdkbox.PluginAchievement:unlock(achievementId)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAchievement:init()  sdkbox.PluginAchievement:unlock(achievementId)  Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Achievement  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAchievement.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginAchievement.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/achievement/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/", 
            "text": "Achievements\n\n\nPrerequisites\n\n\nCurrently, \nAchievements\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Achievement\n\n\nBefore initializing achievements for Playphone:\n\n\n\n\nRegister as a Playphone developer in the \nPlayphone Developer Portal\n\n\nCreate a new game and setup achievements for that game in the \nPlayphone\n   Developer Portal\n.\n\n\nSetup Playphone configuration by following the JSON Configuration step as outlined in \nPlayphone plugin documentation\n\n\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginAchievement/PluginAchievement.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAchievement::init();\n     sdkbox::IAP::init();\n}\n\n\n\n\nUsing Achievement\n\n\nunlock achievement\n\n\nsdkbox::PluginAchievement::unlock(achievementId);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\nstatic void unlock ( const std::string \n achievementId ) ;\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAchievement\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAchievement.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginAchievement.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Achievements with C++"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/#achievements", 
            "text": "", 
            "title": "Achievements"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/#prerequisites", 
            "text": "Currently,  Achievements  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/#usage", 
            "text": "Initialize Achievement  Before initializing achievements for Playphone:   Register as a Playphone developer in the  Playphone Developer Portal  Create a new game and setup achievements for that game in the  Playphone\n   Developer Portal .  Setup Playphone configuration by following the JSON Configuration step as outlined in  Playphone plugin documentation   Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginAchievement/PluginAchievement.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAchievement::init();\n     sdkbox::IAP::init();\n}  Using Achievement  unlock achievement  sdkbox::PluginAchievement::unlock(achievementId);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;  static void unlock ( const std::string   achievementId ) ;  Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Achievement  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAchievement.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginAchievement.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/achievement/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/achievement/v2-js/", 
            "text": "Achievements\n\n\nPrerequisites\n\n\nCurrently, \nAchievements\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Achievement JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAchievementJS.hpp\n\n#include \nPluginAchievementJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAchievementJS);\nsc-\naddRegisterCallback(register_all_PluginAchievementJS_helper);\n\n\n\n\nInitialize Achievement\n\n\nBefore initializing achievements for Playphone:\n\n\n\n\nRegister as a Playphone developer in the \nPlayphone Developer Portal\n\n\nCreate a new game and setup achievements for that game in the \nPlayphone\n   Developer Portal\n.\n\n\nSetup Playphone configuration by following the JSON Configuration step as outlined in \nPlayphone plugin documentation\n\n\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAchievement.init();\nsdkbox.IAP.init();\n\n\n\n\nUsing Achievement\n\n\nunlock achievement\n\n\nsdkbox.PluginAchievement.unlock(achievementId);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAchievement.init();\n\n\n\n\nsdkbox.PluginAchievement.unlock(achievementId);\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAchievement\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAchievement.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginAchievement.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Achievements with Javascript"
        }, 
        {
            "location": "/plugins/achievement/v2-js/#achievements", 
            "text": "", 
            "title": "Achievements"
        }, 
        {
            "location": "/plugins/achievement/v2-js/#prerequisites", 
            "text": "Currently,  Achievements  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/achievement/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/achievement/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Achievement JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAchievementJS.hpp \n#include  PluginAchievementJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAchievementJS);\nsc- addRegisterCallback(register_all_PluginAchievementJS_helper);  Initialize Achievement  Before initializing achievements for Playphone:   Register as a Playphone developer in the  Playphone Developer Portal  Create a new game and setup achievements for that game in the  Playphone\n   Developer Portal .  Setup Playphone configuration by following the JSON Configuration step as outlined in  Playphone plugin documentation   Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAchievement.init();\nsdkbox.IAP.init();  Using Achievement  unlock achievement  sdkbox.PluginAchievement.unlock(achievementId);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/achievement/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAchievement.init();  sdkbox.PluginAchievement.unlock(achievementId);  Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/achievement/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/achievement/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Achievement  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAchievement.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/achievement/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginAchievement.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/achievement/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/", 
            "text": "Achievements\n\n\nPrerequisites\n\n\nCurrently, \nAchievements\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Achievement\n\n\nBefore initializing achievements for Playphone:\n\n\n\n\nRegister as a Playphone developer in the \nPlayphone Developer Portal\n\n\nCreate a new game and setup achievements for that game in the \nPlayphone\n   Developer Portal\n.\n\n\nSetup Playphone configuration by following the JSON Configuration step as outlined in \nPlayphone plugin documentation\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAchievement:init();\nsdkbox.IAP:init();\n\n\n\n\nUsing Achievement\n\n\nunlock achievement\n\n\nsdkbox.PluginAchievement:unlock(achievementId)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAchievement:init()\n\n\n\n\nsdkbox.PluginAchievement:unlock(achievementId)\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAchievement\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAchievement.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginAchievement.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Achievements with Lua"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/#achievements", 
            "text": "", 
            "title": "Achievements"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/#prerequisites", 
            "text": "Currently,  Achievements  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Achievement plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import achievement\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/#usage", 
            "text": "Initialize Achievement  Before initializing achievements for Playphone:   Register as a Playphone developer in the  Playphone Developer Portal  Create a new game and setup achievements for that game in the  Playphone\n   Developer Portal .  Setup Playphone configuration by following the JSON Configuration step as outlined in  Playphone plugin documentation   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAchievement:init();\nsdkbox.IAP:init();  Using Achievement  unlock achievement  sdkbox.PluginAchievement:unlock(achievementId)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAchievement:init()  sdkbox.PluginAchievement:unlock(achievementId)  Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Achievement  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAchievement.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginAchievement.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAchievement\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginachievement)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/achievement/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/", 
            "text": "AdColony\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nAdColony\n, then you cannot also use the \nFyber\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox::PluginAdColony::show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox::PluginAdColony::show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::AdColonyListener\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo\n info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo\n info,\n        const std::string\n currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo\n info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo\n info);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAdColony::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nstatic void setListener ( AdColonyListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic AdColonyListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic int zoneStatusForZone ( const std::string \n zoneID ) ;\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nstatic AdColonyAdStatus getStatus ( const std::string \n name ) ;\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nstatic void setCustomID ( const std::string \n customID ) ;\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nstatic std::string getCustomID ( ) ;\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nstatic std::string getUniqueDeviceID ( ) ;\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nstatic std::string getAdvertisingIdentifier ( ) ;\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nstatic std::string getVendorIdentifier ( ) ;\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nstatic int getVideosPerReward ( const std::string \n currencyName ) ;\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nstatic int getVideoCreditBalance ( const std::string \n currencyName ) ;\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nstatic void cancelAd ( ) ;\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nstatic bool videoAdCurrentlyRunning ( ) ;\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nstatic void turnAllAdsOff ( ) ;\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nstatic void setUserMetadata ( const std::string \n metadataType ,\n                              const std::string \n value ) ;\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nstatic void userInterestedIn ( const std::string \n topic ) ;\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nstatic void notifyIAPComplete ( const std::string \n transactionID ,\n                                const std::string \n productID ,\n                                int quantity ,\n                                float price ,\n                                const std::string \n currencyCode ) ;\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nvoid onAdColonyChange ( const AdColonyAdInfo \n info , bool available );\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nvoid onAdColonyReward ( const AdColonyAdInfo \n info ,\n                        const std::string \n currencyName ,\n                        int amount ,\n                        bool success );\n\n\n\n\n\n\nreward was received.\n\n\n\n\nvoid onAdColonyStarted ( const AdColonyAdInfo \n info );\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nvoid onAdColonyFinished ( const AdColonyAdInfo \n info );\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AdColony with C++"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  AdColony , then you cannot also use the  Fyber  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#usage", 
            "text": "Initialize AdColony   Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:   #include  PluginAdColony/PluginAdColony.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox::PluginAdColony::show( video );  or:  sdkbox::PluginAdColony::show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::AdColonyListener   #include  PluginAdColony/PluginAdColony.h \nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo  info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo  info,\n        const std::string  currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo  info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo  info);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAdColony::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   play video ad using provided name that was specified in sdkbox_config.json   static void setListener ( AdColonyListener * listener ) ;   Set listener to listen for adcolony events   static AdColonyListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static int zoneStatusForZone ( const std::string   zoneID ) ;   Returns the zone status for the specified zone.   static AdColonyAdStatus getStatus ( const std::string   name ) ;   Check the availability of the adcolony ads by name   static void setCustomID ( const std::string   customID ) ;   Assigns your own custom identifier to the current app user.   static std::string getCustomID ( ) ;   Returns the device's current custom identifier.   static std::string getUniqueDeviceID ( ) ;   Returns an AdColony-defined device identifier.   static std::string getAdvertisingIdentifier ( ) ;   Returns the device's advertising identifier.   static std::string getVendorIdentifier ( ) ;   Returns the device's vendor identifier.   static int getVideosPerReward ( const std::string   currencyName ) ;   Returns the number of ads that the user must play to earn the designated reward.   static int getVideoCreditBalance ( const std::string   currencyName ) ;   Returns the number of ads that the user has seen towards their next reward.   static void cancelAd ( ) ;   Cancels any full-screen ad that is currently playing and returns control to the app.   static bool videoAdCurrentlyRunning ( ) ;   Whether a full-screen AdColony ad is currently being played.   static void turnAllAdsOff ( ) ;   This method permanently turns off all AdColony ads for this app on the current device.   static void setUserMetadata ( const std::string   metadataType ,\n                              const std::string   value ) ;   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   static void userInterestedIn ( const std::string   topic ) ;   Provide AdColony with real-time feedback about what a user is interested in.   static void notifyIAPComplete ( const std::string   transactionID ,\n                                const std::string   productID ,\n                                int quantity ,\n                                float price ,\n                                const std::string   currencyCode ) ;   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  void onAdColonyChange ( const AdColonyAdInfo   info , bool available );   called when AdColony is finished loading.   void onAdColonyReward ( const AdColonyAdInfo   info ,\n                        const std::string   currencyName ,\n                        int amount ,\n                        bool success );   reward was received.   void onAdColonyStarted ( const AdColonyAdInfo   info );   showing an ad has started.   void onAdColonyFinished ( const AdColonyAdInfo   info );   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/", 
            "text": "AdColony\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nAdColony\n, then you cannot also use the \nFyber\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Adcolony JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAdColonyJS.hpp\n\n#include \nPluginAdColonyJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS);\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS_helper);\n\n\n\n\nInitialize AdColony\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony.show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony.show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony.show(name);\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nsdkbox.PluginAdColony.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAdColony.zoneStatusForZone(zoneID);\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nsdkbox.PluginAdColony.getStatus(name);\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nsdkbox.PluginAdColony.setCustomID(customID);\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nsdkbox.PluginAdColony.getCustomID();\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nsdkbox.PluginAdColony.getUniqueDeviceID();\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nsdkbox.PluginAdColony.getAdvertisingIdentifier();\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nsdkbox.PluginAdColony.getVendorIdentifier();\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nsdkbox.PluginAdColony.getVideosPerReward(currencyName);\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nsdkbox.PluginAdColony.getVideoCreditBalance(currencyName);\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nsdkbox.PluginAdColony.cancelAd();\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nsdkbox.PluginAdColony.videoAdCurrentlyRunning();\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nsdkbox.PluginAdColony.turnAllAdsOff();\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nsdkbox.PluginAdColony.setUserMetadata(metadataType, value);\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nsdkbox.PluginAdColony.userInterestedIn(topic);\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nsdkbox.PluginAdColony.notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode);\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nonAdColonyChange(info, available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(info, currencyName, amount, success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(info);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(info);\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AdColony with JS"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  AdColony , then you cannot also use the  Fyber  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Adcolony JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAdColonyJS.hpp \n#include  PluginAdColonyJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAdColonyJS);\nsc- addRegisterCallback(register_all_PluginAdColonyJS_helper);  Initialize AdColony  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAdColony.init();  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony.show( video );  or:  sdkbox.PluginAdColony.show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony.init();   initialize the plugin instance.   sdkbox.PluginAdColony.show(name);   play video ad using provided name that was specified in sdkbox_config.json   sdkbox.PluginAdColony.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginAdColony.zoneStatusForZone(zoneID);   Returns the zone status for the specified zone.   sdkbox.PluginAdColony.getStatus(name);   Check the availability of the adcolony ads by name   sdkbox.PluginAdColony.setCustomID(customID);   Assigns your own custom identifier to the current app user.   sdkbox.PluginAdColony.getCustomID();   Returns the device's current custom identifier.   sdkbox.PluginAdColony.getUniqueDeviceID();   Returns an AdColony-defined device identifier.   sdkbox.PluginAdColony.getAdvertisingIdentifier();   Returns the device's advertising identifier.   sdkbox.PluginAdColony.getVendorIdentifier();   Returns the device's vendor identifier.   sdkbox.PluginAdColony.getVideosPerReward(currencyName);   Returns the number of ads that the user must play to earn the designated reward.   sdkbox.PluginAdColony.getVideoCreditBalance(currencyName);   Returns the number of ads that the user has seen towards their next reward.   sdkbox.PluginAdColony.cancelAd();   Cancels any full-screen ad that is currently playing and returns control to the app.   sdkbox.PluginAdColony.videoAdCurrentlyRunning();   Whether a full-screen AdColony ad is currently being played.   sdkbox.PluginAdColony.turnAllAdsOff();   This method permanently turns off all AdColony ads for this app on the current device.   sdkbox.PluginAdColony.setUserMetadata(metadataType, value);   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   sdkbox.PluginAdColony.userInterestedIn(topic);   Provide AdColony with real-time feedback about what a user is interested in.   sdkbox.PluginAdColony.notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode);   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  onAdColonyChange(info, available);   called when AdColony is finished loading.   onAdColonyReward(info, currencyName, amount, success);   reward was received.   onAdColonyStarted(info);   showing an ad has started.   onAdColonyFinished(info);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/", 
            "text": "AdColony\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nAdColony\n, then you cannot also use the \nFyber\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAdColony:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony:show(\nvideo\n)\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony:show(\nv4vc\n)\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginAdColony:setListener(function(args)\n    if \nonAdColonyChange\n == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info, \nonAdColonyChange:\n)\n        print(\navailable:\n, available)\n    elseif \nonAdColonyReward\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info, \nonAdColonyReward:\n)\n        print(\ncurrencyName:\n, currencyName)\n        print(\namount:\n, amount)\n        print(\nsuccess:\n, success)\n    elseif \nonAdColonyStarted\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyStarted:\n)\n    elseif \nonAdColonyFinished\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyFinished:\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony:show(name)\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nsdkbox.PluginAdColony:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAdColony:zoneStatusForZone(zoneID)\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nsdkbox.PluginAdColony:getStatus(name)\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nsdkbox.PluginAdColony:setCustomID(customID)\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nsdkbox.PluginAdColony:getCustomID()\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nsdkbox.PluginAdColony:getUniqueDeviceID()\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nsdkbox.PluginAdColony:getAdvertisingIdentifier()\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nsdkbox.PluginAdColony:getVendorIdentifier()\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nsdkbox.PluginAdColony:getVideosPerReward(currencyName)\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nsdkbox.PluginAdColony:getVideoCreditBalance(currencyName)\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nsdkbox.PluginAdColony:cancelAd()\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nsdkbox.PluginAdColony:videoAdCurrentlyRunning()\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nsdkbox.PluginAdColony:turnAllAdsOff()\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nsdkbox.PluginAdColony:setUserMetadata(metadataType, value)\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nsdkbox.PluginAdColony:userInterestedIn(topic)\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nsdkbox.PluginAdColony:notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode)\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nonAdColonyChange(info, available)\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(info, currencyName, amount, success)\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(info)\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(info)\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AdColony with Lua"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  AdColony , then you cannot also use the  Fyber  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#usage", 
            "text": "Initialize AdColony  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAdColony:init()  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony:show( video )  or:  sdkbox.PluginAdColony:show( v4vc )  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginAdColony:setListener(function(args)\n    if  onAdColonyChange  == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info,  onAdColonyChange: )\n        print( available: , available)\n    elseif  onAdColonyReward  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info,  onAdColonyReward: )\n        print( currencyName: , currencyName)\n        print( amount: , amount)\n        print( success: , success)\n    elseif  onAdColonyStarted  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyStarted: )\n    elseif  onAdColonyFinished  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyFinished: )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony:init()   initialize the plugin instance.   sdkbox.PluginAdColony:show(name)   play video ad using provided name that was specified in sdkbox_config.json   sdkbox.PluginAdColony:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginAdColony:zoneStatusForZone(zoneID)   Returns the zone status for the specified zone.   sdkbox.PluginAdColony:getStatus(name)   Check the availability of the adcolony ads by name   sdkbox.PluginAdColony:setCustomID(customID)   Assigns your own custom identifier to the current app user.   sdkbox.PluginAdColony:getCustomID()   Returns the device's current custom identifier.   sdkbox.PluginAdColony:getUniqueDeviceID()   Returns an AdColony-defined device identifier.   sdkbox.PluginAdColony:getAdvertisingIdentifier()   Returns the device's advertising identifier.   sdkbox.PluginAdColony:getVendorIdentifier()   Returns the device's vendor identifier.   sdkbox.PluginAdColony:getVideosPerReward(currencyName)   Returns the number of ads that the user must play to earn the designated reward.   sdkbox.PluginAdColony:getVideoCreditBalance(currencyName)   Returns the number of ads that the user has seen towards their next reward.   sdkbox.PluginAdColony:cancelAd()   Cancels any full-screen ad that is currently playing and returns control to the app.   sdkbox.PluginAdColony:videoAdCurrentlyRunning()   Whether a full-screen AdColony ad is currently being played.   sdkbox.PluginAdColony:turnAllAdsOff()   This method permanently turns off all AdColony ads for this app on the current device.   sdkbox.PluginAdColony:setUserMetadata(metadataType, value)   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   sdkbox.PluginAdColony:userInterestedIn(topic)   Provide AdColony with real-time feedback about what a user is interested in.   sdkbox.PluginAdColony:notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode)   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  onAdColonyChange(info, available)   called when AdColony is finished loading.   onAdColonyReward(info, currencyName, amount, success)   reward was received.   onAdColonyStarted(info)   showing an ad has started.   onAdColonyFinished(info)   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/", 
            "text": "AdColony\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nAdColony\n, then you cannot also use the \nFyber\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox::PluginAdColony::show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox::PluginAdColony::show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::AdColonyListener\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo\n info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo\n info,\n        const std::string\n currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo\n info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo\n info);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAdColony::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nstatic void setListener ( AdColonyListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic AdColonyListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic int zoneStatusForZone ( const std::string \n zoneID ) ;\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nstatic AdColonyAdStatus getStatus ( const std::string \n name ) ;\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nstatic void setCustomID ( const std::string \n customID ) ;\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nstatic std::string getCustomID ( ) ;\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nstatic std::string getUniqueDeviceID ( ) ;\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nstatic std::string getAdvertisingIdentifier ( ) ;\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nstatic std::string getVendorIdentifier ( ) ;\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nstatic int getVideosPerReward ( const std::string \n currencyName ) ;\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nstatic int getVideoCreditBalance ( const std::string \n currencyName ) ;\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nstatic void cancelAd ( ) ;\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nstatic bool videoAdCurrentlyRunning ( ) ;\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nstatic void turnAllAdsOff ( ) ;\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nstatic void setUserMetadata ( const std::string \n metadataType ,\n                              const std::string \n value ) ;\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nstatic void userInterestedIn ( const std::string \n topic ) ;\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nstatic void notifyIAPComplete ( const std::string \n transactionID ,\n                                const std::string \n productID ,\n                                int quantity ,\n                                float price ,\n                                const std::string \n currencyCode ) ;\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nvoid onAdColonyChange ( const AdColonyAdInfo \n info , bool available );\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nvoid onAdColonyReward ( const AdColonyAdInfo \n info ,\n                        const std::string \n currencyName ,\n                        int amount ,\n                        bool success );\n\n\n\n\n\n\nreward was received.\n\n\n\n\nvoid onAdColonyStarted ( const AdColonyAdInfo \n info );\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nvoid onAdColonyFinished ( const AdColonyAdInfo \n info );\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AdColony with C++"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  AdColony , then you cannot also use the  Fyber  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#usage", 
            "text": "Initialize AdColony   Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:   #include  PluginAdColony/PluginAdColony.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox::PluginAdColony::show( video );  or:  sdkbox::PluginAdColony::show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::AdColonyListener   #include  PluginAdColony/PluginAdColony.h \nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo  info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo  info,\n        const std::string  currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo  info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo  info);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAdColony::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   play video ad using provided name that was specified in sdkbox_config.json   static void setListener ( AdColonyListener * listener ) ;   Set listener to listen for adcolony events   static AdColonyListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static int zoneStatusForZone ( const std::string   zoneID ) ;   Returns the zone status for the specified zone.   static AdColonyAdStatus getStatus ( const std::string   name ) ;   Check the availability of the adcolony ads by name   static void setCustomID ( const std::string   customID ) ;   Assigns your own custom identifier to the current app user.   static std::string getCustomID ( ) ;   Returns the device's current custom identifier.   static std::string getUniqueDeviceID ( ) ;   Returns an AdColony-defined device identifier.   static std::string getAdvertisingIdentifier ( ) ;   Returns the device's advertising identifier.   static std::string getVendorIdentifier ( ) ;   Returns the device's vendor identifier.   static int getVideosPerReward ( const std::string   currencyName ) ;   Returns the number of ads that the user must play to earn the designated reward.   static int getVideoCreditBalance ( const std::string   currencyName ) ;   Returns the number of ads that the user has seen towards their next reward.   static void cancelAd ( ) ;   Cancels any full-screen ad that is currently playing and returns control to the app.   static bool videoAdCurrentlyRunning ( ) ;   Whether a full-screen AdColony ad is currently being played.   static void turnAllAdsOff ( ) ;   This method permanently turns off all AdColony ads for this app on the current device.   static void setUserMetadata ( const std::string   metadataType ,\n                              const std::string   value ) ;   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   static void userInterestedIn ( const std::string   topic ) ;   Provide AdColony with real-time feedback about what a user is interested in.   static void notifyIAPComplete ( const std::string   transactionID ,\n                                const std::string   productID ,\n                                int quantity ,\n                                float price ,\n                                const std::string   currencyCode ) ;   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  void onAdColonyChange ( const AdColonyAdInfo   info , bool available );   called when AdColony is finished loading.   void onAdColonyReward ( const AdColonyAdInfo   info ,\n                        const std::string   currencyName ,\n                        int amount ,\n                        bool success );   reward was received.   void onAdColonyStarted ( const AdColonyAdInfo   info );   showing an ad has started.   void onAdColonyFinished ( const AdColonyAdInfo   info );   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/", 
            "text": "AdColony\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nAdColony\n, then you cannot also use the \nFyber\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Adcolony JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAdColonyJS.hpp\n\n#include \nPluginAdColonyJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS);\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS_helper);\n\n\n\n\nInitialize AdColony\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony.show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony.show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony.show(name);\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nsdkbox.PluginAdColony.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAdColony.zoneStatusForZone(zoneID);\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nsdkbox.PluginAdColony.getStatus(name);\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nsdkbox.PluginAdColony.setCustomID(customID);\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nsdkbox.PluginAdColony.getCustomID();\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nsdkbox.PluginAdColony.getUniqueDeviceID();\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nsdkbox.PluginAdColony.getAdvertisingIdentifier();\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nsdkbox.PluginAdColony.getVendorIdentifier();\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nsdkbox.PluginAdColony.getVideosPerReward(currencyName);\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nsdkbox.PluginAdColony.getVideoCreditBalance(currencyName);\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nsdkbox.PluginAdColony.cancelAd();\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nsdkbox.PluginAdColony.videoAdCurrentlyRunning();\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nsdkbox.PluginAdColony.turnAllAdsOff();\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nsdkbox.PluginAdColony.setUserMetadata(metadataType, value);\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nsdkbox.PluginAdColony.userInterestedIn(topic);\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nsdkbox.PluginAdColony.notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode);\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nonAdColonyChange(info, available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(info, currencyName, amount, success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(info);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(info);\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AdColony with Javascript"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  AdColony , then you cannot also use the  Fyber  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Adcolony JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAdColonyJS.hpp \n#include  PluginAdColonyJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAdColonyJS);\nsc- addRegisterCallback(register_all_PluginAdColonyJS_helper);  Initialize AdColony  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAdColony.init();  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony.show( video );  or:  sdkbox.PluginAdColony.show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony.init();   initialize the plugin instance.   sdkbox.PluginAdColony.show(name);   play video ad using provided name that was specified in sdkbox_config.json   sdkbox.PluginAdColony.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginAdColony.zoneStatusForZone(zoneID);   Returns the zone status for the specified zone.   sdkbox.PluginAdColony.getStatus(name);   Check the availability of the adcolony ads by name   sdkbox.PluginAdColony.setCustomID(customID);   Assigns your own custom identifier to the current app user.   sdkbox.PluginAdColony.getCustomID();   Returns the device's current custom identifier.   sdkbox.PluginAdColony.getUniqueDeviceID();   Returns an AdColony-defined device identifier.   sdkbox.PluginAdColony.getAdvertisingIdentifier();   Returns the device's advertising identifier.   sdkbox.PluginAdColony.getVendorIdentifier();   Returns the device's vendor identifier.   sdkbox.PluginAdColony.getVideosPerReward(currencyName);   Returns the number of ads that the user must play to earn the designated reward.   sdkbox.PluginAdColony.getVideoCreditBalance(currencyName);   Returns the number of ads that the user has seen towards their next reward.   sdkbox.PluginAdColony.cancelAd();   Cancels any full-screen ad that is currently playing and returns control to the app.   sdkbox.PluginAdColony.videoAdCurrentlyRunning();   Whether a full-screen AdColony ad is currently being played.   sdkbox.PluginAdColony.turnAllAdsOff();   This method permanently turns off all AdColony ads for this app on the current device.   sdkbox.PluginAdColony.setUserMetadata(metadataType, value);   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   sdkbox.PluginAdColony.userInterestedIn(topic);   Provide AdColony with real-time feedback about what a user is interested in.   sdkbox.PluginAdColony.notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode);   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  onAdColonyChange(info, available);   called when AdColony is finished loading.   onAdColonyReward(info, currencyName, amount, success);   reward was received.   onAdColonyStarted(info);   showing an ad has started.   onAdColonyFinished(info);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/", 
            "text": "AdColony\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nAdColony\n, then you cannot also use the \nFyber\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAdColony:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony:show(\nvideo\n)\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony:show(\nv4vc\n)\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginAdColony:setListener(function(args)\n    if \nonAdColonyChange\n == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info, \nonAdColonyChange:\n)\n        print(\navailable:\n, available)\n    elseif \nonAdColonyReward\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info, \nonAdColonyReward:\n)\n        print(\ncurrencyName:\n, currencyName)\n        print(\namount:\n, amount)\n        print(\nsuccess:\n, success)\n    elseif \nonAdColonyStarted\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyStarted:\n)\n    elseif \nonAdColonyFinished\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyFinished:\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony:show(name)\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nsdkbox.PluginAdColony:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAdColony:zoneStatusForZone(zoneID)\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nsdkbox.PluginAdColony:getStatus(name)\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nsdkbox.PluginAdColony:setCustomID(customID)\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nsdkbox.PluginAdColony:getCustomID()\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nsdkbox.PluginAdColony:getUniqueDeviceID()\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nsdkbox.PluginAdColony:getAdvertisingIdentifier()\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nsdkbox.PluginAdColony:getVendorIdentifier()\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nsdkbox.PluginAdColony:getVideosPerReward(currencyName)\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nsdkbox.PluginAdColony:getVideoCreditBalance(currencyName)\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nsdkbox.PluginAdColony:cancelAd()\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nsdkbox.PluginAdColony:videoAdCurrentlyRunning()\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nsdkbox.PluginAdColony:turnAllAdsOff()\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nsdkbox.PluginAdColony:setUserMetadata(metadataType, value)\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nsdkbox.PluginAdColony:userInterestedIn(topic)\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nsdkbox.PluginAdColony:notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode)\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nonAdColonyChange(info, available)\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(info, currencyName, amount, success)\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(info)\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(info)\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AdColony with Lua"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  AdColony , then you cannot also use the  Fyber  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#usage", 
            "text": "Initialize AdColony  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAdColony:init()  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony:show( video )  or:  sdkbox.PluginAdColony:show( v4vc )  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginAdColony:setListener(function(args)\n    if  onAdColonyChange  == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info,  onAdColonyChange: )\n        print( available: , available)\n    elseif  onAdColonyReward  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info,  onAdColonyReward: )\n        print( currencyName: , currencyName)\n        print( amount: , amount)\n        print( success: , success)\n    elseif  onAdColonyStarted  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyStarted: )\n    elseif  onAdColonyFinished  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyFinished: )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony:init()   initialize the plugin instance.   sdkbox.PluginAdColony:show(name)   play video ad using provided name that was specified in sdkbox_config.json   sdkbox.PluginAdColony:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginAdColony:zoneStatusForZone(zoneID)   Returns the zone status for the specified zone.   sdkbox.PluginAdColony:getStatus(name)   Check the availability of the adcolony ads by name   sdkbox.PluginAdColony:setCustomID(customID)   Assigns your own custom identifier to the current app user.   sdkbox.PluginAdColony:getCustomID()   Returns the device's current custom identifier.   sdkbox.PluginAdColony:getUniqueDeviceID()   Returns an AdColony-defined device identifier.   sdkbox.PluginAdColony:getAdvertisingIdentifier()   Returns the device's advertising identifier.   sdkbox.PluginAdColony:getVendorIdentifier()   Returns the device's vendor identifier.   sdkbox.PluginAdColony:getVideosPerReward(currencyName)   Returns the number of ads that the user must play to earn the designated reward.   sdkbox.PluginAdColony:getVideoCreditBalance(currencyName)   Returns the number of ads that the user has seen towards their next reward.   sdkbox.PluginAdColony:cancelAd()   Cancels any full-screen ad that is currently playing and returns control to the app.   sdkbox.PluginAdColony:videoAdCurrentlyRunning()   Whether a full-screen AdColony ad is currently being played.   sdkbox.PluginAdColony:turnAllAdsOff()   This method permanently turns off all AdColony ads for this app on the current device.   sdkbox.PluginAdColony:setUserMetadata(metadataType, value)   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   sdkbox.PluginAdColony:userInterestedIn(topic)   Provide AdColony with real-time feedback about what a user is interested in.   sdkbox.PluginAdColony:notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode)   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  onAdColonyChange(info, available)   called when AdColony is finished loading.   onAdColonyReward(info, currencyName, amount, success)   reward was received.   onAdColonyStarted(info)   showing an ad has started.   onAdColonyFinished(info)   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # adcolony\n-dontwarn android.webkit.**\n\n-dontwarn com.jirbo.adcolony.**\n-keep public class com.jirbo.adcolony.** { public *; }\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize AgeCheq\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginAgeCheq/PluginAgeCheq.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAgeCheq::init();\n}\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n or \nassociateDate()\n wherever you want from your code:\n\n\nsdkbox::PluginAgeCheq::check(\n1426\n);\nsdkbox::PluginAgeCheq::associateData(\n1426\n, \nikfill\n);\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::AgeCheqListener\n\n\n\n\n#include \nPluginAgeCheq/PluginAgeCheq.h\n\nclass MyClass : public sdkbox::AgeCheqListener\n{\nprivate:\n  void checkResponse(const std::string\n rtn, const std::string\n rtnmsg,\n          int apiversion, int checktype, bool appauthorized,\n          bool appblocked, int parentverified, bool under13,\n          bool under18, bool underdevage, int trials);\n\n  void associateDataResponse(const std::string\n rtn,\n          const std::string\n rtnmsg);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAgeCheq::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( AgeCheqListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic AgeCheqListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void check ( const std::string \n ACPin ) ;\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nstatic void associateData ( const std::string \n ACPin ,\n                            const std::string \n Data ) ;\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\nvoid checkResponse ( const std::string \n rtn ,\n                     const std::string \n rtnmsg ,\n                     int apiversion ,\n                     int checktype ,\n                     bool appauthorized ,\n                     bool appblocked ,\n                     int parentverified ,\n                     bool under13 ,\n                     bool under18 ,\n                     bool underdevage ,\n                     int trials );\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nvoid associateDataResponse ( const std::string \n rtn ,\n                             const std::string \n rtnmsg );\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AgeCheq with C++"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#usage", 
            "text": "Initialize AgeCheq  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginAgeCheq/PluginAgeCheq.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAgeCheq::init();\n}  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  or  associateDate()  wherever you want from your code:  sdkbox::PluginAgeCheq::check( 1426 );\nsdkbox::PluginAgeCheq::associateData( 1426 ,  ikfill );  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::AgeCheqListener   #include  PluginAgeCheq/PluginAgeCheq.h \nclass MyClass : public sdkbox::AgeCheqListener\n{\nprivate:\n  void checkResponse(const std::string  rtn, const std::string  rtnmsg,\n          int apiversion, int checktype, bool appauthorized,\n          bool appblocked, int parentverified, bool under13,\n          bool under18, bool underdevage, int trials);\n\n  void associateDataResponse(const std::string  rtn,\n          const std::string  rtnmsg);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAgeCheq::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( AgeCheqListener * listener ) ;   Set listener to listen for adcolony events   static AgeCheqListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void check ( const std::string   ACPin ) ;   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   static void associateData ( const std::string   ACPin ,\n                            const std::string   Data ) ;   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  void checkResponse ( const std::string   rtn ,\n                     const std::string   rtnmsg ,\n                     int apiversion ,\n                     int checktype ,\n                     bool appauthorized ,\n                     bool appblocked ,\n                     int parentverified ,\n                     bool under13 ,\n                     bool under18 ,\n                     bool underdevage ,\n                     int trials );   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   void associateDataResponse ( const std::string   rtn ,\n                             const std::string   rtnmsg );   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the AgeCheq JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAgeCheqJS.hpp\n\n#include \nPluginAgeCheqJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAgeCheqJS);\nsc-\naddRegisterCallback(register_all_PluginAgeCheqJS_helper);\n\n\n\n\nInitialize AgeCheq\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAgeCheq.init();\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginAgeCheq.check(\nagecheqPin\n);\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginAgeCheq.init();\nsdkbox.PluginAgeCheq.setListener({\n    checkResponse : function (rtn, rtnmsg, apiversion, checktype, appauthorized, appblocked, parentverified, under13, under18, underdevage, trials) {\n        cc.log(\ncheckResponse rtn:\n + rtn + \n rtnmsg:\n + rtnmsg\n            + \n apiversion:\n + apiversion + \n checktype:\n + checktype\n            + \n appauthorized:\n + appauthorized + \n appblocked:\n + appblocked\n            + \n parentverified:\n + parentverified + \n under13:\n + under13\n            + \n under18:\n + under18 + \n underdevage:\n + underdevage + \n trials:\n + trials);\n    },\n    associateDataResponse : function (rtn, rtnmsg) {\n        cc.log(\nassociateDataResponse rtn:\n + rtn + \n rtnmsg:\n + rtnmsg);\n    }\n})\nsdkbox.PluginAgeCheq.check(\nagecheqPin\n);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAgeCheq.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAgeCheq.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAgeCheq.check(ACPin);\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nsdkbox.PluginAgeCheq.associateData(ACPin, Data);\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\ncheckResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials);\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nassociateDataResponse(rtn, rtnmsg);\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AgeCheq with Javascript"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the AgeCheq JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAgeCheqJS.hpp \n#include  PluginAgeCheqJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAgeCheqJS);\nsc- addRegisterCallback(register_all_PluginAgeCheqJS_helper);  Initialize AgeCheq  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAgeCheq.init();  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  wherever you want from your code:  sdkbox.PluginAgeCheq.check( agecheqPin );  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginAgeCheq.init();\nsdkbox.PluginAgeCheq.setListener({\n    checkResponse : function (rtn, rtnmsg, apiversion, checktype, appauthorized, appblocked, parentverified, under13, under18, underdevage, trials) {\n        cc.log( checkResponse rtn:  + rtn +   rtnmsg:  + rtnmsg\n            +   apiversion:  + apiversion +   checktype:  + checktype\n            +   appauthorized:  + appauthorized +   appblocked:  + appblocked\n            +   parentverified:  + parentverified +   under13:  + under13\n            +   under18:  + under18 +   underdevage:  + underdevage +   trials:  + trials);\n    },\n    associateDataResponse : function (rtn, rtnmsg) {\n        cc.log( associateDataResponse rtn:  + rtn +   rtnmsg:  + rtnmsg);\n    }\n})\nsdkbox.PluginAgeCheq.check( agecheqPin );", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAgeCheq.init();   initialize the plugin instance.   sdkbox.PluginAgeCheq.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginAgeCheq.check(ACPin);   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   sdkbox.PluginAgeCheq.associateData(ACPin, Data);   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  checkResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials);   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   associateDataResponse(rtn, rtnmsg);   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize AgeCheq\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAgeCheq:init()\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginAgeCheq:check(\nagecheqPin\n)\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginAgeCheq:init()\nsdkbox.PluginAgeCheq:setListener(function(data)\n        if \ncheckResponse\n == data.event then\n            dump(data)\n        elseif \nassociateDataResponse\n == data.event then\n            dump(data)\n        end\n    end)\nsdkbox.PluginAgeCheq:check(\nagecheqPin\n)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAgeCheq:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAgeCheq:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAgeCheq:check(ACPin)\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nsdkbox.PluginAgeCheq:associateData(ACPin, Data)\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\ncheckResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials)\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nassociateDataResponse(rtn, rtnmsg)\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AgeCheq with Lua"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#usage", 
            "text": "Initialize AgeCheq  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAgeCheq:init()  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  wherever you want from your code:  sdkbox.PluginAgeCheq:check( agecheqPin )  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginAgeCheq:init()\nsdkbox.PluginAgeCheq:setListener(function(data)\n        if  checkResponse  == data.event then\n            dump(data)\n        elseif  associateDataResponse  == data.event then\n            dump(data)\n        end\n    end)\nsdkbox.PluginAgeCheq:check( agecheqPin )", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAgeCheq:init()   initialize the plugin instance.   sdkbox.PluginAgeCheq:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginAgeCheq:check(ACPin)   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   sdkbox.PluginAgeCheq:associateData(ACPin, Data)   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  checkResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials)   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   associateDataResponse(rtn, rtnmsg)   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize AgeCheq\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginAgeCheq/PluginAgeCheq.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAgeCheq::init();\n}\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n or \nassociateDate()\n wherever you want from your code:\n\n\nsdkbox::PluginAgeCheq::check(\n1426\n);\nsdkbox::PluginAgeCheq::associateData(\n1426\n, \nikfill\n);\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::AgeCheqListener\n\n\n\n\n#include \nPluginAgeCheq/PluginAgeCheq.h\n\nclass MyClass : public sdkbox::AgeCheqListener\n{\nprivate:\n  void checkResponse(const std::string\n rtn, const std::string\n rtnmsg,\n          int apiversion, int checktype, bool appauthorized,\n          bool appblocked, int parentverified, bool under13,\n          bool under18, bool underdevage, int trials);\n\n  void associateDataResponse(const std::string\n rtn,\n          const std::string\n rtnmsg);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAgeCheq::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( AgeCheqListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic AgeCheqListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void check ( const std::string \n ACPin ) ;\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nstatic void associateData ( const std::string \n ACPin ,\n                            const std::string \n Data ) ;\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\nvoid checkResponse ( const std::string \n rtn ,\n                     const std::string \n rtnmsg ,\n                     int apiversion ,\n                     int checktype ,\n                     bool appauthorized ,\n                     bool appblocked ,\n                     int parentverified ,\n                     bool under13 ,\n                     bool under18 ,\n                     bool underdevage ,\n                     int trials );\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nvoid associateDataResponse ( const std::string \n rtn ,\n                             const std::string \n rtnmsg );\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AgeCheq with C++"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#usage", 
            "text": "Initialize AgeCheq  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginAgeCheq/PluginAgeCheq.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAgeCheq::init();\n}  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  or  associateDate()  wherever you want from your code:  sdkbox::PluginAgeCheq::check( 1426 );\nsdkbox::PluginAgeCheq::associateData( 1426 ,  ikfill );  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::AgeCheqListener   #include  PluginAgeCheq/PluginAgeCheq.h \nclass MyClass : public sdkbox::AgeCheqListener\n{\nprivate:\n  void checkResponse(const std::string  rtn, const std::string  rtnmsg,\n          int apiversion, int checktype, bool appauthorized,\n          bool appblocked, int parentverified, bool under13,\n          bool under18, bool underdevage, int trials);\n\n  void associateDataResponse(const std::string  rtn,\n          const std::string  rtnmsg);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAgeCheq::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( AgeCheqListener * listener ) ;   Set listener to listen for adcolony events   static AgeCheqListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void check ( const std::string   ACPin ) ;   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   static void associateData ( const std::string   ACPin ,\n                            const std::string   Data ) ;   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  void checkResponse ( const std::string   rtn ,\n                     const std::string   rtnmsg ,\n                     int apiversion ,\n                     int checktype ,\n                     bool appauthorized ,\n                     bool appblocked ,\n                     int parentverified ,\n                     bool under13 ,\n                     bool under18 ,\n                     bool underdevage ,\n                     int trials );   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   void associateDataResponse ( const std::string   rtn ,\n                             const std::string   rtnmsg );   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the AgeCheq JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAgeCheqJS.hpp\n\n#include \nPluginAgeCheqJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAgeCheqJS);\nsc-\naddRegisterCallback(register_all_PluginAgeCheqJS_helper);\n\n\n\n\nInitialize AgeCheq\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAgeCheq.init();\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginAgeCheq.check(\nagecheqPin\n);\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginAgeCheq.init();\nsdkbox.PluginAgeCheq.setListener({\n    checkResponse : function (rtn, rtnmsg, apiversion, checktype, appauthorized, appblocked, parentverified, under13, under18, underdevage, trials) {\n        cc.log(\ncheckResponse rtn:\n + rtn + \n rtnmsg:\n + rtnmsg\n            + \n apiversion:\n + apiversion + \n checktype:\n + checktype\n            + \n appauthorized:\n + appauthorized + \n appblocked:\n + appblocked\n            + \n parentverified:\n + parentverified + \n under13:\n + under13\n            + \n under18:\n + under18 + \n underdevage:\n + underdevage + \n trials:\n + trials);\n    },\n    associateDataResponse : function (rtn, rtnmsg) {\n        cc.log(\nassociateDataResponse rtn:\n + rtn + \n rtnmsg:\n + rtnmsg);\n    }\n})\nsdkbox.PluginAgeCheq.check(\nagecheqPin\n);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAgeCheq.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAgeCheq.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAgeCheq.check(ACPin);\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nsdkbox.PluginAgeCheq.associateData(ACPin, Data);\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\ncheckResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials);\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nassociateDataResponse(rtn, rtnmsg);\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AgeCheq with Javascript"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the AgeCheq JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAgeCheqJS.hpp \n#include  PluginAgeCheqJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAgeCheqJS);\nsc- addRegisterCallback(register_all_PluginAgeCheqJS_helper);  Initialize AgeCheq  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAgeCheq.init();  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  wherever you want from your code:  sdkbox.PluginAgeCheq.check( agecheqPin );  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginAgeCheq.init();\nsdkbox.PluginAgeCheq.setListener({\n    checkResponse : function (rtn, rtnmsg, apiversion, checktype, appauthorized, appblocked, parentverified, under13, under18, underdevage, trials) {\n        cc.log( checkResponse rtn:  + rtn +   rtnmsg:  + rtnmsg\n            +   apiversion:  + apiversion +   checktype:  + checktype\n            +   appauthorized:  + appauthorized +   appblocked:  + appblocked\n            +   parentverified:  + parentverified +   under13:  + under13\n            +   under18:  + under18 +   underdevage:  + underdevage +   trials:  + trials);\n    },\n    associateDataResponse : function (rtn, rtnmsg) {\n        cc.log( associateDataResponse rtn:  + rtn +   rtnmsg:  + rtnmsg);\n    }\n})\nsdkbox.PluginAgeCheq.check( agecheqPin );", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAgeCheq.init();   initialize the plugin instance.   sdkbox.PluginAgeCheq.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginAgeCheq.check(ACPin);   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   sdkbox.PluginAgeCheq.associateData(ACPin, Data);   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  checkResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials);   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   associateDataResponse(rtn, rtnmsg);   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize AgeCheq\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAgeCheq:init()\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginAgeCheq:check(\nagecheqPin\n)\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginAgeCheq:init()\nsdkbox.PluginAgeCheq:setListener(function(data)\n        if \ncheckResponse\n == data.event then\n            dump(data)\n        elseif \nassociateDataResponse\n == data.event then\n            dump(data)\n        end\n    end)\nsdkbox.PluginAgeCheq:check(\nagecheqPin\n)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAgeCheq:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAgeCheq:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAgeCheq:check(ACPin)\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nsdkbox.PluginAgeCheq:associateData(ACPin, Data)\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\ncheckResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials)\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nassociateDataResponse(rtn, rtnmsg)\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "AgeCheq with Lua"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#usage", 
            "text": "Initialize AgeCheq  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAgeCheq:init()  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  wherever you want from your code:  sdkbox.PluginAgeCheq:check( agecheqPin )  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginAgeCheq:init()\nsdkbox.PluginAgeCheq:setListener(function(data)\n        if  checkResponse  == data.event then\n            dump(data)\n        elseif  associateDataResponse  == data.event then\n            dump(data)\n        end\n    end)\nsdkbox.PluginAgeCheq:check( agecheqPin )", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAgeCheq:init()   initialize the plugin instance.   sdkbox.PluginAgeCheq:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginAgeCheq:check(ACPin)   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   sdkbox.PluginAgeCheq:associateData(ACPin, Data)   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  checkResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials)   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   associateDataResponse(rtn, rtnmsg)   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/", 
            "text": "Appodeal\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import appodeal\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Appodeal configuration, you need to replace \napp_key\n items with your specific \nAppodeal Key\n account information.\n\n\nAppodeal\n:{\n    \napp_key\n:\n2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Appodeal\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginAppodeal/PluginAppodeal.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAppodeal::init();\n}\n\n\n\n\nUsing Appodeal\n\n\nAfter initialization you can begin to use the Appodeal functionality:\n\n\n// set user id\nsdkbox::PluginAppodeal::setUserVkId(\nuser id\n);\n// cache all type ad\nsdkbox::PluginAppodeal::cacheAd(sdkbox::PluginAppodeal::AdType::AppodealAdTypeAll);\n//show interstitial ad\nsdkbox::PluginAppodeal::showAd(sdkbox::PluginAppodeal::ShowStyle::AppodealShowStyleInterstitial);\n\n\n\n\nCatch Appodeal events (optional)\n\n\nThis allows you to catch the \nAppodeal\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::AppodealListener\n\n\n\n\n#include \nPluginAppodeal/PluginAppodeal.h\n\nclass ADListener : public sdkbox::AppodealListener {\npublic:\n    virtual void onBannerDidLoadAd();\n    virtual void onBannerDidFailToLoadAd();\n    virtual void onBannerDidClick();\n    virtual void onBannerPresent();\n\n    virtual void onInterstitialDidLoadAd();\n    virtual void onInterstitialDidFailToLoadAd();\n    virtual void onInterstitialWillPresent();\n    virtual void onInterstitialDidDismiss();\n    virtual void onInterstitialDidClick();\n\n    virtual void onVideoDidLoadAd();\n    virtual void onVideoDidFailToLoadAd();\n    virtual void onVideoDidPresent();\n    virtual void onVideoWillDismiss();\n    virtual void onVideoDidFinish();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAppodeal::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( AppodealListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for Appodeal events\n\n\n\n\nstatic AppodealListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void setDebugEnabled ( bool debugEnabled ) ;\n\n\n\n\nstatic bool showAd ( ShowStyle style ) ;\n\n\n\n\nstatic void cacheAd ( AdType type ) ;\n\n\n\n\nstatic void hideBanner ( ) ;\n\n\n\n\nstatic bool isReadyForShowWithStyle ( ShowStyle showStyle ) ;\n\n\n\n\nstatic void setUserVkId ( const std::string \n vkId ) ;\n\n\n\n\nstatic void setUserFacebookId ( const std::string \n facebookId ) ;\n\n\n\n\nstatic void setUserEmail ( const std::string \n email ) ;\n\n\n\n\nstatic void setUserBirthday ( const std::string \n birthday ) ;\n\n\n\n\nstatic void setUserAge ( int age ) ;\n\n\n\n\nstatic void setUserGender ( Gender gender ) ;\n\n\n\n\nstatic void setUserOccupation ( Occupation occupation ) ;\n\n\n\n\nstatic void setUserRelationship ( Relationship relationship ) ;\n\n\n\n\nstatic void setUserSmokingAttitude ( SmokingAttitude smokingAttitude ) ;\n\n\n\n\nstatic void setUserAlcoholAttitude ( AlcoholAttitude alcoholAttitude ) ;\n\n\n\n\nstatic void setUserInterests ( const std::string \n interests ) ;\n\n\n\n\nListeners\n\n\nvoid onBannerDidLoadAd ( );\n\n\n\n\n\n\ntrigger when banner ad load\n\n\n\n\nvoid onBannerDidFailToLoadAd ( );\n\n\n\n\n\n\ntrigger when banner ad fail to load\n\n\n\n\nvoid onBannerDidClick ( );\n\n\n\n\n\n\ntrigger when banner ad clicked\n\n\n\n\nvoid onBannerPresent ( );\n\n\n\n\n\n\ntrigger when banner ad present\n\n\n\n\nvoid onInterstitialDidLoadAd ( );\n\n\n\n\n\n\ntrigger when interstitial ad load\n\n\n\n\nvoid onInterstitialDidFailToLoadAd ( );\n\n\n\n\n\n\ntrigger when interstitial ad fail to load\n\n\n\n\nvoid onInterstitialWillPresent ( );\n\n\n\n\n\n\ntrigger when interstitial ad present\n\n\n\n\nvoid onInterstitialDidDismiss ( );\n\n\n\n\n\n\ntrigger when interstitial dismiss\n\n\n\n\nvoid onInterstitialDidClick ( );\n\n\n\n\n\n\ntrigger when interstitial ad clicked\n\n\n\n\nvoid onVideoDidLoadAd ( );\n\n\n\n\n\n\ntrigger when video load\n\n\n\n\nvoid onVideoDidFailToLoadAd ( );\n\n\n\n\n\n\ntrigger when video fail to load\n\n\n\n\nvoid onVideoDidPresent ( );\n\n\n\n\n\n\ntrigger when video present\n\n\n\n\nvoid onVideoWillDismiss ( );\n\n\n\n\n\n\ntrigger when video dismiss\n\n\n\n\nvoid onVideoDidFinish ( );\n\n\n\n\n\n\ntrigger when video finish\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAppodeal\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAppodeal.framework\n\n\nAppodeal.framework\n\n\nplugin_appodeal_res_bundle\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreImage.framework\n\n\nCoreLocation.framework\n\n\nCoreMedia.framework\n\n\nCoreMotion.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nlibc++.tbd\n\n\nlibsqlite3.tbd\n\n\nlibxml2.2.tbd\n\n\nlibz.tbd\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nMobileCoreServices.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nTwitter.framework\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nGameController.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginAppodeal.jar\n\n\nsdkbox.jar\n\n\nandroid-support-v4-22.2.1.jar\n\n\napplovin-sdk-6.0.1.jar\n\n\nappodeal-1.13.1.jar\n\n\nchartboost-5.2.0.jar\n\n\nmy-target-4.0.13.jar\n\n\nunity-ads-1.4.7.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also necessary meta-data and activity tags that also need to be added:\n\n\nmeta-data android:name=\ncom.appodeal.framework\n android:value=\nandroid\n /\n\n\nactivity android:name=\ncom.appodeal.ads.InterstitialActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\nactivity android:name=\ncom.appodeal.ads.VideoActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nactivity android:name=\ncom.appodeal.ads.LoaderActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n android:value=\n@integer/google_play_services_version\n /\n\n\n\nactivity android:name=\ncom.google.android.gms.ads.AdActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.chartboost.sdk.CBImpressionActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n\n        android:excludeFromRecents=\ntrue\n /\n\n\n\nactivity android:name=\ncom.applovin.adview.AppLovinInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.mopub.mobileads.MoPubActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity android:name=\ncom.mopub.common.MoPubBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidVideoPlayerActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\norg.nexage.sourcekit.mraid.MRAIDBrowser\n\n        android:configChanges=\norientation|keyboard|keyboardHidden|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.amazon.device.ads.AdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n/\n\n\n\nactivity android:name=\ncom.unity3d.ads.android.view.UnityAdsFullscreenActivity\n\n        android:configChanges=\nfontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n\n        android:hardwareAccelerated=\ntrue\n /\n\n\n\nactivity android:name=\nru.mail.android.mytarget.ads.MyTargetActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n/\n\n\n\nactivity android:name=\norg.nexage.sourcekit.vast.activity.VASTActivity\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.facebook.ads.InterstitialAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Appodeal with C++"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/#appodeal", 
            "text": "", 
            "title": "Appodeal"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import appodeal", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Appodeal configuration, you need to replace  app_key  items with your specific  Appodeal Key  account information.  Appodeal :{\n     app_key : 2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/#usage", 
            "text": "Initialize Appodeal  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginAppodeal/PluginAppodeal.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAppodeal::init();\n}  Using Appodeal  After initialization you can begin to use the Appodeal functionality:  // set user id\nsdkbox::PluginAppodeal::setUserVkId( user id );\n// cache all type ad\nsdkbox::PluginAppodeal::cacheAd(sdkbox::PluginAppodeal::AdType::AppodealAdTypeAll);\n//show interstitial ad\nsdkbox::PluginAppodeal::showAd(sdkbox::PluginAppodeal::ShowStyle::AppodealShowStyleInterstitial);  Catch Appodeal events (optional)  This allows you to catch the  Appodeal  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::AppodealListener   #include  PluginAppodeal/PluginAppodeal.h \nclass ADListener : public sdkbox::AppodealListener {\npublic:\n    virtual void onBannerDidLoadAd();\n    virtual void onBannerDidFailToLoadAd();\n    virtual void onBannerDidClick();\n    virtual void onBannerPresent();\n\n    virtual void onInterstitialDidLoadAd();\n    virtual void onInterstitialDidFailToLoadAd();\n    virtual void onInterstitialWillPresent();\n    virtual void onInterstitialDidDismiss();\n    virtual void onInterstitialDidClick();\n\n    virtual void onVideoDidLoadAd();\n    virtual void onVideoDidFailToLoadAd();\n    virtual void onVideoDidPresent();\n    virtual void onVideoWillDismiss();\n    virtual void onVideoDidFinish();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAppodeal::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( AppodealListener * listener ) ;   Set listener to listen for Appodeal events   static AppodealListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void setDebugEnabled ( bool debugEnabled ) ;  static bool showAd ( ShowStyle style ) ;  static void cacheAd ( AdType type ) ;  static void hideBanner ( ) ;  static bool isReadyForShowWithStyle ( ShowStyle showStyle ) ;  static void setUserVkId ( const std::string   vkId ) ;  static void setUserFacebookId ( const std::string   facebookId ) ;  static void setUserEmail ( const std::string   email ) ;  static void setUserBirthday ( const std::string   birthday ) ;  static void setUserAge ( int age ) ;  static void setUserGender ( Gender gender ) ;  static void setUserOccupation ( Occupation occupation ) ;  static void setUserRelationship ( Relationship relationship ) ;  static void setUserSmokingAttitude ( SmokingAttitude smokingAttitude ) ;  static void setUserAlcoholAttitude ( AlcoholAttitude alcoholAttitude ) ;  static void setUserInterests ( const std::string   interests ) ;  Listeners  void onBannerDidLoadAd ( );   trigger when banner ad load   void onBannerDidFailToLoadAd ( );   trigger when banner ad fail to load   void onBannerDidClick ( );   trigger when banner ad clicked   void onBannerPresent ( );   trigger when banner ad present   void onInterstitialDidLoadAd ( );   trigger when interstitial ad load   void onInterstitialDidFailToLoadAd ( );   trigger when interstitial ad fail to load   void onInterstitialWillPresent ( );   trigger when interstitial ad present   void onInterstitialDidDismiss ( );   trigger when interstitial dismiss   void onInterstitialDidClick ( );   trigger when interstitial ad clicked   void onVideoDidLoadAd ( );   trigger when video load   void onVideoDidFailToLoadAd ( );   trigger when video fail to load   void onVideoDidPresent ( );   trigger when video present   void onVideoWillDismiss ( );   trigger when video dismiss   void onVideoDidFinish ( );   trigger when video finish", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Appodeal  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAppodeal.framework  Appodeal.framework  plugin_appodeal_res_bundle   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreFoundation.framework  CoreGraphics.framework  CoreImage.framework  CoreLocation.framework  CoreMedia.framework  CoreMotion.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  libc++.tbd  libsqlite3.tbd  libxml2.2.tbd  libz.tbd  MediaPlayer.framework  MessageUI.framework  MobileCoreServices.framework  QuartzCore.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  Twitter.framework  UIKit.framework  WebKit.framework  GameController.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginAppodeal.jar  sdkbox.jar  android-support-v4-22.2.1.jar  applovin-sdk-6.0.1.jar  appodeal-1.13.1.jar  chartboost-5.2.0.jar  my-target-4.0.13.jar  unity-ads-1.4.7.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also necessary meta-data and activity tags that also need to be added:  meta-data android:name= com.appodeal.framework  android:value= android  /  activity android:name= com.appodeal.ads.InterstitialActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.VideoActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.LoaderActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  meta-data android:name= com.google.android.gms.version  android:value= @integer/google_play_services_version  /  activity android:name= com.google.android.gms.ads.AdActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.chartboost.sdk.CBImpressionActivity \n        android:theme= @android:style/Theme.Translucent \n        android:excludeFromRecents= true  /  activity android:name= com.applovin.adview.AppLovinInterstitialActivity \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.mobileads.MoPubActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.common.MoPubBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidVideoPlayerActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= org.nexage.sourcekit.mraid.MRAIDBrowser \n        android:configChanges= orientation|keyboard|keyboardHidden|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.amazon.device.ads.AdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize /  activity android:name= com.unity3d.ads.android.view.UnityAdsFullscreenActivity \n        android:configChanges= fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen \n        android:hardwareAccelerated= true  /  activity android:name= ru.mail.android.mytarget.ads.MyTargetActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize /  activity android:name= org.nexage.sourcekit.vast.activity.VASTActivity \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen  /  activity android:name= com.facebook.ads.InterstitialAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.vungle.publisher.FullScreenAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/appodeal/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/", 
            "text": "Appodeal\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import appodeal\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Appodeal configuration, you need to replace \napp_key\n items with your specific \nAppodeal Key\n account information.\n\n\nAppodeal\n:{\n    \napp_key\n:\n2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Appodeal JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAppodealJS.hpp\n\n#include \nPluginAppodealJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAppodealJS);\nsc-\naddRegisterCallback(register_all_PluginAppodealJS_helper);\n\n\n\n\nInitialize Appodeal\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAppodeal.init();\n\n\n\n\nUsing Appodeal\n\n\nAfter initialization you can begin to use the Appodeal functionality:\n\n\nplugin.setUserVkId(\nuser id\n);\nplugin.cacheAd(15);\n\n\n\n\nCatch Appodeal events (optional)\n\n\nThis allows you to catch the \nAppodeal\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nvar plugin = sdkbox.PluginAppodeal\nplugin.setListener({\n    onBannerDidLoadAd: function() { cc.log(\nonBannerDidLoadAd\n) },\n    onBannerDidFailToLoadAd: function() { cc.log(\nonBannerDidFailToLoadAd\n) },\n    onBannerDidClick: function() { cc.log(\nonBannerDidClick\n) },\n    onBannerPresent: function() { cc.log(\nonBannerPresent\n) },\n    onInterstitialDidLoadAd: function() { cc.log(\nonInterstitialDidLoadAd\n) },\n    onInterstitialDidFailToLoadAd: function() { cc.log(\nonInterstitialDidFailToLoadAd\n) },\n    onInterstitialWillPresent: function() { cc.log(\nonInterstitialWillPresent\n) },\n    onInterstitialDidDismiss: function() { cc.log(\nonInterstitialDidDismiss\n) },\n    onInterstitialDidClick: function() { cc.log(\nonInterstitialDidClick\n) },\n    onVideoDidLoadAd: function() { cc.log(\nonVideoDidLoadAd\n) },\n    onVideoDidFailToLoadAd: function() { cc.log(\nonVideoDidFailToLoadAd\n) },\n    onVideoDidPresent: function() { cc.log(\nonVideoDidPresent\n) },\n    onVideoWillDismiss: function() { cc.log(\nonVideoWillDismiss\n) },\n    onVideoDidFinish: function() { cc.log(\nonVideoDidFinish\n) }\n})\nplugin.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAppodeal.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAppodeal.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for Appodeal events\n\n\n\n\nsdkbox.PluginAppodeal.setDebugEnabled(debugEnabled);\n\n\n\n\nsdkbox.PluginAppodeal.showAd(style);\n\n\n\n\nsdkbox.PluginAppodeal.cacheAd(type);\n\n\n\n\nsdkbox.PluginAppodeal.hideBanner();\n\n\n\n\nsdkbox.PluginAppodeal.isReadyForShowWithStyle(showStyle);\n\n\n\n\nsdkbox.PluginAppodeal.setUserVkId(vkId);\n\n\n\n\nsdkbox.PluginAppodeal.setUserFacebookId(facebookId);\n\n\n\n\nsdkbox.PluginAppodeal.setUserEmail(email);\n\n\n\n\nsdkbox.PluginAppodeal.setUserBirthday(birthday);\n\n\n\n\nsdkbox.PluginAppodeal.setUserAge(age);\n\n\n\n\nsdkbox.PluginAppodeal.setUserGender(gender);\n\n\n\n\nsdkbox.PluginAppodeal.setUserOccupation(occupation);\n\n\n\n\nsdkbox.PluginAppodeal.setUserRelationship(relationship);\n\n\n\n\nsdkbox.PluginAppodeal.setUserSmokingAttitude(smokingAttitude);\n\n\n\n\nsdkbox.PluginAppodeal.setUserAlcoholAttitude(alcoholAttitude);\n\n\n\n\nsdkbox.PluginAppodeal.setUserInterests(interests);\n\n\n\n\nListeners\n\n\nonBannerDidLoadAd();\n\n\n\n\n\n\ntrigger when banner ad load\n\n\n\n\nonBannerDidFailToLoadAd();\n\n\n\n\n\n\ntrigger when banner ad fail to load\n\n\n\n\nonBannerDidClick();\n\n\n\n\n\n\ntrigger when banner ad clicked\n\n\n\n\nonBannerPresent();\n\n\n\n\n\n\ntrigger when banner ad present\n\n\n\n\nonInterstitialDidLoadAd();\n\n\n\n\n\n\ntrigger when interstitial ad load\n\n\n\n\nonInterstitialDidFailToLoadAd();\n\n\n\n\n\n\ntrigger when interstitial ad fail to load\n\n\n\n\nonInterstitialWillPresent();\n\n\n\n\n\n\ntrigger when interstitial ad present\n\n\n\n\nonInterstitialDidDismiss();\n\n\n\n\n\n\ntrigger when interstitial dismiss\n\n\n\n\nonInterstitialDidClick();\n\n\n\n\n\n\ntrigger when interstitial ad clicked\n\n\n\n\nonVideoDidLoadAd();\n\n\n\n\n\n\ntrigger when video load\n\n\n\n\nonVideoDidFailToLoadAd();\n\n\n\n\n\n\ntrigger when video fail to load\n\n\n\n\nonVideoDidPresent();\n\n\n\n\n\n\ntrigger when video present\n\n\n\n\nonVideoWillDismiss();\n\n\n\n\n\n\ntrigger when video dismiss\n\n\n\n\nonVideoDidFinish();\n\n\n\n\n\n\ntrigger when video finish\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAppodeal\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAppodeal.framework\n\n\nAppodeal.framework\n\n\nplugin_appodeal_res_bundle\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreImage.framework\n\n\nCoreLocation.framework\n\n\nCoreMedia.framework\n\n\nCoreMotion.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nlibc++.tbd\n\n\nlibsqlite3.tbd\n\n\nlibxml2.2.tbd\n\n\nlibz.tbd\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nMobileCoreServices.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nTwitter.framework\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nGameController.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginAppodeal.jar\n\n\nsdkbox.jar\n\n\nandroid-support-v4-22.2.1.jar\n\n\napplovin-sdk-6.0.1.jar\n\n\nappodeal-1.13.1.jar\n\n\nchartboost-5.2.0.jar\n\n\nmy-target-4.0.13.jar\n\n\nunity-ads-1.4.7.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also necessary meta-data and activity tags that also need to be added:\n\n\nmeta-data android:name=\ncom.appodeal.framework\n android:value=\nandroid\n /\n\n\nactivity android:name=\ncom.appodeal.ads.InterstitialActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\nactivity android:name=\ncom.appodeal.ads.VideoActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nactivity android:name=\ncom.appodeal.ads.LoaderActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n android:value=\n@integer/google_play_services_version\n /\n\n\n\nactivity android:name=\ncom.google.android.gms.ads.AdActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.chartboost.sdk.CBImpressionActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n\n        android:excludeFromRecents=\ntrue\n /\n\n\n\nactivity android:name=\ncom.applovin.adview.AppLovinInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.mopub.mobileads.MoPubActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity android:name=\ncom.mopub.common.MoPubBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidVideoPlayerActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\norg.nexage.sourcekit.mraid.MRAIDBrowser\n\n        android:configChanges=\norientation|keyboard|keyboardHidden|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.amazon.device.ads.AdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n/\n\n\n\nactivity android:name=\ncom.unity3d.ads.android.view.UnityAdsFullscreenActivity\n\n        android:configChanges=\nfontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n\n        android:hardwareAccelerated=\ntrue\n /\n\n\n\nactivity android:name=\nru.mail.android.mytarget.ads.MyTargetActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n/\n\n\n\nactivity android:name=\norg.nexage.sourcekit.vast.activity.VASTActivity\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.facebook.ads.InterstitialAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Appodeal with Javascript"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/#appodeal", 
            "text": "", 
            "title": "Appodeal"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import appodeal", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Appodeal configuration, you need to replace  app_key  items with your specific  Appodeal Key  account information.  Appodeal :{\n     app_key : 2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Appodeal JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAppodealJS.hpp \n#include  PluginAppodealJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAppodealJS);\nsc- addRegisterCallback(register_all_PluginAppodealJS_helper);  Initialize Appodeal  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAppodeal.init();  Using Appodeal  After initialization you can begin to use the Appodeal functionality:  plugin.setUserVkId( user id );\nplugin.cacheAd(15);  Catch Appodeal events (optional)  This allows you to catch the  Appodeal  events so that you can perform operations based upon responses. A simple example might look like this:  var plugin = sdkbox.PluginAppodeal\nplugin.setListener({\n    onBannerDidLoadAd: function() { cc.log( onBannerDidLoadAd ) },\n    onBannerDidFailToLoadAd: function() { cc.log( onBannerDidFailToLoadAd ) },\n    onBannerDidClick: function() { cc.log( onBannerDidClick ) },\n    onBannerPresent: function() { cc.log( onBannerPresent ) },\n    onInterstitialDidLoadAd: function() { cc.log( onInterstitialDidLoadAd ) },\n    onInterstitialDidFailToLoadAd: function() { cc.log( onInterstitialDidFailToLoadAd ) },\n    onInterstitialWillPresent: function() { cc.log( onInterstitialWillPresent ) },\n    onInterstitialDidDismiss: function() { cc.log( onInterstitialDidDismiss ) },\n    onInterstitialDidClick: function() { cc.log( onInterstitialDidClick ) },\n    onVideoDidLoadAd: function() { cc.log( onVideoDidLoadAd ) },\n    onVideoDidFailToLoadAd: function() { cc.log( onVideoDidFailToLoadAd ) },\n    onVideoDidPresent: function() { cc.log( onVideoDidPresent ) },\n    onVideoWillDismiss: function() { cc.log( onVideoWillDismiss ) },\n    onVideoDidFinish: function() { cc.log( onVideoDidFinish ) }\n})\nplugin.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAppodeal.init();   initialize the plugin instance.   sdkbox.PluginAppodeal.setListener(listener);   Set listener to listen for Appodeal events   sdkbox.PluginAppodeal.setDebugEnabled(debugEnabled);  sdkbox.PluginAppodeal.showAd(style);  sdkbox.PluginAppodeal.cacheAd(type);  sdkbox.PluginAppodeal.hideBanner();  sdkbox.PluginAppodeal.isReadyForShowWithStyle(showStyle);  sdkbox.PluginAppodeal.setUserVkId(vkId);  sdkbox.PluginAppodeal.setUserFacebookId(facebookId);  sdkbox.PluginAppodeal.setUserEmail(email);  sdkbox.PluginAppodeal.setUserBirthday(birthday);  sdkbox.PluginAppodeal.setUserAge(age);  sdkbox.PluginAppodeal.setUserGender(gender);  sdkbox.PluginAppodeal.setUserOccupation(occupation);  sdkbox.PluginAppodeal.setUserRelationship(relationship);  sdkbox.PluginAppodeal.setUserSmokingAttitude(smokingAttitude);  sdkbox.PluginAppodeal.setUserAlcoholAttitude(alcoholAttitude);  sdkbox.PluginAppodeal.setUserInterests(interests);  Listeners  onBannerDidLoadAd();   trigger when banner ad load   onBannerDidFailToLoadAd();   trigger when banner ad fail to load   onBannerDidClick();   trigger when banner ad clicked   onBannerPresent();   trigger when banner ad present   onInterstitialDidLoadAd();   trigger when interstitial ad load   onInterstitialDidFailToLoadAd();   trigger when interstitial ad fail to load   onInterstitialWillPresent();   trigger when interstitial ad present   onInterstitialDidDismiss();   trigger when interstitial dismiss   onInterstitialDidClick();   trigger when interstitial ad clicked   onVideoDidLoadAd();   trigger when video load   onVideoDidFailToLoadAd();   trigger when video fail to load   onVideoDidPresent();   trigger when video present   onVideoWillDismiss();   trigger when video dismiss   onVideoDidFinish();   trigger when video finish", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Appodeal  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAppodeal.framework  Appodeal.framework  plugin_appodeal_res_bundle   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreFoundation.framework  CoreGraphics.framework  CoreImage.framework  CoreLocation.framework  CoreMedia.framework  CoreMotion.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  libc++.tbd  libsqlite3.tbd  libxml2.2.tbd  libz.tbd  MediaPlayer.framework  MessageUI.framework  MobileCoreServices.framework  QuartzCore.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  Twitter.framework  UIKit.framework  WebKit.framework  GameController.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginAppodeal.jar  sdkbox.jar  android-support-v4-22.2.1.jar  applovin-sdk-6.0.1.jar  appodeal-1.13.1.jar  chartboost-5.2.0.jar  my-target-4.0.13.jar  unity-ads-1.4.7.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also necessary meta-data and activity tags that also need to be added:  meta-data android:name= com.appodeal.framework  android:value= android  /  activity android:name= com.appodeal.ads.InterstitialActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.VideoActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.LoaderActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  meta-data android:name= com.google.android.gms.version  android:value= @integer/google_play_services_version  /  activity android:name= com.google.android.gms.ads.AdActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.chartboost.sdk.CBImpressionActivity \n        android:theme= @android:style/Theme.Translucent \n        android:excludeFromRecents= true  /  activity android:name= com.applovin.adview.AppLovinInterstitialActivity \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.mobileads.MoPubActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.common.MoPubBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidVideoPlayerActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= org.nexage.sourcekit.mraid.MRAIDBrowser \n        android:configChanges= orientation|keyboard|keyboardHidden|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.amazon.device.ads.AdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize /  activity android:name= com.unity3d.ads.android.view.UnityAdsFullscreenActivity \n        android:configChanges= fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen \n        android:hardwareAccelerated= true  /  activity android:name= ru.mail.android.mytarget.ads.MyTargetActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize /  activity android:name= org.nexage.sourcekit.vast.activity.VASTActivity \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen  /  activity android:name= com.facebook.ads.InterstitialAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.vungle.publisher.FullScreenAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/appodeal/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/", 
            "text": "Appodeal\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import appodeal\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Appodeal configuration, you need to replace \napp_key\n items with your specific \nAppodeal Key\n account information.\n\n\nAppodeal\n:{\n    \napp_key\n:\n2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Appodeal\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAppodeal:init()\n\n\n\n\nUsing Appodeal\n\n\nAfter initialization you can begin to use the Appodeal functionality:\n\n\nlocal plugin = sdkbox.PluginAppodeal\nplugin:init()\nplugin:setUserVkId(\nuser id\n);\nplugin:cacheAd(15);\n\n\n\n\nCatch Appodeal events (optional)\n\n\nThis allows you to catch the \nAppodeal\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nlocal plugin = sdkbox.PluginAppodeal\nplugin:setListener(function(args)\n    local event = args.event\n    dump(args, \nappodeal listener info:\n)\nend)\nplugin:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAppodeal:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAppodeal:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for Appodeal events\n\n\n\n\nsdkbox.PluginAppodeal:setDebugEnabled(debugEnabled)\n\n\n\n\nsdkbox.PluginAppodeal:showAd(style)\n\n\n\n\nsdkbox.PluginAppodeal:cacheAd(type)\n\n\n\n\nsdkbox.PluginAppodeal:hideBanner()\n\n\n\n\nsdkbox.PluginAppodeal:isReadyForShowWithStyle(showStyle)\n\n\n\n\nsdkbox.PluginAppodeal:setUserVkId(vkId)\n\n\n\n\nsdkbox.PluginAppodeal:setUserFacebookId(facebookId)\n\n\n\n\nsdkbox.PluginAppodeal:setUserEmail(email)\n\n\n\n\nsdkbox.PluginAppodeal:setUserBirthday(birthday)\n\n\n\n\nsdkbox.PluginAppodeal:setUserAge(age)\n\n\n\n\nsdkbox.PluginAppodeal:setUserGender(gender)\n\n\n\n\nsdkbox.PluginAppodeal:setUserOccupation(occupation)\n\n\n\n\nsdkbox.PluginAppodeal:setUserRelationship(relationship)\n\n\n\n\nsdkbox.PluginAppodeal:setUserSmokingAttitude(smokingAttitude)\n\n\n\n\nsdkbox.PluginAppodeal:setUserAlcoholAttitude(alcoholAttitude)\n\n\n\n\nsdkbox.PluginAppodeal:setUserInterests(interests)\n\n\n\n\nListeners\n\n\nonBannerDidLoadAd()\n\n\n\n\n\n\ntrigger when banner ad load\n\n\n\n\nonBannerDidFailToLoadAd()\n\n\n\n\n\n\ntrigger when banner ad fail to load\n\n\n\n\nonBannerDidClick()\n\n\n\n\n\n\ntrigger when banner ad clicked\n\n\n\n\nonBannerPresent()\n\n\n\n\n\n\ntrigger when banner ad present\n\n\n\n\nonInterstitialDidLoadAd()\n\n\n\n\n\n\ntrigger when interstitial ad load\n\n\n\n\nonInterstitialDidFailToLoadAd()\n\n\n\n\n\n\ntrigger when interstitial ad fail to load\n\n\n\n\nonInterstitialWillPresent()\n\n\n\n\n\n\ntrigger when interstitial ad present\n\n\n\n\nonInterstitialDidDismiss()\n\n\n\n\n\n\ntrigger when interstitial dismiss\n\n\n\n\nonInterstitialDidClick()\n\n\n\n\n\n\ntrigger when interstitial ad clicked\n\n\n\n\nonVideoDidLoadAd()\n\n\n\n\n\n\ntrigger when video load\n\n\n\n\nonVideoDidFailToLoadAd()\n\n\n\n\n\n\ntrigger when video fail to load\n\n\n\n\nonVideoDidPresent()\n\n\n\n\n\n\ntrigger when video present\n\n\n\n\nonVideoWillDismiss()\n\n\n\n\n\n\ntrigger when video dismiss\n\n\n\n\nonVideoDidFinish()\n\n\n\n\n\n\ntrigger when video finish\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAppodeal\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAppodeal.framework\n\n\nAppodeal.framework\n\n\nplugin_appodeal_res_bundle\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreImage.framework\n\n\nCoreLocation.framework\n\n\nCoreMedia.framework\n\n\nCoreMotion.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nlibc++.tbd\n\n\nlibsqlite3.tbd\n\n\nlibxml2.2.tbd\n\n\nlibz.tbd\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nMobileCoreServices.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nTwitter.framework\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nGameController.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginAppodeal.jar\n\n\nsdkbox.jar\n\n\nandroid-support-v4-22.2.1.jar\n\n\napplovin-sdk-6.0.1.jar\n\n\nappodeal-1.13.1.jar\n\n\nchartboost-5.2.0.jar\n\n\nmy-target-4.0.13.jar\n\n\nunity-ads-1.4.7.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also necessary meta-data and activity tags that also need to be added:\n\n\nmeta-data android:name=\ncom.appodeal.framework\n android:value=\nandroid\n /\n\n\nactivity android:name=\ncom.appodeal.ads.InterstitialActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\nactivity android:name=\ncom.appodeal.ads.VideoActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nactivity android:name=\ncom.appodeal.ads.LoaderActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n android:value=\n@integer/google_play_services_version\n /\n\n\n\nactivity android:name=\ncom.google.android.gms.ads.AdActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.chartboost.sdk.CBImpressionActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n\n        android:excludeFromRecents=\ntrue\n /\n\n\n\nactivity android:name=\ncom.applovin.adview.AppLovinInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.mopub.mobileads.MoPubActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity android:name=\ncom.mopub.common.MoPubBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidVideoPlayerActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\norg.nexage.sourcekit.mraid.MRAIDBrowser\n\n        android:configChanges=\norientation|keyboard|keyboardHidden|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.amazon.device.ads.AdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n/\n\n\n\nactivity android:name=\ncom.unity3d.ads.android.view.UnityAdsFullscreenActivity\n\n        android:configChanges=\nfontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n\n        android:hardwareAccelerated=\ntrue\n /\n\n\n\nactivity android:name=\nru.mail.android.mytarget.ads.MyTargetActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n/\n\n\n\nactivity android:name=\norg.nexage.sourcekit.vast.activity.VASTActivity\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.facebook.ads.InterstitialAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Appodeal with Lua"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/#appodeal", 
            "text": "", 
            "title": "Appodeal"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import appodeal", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Appodeal configuration, you need to replace  app_key  items with your specific  Appodeal Key  account information.  Appodeal :{\n     app_key : 2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/#usage", 
            "text": "Initialize Appodeal  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAppodeal:init()  Using Appodeal  After initialization you can begin to use the Appodeal functionality:  local plugin = sdkbox.PluginAppodeal\nplugin:init()\nplugin:setUserVkId( user id );\nplugin:cacheAd(15);  Catch Appodeal events (optional)  This allows you to catch the  Appodeal  events so that you can perform operations based upon responses. A simple example might look like this:  local plugin = sdkbox.PluginAppodeal\nplugin:setListener(function(args)\n    local event = args.event\n    dump(args,  appodeal listener info: )\nend)\nplugin:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAppodeal:init()   initialize the plugin instance.   sdkbox.PluginAppodeal:setListener(listener)   Set listener to listen for Appodeal events   sdkbox.PluginAppodeal:setDebugEnabled(debugEnabled)  sdkbox.PluginAppodeal:showAd(style)  sdkbox.PluginAppodeal:cacheAd(type)  sdkbox.PluginAppodeal:hideBanner()  sdkbox.PluginAppodeal:isReadyForShowWithStyle(showStyle)  sdkbox.PluginAppodeal:setUserVkId(vkId)  sdkbox.PluginAppodeal:setUserFacebookId(facebookId)  sdkbox.PluginAppodeal:setUserEmail(email)  sdkbox.PluginAppodeal:setUserBirthday(birthday)  sdkbox.PluginAppodeal:setUserAge(age)  sdkbox.PluginAppodeal:setUserGender(gender)  sdkbox.PluginAppodeal:setUserOccupation(occupation)  sdkbox.PluginAppodeal:setUserRelationship(relationship)  sdkbox.PluginAppodeal:setUserSmokingAttitude(smokingAttitude)  sdkbox.PluginAppodeal:setUserAlcoholAttitude(alcoholAttitude)  sdkbox.PluginAppodeal:setUserInterests(interests)  Listeners  onBannerDidLoadAd()   trigger when banner ad load   onBannerDidFailToLoadAd()   trigger when banner ad fail to load   onBannerDidClick()   trigger when banner ad clicked   onBannerPresent()   trigger when banner ad present   onInterstitialDidLoadAd()   trigger when interstitial ad load   onInterstitialDidFailToLoadAd()   trigger when interstitial ad fail to load   onInterstitialWillPresent()   trigger when interstitial ad present   onInterstitialDidDismiss()   trigger when interstitial dismiss   onInterstitialDidClick()   trigger when interstitial ad clicked   onVideoDidLoadAd()   trigger when video load   onVideoDidFailToLoadAd()   trigger when video fail to load   onVideoDidPresent()   trigger when video present   onVideoWillDismiss()   trigger when video dismiss   onVideoDidFinish()   trigger when video finish", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Appodeal  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAppodeal.framework  Appodeal.framework  plugin_appodeal_res_bundle   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreFoundation.framework  CoreGraphics.framework  CoreImage.framework  CoreLocation.framework  CoreMedia.framework  CoreMotion.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  libc++.tbd  libsqlite3.tbd  libxml2.2.tbd  libz.tbd  MediaPlayer.framework  MessageUI.framework  MobileCoreServices.framework  QuartzCore.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  Twitter.framework  UIKit.framework  WebKit.framework  GameController.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginAppodeal.jar  sdkbox.jar  android-support-v4-22.2.1.jar  applovin-sdk-6.0.1.jar  appodeal-1.13.1.jar  chartboost-5.2.0.jar  my-target-4.0.13.jar  unity-ads-1.4.7.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also necessary meta-data and activity tags that also need to be added:  meta-data android:name= com.appodeal.framework  android:value= android  /  activity android:name= com.appodeal.ads.InterstitialActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.VideoActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.LoaderActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  meta-data android:name= com.google.android.gms.version  android:value= @integer/google_play_services_version  /  activity android:name= com.google.android.gms.ads.AdActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.chartboost.sdk.CBImpressionActivity \n        android:theme= @android:style/Theme.Translucent \n        android:excludeFromRecents= true  /  activity android:name= com.applovin.adview.AppLovinInterstitialActivity \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.mobileads.MoPubActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.common.MoPubBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidVideoPlayerActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= org.nexage.sourcekit.mraid.MRAIDBrowser \n        android:configChanges= orientation|keyboard|keyboardHidden|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.amazon.device.ads.AdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize /  activity android:name= com.unity3d.ads.android.view.UnityAdsFullscreenActivity \n        android:configChanges= fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen \n        android:hardwareAccelerated= true  /  activity android:name= ru.mail.android.mytarget.ads.MyTargetActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize /  activity android:name= org.nexage.sourcekit.vast.activity.VASTActivity \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen  /  activity android:name= com.facebook.ads.InterstitialAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.vungle.publisher.FullScreenAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/appodeal/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/", 
            "text": "Appodeal\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import appodeal\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Appodeal configuration, you need to replace \napp_key\n items with your specific \nAppodeal Key\n account information.\n\n\nAppodeal\n:{\n    \napp_key\n:\n2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Appodeal\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginAppodeal/PluginAppodeal.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAppodeal::init();\n}\n\n\n\n\nUsing Appodeal\n\n\nAfter initialization you can begin to use the Appodeal functionality:\n\n\n// set user id\nsdkbox::PluginAppodeal::setUserVkId(\nuser id\n);\n// cache all type ad\nsdkbox::PluginAppodeal::cacheAd(sdkbox::PluginAppodeal::AdType::AppodealAdTypeAll);\n//show interstitial ad\nsdkbox::PluginAppodeal::showAd(sdkbox::PluginAppodeal::ShowStyle::AppodealShowStyleInterstitial);\n\n\n\n\nCatch Appodeal events (optional)\n\n\nThis allows you to catch the \nAppodeal\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::AppodealListener\n\n\n\n\n#include \nPluginAppodeal/PluginAppodeal.h\n\nclass ADListener : public sdkbox::AppodealListener {\npublic:\n    virtual void onBannerDidLoadAd();\n    virtual void onBannerDidFailToLoadAd();\n    virtual void onBannerDidClick();\n    virtual void onBannerPresent();\n\n    virtual void onInterstitialDidLoadAd();\n    virtual void onInterstitialDidFailToLoadAd();\n    virtual void onInterstitialWillPresent();\n    virtual void onInterstitialDidDismiss();\n    virtual void onInterstitialDidClick();\n\n    virtual void onVideoDidLoadAd();\n    virtual void onVideoDidFailToLoadAd();\n    virtual void onVideoDidPresent();\n    virtual void onVideoWillDismiss();\n    virtual void onVideoDidFinish();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAppodeal::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( AppodealListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for Appodeal events\n\n\n\n\nstatic AppodealListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void setDebugEnabled ( bool debugEnabled ) ;\n\n\n\n\nstatic bool showAd ( ShowStyle style ) ;\n\n\n\n\nstatic void cacheAd ( AdType type ) ;\n\n\n\n\nstatic void hideBanner ( ) ;\n\n\n\n\nstatic bool isReadyForShowWithStyle ( ShowStyle showStyle ) ;\n\n\n\n\nstatic void setUserVkId ( const std::string \n vkId ) ;\n\n\n\n\nstatic void setUserFacebookId ( const std::string \n facebookId ) ;\n\n\n\n\nstatic void setUserEmail ( const std::string \n email ) ;\n\n\n\n\nstatic void setUserBirthday ( const std::string \n birthday ) ;\n\n\n\n\nstatic void setUserAge ( int age ) ;\n\n\n\n\nstatic void setUserGender ( Gender gender ) ;\n\n\n\n\nstatic void setUserOccupation ( Occupation occupation ) ;\n\n\n\n\nstatic void setUserRelationship ( Relationship relationship ) ;\n\n\n\n\nstatic void setUserSmokingAttitude ( SmokingAttitude smokingAttitude ) ;\n\n\n\n\nstatic void setUserAlcoholAttitude ( AlcoholAttitude alcoholAttitude ) ;\n\n\n\n\nstatic void setUserInterests ( const std::string \n interests ) ;\n\n\n\n\nListeners\n\n\nvoid onBannerDidLoadAd ( );\n\n\n\n\n\n\ntrigger when banner ad load\n\n\n\n\nvoid onBannerDidFailToLoadAd ( );\n\n\n\n\n\n\ntrigger when banner ad fail to load\n\n\n\n\nvoid onBannerDidClick ( );\n\n\n\n\n\n\ntrigger when banner ad clicked\n\n\n\n\nvoid onBannerPresent ( );\n\n\n\n\n\n\ntrigger when banner ad present\n\n\n\n\nvoid onInterstitialDidLoadAd ( );\n\n\n\n\n\n\ntrigger when interstitial ad load\n\n\n\n\nvoid onInterstitialDidFailToLoadAd ( );\n\n\n\n\n\n\ntrigger when interstitial ad fail to load\n\n\n\n\nvoid onInterstitialWillPresent ( );\n\n\n\n\n\n\ntrigger when interstitial ad present\n\n\n\n\nvoid onInterstitialDidDismiss ( );\n\n\n\n\n\n\ntrigger when interstitial dismiss\n\n\n\n\nvoid onInterstitialDidClick ( );\n\n\n\n\n\n\ntrigger when interstitial ad clicked\n\n\n\n\nvoid onVideoDidLoadAd ( );\n\n\n\n\n\n\ntrigger when video load\n\n\n\n\nvoid onVideoDidFailToLoadAd ( );\n\n\n\n\n\n\ntrigger when video fail to load\n\n\n\n\nvoid onVideoDidPresent ( );\n\n\n\n\n\n\ntrigger when video present\n\n\n\n\nvoid onVideoWillDismiss ( );\n\n\n\n\n\n\ntrigger when video dismiss\n\n\n\n\nvoid onVideoDidFinish ( );\n\n\n\n\n\n\ntrigger when video finish\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAppodeal\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAppodeal.framework\n\n\nAppodeal.framework\n\n\nplugin_appodeal_res_bundle\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreImage.framework\n\n\nCoreLocation.framework\n\n\nCoreMedia.framework\n\n\nCoreMotion.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nlibc++.tbd\n\n\nlibsqlite3.tbd\n\n\nlibxml2.2.tbd\n\n\nlibz.tbd\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nMobileCoreServices.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nTwitter.framework\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nGameController.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginAppodeal.jar\n\n\nsdkbox.jar\n\n\nandroid-support-v4-22.2.1.jar\n\n\napplovin-sdk-6.0.1.jar\n\n\nappodeal-1.13.1.jar\n\n\nchartboost-5.2.0.jar\n\n\nmy-target-4.0.13.jar\n\n\nunity-ads-1.4.7.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also necessary meta-data and activity tags that also need to be added:\n\n\nmeta-data android:name=\ncom.appodeal.framework\n android:value=\nandroid\n /\n\n\nactivity android:name=\ncom.appodeal.ads.InterstitialActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\nactivity android:name=\ncom.appodeal.ads.VideoActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nactivity android:name=\ncom.appodeal.ads.LoaderActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n android:value=\n@integer/google_play_services_version\n /\n\n\n\nactivity android:name=\ncom.google.android.gms.ads.AdActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.chartboost.sdk.CBImpressionActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n\n        android:excludeFromRecents=\ntrue\n /\n\n\n\nactivity android:name=\ncom.applovin.adview.AppLovinInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.mopub.mobileads.MoPubActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity android:name=\ncom.mopub.common.MoPubBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidVideoPlayerActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\norg.nexage.sourcekit.mraid.MRAIDBrowser\n\n        android:configChanges=\norientation|keyboard|keyboardHidden|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.amazon.device.ads.AdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n/\n\n\n\nactivity android:name=\ncom.unity3d.ads.android.view.UnityAdsFullscreenActivity\n\n        android:configChanges=\nfontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n\n        android:hardwareAccelerated=\ntrue\n /\n\n\n\nactivity android:name=\nru.mail.android.mytarget.ads.MyTargetActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n/\n\n\n\nactivity android:name=\norg.nexage.sourcekit.vast.activity.VASTActivity\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.facebook.ads.InterstitialAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Appodeal with C++"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/#appodeal", 
            "text": "", 
            "title": "Appodeal"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import appodeal", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Appodeal configuration, you need to replace  app_key  items with your specific  Appodeal Key  account information.  Appodeal :{\n     app_key : 2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/#usage", 
            "text": "Initialize Appodeal  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginAppodeal/PluginAppodeal.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAppodeal::init();\n}  Using Appodeal  After initialization you can begin to use the Appodeal functionality:  // set user id\nsdkbox::PluginAppodeal::setUserVkId( user id );\n// cache all type ad\nsdkbox::PluginAppodeal::cacheAd(sdkbox::PluginAppodeal::AdType::AppodealAdTypeAll);\n//show interstitial ad\nsdkbox::PluginAppodeal::showAd(sdkbox::PluginAppodeal::ShowStyle::AppodealShowStyleInterstitial);  Catch Appodeal events (optional)  This allows you to catch the  Appodeal  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::AppodealListener   #include  PluginAppodeal/PluginAppodeal.h \nclass ADListener : public sdkbox::AppodealListener {\npublic:\n    virtual void onBannerDidLoadAd();\n    virtual void onBannerDidFailToLoadAd();\n    virtual void onBannerDidClick();\n    virtual void onBannerPresent();\n\n    virtual void onInterstitialDidLoadAd();\n    virtual void onInterstitialDidFailToLoadAd();\n    virtual void onInterstitialWillPresent();\n    virtual void onInterstitialDidDismiss();\n    virtual void onInterstitialDidClick();\n\n    virtual void onVideoDidLoadAd();\n    virtual void onVideoDidFailToLoadAd();\n    virtual void onVideoDidPresent();\n    virtual void onVideoWillDismiss();\n    virtual void onVideoDidFinish();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAppodeal::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( AppodealListener * listener ) ;   Set listener to listen for Appodeal events   static AppodealListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void setDebugEnabled ( bool debugEnabled ) ;  static bool showAd ( ShowStyle style ) ;  static void cacheAd ( AdType type ) ;  static void hideBanner ( ) ;  static bool isReadyForShowWithStyle ( ShowStyle showStyle ) ;  static void setUserVkId ( const std::string   vkId ) ;  static void setUserFacebookId ( const std::string   facebookId ) ;  static void setUserEmail ( const std::string   email ) ;  static void setUserBirthday ( const std::string   birthday ) ;  static void setUserAge ( int age ) ;  static void setUserGender ( Gender gender ) ;  static void setUserOccupation ( Occupation occupation ) ;  static void setUserRelationship ( Relationship relationship ) ;  static void setUserSmokingAttitude ( SmokingAttitude smokingAttitude ) ;  static void setUserAlcoholAttitude ( AlcoholAttitude alcoholAttitude ) ;  static void setUserInterests ( const std::string   interests ) ;  Listeners  void onBannerDidLoadAd ( );   trigger when banner ad load   void onBannerDidFailToLoadAd ( );   trigger when banner ad fail to load   void onBannerDidClick ( );   trigger when banner ad clicked   void onBannerPresent ( );   trigger when banner ad present   void onInterstitialDidLoadAd ( );   trigger when interstitial ad load   void onInterstitialDidFailToLoadAd ( );   trigger when interstitial ad fail to load   void onInterstitialWillPresent ( );   trigger when interstitial ad present   void onInterstitialDidDismiss ( );   trigger when interstitial dismiss   void onInterstitialDidClick ( );   trigger when interstitial ad clicked   void onVideoDidLoadAd ( );   trigger when video load   void onVideoDidFailToLoadAd ( );   trigger when video fail to load   void onVideoDidPresent ( );   trigger when video present   void onVideoWillDismiss ( );   trigger when video dismiss   void onVideoDidFinish ( );   trigger when video finish", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Appodeal  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAppodeal.framework  Appodeal.framework  plugin_appodeal_res_bundle   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreFoundation.framework  CoreGraphics.framework  CoreImage.framework  CoreLocation.framework  CoreMedia.framework  CoreMotion.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  libc++.tbd  libsqlite3.tbd  libxml2.2.tbd  libz.tbd  MediaPlayer.framework  MessageUI.framework  MobileCoreServices.framework  QuartzCore.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  Twitter.framework  UIKit.framework  WebKit.framework  GameController.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginAppodeal.jar  sdkbox.jar  android-support-v4-22.2.1.jar  applovin-sdk-6.0.1.jar  appodeal-1.13.1.jar  chartboost-5.2.0.jar  my-target-4.0.13.jar  unity-ads-1.4.7.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also necessary meta-data and activity tags that also need to be added:  meta-data android:name= com.appodeal.framework  android:value= android  /  activity android:name= com.appodeal.ads.InterstitialActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.VideoActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.LoaderActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  meta-data android:name= com.google.android.gms.version  android:value= @integer/google_play_services_version  /  activity android:name= com.google.android.gms.ads.AdActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.chartboost.sdk.CBImpressionActivity \n        android:theme= @android:style/Theme.Translucent \n        android:excludeFromRecents= true  /  activity android:name= com.applovin.adview.AppLovinInterstitialActivity \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.mobileads.MoPubActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.common.MoPubBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidVideoPlayerActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= org.nexage.sourcekit.mraid.MRAIDBrowser \n        android:configChanges= orientation|keyboard|keyboardHidden|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.amazon.device.ads.AdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize /  activity android:name= com.unity3d.ads.android.view.UnityAdsFullscreenActivity \n        android:configChanges= fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen \n        android:hardwareAccelerated= true  /  activity android:name= ru.mail.android.mytarget.ads.MyTargetActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize /  activity android:name= org.nexage.sourcekit.vast.activity.VASTActivity \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen  /  activity android:name= com.facebook.ads.InterstitialAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.vungle.publisher.FullScreenAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/appodeal/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/", 
            "text": "Appodeal\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import appodeal\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Appodeal configuration, you need to replace \napp_key\n items with your specific \nAppodeal Key\n account information.\n\n\nAppodeal\n:{\n    \napp_key\n:\n2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Appodeal JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAppodealJS.hpp\n\n#include \nPluginAppodealJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAppodealJS);\nsc-\naddRegisterCallback(register_all_PluginAppodealJS_helper);\n\n\n\n\nInitialize Appodeal\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAppodeal.init();\n\n\n\n\nUsing Appodeal\n\n\nAfter initialization you can begin to use the Appodeal functionality:\n\n\nplugin.setUserVkId(\nuser id\n);\nplugin.cacheAd(15);\n\n\n\n\nCatch Appodeal events (optional)\n\n\nThis allows you to catch the \nAppodeal\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nvar plugin = sdkbox.PluginAppodeal\nplugin.setListener({\n    onBannerDidLoadAd: function() { cc.log(\nonBannerDidLoadAd\n) },\n    onBannerDidFailToLoadAd: function() { cc.log(\nonBannerDidFailToLoadAd\n) },\n    onBannerDidClick: function() { cc.log(\nonBannerDidClick\n) },\n    onBannerPresent: function() { cc.log(\nonBannerPresent\n) },\n    onInterstitialDidLoadAd: function() { cc.log(\nonInterstitialDidLoadAd\n) },\n    onInterstitialDidFailToLoadAd: function() { cc.log(\nonInterstitialDidFailToLoadAd\n) },\n    onInterstitialWillPresent: function() { cc.log(\nonInterstitialWillPresent\n) },\n    onInterstitialDidDismiss: function() { cc.log(\nonInterstitialDidDismiss\n) },\n    onInterstitialDidClick: function() { cc.log(\nonInterstitialDidClick\n) },\n    onVideoDidLoadAd: function() { cc.log(\nonVideoDidLoadAd\n) },\n    onVideoDidFailToLoadAd: function() { cc.log(\nonVideoDidFailToLoadAd\n) },\n    onVideoDidPresent: function() { cc.log(\nonVideoDidPresent\n) },\n    onVideoWillDismiss: function() { cc.log(\nonVideoWillDismiss\n) },\n    onVideoDidFinish: function() { cc.log(\nonVideoDidFinish\n) }\n})\nplugin.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAppodeal.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAppodeal.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for Appodeal events\n\n\n\n\nsdkbox.PluginAppodeal.setDebugEnabled(debugEnabled);\n\n\n\n\nsdkbox.PluginAppodeal.showAd(style);\n\n\n\n\nsdkbox.PluginAppodeal.cacheAd(type);\n\n\n\n\nsdkbox.PluginAppodeal.hideBanner();\n\n\n\n\nsdkbox.PluginAppodeal.isReadyForShowWithStyle(showStyle);\n\n\n\n\nsdkbox.PluginAppodeal.setUserVkId(vkId);\n\n\n\n\nsdkbox.PluginAppodeal.setUserFacebookId(facebookId);\n\n\n\n\nsdkbox.PluginAppodeal.setUserEmail(email);\n\n\n\n\nsdkbox.PluginAppodeal.setUserBirthday(birthday);\n\n\n\n\nsdkbox.PluginAppodeal.setUserAge(age);\n\n\n\n\nsdkbox.PluginAppodeal.setUserGender(gender);\n\n\n\n\nsdkbox.PluginAppodeal.setUserOccupation(occupation);\n\n\n\n\nsdkbox.PluginAppodeal.setUserRelationship(relationship);\n\n\n\n\nsdkbox.PluginAppodeal.setUserSmokingAttitude(smokingAttitude);\n\n\n\n\nsdkbox.PluginAppodeal.setUserAlcoholAttitude(alcoholAttitude);\n\n\n\n\nsdkbox.PluginAppodeal.setUserInterests(interests);\n\n\n\n\nListeners\n\n\nonBannerDidLoadAd();\n\n\n\n\n\n\ntrigger when banner ad load\n\n\n\n\nonBannerDidFailToLoadAd();\n\n\n\n\n\n\ntrigger when banner ad fail to load\n\n\n\n\nonBannerDidClick();\n\n\n\n\n\n\ntrigger when banner ad clicked\n\n\n\n\nonBannerPresent();\n\n\n\n\n\n\ntrigger when banner ad present\n\n\n\n\nonInterstitialDidLoadAd();\n\n\n\n\n\n\ntrigger when interstitial ad load\n\n\n\n\nonInterstitialDidFailToLoadAd();\n\n\n\n\n\n\ntrigger when interstitial ad fail to load\n\n\n\n\nonInterstitialWillPresent();\n\n\n\n\n\n\ntrigger when interstitial ad present\n\n\n\n\nonInterstitialDidDismiss();\n\n\n\n\n\n\ntrigger when interstitial dismiss\n\n\n\n\nonInterstitialDidClick();\n\n\n\n\n\n\ntrigger when interstitial ad clicked\n\n\n\n\nonVideoDidLoadAd();\n\n\n\n\n\n\ntrigger when video load\n\n\n\n\nonVideoDidFailToLoadAd();\n\n\n\n\n\n\ntrigger when video fail to load\n\n\n\n\nonVideoDidPresent();\n\n\n\n\n\n\ntrigger when video present\n\n\n\n\nonVideoWillDismiss();\n\n\n\n\n\n\ntrigger when video dismiss\n\n\n\n\nonVideoDidFinish();\n\n\n\n\n\n\ntrigger when video finish\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAppodeal\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAppodeal.framework\n\n\nAppodeal.framework\n\n\nplugin_appodeal_res_bundle\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreImage.framework\n\n\nCoreLocation.framework\n\n\nCoreMedia.framework\n\n\nCoreMotion.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nlibc++.tbd\n\n\nlibsqlite3.tbd\n\n\nlibxml2.2.tbd\n\n\nlibz.tbd\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nMobileCoreServices.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nTwitter.framework\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nGameController.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginAppodeal.jar\n\n\nsdkbox.jar\n\n\nandroid-support-v4-22.2.1.jar\n\n\napplovin-sdk-6.0.1.jar\n\n\nappodeal-1.13.1.jar\n\n\nchartboost-5.2.0.jar\n\n\nmy-target-4.0.13.jar\n\n\nunity-ads-1.4.7.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also necessary meta-data and activity tags that also need to be added:\n\n\nmeta-data android:name=\ncom.appodeal.framework\n android:value=\nandroid\n /\n\n\nactivity android:name=\ncom.appodeal.ads.InterstitialActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\nactivity android:name=\ncom.appodeal.ads.VideoActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nactivity android:name=\ncom.appodeal.ads.LoaderActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n android:value=\n@integer/google_play_services_version\n /\n\n\n\nactivity android:name=\ncom.google.android.gms.ads.AdActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.chartboost.sdk.CBImpressionActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n\n        android:excludeFromRecents=\ntrue\n /\n\n\n\nactivity android:name=\ncom.applovin.adview.AppLovinInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.mopub.mobileads.MoPubActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity android:name=\ncom.mopub.common.MoPubBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidVideoPlayerActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\norg.nexage.sourcekit.mraid.MRAIDBrowser\n\n        android:configChanges=\norientation|keyboard|keyboardHidden|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.amazon.device.ads.AdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n/\n\n\n\nactivity android:name=\ncom.unity3d.ads.android.view.UnityAdsFullscreenActivity\n\n        android:configChanges=\nfontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n\n        android:hardwareAccelerated=\ntrue\n /\n\n\n\nactivity android:name=\nru.mail.android.mytarget.ads.MyTargetActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n/\n\n\n\nactivity android:name=\norg.nexage.sourcekit.vast.activity.VASTActivity\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.facebook.ads.InterstitialAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Appodeal with Javascript"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/#appodeal", 
            "text": "", 
            "title": "Appodeal"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import appodeal", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Appodeal configuration, you need to replace  app_key  items with your specific  Appodeal Key  account information.  Appodeal :{\n     app_key : 2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Appodeal JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAppodealJS.hpp \n#include  PluginAppodealJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAppodealJS);\nsc- addRegisterCallback(register_all_PluginAppodealJS_helper);  Initialize Appodeal  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAppodeal.init();  Using Appodeal  After initialization you can begin to use the Appodeal functionality:  plugin.setUserVkId( user id );\nplugin.cacheAd(15);  Catch Appodeal events (optional)  This allows you to catch the  Appodeal  events so that you can perform operations based upon responses. A simple example might look like this:  var plugin = sdkbox.PluginAppodeal\nplugin.setListener({\n    onBannerDidLoadAd: function() { cc.log( onBannerDidLoadAd ) },\n    onBannerDidFailToLoadAd: function() { cc.log( onBannerDidFailToLoadAd ) },\n    onBannerDidClick: function() { cc.log( onBannerDidClick ) },\n    onBannerPresent: function() { cc.log( onBannerPresent ) },\n    onInterstitialDidLoadAd: function() { cc.log( onInterstitialDidLoadAd ) },\n    onInterstitialDidFailToLoadAd: function() { cc.log( onInterstitialDidFailToLoadAd ) },\n    onInterstitialWillPresent: function() { cc.log( onInterstitialWillPresent ) },\n    onInterstitialDidDismiss: function() { cc.log( onInterstitialDidDismiss ) },\n    onInterstitialDidClick: function() { cc.log( onInterstitialDidClick ) },\n    onVideoDidLoadAd: function() { cc.log( onVideoDidLoadAd ) },\n    onVideoDidFailToLoadAd: function() { cc.log( onVideoDidFailToLoadAd ) },\n    onVideoDidPresent: function() { cc.log( onVideoDidPresent ) },\n    onVideoWillDismiss: function() { cc.log( onVideoWillDismiss ) },\n    onVideoDidFinish: function() { cc.log( onVideoDidFinish ) }\n})\nplugin.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAppodeal.init();   initialize the plugin instance.   sdkbox.PluginAppodeal.setListener(listener);   Set listener to listen for Appodeal events   sdkbox.PluginAppodeal.setDebugEnabled(debugEnabled);  sdkbox.PluginAppodeal.showAd(style);  sdkbox.PluginAppodeal.cacheAd(type);  sdkbox.PluginAppodeal.hideBanner();  sdkbox.PluginAppodeal.isReadyForShowWithStyle(showStyle);  sdkbox.PluginAppodeal.setUserVkId(vkId);  sdkbox.PluginAppodeal.setUserFacebookId(facebookId);  sdkbox.PluginAppodeal.setUserEmail(email);  sdkbox.PluginAppodeal.setUserBirthday(birthday);  sdkbox.PluginAppodeal.setUserAge(age);  sdkbox.PluginAppodeal.setUserGender(gender);  sdkbox.PluginAppodeal.setUserOccupation(occupation);  sdkbox.PluginAppodeal.setUserRelationship(relationship);  sdkbox.PluginAppodeal.setUserSmokingAttitude(smokingAttitude);  sdkbox.PluginAppodeal.setUserAlcoholAttitude(alcoholAttitude);  sdkbox.PluginAppodeal.setUserInterests(interests);  Listeners  onBannerDidLoadAd();   trigger when banner ad load   onBannerDidFailToLoadAd();   trigger when banner ad fail to load   onBannerDidClick();   trigger when banner ad clicked   onBannerPresent();   trigger when banner ad present   onInterstitialDidLoadAd();   trigger when interstitial ad load   onInterstitialDidFailToLoadAd();   trigger when interstitial ad fail to load   onInterstitialWillPresent();   trigger when interstitial ad present   onInterstitialDidDismiss();   trigger when interstitial dismiss   onInterstitialDidClick();   trigger when interstitial ad clicked   onVideoDidLoadAd();   trigger when video load   onVideoDidFailToLoadAd();   trigger when video fail to load   onVideoDidPresent();   trigger when video present   onVideoWillDismiss();   trigger when video dismiss   onVideoDidFinish();   trigger when video finish", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Appodeal  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAppodeal.framework  Appodeal.framework  plugin_appodeal_res_bundle   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreFoundation.framework  CoreGraphics.framework  CoreImage.framework  CoreLocation.framework  CoreMedia.framework  CoreMotion.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  libc++.tbd  libsqlite3.tbd  libxml2.2.tbd  libz.tbd  MediaPlayer.framework  MessageUI.framework  MobileCoreServices.framework  QuartzCore.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  Twitter.framework  UIKit.framework  WebKit.framework  GameController.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginAppodeal.jar  sdkbox.jar  android-support-v4-22.2.1.jar  applovin-sdk-6.0.1.jar  appodeal-1.13.1.jar  chartboost-5.2.0.jar  my-target-4.0.13.jar  unity-ads-1.4.7.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also necessary meta-data and activity tags that also need to be added:  meta-data android:name= com.appodeal.framework  android:value= android  /  activity android:name= com.appodeal.ads.InterstitialActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.VideoActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.LoaderActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  meta-data android:name= com.google.android.gms.version  android:value= @integer/google_play_services_version  /  activity android:name= com.google.android.gms.ads.AdActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.chartboost.sdk.CBImpressionActivity \n        android:theme= @android:style/Theme.Translucent \n        android:excludeFromRecents= true  /  activity android:name= com.applovin.adview.AppLovinInterstitialActivity \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.mobileads.MoPubActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.common.MoPubBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidVideoPlayerActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= org.nexage.sourcekit.mraid.MRAIDBrowser \n        android:configChanges= orientation|keyboard|keyboardHidden|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.amazon.device.ads.AdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize /  activity android:name= com.unity3d.ads.android.view.UnityAdsFullscreenActivity \n        android:configChanges= fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen \n        android:hardwareAccelerated= true  /  activity android:name= ru.mail.android.mytarget.ads.MyTargetActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize /  activity android:name= org.nexage.sourcekit.vast.activity.VASTActivity \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen  /  activity android:name= com.facebook.ads.InterstitialAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.vungle.publisher.FullScreenAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/appodeal/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/", 
            "text": "Appodeal\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import appodeal\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Appodeal configuration, you need to replace \napp_key\n items with your specific \nAppodeal Key\n account information.\n\n\nAppodeal\n:{\n    \napp_key\n:\n2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Appodeal\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAppodeal:init()\n\n\n\n\nUsing Appodeal\n\n\nAfter initialization you can begin to use the Appodeal functionality:\n\n\nlocal plugin = sdkbox.PluginAppodeal\nplugin:init()\nplugin:setUserVkId(\nuser id\n);\nplugin:cacheAd(15);\n\n\n\n\nCatch Appodeal events (optional)\n\n\nThis allows you to catch the \nAppodeal\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nlocal plugin = sdkbox.PluginAppodeal\nplugin:setListener(function(args)\n    local event = args.event\n    dump(args, \nappodeal listener info:\n)\nend)\nplugin:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAppodeal:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAppodeal:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for Appodeal events\n\n\n\n\nsdkbox.PluginAppodeal:setDebugEnabled(debugEnabled)\n\n\n\n\nsdkbox.PluginAppodeal:showAd(style)\n\n\n\n\nsdkbox.PluginAppodeal:cacheAd(type)\n\n\n\n\nsdkbox.PluginAppodeal:hideBanner()\n\n\n\n\nsdkbox.PluginAppodeal:isReadyForShowWithStyle(showStyle)\n\n\n\n\nsdkbox.PluginAppodeal:setUserVkId(vkId)\n\n\n\n\nsdkbox.PluginAppodeal:setUserFacebookId(facebookId)\n\n\n\n\nsdkbox.PluginAppodeal:setUserEmail(email)\n\n\n\n\nsdkbox.PluginAppodeal:setUserBirthday(birthday)\n\n\n\n\nsdkbox.PluginAppodeal:setUserAge(age)\n\n\n\n\nsdkbox.PluginAppodeal:setUserGender(gender)\n\n\n\n\nsdkbox.PluginAppodeal:setUserOccupation(occupation)\n\n\n\n\nsdkbox.PluginAppodeal:setUserRelationship(relationship)\n\n\n\n\nsdkbox.PluginAppodeal:setUserSmokingAttitude(smokingAttitude)\n\n\n\n\nsdkbox.PluginAppodeal:setUserAlcoholAttitude(alcoholAttitude)\n\n\n\n\nsdkbox.PluginAppodeal:setUserInterests(interests)\n\n\n\n\nListeners\n\n\nonBannerDidLoadAd()\n\n\n\n\n\n\ntrigger when banner ad load\n\n\n\n\nonBannerDidFailToLoadAd()\n\n\n\n\n\n\ntrigger when banner ad fail to load\n\n\n\n\nonBannerDidClick()\n\n\n\n\n\n\ntrigger when banner ad clicked\n\n\n\n\nonBannerPresent()\n\n\n\n\n\n\ntrigger when banner ad present\n\n\n\n\nonInterstitialDidLoadAd()\n\n\n\n\n\n\ntrigger when interstitial ad load\n\n\n\n\nonInterstitialDidFailToLoadAd()\n\n\n\n\n\n\ntrigger when interstitial ad fail to load\n\n\n\n\nonInterstitialWillPresent()\n\n\n\n\n\n\ntrigger when interstitial ad present\n\n\n\n\nonInterstitialDidDismiss()\n\n\n\n\n\n\ntrigger when interstitial dismiss\n\n\n\n\nonInterstitialDidClick()\n\n\n\n\n\n\ntrigger when interstitial ad clicked\n\n\n\n\nonVideoDidLoadAd()\n\n\n\n\n\n\ntrigger when video load\n\n\n\n\nonVideoDidFailToLoadAd()\n\n\n\n\n\n\ntrigger when video fail to load\n\n\n\n\nonVideoDidPresent()\n\n\n\n\n\n\ntrigger when video present\n\n\n\n\nonVideoWillDismiss()\n\n\n\n\n\n\ntrigger when video dismiss\n\n\n\n\nonVideoDidFinish()\n\n\n\n\n\n\ntrigger when video finish\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAppodeal\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAppodeal.framework\n\n\nAppodeal.framework\n\n\nplugin_appodeal_res_bundle\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreImage.framework\n\n\nCoreLocation.framework\n\n\nCoreMedia.framework\n\n\nCoreMotion.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nlibc++.tbd\n\n\nlibsqlite3.tbd\n\n\nlibxml2.2.tbd\n\n\nlibz.tbd\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nMobileCoreServices.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nTwitter.framework\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nGameController.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginAppodeal.jar\n\n\nsdkbox.jar\n\n\nandroid-support-v4-22.2.1.jar\n\n\napplovin-sdk-6.0.1.jar\n\n\nappodeal-1.13.1.jar\n\n\nchartboost-5.2.0.jar\n\n\nmy-target-4.0.13.jar\n\n\nunity-ads-1.4.7.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also necessary meta-data and activity tags that also need to be added:\n\n\nmeta-data android:name=\ncom.appodeal.framework\n android:value=\nandroid\n /\n\n\nactivity android:name=\ncom.appodeal.ads.InterstitialActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\nactivity android:name=\ncom.appodeal.ads.VideoActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nactivity android:name=\ncom.appodeal.ads.LoaderActivity\n\n        android:configChanges=\norientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n /\n\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n android:value=\n@integer/google_play_services_version\n /\n\n\n\nactivity android:name=\ncom.google.android.gms.ads.AdActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.chartboost.sdk.CBImpressionActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n\n        android:excludeFromRecents=\ntrue\n /\n\n\n\nactivity android:name=\ncom.applovin.adview.AppLovinInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.mopub.mobileads.MoPubActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity android:name=\ncom.mopub.common.MoPubBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\nactivity android:name=\ncom.mopub.mobileads.MraidVideoPlayerActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\norg.nexage.sourcekit.mraid.MRAIDBrowser\n\n        android:configChanges=\norientation|keyboard|keyboardHidden|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent\n /\n\n\n\nactivity android:name=\ncom.amazon.device.ads.AdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n/\n\n\n\nactivity android:name=\ncom.unity3d.ads.android.view.UnityAdsFullscreenActivity\n\n        android:configChanges=\nfontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n\n        android:hardwareAccelerated=\ntrue\n /\n\n\n\nactivity android:name=\nru.mail.android.mytarget.ads.MyTargetActivity\n\n        android:configChanges=\nkeyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\n/\n\n\n\nactivity android:name=\norg.nexage.sourcekit.vast.activity.VASTActivity\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.facebook.ads.InterstitialAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n /\n\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\nactivity android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n        android:configChanges=\nkeyboardHidden|orientation|screenSize\n\n        android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Appodeal with Lua"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/#appodeal", 
            "text": "", 
            "title": "Appodeal"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Appodeal plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import appodeal", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Appodeal configuration, you need to replace  app_key  items with your specific  Appodeal Key  account information.  Appodeal :{\n     app_key : 2cfc9cc638980eb7f5ff35d6eb63dbe404503151ccc451ed \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/#usage", 
            "text": "Initialize Appodeal  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAppodeal:init()  Using Appodeal  After initialization you can begin to use the Appodeal functionality:  local plugin = sdkbox.PluginAppodeal\nplugin:init()\nplugin:setUserVkId( user id );\nplugin:cacheAd(15);  Catch Appodeal events (optional)  This allows you to catch the  Appodeal  events so that you can perform operations based upon responses. A simple example might look like this:  local plugin = sdkbox.PluginAppodeal\nplugin:setListener(function(args)\n    local event = args.event\n    dump(args,  appodeal listener info: )\nend)\nplugin:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAppodeal:init()   initialize the plugin instance.   sdkbox.PluginAppodeal:setListener(listener)   Set listener to listen for Appodeal events   sdkbox.PluginAppodeal:setDebugEnabled(debugEnabled)  sdkbox.PluginAppodeal:showAd(style)  sdkbox.PluginAppodeal:cacheAd(type)  sdkbox.PluginAppodeal:hideBanner()  sdkbox.PluginAppodeal:isReadyForShowWithStyle(showStyle)  sdkbox.PluginAppodeal:setUserVkId(vkId)  sdkbox.PluginAppodeal:setUserFacebookId(facebookId)  sdkbox.PluginAppodeal:setUserEmail(email)  sdkbox.PluginAppodeal:setUserBirthday(birthday)  sdkbox.PluginAppodeal:setUserAge(age)  sdkbox.PluginAppodeal:setUserGender(gender)  sdkbox.PluginAppodeal:setUserOccupation(occupation)  sdkbox.PluginAppodeal:setUserRelationship(relationship)  sdkbox.PluginAppodeal:setUserSmokingAttitude(smokingAttitude)  sdkbox.PluginAppodeal:setUserAlcoholAttitude(alcoholAttitude)  sdkbox.PluginAppodeal:setUserInterests(interests)  Listeners  onBannerDidLoadAd()   trigger when banner ad load   onBannerDidFailToLoadAd()   trigger when banner ad fail to load   onBannerDidClick()   trigger when banner ad clicked   onBannerPresent()   trigger when banner ad present   onInterstitialDidLoadAd()   trigger when interstitial ad load   onInterstitialDidFailToLoadAd()   trigger when interstitial ad fail to load   onInterstitialWillPresent()   trigger when interstitial ad present   onInterstitialDidDismiss()   trigger when interstitial dismiss   onInterstitialDidClick()   trigger when interstitial ad clicked   onVideoDidLoadAd()   trigger when video load   onVideoDidFailToLoadAd()   trigger when video fail to load   onVideoDidPresent()   trigger when video present   onVideoWillDismiss()   trigger when video dismiss   onVideoDidFinish()   trigger when video finish", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Appodeal  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAppodeal.framework  Appodeal.framework  plugin_appodeal_res_bundle   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreFoundation.framework  CoreGraphics.framework  CoreImage.framework  CoreLocation.framework  CoreMedia.framework  CoreMotion.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  libc++.tbd  libsqlite3.tbd  libxml2.2.tbd  libz.tbd  MediaPlayer.framework  MessageUI.framework  MobileCoreServices.framework  QuartzCore.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  Twitter.framework  UIKit.framework  WebKit.framework  GameController.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginAppodeal.jar  sdkbox.jar  android-support-v4-22.2.1.jar  applovin-sdk-6.0.1.jar  appodeal-1.13.1.jar  chartboost-5.2.0.jar  my-target-4.0.13.jar  unity-ads-1.4.7.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also necessary meta-data and activity tags that also need to be added:  meta-data android:name= com.appodeal.framework  android:value= android  /  activity android:name= com.appodeal.ads.InterstitialActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.VideoActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  activity android:name= com.appodeal.ads.LoaderActivity \n        android:configChanges= orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar  /  meta-data android:name= com.google.android.gms.version  android:value= @integer/google_play_services_version  /  activity android:name= com.google.android.gms.ads.AdActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.chartboost.sdk.CBImpressionActivity \n        android:theme= @android:style/Theme.Translucent \n        android:excludeFromRecents= true  /  activity android:name= com.applovin.adview.AppLovinInterstitialActivity \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.mobileads.MoPubActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.mopub.common.MoPubBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.mopub.mobileads.MraidVideoPlayerActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= org.nexage.sourcekit.mraid.MRAIDBrowser \n        android:configChanges= orientation|keyboard|keyboardHidden|screenSize \n        android:theme= @android:style/Theme.Translucent  /  activity android:name= com.amazon.device.ads.AdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize /  activity android:name= com.unity3d.ads.android.view.UnityAdsFullscreenActivity \n        android:configChanges= fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen \n        android:hardwareAccelerated= true  /  activity android:name= ru.mail.android.mytarget.ads.MyTargetActivity \n        android:configChanges= keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize /  activity android:name= org.nexage.sourcekit.vast.activity.VASTActivity \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen  /  activity android:name= com.facebook.ads.InterstitialAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize  /  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.vungle.publisher.FullScreenAdActivity \n        android:configChanges= keyboardHidden|orientation|screenSize \n        android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAppodeal\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginappodeal)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/appodeal/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # appodeal\n\n-keep class com.appodeal.** { *; }\n-keep class com.amazon.** { *; }\n-keep class com.mopub.** { *; }\n-keep class org.nexage.** { *; }\n-keep class com.applovin.** { *; }\n-keep class com.chartboost.** { *; }\n-keep class com.unity3d.ads.** { *; }\n-keep class com.applifier.** { *; }\n-keep class com.yandex.** { *; }\n-keep class com.inmobi.** { *; }\n-keep class ru.mail.android.mytarget.** { *; }\n-keep class com.google.android.gms.ads.** { *; }\n-keep class com.google.android.gms.common.GooglePlayServicesUtil { *; }\n-keep class * extends java.util.ListResourceBundle {\n  protected Object[][] getContents();\n}\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n  public static final *** NULL;\n}\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n  @com.google.android.gms.common.annotation.KeepName *;\n}\n-keepnames class * implements android.os.Parcelable {\n  public static final ** CREATOR;\n}\n-dontwarn com.facebook.ads.**\n-dontwarn com.jirbo.adcolony.**\n-dontwarn com.vungle.**\n-dontwarn com.startapp.**\n-dontwarn com.yandex.**\n-dontwarn com.inmobi.**\n-keep class android.support.v4.app.Fragment { *; }\n-keep class android.support.v4.app.FragmentActivity { *; }\n-keep class android.support.v4.app.FragmentManager { *; }\n-keep class android.support.v4.app.FragmentTransaction { *; }\n-keep class android.support.v4.content.LocalBroadcastManager { *; }\n-keep class android.support.v4.util.LruCache { *; }\n-keep class android.support.v4.view.PagerAdapter { *; }\n-keep class android.support.v4.view.ViewPager { *; }\n\n-dontwarn com.appodeal.**\n-dontwarn ru.mail.android.mytarget.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/", 
            "text": "Bee7\n\n\nPrerequisites\n\n\n\n\n\n\nFor Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\n\n\nFor iOS, Bee7's game wall currently supports only portrait orientation.\n\n\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import bee7\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here\n\n\nBee7\n:\n{\n    \ndebug\n:true,\n    \nkey\n:\nFE74A9C4-1288-4F6F-8D6E-C365699F2C72\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nExtra steps\n\n\nThe following step assumes you already registered at \nBee7\n, created a new \nAPP\n and activated it.\n\n\nSetup iOS\n\n\n\n\n\n\nModify \nInfo.plist\n, add URL Schemes:\n\n\nTarget -\n Info -\n URL Types\n:\n\n\n\n\nclick \"+\"\n\n\nfill \"URL Schemes\" with \"your bee7 scheme\"\n\n\n\n\n\n\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_bee7_scheme_\n with your \nbee7 scheme\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-21\n\n\n\n\nInitialize Bee7\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginBee7/PluginBee7.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginBee7::init();\n}\n\n\n\n\nUsing Bee7\n\n\nShow Game Wall\n\n\nsdkbox::PluginBee7::showGameWall();\n\n\n\n\nBee7 events\n\n\nThis allows you to catch \nBee7\n events so that you can perform operations after Bee7 events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::Bee7Listener\n and override the functions listed:\n\n\n\n\n#include \nPluginBee7/PluginBee7.h\n\nclass MyClass : public sdkbox::Bee7Listener\n{\n    void onAvailableChange(bool available) = 0;\n    void onVisibleChange(bool available) = 0;\n    void onGameWallWillClose() = 0;\n    void onGiveReward(long bee7Points,\n                      long virtualCurrencyAmount,\n                      const std::string\n appId,\n                      bool cappedReward,\n                      long campaignId,\n                      bool videoReward) = 0;\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginBee7::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( Bee7Listener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for bee7 events\n\n\n\n\nstatic Bee7Listener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void showGameWall ( ) ;\n\n\n\n\nListeners\n\n\nvoid onAvailableChange ( bool available );\n\n\n\n\nvoid onVisibleChange ( bool available );\n\n\n\n\nvoid onGameWallWillClose ( );\n\n\n\n\nvoid onGiveReward ( long bee7Points ,\n                    long virtualCurrencyAmount ,\n                    const std::string \n appId ,\n                    bool cappedReward ,\n                    long campaignId ,\n                    bool videoReward );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nBee7\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginBee7.framework\n\n\nBee7GWResources.bundle\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nMessageUI.framework\n\n\nCoreMedia.framework\n\n\nSystemConfiguration.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nlibsqlite3.dylib\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginBee7.framework/PluginBee7\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginBee7.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nCopy the \nbee7-android-sdk-gamewall\n directories from \nplugin/android/libs\n to your \nproject_root\n/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nMake sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:\n\n\n\n\n\n\nuses-sdk\n with targetSdkVersion set to the latest Android SDK version available, for example:\n\n\nxml\n\nuses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../\n\n\n\n\n\n\nThe flag \nandroid:hardwareAccelerated\n set to \ntrue\n for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):\n\n\nxml\n    \napplication android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\"\n\n    \n/application\n\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n\n  \nintent-filter\n\n      \naction android:name=\nandroid.intent.action.VIEW\n/\n\n      \ncategory android:name=\nandroid.intent.category.DEFAULT\n/\n\n      \ncategory android:name=\nandroid.intent.category.BROWSABLE\n/\n\n      \ndata android:scheme=\nyour_bee7_scheme\n android:host=\npublisher\n/\n\n  \n/intent-filter\n\n\n/activity\n\n\n\nservice\n  android:name=\ncom.bee7.sdk.service.RewardingService\n\n  android:process=\n:rewardingservice\n\n  android:enabled=\ntrue\n\n\n/service\n\n\n\nreceiver android:name=\ncom.bee7.sdk.publisher.RewardReceiver\n android:enabled=\ntrue\n android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.bee7.action.REWARD\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\nreceiver\n  android:name=\ncom.bee7.sdk.service.RewardingServiceReceiver\n\n  android:enabled=\ntrue\n\n  android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\nandroid.intent.action.USER_PRESENT\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-21\n\n\n\n\nEdit \nproject.property\n\n\nandroid.library.reference.1=./libs/bee7-android-sdk-gamewall\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Bee7 with C++"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#bee7", 
            "text": "", 
            "title": "Bee7"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#prerequisites", 
            "text": "For Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.    For iOS, Bee7's game wall currently supports only portrait orientation.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import bee7", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here  Bee7 :\n{\n     debug :true,\n     key : FE74A9C4-1288-4F6F-8D6E-C365699F2C72 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#extra-steps", 
            "text": "The following step assumes you already registered at  Bee7 , created a new  APP  and activated it.  Setup iOS    Modify  Info.plist , add URL Schemes:  Target -  Info -  URL Types :   click \"+\"  fill \"URL Schemes\" with \"your bee7 scheme\"     Setup Android   Open  AndroidManifest.xml  and replace  _replace_with_your_bee7_scheme_  with your  bee7 scheme  Open  project.properties  and change target to  target=android-21   Initialize Bee7  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginBee7/PluginBee7.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginBee7::init();\n}  Using Bee7  Show Game Wall  sdkbox::PluginBee7::showGameWall();  Bee7 events  This allows you to catch  Bee7  events so that you can perform operations after Bee7 events have occurred.   Allow your class to extend  sdkbox::Bee7Listener  and override the functions listed:   #include  PluginBee7/PluginBee7.h \nclass MyClass : public sdkbox::Bee7Listener\n{\n    void onAvailableChange(bool available) = 0;\n    void onVisibleChange(bool available) = 0;\n    void onGameWallWillClose() = 0;\n    void onGiveReward(long bee7Points,\n                      long virtualCurrencyAmount,\n                      const std::string  appId,\n                      bool cappedReward,\n                      long campaignId,\n                      bool videoReward) = 0;\n};   Create a  listener  that handles callbacks:   sdkbox::PluginBee7::setListener(this);", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( Bee7Listener * listener ) ;   Set listener to listen for bee7 events   static Bee7Listener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void showGameWall ( ) ;  Listeners  void onAvailableChange ( bool available );  void onVisibleChange ( bool available );  void onGameWallWillClose ( );  void onGiveReward ( long bee7Points ,\n                    long virtualCurrencyAmount ,\n                    const std::string   appId ,\n                    bool cappedReward ,\n                    long campaignId ,\n                    bool videoReward );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Bee7  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginBee7.framework  Bee7GWResources.bundle   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   MessageUI.framework  CoreMedia.framework  SystemConfiguration.framework  StoreKit.framework  AdSupport.framework  libsqlite3.dylib   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginBee7.framework/PluginBee7", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginBee7.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Copy the  bee7-android-sdk-gamewall  directories from  plugin/android/libs  to your  project_root /libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Make sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:    uses-sdk  with targetSdkVersion set to the latest Android SDK version available, for example:  xml uses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../    The flag  android:hardwareAccelerated  set to  true  for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):  xml\n     application android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\" \n     /application    There are also a few necessary meta-data tags that also need to be added:  activity \n   intent-filter \n       action android:name= android.intent.action.VIEW / \n       category android:name= android.intent.category.DEFAULT / \n       category android:name= android.intent.category.BROWSABLE / \n       data android:scheme= your_bee7_scheme  android:host= publisher / \n   /intent-filter  /activity  service\n  android:name= com.bee7.sdk.service.RewardingService \n  android:process= :rewardingservice \n  android:enabled= true  /service  receiver android:name= com.bee7.sdk.publisher.RewardReceiver  android:enabled= true  android:exported= true \n     intent-filter \n         action android:name= com.bee7.action.REWARD  / \n     /intent-filter  /receiver  receiver\n  android:name= com.bee7.sdk.service.RewardingServiceReceiver \n  android:enabled= true \n  android:exported= true \n     intent-filter \n         action android:name= android.intent.action.USER_PRESENT  / \n     /intent-filter  /receiver   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-21  Edit  project.property  android.library.reference.1=./libs/bee7-android-sdk-gamewall  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/bee7/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/bee7/v3-js/", 
            "text": "Bee7\n\n\nPrerequisites\n\n\n\n\n\n\nFor Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\n\n\nFor iOS, Bee7's game wall currently supports only portrait orientation.\n\n\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import bee7\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here\n\n\nBee7\n:\n{\n    \ndebug\n:true,\n    \nkey\n:\nFE74A9C4-1288-4F6F-8D6E-C365699F2C72\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nExtra steps\n\n\nThe following step assumes you already registered at \nBee7\n, created a new \nAPP\n and activated it.\n\n\nSetup iOS\n\n\n\n\n\n\nModify \nInfo.plist\n, add URL Schemes:\n\n\nTarget -\n Info -\n URL Types\n:\n\n\n\n\nclick \"+\"\n\n\nfill \"URL Schemes\" with \"your bee7 scheme\"\n\n\n\n\n\n\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_bee7_scheme_\n with your \nbee7 scheme\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-21\n\n\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Bee7 JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginBee7JS.hpp\n\n#include \nPluginBee7JSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginBee7JS);\nsc-\naddRegisterCallback(register_all_PluginBee7JS_helper);\n\n\n\n\nInitialize Bee7\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginBee7.init();\n\n\n\n\nUsing Bee7\n\n\nShow Game Wall\n\n\nsdkbox.PluginBee7.showGameWall();\n\n\n\n\nBee7 events\n\n\nThis allows you to catch \nBee7\n events so that you can perform operations after Bee7 events have occurred.\n\n\nsdkbox.PluginBee7.setListener({\n    onAvailableChange: function(available) {},\n    onVisibleChange: function(available) {},\n    onGameWallWillClose: function() {},\n    onGiveReward: function(bee7Points, virtualCurrencyAmount, appId, cappedReward,\n                           campaignId, videoReward) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginBee7.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginBee7.showGameWall();\n\n\n\n\nListeners\n\n\nonAvailableChange(available);\n\n\n\n\nonVisibleChange(available);\n\n\n\n\nonGameWallWillClose();\n\n\n\n\nonGiveReward(bee7Points,\n              virtualCurrencyAmount,\n              appId,\n              cappedReward,\n              campaignId,\n              videoReward);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nBee7\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginBee7.framework\n\n\nBee7GWResources.bundle\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nMessageUI.framework\n\n\nCoreMedia.framework\n\n\nSystemConfiguration.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nlibsqlite3.dylib\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginBee7.framework/PluginBee7\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginBee7.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nCopy the \nbee7-android-sdk-gamewall\n directories from \nplugin/android/libs\n to your \nproject_root\n/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nMake sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:\n\n\n\n\n\n\nuses-sdk\n with targetSdkVersion set to the latest Android SDK version available, for example:\n\n\nxml\n\nuses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../\n\n\n\n\n\n\nThe flag \nandroid:hardwareAccelerated\n set to \ntrue\n for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):\n\n\nxml\n    \napplication android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\"\n\n    \n/application\n\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n\n  \nintent-filter\n\n      \naction android:name=\nandroid.intent.action.VIEW\n/\n\n      \ncategory android:name=\nandroid.intent.category.DEFAULT\n/\n\n      \ncategory android:name=\nandroid.intent.category.BROWSABLE\n/\n\n      \ndata android:scheme=\nyour_bee7_scheme\n android:host=\npublisher\n/\n\n  \n/intent-filter\n\n\n/activity\n\n\n\nservice\n  android:name=\ncom.bee7.sdk.service.RewardingService\n\n  android:process=\n:rewardingservice\n\n  android:enabled=\ntrue\n\n\n/service\n\n\n\nreceiver android:name=\ncom.bee7.sdk.publisher.RewardReceiver\n android:enabled=\ntrue\n android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.bee7.action.REWARD\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\nreceiver\n  android:name=\ncom.bee7.sdk.service.RewardingServiceReceiver\n\n  android:enabled=\ntrue\n\n  android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\nandroid.intent.action.USER_PRESENT\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-21\n\n\n\n\nEdit \nproject.property\n\n\nandroid.library.reference.1=./libs/bee7-android-sdk-gamewall\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Bee7 with Javascript"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#bee7", 
            "text": "", 
            "title": "Bee7"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#prerequisites", 
            "text": "For Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.    For iOS, Bee7's game wall currently supports only portrait orientation.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import bee7", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here  Bee7 :\n{\n     debug :true,\n     key : FE74A9C4-1288-4F6F-8D6E-C365699F2C72 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#extra-steps", 
            "text": "The following step assumes you already registered at  Bee7 , created a new  APP  and activated it.  Setup iOS    Modify  Info.plist , add URL Schemes:  Target -  Info -  URL Types :   click \"+\"  fill \"URL Schemes\" with \"your bee7 scheme\"     Setup Android   Open  AndroidManifest.xml  and replace  _replace_with_your_bee7_scheme_  with your  bee7 scheme  Open  project.properties  and change target to  target=android-21   Register Javascript Functions  You need to register all the Bee7 JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginBee7JS.hpp \n#include  PluginBee7JSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginBee7JS);\nsc- addRegisterCallback(register_all_PluginBee7JS_helper);  Initialize Bee7  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginBee7.init();  Using Bee7  Show Game Wall  sdkbox.PluginBee7.showGameWall();  Bee7 events  This allows you to catch  Bee7  events so that you can perform operations after Bee7 events have occurred.  sdkbox.PluginBee7.setListener({\n    onAvailableChange: function(available) {},\n    onVisibleChange: function(available) {},\n    onGameWallWillClose: function() {},\n    onGiveReward: function(bee7Points, virtualCurrencyAmount, appId, cappedReward,\n                           campaignId, videoReward) {}\n});", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginBee7.init();   initialize the plugin instance.   sdkbox.PluginBee7.showGameWall();  Listeners  onAvailableChange(available);  onVisibleChange(available);  onGameWallWillClose();  onGiveReward(bee7Points,\n              virtualCurrencyAmount,\n              appId,\n              cappedReward,\n              campaignId,\n              videoReward);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Bee7  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginBee7.framework  Bee7GWResources.bundle   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   MessageUI.framework  CoreMedia.framework  SystemConfiguration.framework  StoreKit.framework  AdSupport.framework  libsqlite3.dylib   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginBee7.framework/PluginBee7   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginBee7.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Copy the  bee7-android-sdk-gamewall  directories from  plugin/android/libs  to your  project_root /libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Make sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:    uses-sdk  with targetSdkVersion set to the latest Android SDK version available, for example:  xml uses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../    The flag  android:hardwareAccelerated  set to  true  for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):  xml\n     application android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\" \n     /application    There are also a few necessary meta-data tags that also need to be added:  activity \n   intent-filter \n       action android:name= android.intent.action.VIEW / \n       category android:name= android.intent.category.DEFAULT / \n       category android:name= android.intent.category.BROWSABLE / \n       data android:scheme= your_bee7_scheme  android:host= publisher / \n   /intent-filter  /activity  service\n  android:name= com.bee7.sdk.service.RewardingService \n  android:process= :rewardingservice \n  android:enabled= true  /service  receiver android:name= com.bee7.sdk.publisher.RewardReceiver  android:enabled= true  android:exported= true \n     intent-filter \n         action android:name= com.bee7.action.REWARD  / \n     /intent-filter  /receiver  receiver\n  android:name= com.bee7.sdk.service.RewardingServiceReceiver \n  android:enabled= true \n  android:exported= true \n     intent-filter \n         action android:name= android.intent.action.USER_PRESENT  / \n     /intent-filter  /receiver   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-21  Edit  project.property  android.library.reference.1=./libs/bee7-android-sdk-gamewall  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/bee7/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/", 
            "text": "Bee7\n\n\nPrerequisites\n\n\n\n\n\n\nFor Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\n\n\nFor iOS, Bee7's game wall currently supports only portrait orientation.\n\n\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import bee7\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here\n\n\nBee7\n:\n{\n    \ndebug\n:true,\n    \nkey\n:\nFE74A9C4-1288-4F6F-8D6E-C365699F2C72\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nExtra steps\n\n\nThe following step assumes you already registered at \nBee7\n, created a new \nAPP\n and activated it.\n\n\nSetup iOS\n\n\n\n\n\n\nModify \nInfo.plist\n, add URL Schemes:\n\n\nTarget -\n Info -\n URL Types\n:\n\n\n\n\nclick \"+\"\n\n\nfill \"URL Schemes\" with \"your bee7 scheme\"\n\n\n\n\n\n\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_bee7_scheme_\n with your \nbee7 scheme\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-21\n\n\n\n\nInitialize Bee7\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginBee7:init();\n\n\n\n\nUsing Bee7\n\n\nShow Game Wall\n\n\nsdkbox.PluginBee7:showGameWall()\n\n\n\n\nBee7 events\n\n\nThis allows you to catch \nBee7\n events so that you can perform operations after Bee7 events have occurred.\n\n\nsdkbox.PluginBee7:setListener(function(args)\n    dump(args)\n    if args.name == \nonAvailableChange\n then\n    elseif args.name == \nonVisibleChange\n then\n    elseif args.name == \nonGameWallWillClose\n then\n    elseif args.name == \nonGiveReward\n then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginBee7:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginBee7:showGameWall()\n\n\n\n\nListeners\n\n\nonAvailableChange(available)\n\n\n\n\nonVisibleChange(available)\n\n\n\n\nonGameWallWillClose()\n\n\n\n\nonGiveReward(bee7Points,\n              virtualCurrencyAmount,\n              appId,\n              cappedReward,\n              campaignId,\n              videoReward)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nBee7\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginBee7.framework\n\n\nBee7GWResources.bundle\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nMessageUI.framework\n\n\nCoreMedia.framework\n\n\nSystemConfiguration.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nlibsqlite3.dylib\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginBee7.framework/PluginBee7\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginBee7.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nCopy the \nbee7-android-sdk-gamewall\n directories from \nplugin/android/libs\n to your \nproject_root\n/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nMake sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:\n\n\n\n\n\n\nuses-sdk\n with targetSdkVersion set to the latest Android SDK version available, for example:\n\n\nxml\n\nuses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../\n\n\n\n\n\n\nThe flag \nandroid:hardwareAccelerated\n set to \ntrue\n for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):\n\n\nxml\n    \napplication android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\"\n\n    \n/application\n\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n\n  \nintent-filter\n\n      \naction android:name=\nandroid.intent.action.VIEW\n/\n\n      \ncategory android:name=\nandroid.intent.category.DEFAULT\n/\n\n      \ncategory android:name=\nandroid.intent.category.BROWSABLE\n/\n\n      \ndata android:scheme=\nyour_bee7_scheme\n android:host=\npublisher\n/\n\n  \n/intent-filter\n\n\n/activity\n\n\n\nservice\n  android:name=\ncom.bee7.sdk.service.RewardingService\n\n  android:process=\n:rewardingservice\n\n  android:enabled=\ntrue\n\n\n/service\n\n\n\nreceiver android:name=\ncom.bee7.sdk.publisher.RewardReceiver\n android:enabled=\ntrue\n android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.bee7.action.REWARD\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\nreceiver\n  android:name=\ncom.bee7.sdk.service.RewardingServiceReceiver\n\n  android:enabled=\ntrue\n\n  android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\nandroid.intent.action.USER_PRESENT\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-21\n\n\n\n\nEdit \nproject.property\n\n\nandroid.library.reference.1=./libs/bee7-android-sdk-gamewall\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Bee7 with Lua"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#bee7", 
            "text": "", 
            "title": "Bee7"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#prerequisites", 
            "text": "For Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.    For iOS, Bee7's game wall currently supports only portrait orientation.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import bee7", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here  Bee7 :\n{\n     debug :true,\n     key : FE74A9C4-1288-4F6F-8D6E-C365699F2C72 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#extra-steps", 
            "text": "The following step assumes you already registered at  Bee7 , created a new  APP  and activated it.  Setup iOS    Modify  Info.plist , add URL Schemes:  Target -  Info -  URL Types :   click \"+\"  fill \"URL Schemes\" with \"your bee7 scheme\"     Setup Android   Open  AndroidManifest.xml  and replace  _replace_with_your_bee7_scheme_  with your  bee7 scheme  Open  project.properties  and change target to  target=android-21   Initialize Bee7  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginBee7:init();  Using Bee7  Show Game Wall  sdkbox.PluginBee7:showGameWall()  Bee7 events  This allows you to catch  Bee7  events so that you can perform operations after Bee7 events have occurred.  sdkbox.PluginBee7:setListener(function(args)\n    dump(args)\n    if args.name ==  onAvailableChange  then\n    elseif args.name ==  onVisibleChange  then\n    elseif args.name ==  onGameWallWillClose  then\n    elseif args.name ==  onGiveReward  then\n    end\nend)", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginBee7:init()   initialize the plugin instance.   sdkbox.PluginBee7:showGameWall()  Listeners  onAvailableChange(available)  onVisibleChange(available)  onGameWallWillClose()  onGiveReward(bee7Points,\n              virtualCurrencyAmount,\n              appId,\n              cappedReward,\n              campaignId,\n              videoReward)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Bee7  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginBee7.framework  Bee7GWResources.bundle   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   MessageUI.framework  CoreMedia.framework  SystemConfiguration.framework  StoreKit.framework  AdSupport.framework  libsqlite3.dylib   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginBee7.framework/PluginBee7   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginBee7.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Copy the  bee7-android-sdk-gamewall  directories from  plugin/android/libs  to your  project_root /libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Make sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:    uses-sdk  with targetSdkVersion set to the latest Android SDK version available, for example:  xml uses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../    The flag  android:hardwareAccelerated  set to  true  for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):  xml\n     application android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\" \n     /application    There are also a few necessary meta-data tags that also need to be added:  activity \n   intent-filter \n       action android:name= android.intent.action.VIEW / \n       category android:name= android.intent.category.DEFAULT / \n       category android:name= android.intent.category.BROWSABLE / \n       data android:scheme= your_bee7_scheme  android:host= publisher / \n   /intent-filter  /activity  service\n  android:name= com.bee7.sdk.service.RewardingService \n  android:process= :rewardingservice \n  android:enabled= true  /service  receiver android:name= com.bee7.sdk.publisher.RewardReceiver  android:enabled= true  android:exported= true \n     intent-filter \n         action android:name= com.bee7.action.REWARD  / \n     /intent-filter  /receiver  receiver\n  android:name= com.bee7.sdk.service.RewardingServiceReceiver \n  android:enabled= true \n  android:exported= true \n     intent-filter \n         action android:name= android.intent.action.USER_PRESENT  / \n     /intent-filter  /receiver   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-21  Edit  project.property  android.library.reference.1=./libs/bee7-android-sdk-gamewall  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/bee7/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/", 
            "text": "Bee7\n\n\nPrerequisites\n\n\n\n\n\n\nFor Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\n\n\nFor iOS, Bee7's game wall currently supports only portrait orientation.\n\n\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import bee7\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here\n\n\nBee7\n:\n{\n    \ndebug\n:true,\n    \nkey\n:\nFE74A9C4-1288-4F6F-8D6E-C365699F2C72\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nExtra steps\n\n\nThe following step assumes you already registered at \nBee7\n, created a new \nAPP\n and activated it.\n\n\nSetup iOS\n\n\n\n\n\n\nModify \nInfo.plist\n, add URL Schemes:\n\n\nTarget -\n Info -\n URL Types\n:\n\n\n\n\nclick \"+\"\n\n\nfill \"URL Schemes\" with \"your bee7 scheme\"\n\n\n\n\n\n\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_bee7_scheme_\n with your \nbee7 scheme\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-21\n\n\n\n\nInitialize Bee7\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginBee7/PluginBee7.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginBee7::init();\n}\n\n\n\n\nUsing Bee7\n\n\nShow Game Wall\n\n\nsdkbox::PluginBee7::showGameWall();\n\n\n\n\nBee7 events\n\n\nThis allows you to catch \nBee7\n events so that you can perform operations after Bee7 events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::Bee7Listener\n and override the functions listed:\n\n\n\n\n#include \nPluginBee7/PluginBee7.h\n\nclass MyClass : public sdkbox::Bee7Listener\n{\n    void onAvailableChange(bool available) = 0;\n    void onVisibleChange(bool available) = 0;\n    void onGameWallWillClose() = 0;\n    void onGiveReward(long bee7Points,\n                      long virtualCurrencyAmount,\n                      const std::string\n appId,\n                      bool cappedReward,\n                      long campaignId,\n                      bool videoReward) = 0;\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginBee7::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( Bee7Listener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for bee7 events\n\n\n\n\nstatic Bee7Listener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void showGameWall ( ) ;\n\n\n\n\nListeners\n\n\nvoid onAvailableChange ( bool available );\n\n\n\n\nvoid onVisibleChange ( bool available );\n\n\n\n\nvoid onGameWallWillClose ( );\n\n\n\n\nvoid onGiveReward ( long bee7Points ,\n                    long virtualCurrencyAmount ,\n                    const std::string \n appId ,\n                    bool cappedReward ,\n                    long campaignId ,\n                    bool videoReward );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nBee7\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginBee7.framework\n\n\nBee7GWResources.bundle\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nMessageUI.framework\n\n\nCoreMedia.framework\n\n\nSystemConfiguration.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nlibsqlite3.dylib\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginBee7.framework/PluginBee7\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginBee7.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nCopy the \nbee7-android-sdk-gamewall\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nMake sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:\n\n\n\n\n\n\nuses-sdk\n with targetSdkVersion set to the latest Android SDK version available, for example:\n\n\nxml\n\nuses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../\n\n\n\n\n\n\nThe flag \nandroid:hardwareAccelerated\n set to \ntrue\n for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):\n\n\nxml\n    \napplication android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\"\n\n    \n/application\n\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n\n  \nintent-filter\n\n      \naction android:name=\nandroid.intent.action.VIEW\n/\n\n      \ncategory android:name=\nandroid.intent.category.DEFAULT\n/\n\n      \ncategory android:name=\nandroid.intent.category.BROWSABLE\n/\n\n      \ndata android:scheme=\nyour_bee7_scheme\n android:host=\npublisher\n/\n\n  \n/intent-filter\n\n\n/activity\n\n\n\nservice\n  android:name=\ncom.bee7.sdk.service.RewardingService\n\n  android:process=\n:rewardingservice\n\n  android:enabled=\ntrue\n\n\n/service\n\n\n\nreceiver android:name=\ncom.bee7.sdk.publisher.RewardReceiver\n android:enabled=\ntrue\n android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.bee7.action.REWARD\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\nreceiver\n  android:name=\ncom.bee7.sdk.service.RewardingServiceReceiver\n\n  android:enabled=\ntrue\n\n  android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\nandroid.intent.action.USER_PRESENT\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-21\n\n\n\n\nEdit \nproject.property\n\n\nandroid.library.reference.1=./libs/bee7-android-sdk-gamewall\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Bee7 with C++"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#bee7", 
            "text": "", 
            "title": "Bee7"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#prerequisites", 
            "text": "For Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.    For iOS, Bee7's game wall currently supports only portrait orientation.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import bee7", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here  Bee7 :\n{\n     debug :true,\n     key : FE74A9C4-1288-4F6F-8D6E-C365699F2C72 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#extra-steps", 
            "text": "The following step assumes you already registered at  Bee7 , created a new  APP  and activated it.  Setup iOS    Modify  Info.plist , add URL Schemes:  Target -  Info -  URL Types :   click \"+\"  fill \"URL Schemes\" with \"your bee7 scheme\"     Setup Android   Open  AndroidManifest.xml  and replace  _replace_with_your_bee7_scheme_  with your  bee7 scheme  Open  project.properties  and change target to  target=android-21   Initialize Bee7  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginBee7/PluginBee7.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginBee7::init();\n}  Using Bee7  Show Game Wall  sdkbox::PluginBee7::showGameWall();  Bee7 events  This allows you to catch  Bee7  events so that you can perform operations after Bee7 events have occurred.   Allow your class to extend  sdkbox::Bee7Listener  and override the functions listed:   #include  PluginBee7/PluginBee7.h \nclass MyClass : public sdkbox::Bee7Listener\n{\n    void onAvailableChange(bool available) = 0;\n    void onVisibleChange(bool available) = 0;\n    void onGameWallWillClose() = 0;\n    void onGiveReward(long bee7Points,\n                      long virtualCurrencyAmount,\n                      const std::string  appId,\n                      bool cappedReward,\n                      long campaignId,\n                      bool videoReward) = 0;\n};   Create a  listener  that handles callbacks:   sdkbox::PluginBee7::setListener(this);", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( Bee7Listener * listener ) ;   Set listener to listen for bee7 events   static Bee7Listener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void showGameWall ( ) ;  Listeners  void onAvailableChange ( bool available );  void onVisibleChange ( bool available );  void onGameWallWillClose ( );  void onGiveReward ( long bee7Points ,\n                    long virtualCurrencyAmount ,\n                    const std::string   appId ,\n                    bool cappedReward ,\n                    long campaignId ,\n                    bool videoReward );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Bee7  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginBee7.framework  Bee7GWResources.bundle   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   MessageUI.framework  CoreMedia.framework  SystemConfiguration.framework  StoreKit.framework  AdSupport.framework  libsqlite3.dylib   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginBee7.framework/PluginBee7", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginBee7.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Copy the  bee7-android-sdk-gamewall  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Make sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:    uses-sdk  with targetSdkVersion set to the latest Android SDK version available, for example:  xml uses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../    The flag  android:hardwareAccelerated  set to  true  for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):  xml\n     application android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\" \n     /application    There are also a few necessary meta-data tags that also need to be added:  activity \n   intent-filter \n       action android:name= android.intent.action.VIEW / \n       category android:name= android.intent.category.DEFAULT / \n       category android:name= android.intent.category.BROWSABLE / \n       data android:scheme= your_bee7_scheme  android:host= publisher / \n   /intent-filter  /activity  service\n  android:name= com.bee7.sdk.service.RewardingService \n  android:process= :rewardingservice \n  android:enabled= true  /service  receiver android:name= com.bee7.sdk.publisher.RewardReceiver  android:enabled= true  android:exported= true \n     intent-filter \n         action android:name= com.bee7.action.REWARD  / \n     /intent-filter  /receiver  receiver\n  android:name= com.bee7.sdk.service.RewardingServiceReceiver \n  android:enabled= true \n  android:exported= true \n     intent-filter \n         action android:name= android.intent.action.USER_PRESENT  / \n     /intent-filter  /receiver   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-21  Edit  project.property  android.library.reference.1=./libs/bee7-android-sdk-gamewall  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/bee7/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/bee7/v2-js/", 
            "text": "Bee7\n\n\nPrerequisites\n\n\n\n\n\n\nFor Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\n\n\nFor iOS, Bee7's game wall currently supports only portrait orientation.\n\n\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import bee7\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here\n\n\nBee7\n:\n{\n    \ndebug\n:true,\n    \nkey\n:\nFE74A9C4-1288-4F6F-8D6E-C365699F2C72\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nExtra steps\n\n\nThe following step assumes you already registered at \nBee7\n, created a new \nAPP\n and activated it.\n\n\nSetup iOS\n\n\n\n\n\n\nModify \nInfo.plist\n, add URL Schemes:\n\n\nTarget -\n Info -\n URL Types\n:\n\n\n\n\nclick \"+\"\n\n\nfill \"URL Schemes\" with \"your bee7 scheme\"\n\n\n\n\n\n\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_bee7_scheme_\n with your \nbee7 scheme\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-21\n\n\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Bee7 JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginBee7JS.hpp\n\n#include \nPluginBee7JSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginBee7JS);\nsc-\naddRegisterCallback(register_all_PluginBee7JS_helper);\n\n\n\n\nInitialize Bee7\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginBee7.init();\n\n\n\n\nUsing Bee7\n\n\nShow Game Wall\n\n\nsdkbox.PluginBee7.showGameWall();\n\n\n\n\nBee7 events\n\n\nThis allows you to catch \nBee7\n events so that you can perform operations after Bee7 events have occurred.\n\n\nsdkbox.PluginBee7.setListener({\n    onAvailableChange: function(available) {},\n    onVisibleChange: function(available) {},\n    onGameWallWillClose: function() {},\n    onGiveReward: function(bee7Points, virtualCurrencyAmount, appId, cappedReward,\n                           campaignId, videoReward) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginBee7.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginBee7.showGameWall();\n\n\n\n\nListeners\n\n\nonAvailableChange(available);\n\n\n\n\nonVisibleChange(available);\n\n\n\n\nonGameWallWillClose();\n\n\n\n\nonGiveReward(bee7Points,\n              virtualCurrencyAmount,\n              appId,\n              cappedReward,\n              campaignId,\n              videoReward);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nBee7\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginBee7.framework\n\n\nBee7GWResources.bundle\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nMessageUI.framework\n\n\nCoreMedia.framework\n\n\nSystemConfiguration.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nlibsqlite3.dylib\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginBee7.framework/PluginBee7\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginBee7.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nCopy the \nbee7-android-sdk-gamewall\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nMake sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:\n\n\n\n\n\n\nuses-sdk\n with targetSdkVersion set to the latest Android SDK version available, for example:\n\n\nxml\n\nuses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../\n\n\n\n\n\n\nThe flag \nandroid:hardwareAccelerated\n set to \ntrue\n for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):\n\n\nxml\n    \napplication android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\"\n\n    \n/application\n\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n\n  \nintent-filter\n\n      \naction android:name=\nandroid.intent.action.VIEW\n/\n\n      \ncategory android:name=\nandroid.intent.category.DEFAULT\n/\n\n      \ncategory android:name=\nandroid.intent.category.BROWSABLE\n/\n\n      \ndata android:scheme=\nyour_bee7_scheme\n android:host=\npublisher\n/\n\n  \n/intent-filter\n\n\n/activity\n\n\n\nservice\n  android:name=\ncom.bee7.sdk.service.RewardingService\n\n  android:process=\n:rewardingservice\n\n  android:enabled=\ntrue\n\n\n/service\n\n\n\nreceiver android:name=\ncom.bee7.sdk.publisher.RewardReceiver\n android:enabled=\ntrue\n android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.bee7.action.REWARD\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\nreceiver\n  android:name=\ncom.bee7.sdk.service.RewardingServiceReceiver\n\n  android:enabled=\ntrue\n\n  android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\nandroid.intent.action.USER_PRESENT\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-21\n\n\n\n\nEdit \nproject.property\n\n\nandroid.library.reference.1=./libs/bee7-android-sdk-gamewall\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Bee7 with Javascript"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#bee7", 
            "text": "", 
            "title": "Bee7"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#prerequisites", 
            "text": "For Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.    For iOS, Bee7's game wall currently supports only portrait orientation.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import bee7", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here  Bee7 :\n{\n     debug :true,\n     key : FE74A9C4-1288-4F6F-8D6E-C365699F2C72 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#extra-steps", 
            "text": "The following step assumes you already registered at  Bee7 , created a new  APP  and activated it.  Setup iOS    Modify  Info.plist , add URL Schemes:  Target -  Info -  URL Types :   click \"+\"  fill \"URL Schemes\" with \"your bee7 scheme\"     Setup Android   Open  AndroidManifest.xml  and replace  _replace_with_your_bee7_scheme_  with your  bee7 scheme  Open  project.properties  and change target to  target=android-21   Register Javascript Functions  You need to register all the Bee7 JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginBee7JS.hpp \n#include  PluginBee7JSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginBee7JS);\nsc- addRegisterCallback(register_all_PluginBee7JS_helper);  Initialize Bee7  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginBee7.init();  Using Bee7  Show Game Wall  sdkbox.PluginBee7.showGameWall();  Bee7 events  This allows you to catch  Bee7  events so that you can perform operations after Bee7 events have occurred.  sdkbox.PluginBee7.setListener({\n    onAvailableChange: function(available) {},\n    onVisibleChange: function(available) {},\n    onGameWallWillClose: function() {},\n    onGiveReward: function(bee7Points, virtualCurrencyAmount, appId, cappedReward,\n                           campaignId, videoReward) {}\n});", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginBee7.init();   initialize the plugin instance.   sdkbox.PluginBee7.showGameWall();  Listeners  onAvailableChange(available);  onVisibleChange(available);  onGameWallWillClose();  onGiveReward(bee7Points,\n              virtualCurrencyAmount,\n              appId,\n              cappedReward,\n              campaignId,\n              videoReward);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Bee7  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginBee7.framework  Bee7GWResources.bundle   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   MessageUI.framework  CoreMedia.framework  SystemConfiguration.framework  StoreKit.framework  AdSupport.framework  libsqlite3.dylib   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginBee7.framework/PluginBee7   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginBee7.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Copy the  bee7-android-sdk-gamewall  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Make sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:    uses-sdk  with targetSdkVersion set to the latest Android SDK version available, for example:  xml uses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../    The flag  android:hardwareAccelerated  set to  true  for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):  xml\n     application android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\" \n     /application    There are also a few necessary meta-data tags that also need to be added:  activity \n   intent-filter \n       action android:name= android.intent.action.VIEW / \n       category android:name= android.intent.category.DEFAULT / \n       category android:name= android.intent.category.BROWSABLE / \n       data android:scheme= your_bee7_scheme  android:host= publisher / \n   /intent-filter  /activity  service\n  android:name= com.bee7.sdk.service.RewardingService \n  android:process= :rewardingservice \n  android:enabled= true  /service  receiver android:name= com.bee7.sdk.publisher.RewardReceiver  android:enabled= true  android:exported= true \n     intent-filter \n         action android:name= com.bee7.action.REWARD  / \n     /intent-filter  /receiver  receiver\n  android:name= com.bee7.sdk.service.RewardingServiceReceiver \n  android:enabled= true \n  android:exported= true \n     intent-filter \n         action android:name= android.intent.action.USER_PRESENT  / \n     /intent-filter  /receiver   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-21  Edit  project.property  android.library.reference.1=./libs/bee7-android-sdk-gamewall  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/bee7/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/", 
            "text": "Bee7\n\n\nPrerequisites\n\n\n\n\n\n\nFor Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\n\n\nFor iOS, Bee7's game wall currently supports only portrait orientation.\n\n\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import bee7\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here\n\n\nBee7\n:\n{\n    \ndebug\n:true,\n    \nkey\n:\nFE74A9C4-1288-4F6F-8D6E-C365699F2C72\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nExtra steps\n\n\nThe following step assumes you already registered at \nBee7\n, created a new \nAPP\n and activated it.\n\n\nSetup iOS\n\n\n\n\n\n\nModify \nInfo.plist\n, add URL Schemes:\n\n\nTarget -\n Info -\n URL Types\n:\n\n\n\n\nclick \"+\"\n\n\nfill \"URL Schemes\" with \"your bee7 scheme\"\n\n\n\n\n\n\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_bee7_scheme_\n with your \nbee7 scheme\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-21\n\n\n\n\nInitialize Bee7\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginBee7:init();\n\n\n\n\nUsing Bee7\n\n\nShow Game Wall\n\n\nsdkbox.PluginBee7:showGameWall()\n\n\n\n\nBee7 events\n\n\nThis allows you to catch \nBee7\n events so that you can perform operations after Bee7 events have occurred.\n\n\nsdkbox.PluginBee7:setListener(function(args)\n    dump(args)\n    if args.name == \nonAvailableChange\n then\n    elseif args.name == \nonVisibleChange\n then\n    elseif args.name == \nonGameWallWillClose\n then\n    elseif args.name == \nonGiveReward\n then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginBee7:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginBee7:showGameWall()\n\n\n\n\nListeners\n\n\nonAvailableChange(available)\n\n\n\n\nonVisibleChange(available)\n\n\n\n\nonGameWallWillClose()\n\n\n\n\nonGiveReward(bee7Points,\n              virtualCurrencyAmount,\n              appId,\n              cappedReward,\n              campaignId,\n              videoReward)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nBee7\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginBee7.framework\n\n\nBee7GWResources.bundle\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nMessageUI.framework\n\n\nCoreMedia.framework\n\n\nSystemConfiguration.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nlibsqlite3.dylib\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginBee7.framework/PluginBee7\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginBee7.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nCopy the \nbee7-android-sdk-gamewall\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nMake sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:\n\n\n\n\n\n\nuses-sdk\n with targetSdkVersion set to the latest Android SDK version available, for example:\n\n\nxml\n\nuses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../\n\n\n\n\n\n\nThe flag \nandroid:hardwareAccelerated\n set to \ntrue\n for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):\n\n\nxml\n    \napplication android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\"\n\n    \n/application\n\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n\n  \nintent-filter\n\n      \naction android:name=\nandroid.intent.action.VIEW\n/\n\n      \ncategory android:name=\nandroid.intent.category.DEFAULT\n/\n\n      \ncategory android:name=\nandroid.intent.category.BROWSABLE\n/\n\n      \ndata android:scheme=\nyour_bee7_scheme\n android:host=\npublisher\n/\n\n  \n/intent-filter\n\n\n/activity\n\n\n\nservice\n  android:name=\ncom.bee7.sdk.service.RewardingService\n\n  android:process=\n:rewardingservice\n\n  android:enabled=\ntrue\n\n\n/service\n\n\n\nreceiver android:name=\ncom.bee7.sdk.publisher.RewardReceiver\n android:enabled=\ntrue\n android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.bee7.action.REWARD\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\nreceiver\n  android:name=\ncom.bee7.sdk.service.RewardingServiceReceiver\n\n  android:enabled=\ntrue\n\n  android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\nandroid.intent.action.USER_PRESENT\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-21\n\n\n\n\nEdit \nproject.property\n\n\nandroid.library.reference.1=./libs/bee7-android-sdk-gamewall\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Bee7 with Lua"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#bee7", 
            "text": "", 
            "title": "Bee7"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#prerequisites", 
            "text": "For Android, Bee7 requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.    For iOS, Bee7's game wall currently supports only portrait orientation.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Bee7 plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import bee7", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Bee7 configuration you can enable/disable debug mode for Bee7 here  Bee7 :\n{\n     debug :true,\n     key : FE74A9C4-1288-4F6F-8D6E-C365699F2C72 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#extra-steps", 
            "text": "The following step assumes you already registered at  Bee7 , created a new  APP  and activated it.  Setup iOS    Modify  Info.plist , add URL Schemes:  Target -  Info -  URL Types :   click \"+\"  fill \"URL Schemes\" with \"your bee7 scheme\"     Setup Android   Open  AndroidManifest.xml  and replace  _replace_with_your_bee7_scheme_  with your  bee7 scheme  Open  project.properties  and change target to  target=android-21   Initialize Bee7  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginBee7:init();  Using Bee7  Show Game Wall  sdkbox.PluginBee7:showGameWall()  Bee7 events  This allows you to catch  Bee7  events so that you can perform operations after Bee7 events have occurred.  sdkbox.PluginBee7:setListener(function(args)\n    dump(args)\n    if args.name ==  onAvailableChange  then\n    elseif args.name ==  onVisibleChange  then\n    elseif args.name ==  onGameWallWillClose  then\n    elseif args.name ==  onGiveReward  then\n    end\nend)", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginBee7:init()   initialize the plugin instance.   sdkbox.PluginBee7:showGameWall()  Listeners  onAvailableChange(available)  onVisibleChange(available)  onGameWallWillClose()  onGiveReward(bee7Points,\n              virtualCurrencyAmount,\n              appId,\n              cappedReward,\n              campaignId,\n              videoReward)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Bee7  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginBee7.framework  Bee7GWResources.bundle   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   MessageUI.framework  CoreMedia.framework  SystemConfiguration.framework  StoreKit.framework  AdSupport.framework  libsqlite3.dylib   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginBee7.framework/PluginBee7   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginBee7.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Copy the  bee7-android-sdk-gamewall  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Make sure that you have one of the two settings below, for proper function of the game wall\u2019s video component:    uses-sdk  with targetSdkVersion set to the latest Android SDK version available, for example:  xml uses-sdk android:minSdkVersion=\"9\" android:targetSdkVersion=\"23\" .../    The flag  android:hardwareAccelerated  set to  true  for your application (or for the activity that\n    will display the game wall \u2013 that is a custom main activity):  xml\n     application android:label=\"@string/app_name\"\n             android:icon=\"@drawable/icon\"\n             android:hardwareAccelerated=\"true\" \n     /application    There are also a few necessary meta-data tags that also need to be added:  activity \n   intent-filter \n       action android:name= android.intent.action.VIEW / \n       category android:name= android.intent.category.DEFAULT / \n       category android:name= android.intent.category.BROWSABLE / \n       data android:scheme= your_bee7_scheme  android:host= publisher / \n   /intent-filter  /activity  service\n  android:name= com.bee7.sdk.service.RewardingService \n  android:process= :rewardingservice \n  android:enabled= true  /service  receiver android:name= com.bee7.sdk.publisher.RewardReceiver  android:enabled= true  android:exported= true \n     intent-filter \n         action android:name= com.bee7.action.REWARD  / \n     /intent-filter  /receiver  receiver\n  android:name= com.bee7.sdk.service.RewardingServiceReceiver \n  android:enabled= true \n  android:exported= true \n     intent-filter \n         action android:name= android.intent.action.USER_PRESENT  / \n     /intent-filter  /receiver   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginBee7\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginbee7)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-21  Edit  project.property  android.library.reference.1=./libs/bee7-android-sdk-gamewall  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/bee7/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # bee7\n-keep public class com.bee7.** { *; }\n-dontwarn com.bee7.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::ChartboostListener\n\n\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n    void onChartboostCached(const std::string\n name);\n    bool onChartboostShouldDisplay(const std::string\n name);\n    void onChartboostDisplay(const std::string\n name);\n    void onChartboostDismiss(const std::string\n name);\n    void onChartboostClose(const std::string\n name);\n    void onChartboostClick(const std::string\n name);\n    void onChartboostReward(const std::string\n name, int reward);\n    void onChartboostFailedToLoad(const std::string\n name, sdkbox::CB_LoadError e);\n    void onChartboostFailToRecordClick(const std::string\n name, sdkbox::CB_ClickError e);\n    void onChartboostConfirmation();\n    void onChartboostCompleteStore();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginChartboost::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nstatic void setListener ( ChartboostListener * listener ) ;\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nstatic ChartboostListener * getListener ( ) ;\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nstatic bool isAnyViewVisible ( ) ;\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nstatic bool isAvailable ( const std::string \n name ) ;\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nstatic void cache ( const std::string \n name ) ;\n\n\n\n\nstatic void setAutoCacheAds ( bool shouldCache ) ;\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nstatic bool getAutoCacheAds ( ) ;\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nstatic void closeImpression ( ) ;\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nstatic void setStatusBarBehavior ( CB_StatusBarBehavior behavior ) ;\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nstatic void didPassAgeGate ( bool pass ) ;\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nstatic void setShouldPauseClickForConfirmation ( bool shouldPause ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nstatic bool handleOpenURL ( const std::string \n url ,\n                            const std::string \n sourceApp ) ;\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nstatic void setCustomID ( const std::string \n customID ) ;\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nstatic std::string getCustomID ( ) ;\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nstatic void setShouldRequestInterstitialsInFirstSession ( bool shouldRequest ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nstatic void setShouldDisplayLoadingViewForMoreApps ( bool shouldDisplay ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nstatic void setShouldPrefetchVideoContent ( bool shouldPrefetch ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nvoid onChartboostCached ( const std::string \n name );\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nbool onChartboostShouldDisplay ( const std::string \n name );\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nvoid onChartboostDisplay ( const std::string \n name );\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nvoid onChartboostDismiss ( const std::string \n name );\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nvoid onChartboostClose ( const std::string \n name );\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nvoid onChartboostClick ( const std::string \n name );\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nvoid onChartboostReward ( const std::string \n name , int reward );\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nvoid onChartboostFailedToLoad ( const std::string \n name , CB_LoadError e );\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nvoid onChartboostFailToRecordClick ( const std::string \n name ,\n                                     CB_ClickError e );\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nvoid onChartboostConfirmation ( );\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nvoid onChartboostCompleteStore ( );\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Chartboost with C++"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#usage", 
            "text": "Initialize Chartboost  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginChartboost/PluginChartboost.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::ChartboostListener   #include  PluginChartboost/PluginChartboost.h \nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n    void onChartboostCached(const std::string  name);\n    bool onChartboostShouldDisplay(const std::string  name);\n    void onChartboostDisplay(const std::string  name);\n    void onChartboostDismiss(const std::string  name);\n    void onChartboostClose(const std::string  name);\n    void onChartboostClick(const std::string  name);\n    void onChartboostReward(const std::string  name, int reward);\n    void onChartboostFailedToLoad(const std::string  name, sdkbox::CB_LoadError e);\n    void onChartboostFailToRecordClick(const std::string  name, sdkbox::CB_ClickError e);\n    void onChartboostConfirmation();\n    void onChartboostCompleteStore();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginChartboost::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   show ad by specifying ad name.   static void setListener ( ChartboostListener * listener ) ;   creates the an optional listener.   static ChartboostListener * getListener ( ) ;  static void removeListener ( ) ;   removed the listener.   static bool isAnyViewVisible ( ) ;   check to see if any views are visible.   static bool isAvailable ( const std::string   name ) ;   is the specified ad available?   static void cache ( const std::string   name ) ;  static void setAutoCacheAds ( bool shouldCache ) ;   set to enable and disable the auto cache feature (Enabled by default).   static bool getAutoCacheAds ( ) ;   get the current auto cache behavior (Enabled by default).   static void closeImpression ( ) ;   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   static void setStatusBarBehavior ( CB_StatusBarBehavior behavior ) ;   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   static void didPassAgeGate ( bool pass ) ;   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   static void setShouldPauseClickForConfirmation ( bool shouldPause ) ;   decide if Chartboost SDK should block for an age gate.   static bool handleOpenURL ( const std::string   url ,\n                            const std::string   sourceApp ) ;   opens a \"deep link\" URL for a Chartboost Custom Scheme.   static void setCustomID ( const std::string   customID ) ;   set a custom identifier to send in the POST body for all Chartboost API server requests.   static std::string getCustomID ( ) ;   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   static void setShouldRequestInterstitialsInFirstSession ( bool shouldRequest ) ;   decide if Chartboost SDK should show interstitials in the first session.   static void setShouldDisplayLoadingViewForMoreApps ( bool shouldDisplay ) ;   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   static void setShouldPrefetchVideoContent ( bool shouldPrefetch ) ;   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  void onChartboostCached ( const std::string   name );   there is cached content   bool onChartboostShouldDisplay ( const std::string   name );   should Chartboost display   void onChartboostDisplay ( const std::string   name );   Charboost ad has displayed   void onChartboostDismiss ( const std::string   name );   Chartboost ad has been dismissed   void onChartboostClose ( const std::string   name );   Chartboost is not running   void onChartboostClick ( const std::string   name );   Chartboost ad was clicked on   void onChartboostReward ( const std::string   name , int reward );   Chartboost reward was given   void onChartboostFailedToLoad ( const std::string   name , CB_LoadError e );   Chartboost failed to load   void onChartboostFailToRecordClick ( const std::string   name ,\n                                     CB_ClickError e );   Chartboost failed to record click   void onChartboostConfirmation ( );   Chartboost confirmation   void onChartboostCompleteStore ( );   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Chartboost JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginChartboostJS.hpp\n\n#include \nPluginChartboostJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginChartboostJS);\nsc-\naddRegisterCallback(register_all_PluginChartboostJS_helper);\n\n\n\n\nInitialize Chartboost\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show(\nDefault\n);\n// To use customized location\nsdkbox.PluginChartboost.show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log(\nonChartboostCached \n + name) },\n    onChartboostShouldDisplay : function (name) { cc.log(\nonChartboostShouldDisplay \n + name) },\n    onChartboostDisplay : function (name) { cc.log(\nonChartboostDisplay \n + name) },\n    onChartboostDismiss : function (name) { cc.log(\nonChartboostDismiss \n + name) },\n    onChartboostClose : function (name) { cc.log(\nonChartboostClose \n + name) },\n    onChartboostClick : function (name) { cc.log(\nonChartboostClick \n + name) },\n    onChartboostReward : function (name, reward) { cc.log(\nonChartboostReward \n + name + \n reward \n + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log(\nonChartboostFailedToLoad \n + name + \n load error \n + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log(\nonChartboostFailToRecordClick \n + name + \n click error \n + e) },\n    onChartboostConfirmation : function () { cc.log(\nonChartboostConfirmation\n) },\n    onChartboostCompleteStore : function () { cc.log(\nonChartboostCompleteStore\n) },\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost.show(name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost.setListener(listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost.isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost.isAvailable(name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost.cache(name);\n\n\n\n\nsdkbox.PluginChartboost.setAutoCacheAds(shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost.setStatusBarBehavior(behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost.didPassAgeGate(pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost.handleOpenURL(url, sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost.setCustomID(customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost.getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nsdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nonChartboostCached(name);\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay(name);\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay(name);\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss(name);\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose(name);\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick(name);\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward(name, reward);\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad(name, e);\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick(name, e);\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation();\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore();\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Chartboost with Javascript"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Chartboost JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginChartboostJS.hpp \n#include  PluginChartboostJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginChartboostJS);\nsc- addRegisterCallback(register_all_PluginChartboostJS_helper);  Initialize Chartboost  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginChartboost.init();  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show( Default );\n// To use customized location\nsdkbox.PluginChartboost.show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log( onChartboostCached   + name) },\n    onChartboostShouldDisplay : function (name) { cc.log( onChartboostShouldDisplay   + name) },\n    onChartboostDisplay : function (name) { cc.log( onChartboostDisplay   + name) },\n    onChartboostDismiss : function (name) { cc.log( onChartboostDismiss   + name) },\n    onChartboostClose : function (name) { cc.log( onChartboostClose   + name) },\n    onChartboostClick : function (name) { cc.log( onChartboostClick   + name) },\n    onChartboostReward : function (name, reward) { cc.log( onChartboostReward   + name +   reward   + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log( onChartboostFailedToLoad   + name +   load error   + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log( onChartboostFailToRecordClick   + name +   click error   + e) },\n    onChartboostConfirmation : function () { cc.log( onChartboostConfirmation ) },\n    onChartboostCompleteStore : function () { cc.log( onChartboostCompleteStore ) },\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost.init();   initialize the plugin instance.   sdkbox.PluginChartboost.show(name);   show ad by specifying ad name.   sdkbox.PluginChartboost.setListener(listener);   creates the an optional listener.   sdkbox.PluginChartboost.isAnyViewVisible();   check to see if any views are visible.   sdkbox.PluginChartboost.isAvailable(name);   is the specified ad available?   sdkbox.PluginChartboost.cache(name);  sdkbox.PluginChartboost.setAutoCacheAds(shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost.getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost.closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost.setStatusBarBehavior(behavior);   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost.didPassAgeGate(pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   sdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost.handleOpenURL(url, sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost.setCustomID(customID);   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost.getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   sdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   sdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  onChartboostCached(name);   there is cached content   onChartboostShouldDisplay(name);   should Chartboost display   onChartboostDisplay(name);   Charboost ad has displayed   onChartboostDismiss(name);   Chartboost ad has been dismissed   onChartboostClose(name);   Chartboost is not running   onChartboostClick(name);   Chartboost ad was clicked on   onChartboostReward(name, reward);   Chartboost reward was given   onChartboostFailedToLoad(name, e);   Chartboost failed to load   onChartboostFailToRecordClick(name, e);   Chartboost failed to record click   onChartboostConfirmation();   Chartboost confirmation   onChartboostCompleteStore();   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginChartboost:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show(\nDefault\n)\n// To use customized location\nsdkbox.PluginChartboost:show(\nyour_ad_name\n)\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost:setListener(function(args)\n    if \nonChartboostCached\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCached\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostShouldDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostShouldDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDismiss\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDismiss\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClose\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClose\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClick\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClick\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostReward\n == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print(\nonChartboostReward\n)\n        print(\nname:\n, args.name)\n        print(\nreward:\n, reward)\n    elseif \nonChartboostFailedToLoad\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailedToLoad\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostFailToRecordClick\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailToRecordClick\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostConfirmation\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostConfirmation\n)\n    elseif \nonChartboostCompleteStore\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCompleteStore\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost:show(name)\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost:setListener(listener)\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost:isAnyViewVisible()\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost:isAvailable(name)\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost:cache(name)\n\n\n\n\nsdkbox.PluginChartboost:setAutoCacheAds(shouldCache)\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:getAutoCacheAds()\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:closeImpression()\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost:setStatusBarBehavior(behavior)\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost:didPassAgeGate(pass)\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause)\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost:handleOpenURL(url, sourceApp)\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost:setCustomID(customID)\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost:getCustomID()\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nsdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest)\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay)\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch)\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nonChartboostCached(name)\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay(name)\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay(name)\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss(name)\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose(name)\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick(name)\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward(name, reward)\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad(name, e)\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick(name, e)\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation()\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore()\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Chartboost with Lua"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#usage", 
            "text": "Initialize Chartboost   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginChartboost:init()  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show( Default )\n// To use customized location\nsdkbox.PluginChartboost:show( your_ad_name )  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost:setListener(function(args)\n    if  onChartboostCached  == args.func then\n        local name = args.name -- string\n        print( onChartboostCached )\n        print( name: , args.name)\n    elseif  onChartboostShouldDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostShouldDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDismiss  == args.func then\n        local name = args.name -- string\n        print( onChartboostDismiss )\n        print( name: , args.name)\n    elseif  onChartboostClose  == args.func then\n        local name = args.name -- string\n        print( onChartboostClose )\n        print( name: , args.name)\n    elseif  onChartboostClick  == args.func then\n        local name = args.name -- string\n        print( onChartboostClick )\n        print( name: , args.name)\n    elseif  onChartboostReward  == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print( onChartboostReward )\n        print( name: , args.name)\n        print( reward: , reward)\n    elseif  onChartboostFailedToLoad  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailedToLoad )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostFailToRecordClick  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailToRecordClick )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostConfirmation  == args.func then\n        local name = args.name -- string\n        print( onChartboostConfirmation )\n    elseif  onChartboostCompleteStore  == args.func then\n        local name = args.name -- string\n        print( onChartboostCompleteStore )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost:init()   initialize the plugin instance.   sdkbox.PluginChartboost:show(name)   show ad by specifying ad name.   sdkbox.PluginChartboost:setListener(listener)   creates the an optional listener.   sdkbox.PluginChartboost:isAnyViewVisible()   check to see if any views are visible.   sdkbox.PluginChartboost:isAvailable(name)   is the specified ad available?   sdkbox.PluginChartboost:cache(name)  sdkbox.PluginChartboost:setAutoCacheAds(shouldCache)   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost:getAutoCacheAds()   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost:closeImpression()   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost:setStatusBarBehavior(behavior)   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost:didPassAgeGate(pass)   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   sdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause)   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost:handleOpenURL(url, sourceApp)   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost:setCustomID(customID)   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost:getCustomID()   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   sdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest)   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay)   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   sdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch)   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  onChartboostCached(name)   there is cached content   onChartboostShouldDisplay(name)   should Chartboost display   onChartboostDisplay(name)   Charboost ad has displayed   onChartboostDismiss(name)   Chartboost ad has been dismissed   onChartboostClose(name)   Chartboost is not running   onChartboostClick(name)   Chartboost ad was clicked on   onChartboostReward(name, reward)   Chartboost reward was given   onChartboostFailedToLoad(name, e)   Chartboost failed to load   onChartboostFailToRecordClick(name, e)   Chartboost failed to record click   onChartboostConfirmation()   Chartboost confirmation   onChartboostCompleteStore()   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::ChartboostListener\n\n\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n    void onChartboostCached(const std::string\n name);\n    bool onChartboostShouldDisplay(const std::string\n name);\n    void onChartboostDisplay(const std::string\n name);\n    void onChartboostDismiss(const std::string\n name);\n    void onChartboostClose(const std::string\n name);\n    void onChartboostClick(const std::string\n name);\n    void onChartboostReward(const std::string\n name, int reward);\n    void onChartboostFailedToLoad(const std::string\n name, sdkbox::CB_LoadError e);\n    void onChartboostFailToRecordClick(const std::string\n name, sdkbox::CB_ClickError e);\n    void onChartboostConfirmation();\n    void onChartboostCompleteStore();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginChartboost::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nstatic void setListener ( ChartboostListener * listener ) ;\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nstatic ChartboostListener * getListener ( ) ;\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nstatic bool isAnyViewVisible ( ) ;\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nstatic bool isAvailable ( const std::string \n name ) ;\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nstatic void cache ( const std::string \n name ) ;\n\n\n\n\nstatic void setAutoCacheAds ( bool shouldCache ) ;\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nstatic bool getAutoCacheAds ( ) ;\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nstatic void closeImpression ( ) ;\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nstatic void setStatusBarBehavior ( CB_StatusBarBehavior behavior ) ;\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nstatic void didPassAgeGate ( bool pass ) ;\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nstatic void setShouldPauseClickForConfirmation ( bool shouldPause ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nstatic bool handleOpenURL ( const std::string \n url ,\n                            const std::string \n sourceApp ) ;\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nstatic void setCustomID ( const std::string \n customID ) ;\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nstatic std::string getCustomID ( ) ;\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nstatic void setShouldRequestInterstitialsInFirstSession ( bool shouldRequest ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nstatic void setShouldDisplayLoadingViewForMoreApps ( bool shouldDisplay ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nstatic void setShouldPrefetchVideoContent ( bool shouldPrefetch ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nvoid onChartboostCached ( const std::string \n name );\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nbool onChartboostShouldDisplay ( const std::string \n name );\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nvoid onChartboostDisplay ( const std::string \n name );\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nvoid onChartboostDismiss ( const std::string \n name );\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nvoid onChartboostClose ( const std::string \n name );\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nvoid onChartboostClick ( const std::string \n name );\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nvoid onChartboostReward ( const std::string \n name , int reward );\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nvoid onChartboostFailedToLoad ( const std::string \n name , CB_LoadError e );\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nvoid onChartboostFailToRecordClick ( const std::string \n name ,\n                                     CB_ClickError e );\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nvoid onChartboostConfirmation ( );\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nvoid onChartboostCompleteStore ( );\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Chartboost with C++"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#usage", 
            "text": "Initialize Chartboost  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginChartboost/PluginChartboost.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::ChartboostListener   #include  PluginChartboost/PluginChartboost.h \nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n    void onChartboostCached(const std::string  name);\n    bool onChartboostShouldDisplay(const std::string  name);\n    void onChartboostDisplay(const std::string  name);\n    void onChartboostDismiss(const std::string  name);\n    void onChartboostClose(const std::string  name);\n    void onChartboostClick(const std::string  name);\n    void onChartboostReward(const std::string  name, int reward);\n    void onChartboostFailedToLoad(const std::string  name, sdkbox::CB_LoadError e);\n    void onChartboostFailToRecordClick(const std::string  name, sdkbox::CB_ClickError e);\n    void onChartboostConfirmation();\n    void onChartboostCompleteStore();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginChartboost::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   show ad by specifying ad name.   static void setListener ( ChartboostListener * listener ) ;   creates the an optional listener.   static ChartboostListener * getListener ( ) ;  static void removeListener ( ) ;   removed the listener.   static bool isAnyViewVisible ( ) ;   check to see if any views are visible.   static bool isAvailable ( const std::string   name ) ;   is the specified ad available?   static void cache ( const std::string   name ) ;  static void setAutoCacheAds ( bool shouldCache ) ;   set to enable and disable the auto cache feature (Enabled by default).   static bool getAutoCacheAds ( ) ;   get the current auto cache behavior (Enabled by default).   static void closeImpression ( ) ;   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   static void setStatusBarBehavior ( CB_StatusBarBehavior behavior ) ;   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   static void didPassAgeGate ( bool pass ) ;   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   static void setShouldPauseClickForConfirmation ( bool shouldPause ) ;   decide if Chartboost SDK should block for an age gate.   static bool handleOpenURL ( const std::string   url ,\n                            const std::string   sourceApp ) ;   opens a \"deep link\" URL for a Chartboost Custom Scheme.   static void setCustomID ( const std::string   customID ) ;   set a custom identifier to send in the POST body for all Chartboost API server requests.   static std::string getCustomID ( ) ;   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   static void setShouldRequestInterstitialsInFirstSession ( bool shouldRequest ) ;   decide if Chartboost SDK should show interstitials in the first session.   static void setShouldDisplayLoadingViewForMoreApps ( bool shouldDisplay ) ;   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   static void setShouldPrefetchVideoContent ( bool shouldPrefetch ) ;   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  void onChartboostCached ( const std::string   name );   there is cached content   bool onChartboostShouldDisplay ( const std::string   name );   should Chartboost display   void onChartboostDisplay ( const std::string   name );   Charboost ad has displayed   void onChartboostDismiss ( const std::string   name );   Chartboost ad has been dismissed   void onChartboostClose ( const std::string   name );   Chartboost is not running   void onChartboostClick ( const std::string   name );   Chartboost ad was clicked on   void onChartboostReward ( const std::string   name , int reward );   Chartboost reward was given   void onChartboostFailedToLoad ( const std::string   name , CB_LoadError e );   Chartboost failed to load   void onChartboostFailToRecordClick ( const std::string   name ,\n                                     CB_ClickError e );   Chartboost failed to record click   void onChartboostConfirmation ( );   Chartboost confirmation   void onChartboostCompleteStore ( );   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Chartboost JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginChartboostJS.hpp\n\n#include \nPluginChartboostJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginChartboostJS);\nsc-\naddRegisterCallback(register_all_PluginChartboostJS_helper);\n\n\n\n\nInitialize Chartboost\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show(\nDefault\n);\n// To use customized location\nsdkbox.PluginChartboost.show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log(\nonChartboostCached \n + name) },\n    onChartboostShouldDisplay : function (name) { cc.log(\nonChartboostShouldDisplay \n + name) },\n    onChartboostDisplay : function (name) { cc.log(\nonChartboostDisplay \n + name) },\n    onChartboostDismiss : function (name) { cc.log(\nonChartboostDismiss \n + name) },\n    onChartboostClose : function (name) { cc.log(\nonChartboostClose \n + name) },\n    onChartboostClick : function (name) { cc.log(\nonChartboostClick \n + name) },\n    onChartboostReward : function (name, reward) { cc.log(\nonChartboostReward \n + name + \n reward \n + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log(\nonChartboostFailedToLoad \n + name + \n load error \n + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log(\nonChartboostFailToRecordClick \n + name + \n click error \n + e) },\n    onChartboostConfirmation : function () { cc.log(\nonChartboostConfirmation\n) },\n    onChartboostCompleteStore : function () { cc.log(\nonChartboostCompleteStore\n) },\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost.show(name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost.setListener(listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost.isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost.isAvailable(name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost.cache(name);\n\n\n\n\nsdkbox.PluginChartboost.setAutoCacheAds(shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost.setStatusBarBehavior(behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost.didPassAgeGate(pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost.handleOpenURL(url, sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost.setCustomID(customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost.getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nsdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nonChartboostCached(name);\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay(name);\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay(name);\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss(name);\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose(name);\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick(name);\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward(name, reward);\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad(name, e);\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick(name, e);\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation();\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore();\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Chartboost with Javascript"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Chartboost JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginChartboostJS.hpp \n#include  PluginChartboostJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginChartboostJS);\nsc- addRegisterCallback(register_all_PluginChartboostJS_helper);  Initialize Chartboost  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginChartboost.init();  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show( Default );\n// To use customized location\nsdkbox.PluginChartboost.show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log( onChartboostCached   + name) },\n    onChartboostShouldDisplay : function (name) { cc.log( onChartboostShouldDisplay   + name) },\n    onChartboostDisplay : function (name) { cc.log( onChartboostDisplay   + name) },\n    onChartboostDismiss : function (name) { cc.log( onChartboostDismiss   + name) },\n    onChartboostClose : function (name) { cc.log( onChartboostClose   + name) },\n    onChartboostClick : function (name) { cc.log( onChartboostClick   + name) },\n    onChartboostReward : function (name, reward) { cc.log( onChartboostReward   + name +   reward   + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log( onChartboostFailedToLoad   + name +   load error   + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log( onChartboostFailToRecordClick   + name +   click error   + e) },\n    onChartboostConfirmation : function () { cc.log( onChartboostConfirmation ) },\n    onChartboostCompleteStore : function () { cc.log( onChartboostCompleteStore ) },\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost.init();   initialize the plugin instance.   sdkbox.PluginChartboost.show(name);   show ad by specifying ad name.   sdkbox.PluginChartboost.setListener(listener);   creates the an optional listener.   sdkbox.PluginChartboost.isAnyViewVisible();   check to see if any views are visible.   sdkbox.PluginChartboost.isAvailable(name);   is the specified ad available?   sdkbox.PluginChartboost.cache(name);  sdkbox.PluginChartboost.setAutoCacheAds(shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost.getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost.closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost.setStatusBarBehavior(behavior);   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost.didPassAgeGate(pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   sdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost.handleOpenURL(url, sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost.setCustomID(customID);   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost.getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   sdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   sdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  onChartboostCached(name);   there is cached content   onChartboostShouldDisplay(name);   should Chartboost display   onChartboostDisplay(name);   Charboost ad has displayed   onChartboostDismiss(name);   Chartboost ad has been dismissed   onChartboostClose(name);   Chartboost is not running   onChartboostClick(name);   Chartboost ad was clicked on   onChartboostReward(name, reward);   Chartboost reward was given   onChartboostFailedToLoad(name, e);   Chartboost failed to load   onChartboostFailToRecordClick(name, e);   Chartboost failed to record click   onChartboostConfirmation();   Chartboost confirmation   onChartboostCompleteStore();   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginChartboost:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show(\nDefault\n)\n// To use customized location\nsdkbox.PluginChartboost:show(\nyour_ad_name\n)\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost:setListener(function(args)\n    if \nonChartboostCached\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCached\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostShouldDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostShouldDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDismiss\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDismiss\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClose\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClose\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClick\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClick\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostReward\n == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print(\nonChartboostReward\n)\n        print(\nname:\n, args.name)\n        print(\nreward:\n, reward)\n    elseif \nonChartboostFailedToLoad\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailedToLoad\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostFailToRecordClick\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailToRecordClick\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostConfirmation\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostConfirmation\n)\n    elseif \nonChartboostCompleteStore\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCompleteStore\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost:show(name)\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost:setListener(listener)\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost:isAnyViewVisible()\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost:isAvailable(name)\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost:cache(name)\n\n\n\n\nsdkbox.PluginChartboost:setAutoCacheAds(shouldCache)\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:getAutoCacheAds()\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:closeImpression()\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost:setStatusBarBehavior(behavior)\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost:didPassAgeGate(pass)\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause)\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost:handleOpenURL(url, sourceApp)\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost:setCustomID(customID)\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost:getCustomID()\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nsdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest)\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay)\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch)\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nonChartboostCached(name)\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay(name)\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay(name)\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss(name)\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose(name)\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick(name)\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward(name, reward)\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad(name, e)\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick(name, e)\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation()\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore()\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Chartboost with Lua"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#usage", 
            "text": "Initialize Chartboost   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginChartboost:init()  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show( Default )\n// To use customized location\nsdkbox.PluginChartboost:show( your_ad_name )  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost:setListener(function(args)\n    if  onChartboostCached  == args.func then\n        local name = args.name -- string\n        print( onChartboostCached )\n        print( name: , args.name)\n    elseif  onChartboostShouldDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostShouldDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDismiss  == args.func then\n        local name = args.name -- string\n        print( onChartboostDismiss )\n        print( name: , args.name)\n    elseif  onChartboostClose  == args.func then\n        local name = args.name -- string\n        print( onChartboostClose )\n        print( name: , args.name)\n    elseif  onChartboostClick  == args.func then\n        local name = args.name -- string\n        print( onChartboostClick )\n        print( name: , args.name)\n    elseif  onChartboostReward  == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print( onChartboostReward )\n        print( name: , args.name)\n        print( reward: , reward)\n    elseif  onChartboostFailedToLoad  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailedToLoad )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostFailToRecordClick  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailToRecordClick )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostConfirmation  == args.func then\n        local name = args.name -- string\n        print( onChartboostConfirmation )\n    elseif  onChartboostCompleteStore  == args.func then\n        local name = args.name -- string\n        print( onChartboostCompleteStore )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost:init()   initialize the plugin instance.   sdkbox.PluginChartboost:show(name)   show ad by specifying ad name.   sdkbox.PluginChartboost:setListener(listener)   creates the an optional listener.   sdkbox.PluginChartboost:isAnyViewVisible()   check to see if any views are visible.   sdkbox.PluginChartboost:isAvailable(name)   is the specified ad available?   sdkbox.PluginChartboost:cache(name)  sdkbox.PluginChartboost:setAutoCacheAds(shouldCache)   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost:getAutoCacheAds()   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost:closeImpression()   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost:setStatusBarBehavior(behavior)   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost:didPassAgeGate(pass)   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   sdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause)   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost:handleOpenURL(url, sourceApp)   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost:setCustomID(customID)   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost:getCustomID()   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   sdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest)   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay)   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   sdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch)   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  onChartboostCached(name)   there is cached content   onChartboostShouldDisplay(name)   should Chartboost display   onChartboostDisplay(name)   Charboost ad has displayed   onChartboostDismiss(name)   Chartboost ad has been dismissed   onChartboostClose(name)   Chartboost is not running   onChartboostClick(name)   Chartboost ad was clicked on   onChartboostReward(name, reward)   Chartboost reward was given   onChartboostFailedToLoad(name, e)   Chartboost failed to load   onChartboostFailToRecordClick(name, e)   Chartboost failed to record click   onChartboostConfirmation()   Chartboost confirmation   onChartboostCompleteStore()   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # chartboost\n-keep class com.chartboost.** { *; }\n-dontwarn com.chartboost.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android\n, Facebook requires a minimum version of \nAPI 15: Android 4.0.3\n. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Facebook\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginFacebook/PluginFacebook.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFacebook::init();\n}\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox::PluginFacebook::login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout.\n\n\nsdkbox::PluginFacebook::logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox::PluginFacebook::isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nSDKBOX provides the most commonly used permissions:\n\n\n\n\nFB_PERM_READ_PUBLIC_PROFILE\n\n\nFB_PERM_READ_EMAIL\n\n\nFB_PERM_READ_USER_FRIENDS\n\n\nFB_PERM_PUBLISH_POST\n\n\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox::PluginFacebook::requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox::PluginFacebook::requestPublishPermissions({FB_PERM_PUBLISH_POST});\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the user's wall\nshare a link:\n\n\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox::PluginFacebook::share(info);\n\n\n\n\nshare a photo:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox::PluginFacebook::dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nInvite\n\n\nThere are both \nstandard\n and \ncustom\n \nInvite\n dialogs available to use when inviting your Friends.\n\n\nWhen using the \nstandard invite dialog\n, it is necessary to select the friends to send the invitation request too. The API call is \ninviteFriends()\n passing in an \napp link url\n and a \npreview image\n. Example:\n\n\nsdkbox::PluginFacebook::inviteFriends(\n  \nhttps://fb.me/322164761287181\n,\n  \nhttp://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png\n);\n\n\n\n\n\n\nNote: Contrary to what it may seem the \napp link url\n, it is not an App Store or Google Play application url. You must follow the instructions on this \npage\n  and use the resulting url as the \napp_link_url\n parameter. Facebook hosts this file for the developer, but anyone could host their own file using this \nformat\n\n\n\n\nAt runtime, a custom message can be attached to the invite request. It is not possible to set a predefined invite message.\n\n\nCreating a \ncustom invite dialog\n is a two step process, starting with a call to \nrequestInvitableFriends()\n then a call to \ninviteFriendsWithInviteIds()\n to actually send the invites. Example:\n\n\nstd::vector\nstd::string\n vec;\nvec.push_back(invitable_token);\nsdkbox::PluginFacebook::inviteFriendsWithInviteIds(vec, \nInvitation title\n, \nInvitation text up to 60 chars.\n);\n\n\n\n\nThe \nrequestInvitableFriends()\n function has a \nBundle(map\n)\n parameter, where the developer can define a few flags:\n\n\n\n\n\n\n\n\nFlag\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\na comma separated values of the fields you want to get from your invitable friend\u2019s profiles.\n\n\n\n\n\n\nexclude_ids\n\n\na comma separated FB ids to exclude from the result.\n\n\n\n\n\n\nlimit\n\n\nnumber of friends per page.\n\n\n\n\n\n\n\n\nA call to \nrequestInvitableFriends()\n will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a \nFBInvitableFriendsInfo\n object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.\n\n\nThe \ncustom invite dialog\n is only available for games with a \ncanvas implementation\n for the Facebook application. The \ncanvas\n must be defined but doesn't need to how any web content. If the \ncanvas\n is not defined a \nstandard invite dialog\n is used instead.\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using the \napi\n function\n\n\nFor example, to get the friend list:\n\n\nsdkbox::PluginFacebook::FBAPIParam params;\nsdkbox::PluginFacebook::api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::FacebookListener\n and override the functions listed:\n\n\n\n\n#include \nPluginFacebook/PluginFacebook.h\n\nclass MyClass : public sdkbox::FacebookListener\n{\nprivate:\n  void onLogin(bool isLogin, const std::string\n msg);\n  void onPermission(bool isLogin, const std::string\n msg);\n  void onAPI(const std::string\n tag, const std::string\n jsonData);\n  void onSharedSuccess(const std::string\n message);\n  void onSharedFailed(const std::string\n message);\n  void onSharedCancel();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginFacebook::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( FacebookListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for facebook events\n\n\n\n\nstatic FacebookListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void login ( ) ;\n\n\n\n\n\n\nlog in\n\n\n\n\nstatic void login ( std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\nstatic void requestReadPermissions ( const std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nstatic void requestPublishPermissions ( const std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nstatic void logout ( ) ;\n\n\n\n\n\n\nlog out\n\n\n\n\nstatic bool isLoggedIn ( ) ;\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nstatic std::string getUserID ( ) ;\n\n\n\n\n\n\nget UserID\n\n\n\n\nstatic std::string getAccessToken ( ) ;\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nstatic std::vector \nstd::string\n getPermissionList ( ) ;\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nstatic void share ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\nshare\n\n\n\n\nstatic void dialog ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nstatic std::string getSDKVersion ( ) ;\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nstatic void api ( const std::string \n path ,\n                  const std::string \n method ,\n                  const FBAPIParam \n params ,\n                  const std::string \n tag ) ;\n\n\n\n\n\n\nuse Facebook Open Graph api\nhttps://developers.facebook.com/docs/ios/graph\n\n\n\n\nstatic void fetchFriends ( ) ;\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nstatic std::vector \nFBGraphUser\n getFriends ( ) ;\n\n\n\n\n\n\nget friends info\n\n\n\n\nstatic bool canPresentWithFBApp ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\ncheck whether can present Facebook App\n\n\n\n\nstatic void requestInvitableFriends ( const FBAPIParam \n ) ;\n\n\n\n\n\n\nGet a vector of invitable friends info which can be used to build a custom friends invite dialog.\n\n\n\n\nstatic void inviteFriendsWithInviteIds ( const std::vector \nstd::string\n \n invite_ids ,\n                                         const std::string \n title ,\n                                         const std::string \n invite_text ) ;\n\n\n\n\n\n\nInvite friends based on the result obtained from a call to \nrequestInvitableFriends\n\n\n\n\nstatic void inviteFriends ( const std::string \n app_link_url ,\n                            const std::string \n preview_image_url ) ;\n\n\n\n\n\n\nUse the default FB dialog to invite friends.\n\n\n\n\nListeners\n\n\nvoid onLogin ( bool isLogin , const std::string \n msg );\n\n\n\n\nvoid onSharedSuccess ( const std::string \n message );\n\n\n\n\nvoid onSharedFailed ( const std::string \n message );\n\n\n\n\nvoid onSharedCancel ( );\n\n\n\n\nvoid onAPI ( const std::string \n key , const std::string \n jsonData );\n\n\n\n\nvoid onPermission ( bool isLogin , const std::string \n msg );\n\n\n\n\nvoid onFetchFriends ( bool ok , const std::string \n msg );\n\n\n\n\nvoid onRequestInvitableFriends ( const FBInvitableFriendsInfo \n invitable_friends_and_pagination_json_as_string );\n\n\n\n\n\n\ninvitable_friends_and_pagination_json_as_string has the following format:\n\n\n\n\nvoid onInviteFriendsWithInviteIdsResult ( bool result ,\n                                          const std::string \n description );\n\n\n\n\nvoid onInviteFriendsResult ( bool result , const std::string \n description );\n\n\n\n\nvoid onGetUserInfo ( const FBGraphUser \n userInfo );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproject_root\n/libs/\n directory.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Facebook with C++"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#prerequisites", 
            "text": "For Android , Facebook requires a minimum version of  API 15: Android 4.0.3 . This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#usage", 
            "text": "Initialize Facebook  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginFacebook/PluginFacebook.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFacebook::init();\n}  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox::PluginFacebook::login();  If a user doesn't want to use Facebook functionality anymore, logout.  sdkbox::PluginFacebook::logout();  You can check whether user already logged in using  sdkbox::PluginFacebook::isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  SDKBOX provides the most commonly used permissions:   FB_PERM_READ_PUBLIC_PROFILE  FB_PERM_READ_EMAIL  FB_PERM_READ_USER_FRIENDS  FB_PERM_PUBLISH_POST   To request a permission, you do so by specifying what you want:  sdkbox::PluginFacebook::requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox::PluginFacebook::requestPublishPermissions({FB_PERM_PUBLISH_POST});  Share  There are two types of sharing functionality.   share  will automatically post to the user's wall\nshare a link:   sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox::PluginFacebook::share(info);  share a photo:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox::PluginFacebook::dialog(info);  share a photo with comments:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Invite  There are both  standard  and  custom   Invite  dialogs available to use when inviting your Friends.  When using the  standard invite dialog , it is necessary to select the friends to send the invitation request too. The API call is  inviteFriends()  passing in an  app link url  and a  preview image . Example:  sdkbox::PluginFacebook::inviteFriends(\n   https://fb.me/322164761287181 ,\n   http://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png );   Note: Contrary to what it may seem the  app link url , it is not an App Store or Google Play application url. You must follow the instructions on this  page   and use the resulting url as the  app_link_url  parameter. Facebook hosts this file for the developer, but anyone could host their own file using this  format   At runtime, a custom message can be attached to the invite request. It is not possible to set a predefined invite message.  Creating a  custom invite dialog  is a two step process, starting with a call to  requestInvitableFriends()  then a call to  inviteFriendsWithInviteIds()  to actually send the invites. Example:  std::vector std::string  vec;\nvec.push_back(invitable_token);\nsdkbox::PluginFacebook::inviteFriendsWithInviteIds(vec,  Invitation title ,  Invitation text up to 60 chars. );  The  requestInvitableFriends()  function has a  Bundle(map )  parameter, where the developer can define a few flags:     Flag  Description      fields  a comma separated values of the fields you want to get from your invitable friend\u2019s profiles.    exclude_ids  a comma separated FB ids to exclude from the result.    limit  number of friends per page.     A call to  requestInvitableFriends()  will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a  FBInvitableFriendsInfo  object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.  The  custom invite dialog  is only available for games with a  canvas implementation  for the Facebook application. The  canvas  must be defined but doesn't need to how any web content. If the  canvas  is not defined a  standard invite dialog  is used instead.  Graph API  You can perform  Graph API  using the  api  function  For example, to get the friend list:  sdkbox::PluginFacebook::FBAPIParam params;\nsdkbox::PluginFacebook::api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.   Allow your class to extend  sdkbox::FacebookListener  and override the functions listed:   #include  PluginFacebook/PluginFacebook.h \nclass MyClass : public sdkbox::FacebookListener\n{\nprivate:\n  void onLogin(bool isLogin, const std::string  msg);\n  void onPermission(bool isLogin, const std::string  msg);\n  void onAPI(const std::string  tag, const std::string  jsonData);\n  void onSharedSuccess(const std::string  message);\n  void onSharedFailed(const std::string  message);\n  void onSharedCancel();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginFacebook::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( FacebookListener * listener ) ;   Set listener to listen for facebook events   static FacebookListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void login ( ) ;   log in   static void login ( std::vector  std::string    permissions ) ;  static void requestReadPermissions ( const std::vector  std::string    permissions ) ;   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   static void requestPublishPermissions ( const std::vector  std::string    permissions ) ;   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   static void logout ( ) ;   log out   static bool isLoggedIn ( ) ;   Check whether the user logined or not   static std::string getUserID ( ) ;   get UserID   static std::string getAccessToken ( ) ;   get AccessToken   static std::vector  std::string  getPermissionList ( ) ;   get permissoin list   static void share ( const FBShareInfo   info ) ;   share   static void dialog ( const FBShareInfo   info ) ;   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   static std::string getSDKVersion ( ) ;   return the version of Facebook SDK   static void api ( const std::string   path ,\n                  const std::string   method ,\n                  const FBAPIParam   params ,\n                  const std::string   tag ) ;   use Facebook Open Graph api\nhttps://developers.facebook.com/docs/ios/graph   static void fetchFriends ( ) ;   fetch friends data from Facebook   static std::vector  FBGraphUser  getFriends ( ) ;   get friends info   static bool canPresentWithFBApp ( const FBShareInfo   info ) ;   check whether can present Facebook App   static void requestInvitableFriends ( const FBAPIParam   ) ;   Get a vector of invitable friends info which can be used to build a custom friends invite dialog.   static void inviteFriendsWithInviteIds ( const std::vector  std::string    invite_ids ,\n                                         const std::string   title ,\n                                         const std::string   invite_text ) ;   Invite friends based on the result obtained from a call to  requestInvitableFriends   static void inviteFriends ( const std::string   app_link_url ,\n                            const std::string   preview_image_url ) ;   Use the default FB dialog to invite friends.   Listeners  void onLogin ( bool isLogin , const std::string   msg );  void onSharedSuccess ( const std::string   message );  void onSharedFailed ( const std::string   message );  void onSharedCancel ( );  void onAPI ( const std::string   key , const std::string   jsonData );  void onPermission ( bool isLogin , const std::string   msg );  void onFetchFriends ( bool ok , const std::string   msg );  void onRequestInvitableFriends ( const FBInvitableFriendsInfo   invitable_friends_and_pagination_json_as_string );   invitable_friends_and_pagination_json_as_string has the following format:   void onInviteFriendsWithInviteIdsResult ( bool result ,\n                                          const std::string   description );  void onInviteFriendsResult ( bool result , const std::string   description );  void onGetUserInfo ( const FBGraphUser   userInfo );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginFacebook.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy the  facebook_lib  directories from  plugin/android/libs  to your  project_root /libs/  directory.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__ \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v3-js/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android\n, Facebook requires a minimum version of \nAPI 15: Android 4.0.3\n. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Facebook JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFacebookJS.hpp\n\n#include \nPluginFacebookJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFacebookJS);\nsc-\naddRegisterCallback(register_all_PluginFacebookJS_helper);\n\n\n\n\nInitialize Facebook\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFacebook.init();\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox.PluginFacebook.login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout. using\n\n\nsdkbox.PluginFacebook.logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox.PluginFacebook.isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox.PluginFacebook.requestReadPermissions([\npublic_profile\n, \nemail\n]);\nsdkbox.PluginFacebook.requestPublishPermissions([\npublish_actions\n]);\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the users wall\nshare a link:\n\n\n\n\nvar info = new Object();\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\nshare a photo:\n\n\nvar info = new Object();\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nvar info = new Object();\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nvar info = new Object();\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nInvite\n\n\nThere are both \nstandard\n and \ncustom\n \nInvite\n dialogs available to use when inviting your Friends.\n\n\nWhen using the \nstandard invite dialog\n, it is necessary to select the friends to send the invitation request too. The API call is \ninviteFriends()\n passing in a URL for \napp\n and a \npreview image\n. Example:\n\n\nsdkbox.PluginFacebook.inviteFriends(\n \nhttps://fb.me/322164761287181\n,\n \nhttp://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png\n);\n\n\n\n\n\n\nNote: Contrary to what it may seem the \napp link url\n, it is not an App Store or Google Play application url. You must follow the instructions on this \npage\n  and use the resulting url as the \napp_link_url\n parameter. Facebook hosts this file for the developer, but anyone could host their own file using this \nformat\n\n\n\n\nCreating a \ncustom invite dialog\n is a two step process, starting with a call to \nrequestInvitableFriends()\n then a call to \ninviteFriendsWithInviteIds()\n to actually send the invites. Example:\n\n\nsdkbox.PluginFacebook.inviteFriendsWithInviteIds([], \u201ctitle\n, \u201cinvitation text\n);\n\n\n\n\nThe \nrequestInvitableFriends()\n function has a \nBundle(map\n)\n parameter, where the developer can define a few flags:\n\n\n\n\n\n\n\n\nFlag\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\na comma separated values of the fields you want to get from your invitable friend\u2019s profiles.\n\n\n\n\n\n\nexclude_ids\n\n\na comma separated FB ids to exclude from the result.\n\n\n\n\n\n\nlimit\n\n\nnumber of friends per page.\n\n\n\n\n\n\n\n\nA call to \nrequestInvitableFriends()\n will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a \nFBInvitableFriendsInfo\n object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.\n\n\nThe \ncustom invite dialog\n is only available for games with a \ncanvas implementation\n for the Facebook application. The \ncanvas\n must be defined but doesn't need to how any web content. If the \ncanvas\n is not defined a \nstandard invite dialog\n is used instead.\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using the \napi\n function\n\n\nFor example, to get the friend list:\n\n\nvar params = new Object();\nsdkbox.PluginFacebook.api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\nsdkbox.PluginFacebook.setListener({\n    onLogin: function(isLogin, msg) {},\n    onAPI: function(tag, data) {},\n    onSharedSuccess: function(data) {},\n    onSharedFailed: function(data) {},\n    onSharedCancel: function() {},\n    onPermission: function(isLogin, msg) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFacebook.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFacebook.login();\n\n\n\n\n\n\nlog in\n\n\n\n\nsdkbox.PluginFacebook.requestReadPermissions(permissions);\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook.requestPublishPermissions(permissions);\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook.logout();\n\n\n\n\n\n\nlog out\n\n\n\n\nsdkbox.PluginFacebook.isLoggedIn();\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nsdkbox.PluginFacebook.getUserID();\n\n\n\n\n\n\nget UserID\n\n\n\n\nsdkbox.PluginFacebook.getAccessToken();\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nsdkbox.PluginFacebook.getPermissionList();\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\nshare\n\n\n\n\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nsdkbox.PluginFacebook.getSDKVersion();\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nsdkbox.PluginFacebook.fetchFriends();\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nListeners\n\n\nonLogin(isLogin, msg);\n\n\n\n\nonSharedSuccess(message);\n\n\n\n\nonSharedFailed(message);\n\n\n\n\nonSharedCancel();\n\n\n\n\nonAPI(key, jsonData);\n\n\n\n\nonPermission(isLogin, msg);\n\n\n\n\nonFetchFriends(ok, msg);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproject_root\n/libs/\n directory.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Facebook with Javascript"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#prerequisites", 
            "text": "For Android , Facebook requires a minimum version of  API 15: Android 4.0.3 . This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Facebook JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFacebookJS.hpp \n#include  PluginFacebookJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFacebookJS);\nsc- addRegisterCallback(register_all_PluginFacebookJS_helper);  Initialize Facebook  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFacebook.init();  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox.PluginFacebook.login();  If a user doesn't want to use Facebook functionality anymore, logout. using  sdkbox.PluginFacebook.logout();  You can check whether user already logged in using  sdkbox.PluginFacebook.isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  To request a permission, you do so by specifying what you want:  sdkbox.PluginFacebook.requestReadPermissions([ public_profile ,  email ]);\nsdkbox.PluginFacebook.requestPublishPermissions([ publish_actions ]);  Share  There are two types of sharing functionality.   share  will automatically post to the users wall\nshare a link:   var info = new Object();\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.share(info);  share a photo:  var info = new Object();\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  var info = new Object();\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.dialog(info);  share a photo with comments:  var info = new Object();\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Invite  There are both  standard  and  custom   Invite  dialogs available to use when inviting your Friends.  When using the  standard invite dialog , it is necessary to select the friends to send the invitation request too. The API call is  inviteFriends()  passing in a URL for  app  and a  preview image . Example:  sdkbox.PluginFacebook.inviteFriends(\n  https://fb.me/322164761287181 ,\n  http://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png );   Note: Contrary to what it may seem the  app link url , it is not an App Store or Google Play application url. You must follow the instructions on this  page   and use the resulting url as the  app_link_url  parameter. Facebook hosts this file for the developer, but anyone could host their own file using this  format   Creating a  custom invite dialog  is a two step process, starting with a call to  requestInvitableFriends()  then a call to  inviteFriendsWithInviteIds()  to actually send the invites. Example:  sdkbox.PluginFacebook.inviteFriendsWithInviteIds([], \u201ctitle , \u201cinvitation text );  The  requestInvitableFriends()  function has a  Bundle(map )  parameter, where the developer can define a few flags:     Flag  Description      fields  a comma separated values of the fields you want to get from your invitable friend\u2019s profiles.    exclude_ids  a comma separated FB ids to exclude from the result.    limit  number of friends per page.     A call to  requestInvitableFriends()  will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a  FBInvitableFriendsInfo  object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.  The  custom invite dialog  is only available for games with a  canvas implementation  for the Facebook application. The  canvas  must be defined but doesn't need to how any web content. If the  canvas  is not defined a  standard invite dialog  is used instead.  Graph API  You can perform  Graph API  using the  api  function  For example, to get the friend list:  var params = new Object();\nsdkbox.PluginFacebook.api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.  sdkbox.PluginFacebook.setListener({\n    onLogin: function(isLogin, msg) {},\n    onAPI: function(tag, data) {},\n    onSharedSuccess: function(data) {},\n    onSharedFailed: function(data) {},\n    onSharedCancel: function() {},\n    onPermission: function(isLogin, msg) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFacebook.init();   initialize the plugin instance.   sdkbox.PluginFacebook.login();   log in   sdkbox.PluginFacebook.requestReadPermissions(permissions);   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook.requestPublishPermissions(permissions);   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook.logout();   log out   sdkbox.PluginFacebook.isLoggedIn();   Check whether the user logined or not   sdkbox.PluginFacebook.getUserID();   get UserID   sdkbox.PluginFacebook.getAccessToken();   get AccessToken   sdkbox.PluginFacebook.getPermissionList();   get permissoin list   sdkbox.PluginFacebook.share(info);   share   sdkbox.PluginFacebook.dialog(info);   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   sdkbox.PluginFacebook.getSDKVersion();   return the version of Facebook SDK   sdkbox.PluginFacebook.fetchFriends();   fetch friends data from Facebook   Listeners  onLogin(isLogin, msg);  onSharedSuccess(message);  onSharedFailed(message);  onSharedCancel();  onAPI(key, jsonData);  onPermission(isLogin, msg);  onFetchFriends(ok, msg);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginFacebook.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy the  facebook_lib  directories from  plugin/android/libs  to your  project_root /libs/  directory.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__ \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android\n, Facebook requires a minimum version of \nAPI 15: Android 4.0.3\n. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Facebook\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginFacebook:init();\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox.PluginFacebook:login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout. using\n\n\nsdkbox.PluginFacebook:logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox.PluginFacebook:isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nSDKBOX provides the most commonly used permissions:\n\n\n\n\nFB_PERM_READ_PUBLIC_PROFILE\n\n\nFB_PERM_READ_EMAIL\n\n\nFB_PERM_READ_USER_FRIENDS\n\n\nFB_PERM_PUBLISH_POST\n\n\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox.PluginFacebook:requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox.PluginFacebook:requestPublishPermissions({FB_PERM_PUBLISH_POST});\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the user's wall\nshare a link:\n\n\n\n\nlocal info;\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook:share(info);\n\n\n\n\nshare a photo:\n\n\nlocal info;\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nlocal info;\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook:dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nlocal info;\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nInvite\n\n\nThere are both \nstandard\n and \ncustom\n \nInvite\n dialogs available to use when inviting your Friends.\n\n\nWhen using the \nstandard invite dialog\n, it is necessary to select the friends to send the invitation request too. The API call is \ninviteFriends()\n passing in a URL for \napp\n and a \npreview image\n. Example:\n\n\nsdkbox.PluginFacebook:inviteFriends(\n \nhttps://fb.me/322164761287181\n,\n \nhttp://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png\n);\n\n\n\n\n\n\nNote: Contrary to what it may seem the \napp link url\n, it is not an App Store or Google Play application url. You must follow the instructions on this \npage\n  and use the resulting url as the \napp_link_url\n parameter. Facebook hosts this file for the developer, but anyone could host their own file using this \nformat\n\n\n\n\nCreating a \ncustom invite dialog\n is a two step process, starting with a call to \nrequestInvitableFriends()\n then a call to \ninviteFriendsWithInviteIds()\n to actually send the invites. Example:\n\n\nsdkbox.PluginFacebook:inviteFriendsWithInviteIds({}, \u201ctitle\n, \u201cinvitation text\n);\n\n\n\n\nThe \nrequestInvitableFriends()\n function has a \nBundle(map\n)\n parameter, where the developer can define a few flags:\n\n\n\n\n\n\n\n\nFlag\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\na comma separated values of the fields you want to get from your invitable friend\u2019s profiles.\n\n\n\n\n\n\nexclude_ids\n\n\na comma separated FB ids to exclude from the result.\n\n\n\n\n\n\nlimit\n\n\nnumber of friends per page.\n\n\n\n\n\n\n\n\nA call to \nrequestInvitableFriends()\n will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a \nFBInvitableFriendsInfo\n object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.\n\n\nThe \ncustom invite dialog\n is only available for games with a \ncanvas implementation\n for the Facebook application. The \ncanvas\n must be defined but doesn't need to how any web content. If the \ncanvas\n is not defined a \nstandard invite dialog\n is used instead.\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using \napi\n function\n\n\nFor example, to get the friend list:\n\n\nlocal params;\nsdkbox.PluginFacebook:api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\nsdkbox.PluginFacebook:setListener(function(args)\n    if \nonLogin\n == args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif \nonPermission\n ==  args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif \nonAPI\n ==  args.name then\n        local tag = args.tag;\n        local jsonData = args.jsonData;\n    elseif \nonSharedSuccess\n ==  args.name then\n        local msg = args.message\n    elseif \nonSharedFailed\n ==  args.name then\n        local msg = args.message\n    elseif \nonSharedCancel\n ==  args.name then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFacebook:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFacebook:login()\n\n\n\n\n\n\nlog in\n\n\n\n\nsdkbox.PluginFacebook:requestReadPermissions(permissions)\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook:requestPublishPermissions(permissions)\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook:logout()\n\n\n\n\n\n\nlog out\n\n\n\n\nsdkbox.PluginFacebook:isLoggedIn()\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nsdkbox.PluginFacebook:getUserID()\n\n\n\n\n\n\nget UserID\n\n\n\n\nsdkbox.PluginFacebook:getAccessToken()\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nsdkbox.PluginFacebook:getPermissionList()\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nsdkbox.PluginFacebook:share(info)\n\n\n\n\n\n\nshare\n\n\n\n\nsdkbox.PluginFacebook:dialog(info)\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nsdkbox.PluginFacebook:getSDKVersion()\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nsdkbox.PluginFacebook:fetchFriends()\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nListeners\n\n\nonLogin(isLogin, msg)\n\n\n\n\nonSharedSuccess(message)\n\n\n\n\nonSharedFailed(message)\n\n\n\n\nonSharedCancel()\n\n\n\n\nonAPI(key, jsonData)\n\n\n\n\nonPermission(isLogin, msg)\n\n\n\n\nonFetchFriends(ok, msg)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproject_root\n/libs/\n directory.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Facebook with Lua"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#prerequisites", 
            "text": "For Android , Facebook requires a minimum version of  API 15: Android 4.0.3 . This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#usage", 
            "text": "Initialize Facebook  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginFacebook:init();  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox.PluginFacebook:login();  If a user doesn't want to use Facebook functionality anymore, logout. using  sdkbox.PluginFacebook:logout();  You can check whether user already logged in using  sdkbox.PluginFacebook:isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  SDKBOX provides the most commonly used permissions:   FB_PERM_READ_PUBLIC_PROFILE  FB_PERM_READ_EMAIL  FB_PERM_READ_USER_FRIENDS  FB_PERM_PUBLISH_POST   To request a permission, you do so by specifying what you want:  sdkbox.PluginFacebook:requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox.PluginFacebook:requestPublishPermissions({FB_PERM_PUBLISH_POST});  Share  There are two types of sharing functionality.   share  will automatically post to the user's wall\nshare a link:   local info;\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook:share(info);  share a photo:  local info;\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  local info;\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook:dialog(info);  share a photo with comments:  local info;\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Invite  There are both  standard  and  custom   Invite  dialogs available to use when inviting your Friends.  When using the  standard invite dialog , it is necessary to select the friends to send the invitation request too. The API call is  inviteFriends()  passing in a URL for  app  and a  preview image . Example:  sdkbox.PluginFacebook:inviteFriends(\n  https://fb.me/322164761287181 ,\n  http://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png );   Note: Contrary to what it may seem the  app link url , it is not an App Store or Google Play application url. You must follow the instructions on this  page   and use the resulting url as the  app_link_url  parameter. Facebook hosts this file for the developer, but anyone could host their own file using this  format   Creating a  custom invite dialog  is a two step process, starting with a call to  requestInvitableFriends()  then a call to  inviteFriendsWithInviteIds()  to actually send the invites. Example:  sdkbox.PluginFacebook:inviteFriendsWithInviteIds({}, \u201ctitle , \u201cinvitation text );  The  requestInvitableFriends()  function has a  Bundle(map )  parameter, where the developer can define a few flags:     Flag  Description      fields  a comma separated values of the fields you want to get from your invitable friend\u2019s profiles.    exclude_ids  a comma separated FB ids to exclude from the result.    limit  number of friends per page.     A call to  requestInvitableFriends()  will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a  FBInvitableFriendsInfo  object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.  The  custom invite dialog  is only available for games with a  canvas implementation  for the Facebook application. The  canvas  must be defined but doesn't need to how any web content. If the  canvas  is not defined a  standard invite dialog  is used instead.  Graph API  You can perform  Graph API  using  api  function  For example, to get the friend list:  local params;\nsdkbox.PluginFacebook:api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.  sdkbox.PluginFacebook:setListener(function(args)\n    if  onLogin  == args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif  onPermission  ==  args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif  onAPI  ==  args.name then\n        local tag = args.tag;\n        local jsonData = args.jsonData;\n    elseif  onSharedSuccess  ==  args.name then\n        local msg = args.message\n    elseif  onSharedFailed  ==  args.name then\n        local msg = args.message\n    elseif  onSharedCancel  ==  args.name then\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFacebook:init()   initialize the plugin instance.   sdkbox.PluginFacebook:login()   log in   sdkbox.PluginFacebook:requestReadPermissions(permissions)   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook:requestPublishPermissions(permissions)   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook:logout()   log out   sdkbox.PluginFacebook:isLoggedIn()   Check whether the user logined or not   sdkbox.PluginFacebook:getUserID()   get UserID   sdkbox.PluginFacebook:getAccessToken()   get AccessToken   sdkbox.PluginFacebook:getPermissionList()   get permissoin list   sdkbox.PluginFacebook:share(info)   share   sdkbox.PluginFacebook:dialog(info)   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   sdkbox.PluginFacebook:getSDKVersion()   return the version of Facebook SDK   sdkbox.PluginFacebook:fetchFriends()   fetch friends data from Facebook   Listeners  onLogin(isLogin, msg)  onSharedSuccess(message)  onSharedFailed(message)  onSharedCancel()  onAPI(key, jsonData)  onPermission(isLogin, msg)  onFetchFriends(ok, msg)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginFacebook.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy the  facebook_lib  directories from  plugin/android/libs  to your  project_root /libs/  directory.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__ \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android\n, Facebook requires a minimum version of \nAPI 15: Android 4.0.3\n. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Facebook\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginFacebook/PluginFacebook.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFacebook::init();\n}\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox::PluginFacebook::login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout.\n\n\nsdkbox::PluginFacebook::logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox::PluginFacebook::isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nSDKBOX provides the most commonly used permissions:\n\n\n\n\nFB_PERM_READ_PUBLIC_PROFILE\n\n\nFB_PERM_READ_EMAIL\n\n\nFB_PERM_READ_USER_FRIENDS\n\n\nFB_PERM_PUBLISH_POST\n\n\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox::PluginFacebook::requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox::PluginFacebook::requestPublishPermissions({FB_PERM_PUBLISH_POST});\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the user's wall\nshare a link:\n\n\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox::PluginFacebook::share(info);\n\n\n\n\nshare a photo:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox::PluginFacebook::dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nInvite\n\n\nThere are both \nstandard\n and \ncustom\n \nInvite\n dialogs available to use when inviting your Friends.\n\n\nWhen using the \nstandard invite dialog\n, it is necessary to select the friends to send the invitation request too. The API call is \ninviteFriends()\n passing in an \napp link url\n and a \npreview image\n. Example:\n\n\nsdkbox::PluginFacebook::inviteFriends(\n  \nhttps://fb.me/322164761287181\n,\n  \nhttp://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png\n);\n\n\n\n\n\n\nNote: Contrary to what it may seem the \napp link url\n, it is not an App Store or Google Play application url. You must follow the instructions on this \npage\n  and use the resulting url as the \napp_link_url\n parameter. Facebook hosts this file for the developer, but anyone could host their own file using this \nformat\n\n\n\n\nAt runtime, a custom message can be attached to the invite request. It is not possible to set a predefined invite message.\n\n\nCreating a \ncustom invite dialog\n is a two step process, starting with a call to \nrequestInvitableFriends()\n then a call to \ninviteFriendsWithInviteIds()\n to actually send the invites. Example:\n\n\nstd::vector\nstd::string\n vec;\nvec.push_back(invitable_token);\nsdkbox::PluginFacebook::inviteFriendsWithInviteIds(vec, \nInvitation title\n, \nInvitation text up to 60 chars.\n);\n\n\n\n\nThe \nrequestInvitableFriends()\n function has a \nBundle(map\n)\n parameter, where the developer can define a few flags:\n\n\n\n\n\n\n\n\nFlag\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\na comma separated values of the fields you want to get from your invitable friend\u2019s profiles.\n\n\n\n\n\n\nexclude_ids\n\n\na comma separated FB ids to exclude from the result.\n\n\n\n\n\n\nlimit\n\n\nnumber of friends per page.\n\n\n\n\n\n\n\n\nA call to \nrequestInvitableFriends()\n will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a \nFBInvitableFriendsInfo\n object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.\n\n\nThe \ncustom invite dialog\n is only available for games with a \ncanvas implementation\n for the Facebook application. The \ncanvas\n must be defined but doesn't need to how any web content. If the \ncanvas\n is not defined a \nstandard invite dialog\n is used instead.\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using the \napi\n function\n\n\nFor example, to get the friend list:\n\n\nsdkbox::PluginFacebook::FBAPIParam params;\nsdkbox::PluginFacebook::api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::FacebookListener\n and override the functions listed:\n\n\n\n\n#include \nPluginFacebook/PluginFacebook.h\n\nclass MyClass : public sdkbox::FacebookListener\n{\nprivate:\n  void onLogin(bool isLogin, const std::string\n msg);\n  void onPermission(bool isLogin, const std::string\n msg);\n  void onAPI(const std::string\n tag, const std::string\n jsonData);\n  void onSharedSuccess(const std::string\n message);\n  void onSharedFailed(const std::string\n message);\n  void onSharedCancel();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginFacebook::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( FacebookListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for facebook events\n\n\n\n\nstatic FacebookListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void login ( ) ;\n\n\n\n\n\n\nlog in\n\n\n\n\nstatic void login ( std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\nstatic void requestReadPermissions ( const std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nstatic void requestPublishPermissions ( const std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nstatic void logout ( ) ;\n\n\n\n\n\n\nlog out\n\n\n\n\nstatic bool isLoggedIn ( ) ;\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nstatic std::string getUserID ( ) ;\n\n\n\n\n\n\nget UserID\n\n\n\n\nstatic std::string getAccessToken ( ) ;\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nstatic std::vector \nstd::string\n getPermissionList ( ) ;\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nstatic void share ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\nshare\n\n\n\n\nstatic void dialog ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nstatic std::string getSDKVersion ( ) ;\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nstatic void api ( const std::string \n path ,\n                  const std::string \n method ,\n                  const FBAPIParam \n params ,\n                  const std::string \n tag ) ;\n\n\n\n\n\n\nuse Facebook Open Graph api\nhttps://developers.facebook.com/docs/ios/graph\n\n\n\n\nstatic void fetchFriends ( ) ;\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nstatic std::vector \nFBGraphUser\n getFriends ( ) ;\n\n\n\n\n\n\nget friends info\n\n\n\n\nstatic bool canPresentWithFBApp ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\ncheck whether can present Facebook App\n\n\n\n\nstatic void requestInvitableFriends ( const FBAPIParam \n ) ;\n\n\n\n\n\n\nGet a vector of invitable friends info which can be used to build a custom friends invite dialog.\n\n\n\n\nstatic void inviteFriendsWithInviteIds ( const std::vector \nstd::string\n \n invite_ids ,\n                                         const std::string \n title ,\n                                         const std::string \n invite_text ) ;\n\n\n\n\n\n\nInvite friends based on the result obtained from a call to \nrequestInvitableFriends\n\n\n\n\nstatic void inviteFriends ( const std::string \n app_link_url ,\n                            const std::string \n preview_image_url ) ;\n\n\n\n\n\n\nUse the default FB dialog to invite friends.\n\n\n\n\nListeners\n\n\nvoid onLogin ( bool isLogin , const std::string \n msg );\n\n\n\n\nvoid onSharedSuccess ( const std::string \n message );\n\n\n\n\nvoid onSharedFailed ( const std::string \n message );\n\n\n\n\nvoid onSharedCancel ( );\n\n\n\n\nvoid onAPI ( const std::string \n key , const std::string \n jsonData );\n\n\n\n\nvoid onPermission ( bool isLogin , const std::string \n msg );\n\n\n\n\nvoid onFetchFriends ( bool ok , const std::string \n msg );\n\n\n\n\nvoid onRequestInvitableFriends ( const FBInvitableFriendsInfo \n invitable_friends_and_pagination_json_as_string );\n\n\n\n\n\n\ninvitable_friends_and_pagination_json_as_string has the following format:\n\n\n\n\nvoid onInviteFriendsWithInviteIdsResult ( bool result ,\n                                          const std::string \n description );\n\n\n\n\nvoid onInviteFriendsResult ( bool result , const std::string \n description );\n\n\n\n\nvoid onGetUserInfo ( const FBGraphUser \n userInfo );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__}\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-19\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Facebook with C++"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#prerequisites", 
            "text": "For Android , Facebook requires a minimum version of  API 15: Android 4.0.3 . This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#usage", 
            "text": "Initialize Facebook  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginFacebook/PluginFacebook.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFacebook::init();\n}  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox::PluginFacebook::login();  If a user doesn't want to use Facebook functionality anymore, logout.  sdkbox::PluginFacebook::logout();  You can check whether user already logged in using  sdkbox::PluginFacebook::isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  SDKBOX provides the most commonly used permissions:   FB_PERM_READ_PUBLIC_PROFILE  FB_PERM_READ_EMAIL  FB_PERM_READ_USER_FRIENDS  FB_PERM_PUBLISH_POST   To request a permission, you do so by specifying what you want:  sdkbox::PluginFacebook::requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox::PluginFacebook::requestPublishPermissions({FB_PERM_PUBLISH_POST});  Share  There are two types of sharing functionality.   share  will automatically post to the user's wall\nshare a link:   sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox::PluginFacebook::share(info);  share a photo:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox::PluginFacebook::dialog(info);  share a photo with comments:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Invite  There are both  standard  and  custom   Invite  dialogs available to use when inviting your Friends.  When using the  standard invite dialog , it is necessary to select the friends to send the invitation request too. The API call is  inviteFriends()  passing in an  app link url  and a  preview image . Example:  sdkbox::PluginFacebook::inviteFriends(\n   https://fb.me/322164761287181 ,\n   http://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png );   Note: Contrary to what it may seem the  app link url , it is not an App Store or Google Play application url. You must follow the instructions on this  page   and use the resulting url as the  app_link_url  parameter. Facebook hosts this file for the developer, but anyone could host their own file using this  format   At runtime, a custom message can be attached to the invite request. It is not possible to set a predefined invite message.  Creating a  custom invite dialog  is a two step process, starting with a call to  requestInvitableFriends()  then a call to  inviteFriendsWithInviteIds()  to actually send the invites. Example:  std::vector std::string  vec;\nvec.push_back(invitable_token);\nsdkbox::PluginFacebook::inviteFriendsWithInviteIds(vec,  Invitation title ,  Invitation text up to 60 chars. );  The  requestInvitableFriends()  function has a  Bundle(map )  parameter, where the developer can define a few flags:     Flag  Description      fields  a comma separated values of the fields you want to get from your invitable friend\u2019s profiles.    exclude_ids  a comma separated FB ids to exclude from the result.    limit  number of friends per page.     A call to  requestInvitableFriends()  will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a  FBInvitableFriendsInfo  object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.  The  custom invite dialog  is only available for games with a  canvas implementation  for the Facebook application. The  canvas  must be defined but doesn't need to how any web content. If the  canvas  is not defined a  standard invite dialog  is used instead.  Graph API  You can perform  Graph API  using the  api  function  For example, to get the friend list:  sdkbox::PluginFacebook::FBAPIParam params;\nsdkbox::PluginFacebook::api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.   Allow your class to extend  sdkbox::FacebookListener  and override the functions listed:   #include  PluginFacebook/PluginFacebook.h \nclass MyClass : public sdkbox::FacebookListener\n{\nprivate:\n  void onLogin(bool isLogin, const std::string  msg);\n  void onPermission(bool isLogin, const std::string  msg);\n  void onAPI(const std::string  tag, const std::string  jsonData);\n  void onSharedSuccess(const std::string  message);\n  void onSharedFailed(const std::string  message);\n  void onSharedCancel();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginFacebook::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( FacebookListener * listener ) ;   Set listener to listen for facebook events   static FacebookListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void login ( ) ;   log in   static void login ( std::vector  std::string    permissions ) ;  static void requestReadPermissions ( const std::vector  std::string    permissions ) ;   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   static void requestPublishPermissions ( const std::vector  std::string    permissions ) ;   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   static void logout ( ) ;   log out   static bool isLoggedIn ( ) ;   Check whether the user logined or not   static std::string getUserID ( ) ;   get UserID   static std::string getAccessToken ( ) ;   get AccessToken   static std::vector  std::string  getPermissionList ( ) ;   get permissoin list   static void share ( const FBShareInfo   info ) ;   share   static void dialog ( const FBShareInfo   info ) ;   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   static std::string getSDKVersion ( ) ;   return the version of Facebook SDK   static void api ( const std::string   path ,\n                  const std::string   method ,\n                  const FBAPIParam   params ,\n                  const std::string   tag ) ;   use Facebook Open Graph api\nhttps://developers.facebook.com/docs/ios/graph   static void fetchFriends ( ) ;   fetch friends data from Facebook   static std::vector  FBGraphUser  getFriends ( ) ;   get friends info   static bool canPresentWithFBApp ( const FBShareInfo   info ) ;   check whether can present Facebook App   static void requestInvitableFriends ( const FBAPIParam   ) ;   Get a vector of invitable friends info which can be used to build a custom friends invite dialog.   static void inviteFriendsWithInviteIds ( const std::vector  std::string    invite_ids ,\n                                         const std::string   title ,\n                                         const std::string   invite_text ) ;   Invite friends based on the result obtained from a call to  requestInvitableFriends   static void inviteFriends ( const std::string   app_link_url ,\n                            const std::string   preview_image_url ) ;   Use the default FB dialog to invite friends.   Listeners  void onLogin ( bool isLogin , const std::string   msg );  void onSharedSuccess ( const std::string   message );  void onSharedFailed ( const std::string   message );  void onSharedCancel ( );  void onAPI ( const std::string   key , const std::string   jsonData );  void onPermission ( bool isLogin , const std::string   msg );  void onFetchFriends ( bool ok , const std::string   msg );  void onRequestInvitableFriends ( const FBInvitableFriendsInfo   invitable_friends_and_pagination_json_as_string );   invitable_friends_and_pagination_json_as_string has the following format:   void onInviteFriendsWithInviteIdsResult ( bool result ,\n                                          const std::string   description );  void onInviteFriendsResult ( bool result , const std::string   description );  void onGetUserInfo ( const FBGraphUser   userInfo );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFacebook.jar  sdkbox.jar   Copy the  facebook_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__} \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-19  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v2-js/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android\n, Facebook requires a minimum version of \nAPI 15: Android 4.0.3\n. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Facebook JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFacebookJS.hpp\n\n#include \nPluginFacebookJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFacebookJS);\nsc-\naddRegisterCallback(register_all_PluginFacebookJS_helper);\n\n\n\n\nInitialize Facebook\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFacebook.init();\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox.PluginFacebook.login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout. using\n\n\nsdkbox.PluginFacebook.logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox.PluginFacebook.isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox.PluginFacebook.requestReadPermissions([\npublic_profile\n, \nemail\n]);\nsdkbox.PluginFacebook.requestPublishPermissions([\npublish_actions\n]);\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the users wall\nshare a link:\n\n\n\n\nvar info = new Object();\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\nshare a photo:\n\n\nvar info = new Object();\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nvar info = new Object();\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nvar info = new Object();\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nInvite\n\n\nThere are both \nstandard\n and \ncustom\n \nInvite\n dialogs available to use when inviting your Friends.\n\n\nWhen using the \nstandard invite dialog\n, it is necessary to select the friends to send the invitation request too. The API call is \ninviteFriends()\n passing in a URL for \napp\n and a \npreview image\n. Example:\n\n\nsdkbox.PluginFacebook.inviteFriends(\n \nhttps://fb.me/322164761287181\n,\n \nhttp://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png\n);\n\n\n\n\n\n\nNote: Contrary to what it may seem the \napp link url\n, it is not an App Store or Google Play application url. You must follow the instructions on this \npage\n  and use the resulting url as the \napp_link_url\n parameter. Facebook hosts this file for the developer, but anyone could host their own file using this \nformat\n\n\n\n\nCreating a \ncustom invite dialog\n is a two step process, starting with a call to \nrequestInvitableFriends()\n then a call to \ninviteFriendsWithInviteIds()\n to actually send the invites. Example:\n\n\nsdkbox.PluginFacebook.inviteFriendsWithInviteIds([], \u201ctitle\n, \u201cinvitation text\n);\n\n\n\n\nThe \nrequestInvitableFriends()\n function has a \nBundle(map\n)\n parameter, where the developer can define a few flags:\n\n\n\n\n\n\n\n\nFlag\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\na comma separated values of the fields you want to get from your invitable friend\u2019s profiles.\n\n\n\n\n\n\nexclude_ids\n\n\na comma separated FB ids to exclude from the result.\n\n\n\n\n\n\nlimit\n\n\nnumber of friends per page.\n\n\n\n\n\n\n\n\nA call to \nrequestInvitableFriends()\n will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a \nFBInvitableFriendsInfo\n object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.\n\n\nThe \ncustom invite dialog\n is only available for games with a \ncanvas implementation\n for the Facebook application. The \ncanvas\n must be defined but doesn't need to how any web content. If the \ncanvas\n is not defined a \nstandard invite dialog\n is used instead.\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using the \napi\n function\n\n\nFor example, to get the friend list:\n\n\nvar params = new Object();\nsdkbox.PluginFacebook.api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\nsdkbox.PluginFacebook.setListener({\n    onLogin: function(isLogin, msg) {},\n    onAPI: function(tag, data) {},\n    onSharedSuccess: function(data) {},\n    onSharedFailed: function(data) {},\n    onSharedCancel: function() {},\n    onPermission: function(isLogin, msg) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFacebook.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFacebook.login();\n\n\n\n\n\n\nlog in\n\n\n\n\nsdkbox.PluginFacebook.requestReadPermissions(permissions);\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook.requestPublishPermissions(permissions);\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook.logout();\n\n\n\n\n\n\nlog out\n\n\n\n\nsdkbox.PluginFacebook.isLoggedIn();\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nsdkbox.PluginFacebook.getUserID();\n\n\n\n\n\n\nget UserID\n\n\n\n\nsdkbox.PluginFacebook.getAccessToken();\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nsdkbox.PluginFacebook.getPermissionList();\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\nshare\n\n\n\n\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nsdkbox.PluginFacebook.getSDKVersion();\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nsdkbox.PluginFacebook.fetchFriends();\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nListeners\n\n\nonLogin(isLogin, msg);\n\n\n\n\nonSharedSuccess(message);\n\n\n\n\nonSharedFailed(message);\n\n\n\n\nonSharedCancel();\n\n\n\n\nonAPI(key, jsonData);\n\n\n\n\nonPermission(isLogin, msg);\n\n\n\n\nonFetchFriends(ok, msg);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__}\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-19\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Facebook with Javascript"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#prerequisites", 
            "text": "For Android , Facebook requires a minimum version of  API 15: Android 4.0.3 . This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Facebook JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFacebookJS.hpp \n#include  PluginFacebookJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFacebookJS);\nsc- addRegisterCallback(register_all_PluginFacebookJS_helper);  Initialize Facebook  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFacebook.init();  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox.PluginFacebook.login();  If a user doesn't want to use Facebook functionality anymore, logout. using  sdkbox.PluginFacebook.logout();  You can check whether user already logged in using  sdkbox.PluginFacebook.isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  To request a permission, you do so by specifying what you want:  sdkbox.PluginFacebook.requestReadPermissions([ public_profile ,  email ]);\nsdkbox.PluginFacebook.requestPublishPermissions([ publish_actions ]);  Share  There are two types of sharing functionality.   share  will automatically post to the users wall\nshare a link:   var info = new Object();\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.share(info);  share a photo:  var info = new Object();\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  var info = new Object();\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.dialog(info);  share a photo with comments:  var info = new Object();\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Invite  There are both  standard  and  custom   Invite  dialogs available to use when inviting your Friends.  When using the  standard invite dialog , it is necessary to select the friends to send the invitation request too. The API call is  inviteFriends()  passing in a URL for  app  and a  preview image . Example:  sdkbox.PluginFacebook.inviteFriends(\n  https://fb.me/322164761287181 ,\n  http://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png );   Note: Contrary to what it may seem the  app link url , it is not an App Store or Google Play application url. You must follow the instructions on this  page   and use the resulting url as the  app_link_url  parameter. Facebook hosts this file for the developer, but anyone could host their own file using this  format   Creating a  custom invite dialog  is a two step process, starting with a call to  requestInvitableFriends()  then a call to  inviteFriendsWithInviteIds()  to actually send the invites. Example:  sdkbox.PluginFacebook.inviteFriendsWithInviteIds([], \u201ctitle , \u201cinvitation text );  The  requestInvitableFriends()  function has a  Bundle(map )  parameter, where the developer can define a few flags:     Flag  Description      fields  a comma separated values of the fields you want to get from your invitable friend\u2019s profiles.    exclude_ids  a comma separated FB ids to exclude from the result.    limit  number of friends per page.     A call to  requestInvitableFriends()  will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a  FBInvitableFriendsInfo  object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.  The  custom invite dialog  is only available for games with a  canvas implementation  for the Facebook application. The  canvas  must be defined but doesn't need to how any web content. If the  canvas  is not defined a  standard invite dialog  is used instead.  Graph API  You can perform  Graph API  using the  api  function  For example, to get the friend list:  var params = new Object();\nsdkbox.PluginFacebook.api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.  sdkbox.PluginFacebook.setListener({\n    onLogin: function(isLogin, msg) {},\n    onAPI: function(tag, data) {},\n    onSharedSuccess: function(data) {},\n    onSharedFailed: function(data) {},\n    onSharedCancel: function() {},\n    onPermission: function(isLogin, msg) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFacebook.init();   initialize the plugin instance.   sdkbox.PluginFacebook.login();   log in   sdkbox.PluginFacebook.requestReadPermissions(permissions);   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook.requestPublishPermissions(permissions);   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook.logout();   log out   sdkbox.PluginFacebook.isLoggedIn();   Check whether the user logined or not   sdkbox.PluginFacebook.getUserID();   get UserID   sdkbox.PluginFacebook.getAccessToken();   get AccessToken   sdkbox.PluginFacebook.getPermissionList();   get permissoin list   sdkbox.PluginFacebook.share(info);   share   sdkbox.PluginFacebook.dialog(info);   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   sdkbox.PluginFacebook.getSDKVersion();   return the version of Facebook SDK   sdkbox.PluginFacebook.fetchFriends();   fetch friends data from Facebook   Listeners  onLogin(isLogin, msg);  onSharedSuccess(message);  onSharedFailed(message);  onSharedCancel();  onAPI(key, jsonData);  onPermission(isLogin, msg);  onFetchFriends(ok, msg);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFacebook.jar  sdkbox.jar   Copy the  facebook_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__} \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-19  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android\n, Facebook requires a minimum version of \nAPI 15: Android 4.0.3\n. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nFollow \nthis link\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Facebook\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginFacebook:init();\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox.PluginFacebook:login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout. using\n\n\nsdkbox.PluginFacebook:logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox.PluginFacebook:isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nSDKBOX provides the most commonly used permissions:\n\n\n\n\nFB_PERM_READ_PUBLIC_PROFILE\n\n\nFB_PERM_READ_EMAIL\n\n\nFB_PERM_READ_USER_FRIENDS\n\n\nFB_PERM_PUBLISH_POST\n\n\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox.PluginFacebook:requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox.PluginFacebook:requestPublishPermissions({FB_PERM_PUBLISH_POST});\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the user's wall\nshare a link:\n\n\n\n\nlocal info;\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook:share(info);\n\n\n\n\nshare a photo:\n\n\nlocal info;\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nlocal info;\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook:dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nlocal info;\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nInvite\n\n\nThere are both \nstandard\n and \ncustom\n \nInvite\n dialogs available to use when inviting your Friends.\n\n\nWhen using the \nstandard invite dialog\n, it is necessary to select the friends to send the invitation request too. The API call is \ninviteFriends()\n passing in a URL for \napp\n and a \npreview image\n. Example:\n\n\nsdkbox.PluginFacebook:inviteFriends(\n \nhttps://fb.me/322164761287181\n,\n \nhttp://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png\n);\n\n\n\n\n\n\nNote: Contrary to what it may seem the \napp link url\n, it is not an App Store or Google Play application url. You must follow the instructions on this \npage\n  and use the resulting url as the \napp_link_url\n parameter. Facebook hosts this file for the developer, but anyone could host their own file using this \nformat\n\n\n\n\nCreating a \ncustom invite dialog\n is a two step process, starting with a call to \nrequestInvitableFriends()\n then a call to \ninviteFriendsWithInviteIds()\n to actually send the invites. Example:\n\n\nsdkbox.PluginFacebook:inviteFriendsWithInviteIds({}, \u201ctitle\n, \u201cinvitation text\n);\n\n\n\n\nThe \nrequestInvitableFriends()\n function has a \nBundle(map\n)\n parameter, where the developer can define a few flags:\n\n\n\n\n\n\n\n\nFlag\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfields\n\n\na comma separated values of the fields you want to get from your invitable friend\u2019s profiles.\n\n\n\n\n\n\nexclude_ids\n\n\na comma separated FB ids to exclude from the result.\n\n\n\n\n\n\nlimit\n\n\nnumber of friends per page.\n\n\n\n\n\n\n\n\nA call to \nrequestInvitableFriends()\n will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a \nFBInvitableFriendsInfo\n object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.\n\n\nThe \ncustom invite dialog\n is only available for games with a \ncanvas implementation\n for the Facebook application. The \ncanvas\n must be defined but doesn't need to how any web content. If the \ncanvas\n is not defined a \nstandard invite dialog\n is used instead.\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using \napi\n function\n\n\nFor example, to get the friend list:\n\n\nlocal params;\nsdkbox.PluginFacebook:api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\nsdkbox.PluginFacebook:setListener(function(args)\n    if \nonLogin\n == args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif \nonPermission\n ==  args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif \nonAPI\n ==  args.name then\n        local tag = args.tag;\n        local jsonData = args.jsonData;\n    elseif \nonSharedSuccess\n ==  args.name then\n        local msg = args.message\n    elseif \nonSharedFailed\n ==  args.name then\n        local msg = args.message\n    elseif \nonSharedCancel\n ==  args.name then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFacebook:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFacebook:login()\n\n\n\n\n\n\nlog in\n\n\n\n\nsdkbox.PluginFacebook:requestReadPermissions(permissions)\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook:requestPublishPermissions(permissions)\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook:logout()\n\n\n\n\n\n\nlog out\n\n\n\n\nsdkbox.PluginFacebook:isLoggedIn()\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nsdkbox.PluginFacebook:getUserID()\n\n\n\n\n\n\nget UserID\n\n\n\n\nsdkbox.PluginFacebook:getAccessToken()\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nsdkbox.PluginFacebook:getPermissionList()\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nsdkbox.PluginFacebook:share(info)\n\n\n\n\n\n\nshare\n\n\n\n\nsdkbox.PluginFacebook:dialog(info)\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nsdkbox.PluginFacebook:getSDKVersion()\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nsdkbox.PluginFacebook:fetchFriends()\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nListeners\n\n\nonLogin(isLogin, msg)\n\n\n\n\nonSharedSuccess(message)\n\n\n\n\nonSharedFailed(message)\n\n\n\n\nonSharedCancel()\n\n\n\n\nonAPI(key, jsonData)\n\n\n\n\nonPermission(isLogin, msg)\n\n\n\n\nonFetchFriends(ok, msg)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__}\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-19\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Facebook with Lua"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#prerequisites", 
            "text": "For Android , Facebook requires a minimum version of  API 15: Android 4.0.3 . This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .  Follow  this link", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#usage", 
            "text": "Initialize Facebook  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginFacebook:init();  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox.PluginFacebook:login();  If a user doesn't want to use Facebook functionality anymore, logout. using  sdkbox.PluginFacebook:logout();  You can check whether user already logged in using  sdkbox.PluginFacebook:isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  SDKBOX provides the most commonly used permissions:   FB_PERM_READ_PUBLIC_PROFILE  FB_PERM_READ_EMAIL  FB_PERM_READ_USER_FRIENDS  FB_PERM_PUBLISH_POST   To request a permission, you do so by specifying what you want:  sdkbox.PluginFacebook:requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox.PluginFacebook:requestPublishPermissions({FB_PERM_PUBLISH_POST});  Share  There are two types of sharing functionality.   share  will automatically post to the user's wall\nshare a link:   local info;\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook:share(info);  share a photo:  local info;\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  local info;\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook:dialog(info);  share a photo with comments:  local info;\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Invite  There are both  standard  and  custom   Invite  dialogs available to use when inviting your Friends.  When using the  standard invite dialog , it is necessary to select the friends to send the invitation request too. The API call is  inviteFriends()  passing in a URL for  app  and a  preview image . Example:  sdkbox.PluginFacebook:inviteFriends(\n  https://fb.me/322164761287181 ,\n  http://www.cocos2d-x.org/attachments/801/cocos2dx_portrait.png );   Note: Contrary to what it may seem the  app link url , it is not an App Store or Google Play application url. You must follow the instructions on this  page   and use the resulting url as the  app_link_url  parameter. Facebook hosts this file for the developer, but anyone could host their own file using this  format   Creating a  custom invite dialog  is a two step process, starting with a call to  requestInvitableFriends()  then a call to  inviteFriendsWithInviteIds()  to actually send the invites. Example:  sdkbox.PluginFacebook:inviteFriendsWithInviteIds({}, \u201ctitle , \u201cinvitation text );  The  requestInvitableFriends()  function has a  Bundle(map )  parameter, where the developer can define a few flags:     Flag  Description      fields  a comma separated values of the fields you want to get from your invitable friend\u2019s profiles.    exclude_ids  a comma separated FB ids to exclude from the result.    limit  number of friends per page.     A call to  requestInvitableFriends()  will return a different collection of friends per call, and it is Facebook's decision which ones to return first.\nThis function returns a  FBInvitableFriendsInfo  object, which will contain a collection of the friends data and a pagination cursor object which has URLS for requesting the next and previous page of invitable friends.  The  custom invite dialog  is only available for games with a  canvas implementation  for the Facebook application. The  canvas  must be defined but doesn't need to how any web content. If the  canvas  is not defined a  standard invite dialog  is used instead.  Graph API  You can perform  Graph API  using  api  function  For example, to get the friend list:  local params;\nsdkbox.PluginFacebook:api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.  sdkbox.PluginFacebook:setListener(function(args)\n    if  onLogin  == args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif  onPermission  ==  args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif  onAPI  ==  args.name then\n        local tag = args.tag;\n        local jsonData = args.jsonData;\n    elseif  onSharedSuccess  ==  args.name then\n        local msg = args.message\n    elseif  onSharedFailed  ==  args.name then\n        local msg = args.message\n    elseif  onSharedCancel  ==  args.name then\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFacebook:init()   initialize the plugin instance.   sdkbox.PluginFacebook:login()   log in   sdkbox.PluginFacebook:requestReadPermissions(permissions)   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook:requestPublishPermissions(permissions)   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook:logout()   log out   sdkbox.PluginFacebook:isLoggedIn()   Check whether the user logined or not   sdkbox.PluginFacebook:getUserID()   get UserID   sdkbox.PluginFacebook:getAccessToken()   get AccessToken   sdkbox.PluginFacebook:getPermissionList()   get permissoin list   sdkbox.PluginFacebook:share(info)   share   sdkbox.PluginFacebook:dialog(info)   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   sdkbox.PluginFacebook:getSDKVersion()   return the version of Facebook SDK   sdkbox.PluginFacebook:fetchFriends()   fetch friends data from Facebook   Listeners  onLogin(isLogin, msg)  onSharedSuccess(message)  onSharedFailed(message)  onSharedCancel()  onAPI(key, jsonData)  onPermission(isLogin, msg)  onFetchFriends(ok, msg)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFacebook.jar  sdkbox.jar   Copy the  facebook_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__} \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-19  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # facebook\n-keep public class com.facebook.** { *; }\n-dontwarn com.facebook.**\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nstartSession()\n are required. Example:\n\n\n#include \nPluginFlurryAnalytics/PluginFlurryAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nstd::string eventName = \ntest event1\n;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nstatic void setAppVersion ( const std::string \n version ) ;\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nstatic std::string getFlurryAgentVersion ( ) ;\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nstatic void setShowErrorInLogEnabled ( bool value ) ;\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nstatic void setDebugLogEnabled ( bool value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setLogLevel ( FA_FlurryLogLevel value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setSessionContinueSeconds ( float seconds ) ;\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nstatic void setCrashReportingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic void endSession ( ) ;\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nstatic bool activeSessionExists ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic std::string getSessionID ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic void pauseBackgroundSession ( ) ;\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ) ;\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        std::map \nstd::string ,\n                        std::string\n \n parameters ) ;\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ) ;\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName , bool timed ) ;\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventId ) ;\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            std::map \nstd::string ,\n                            std::string\n \n parameters ) ;\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nstatic void logError ( const std::string \n errorID ,\n                       const std::string \n message ,\n                       const std::string \n info ) ;\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nstatic void logPageView ( ) ;\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nstatic void setAge ( int age ) ;\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nstatic void setGender ( const std::string \n gender ) ;\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\n     static void setReportLocation ( bool reportLocation ) ;\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nstatic void clearLocation ( ) ;\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nstatic void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nstatic void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nstatic void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nstatic void setEventLoggingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nstatic void setPulseEnabled ( bool value ) ;\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nstatic void setListener ( FlurryAnalyticsListener * listener ) ;\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nstatic FlurryAnalyticsListener * getListener ( ) ;\n\n\n\n\n\n\nget listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listener, just set null, will not delete it\n        the user should delete listener self\n\n\n\n\nListeners\n\n\nvoid flurrySessionDidCreateWithInfo ( std::map \nstd::string ,\n                                      std::string\n \n info );\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\n2.3 Edit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public \ninit\n(android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Flurry with C++"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#usage", 
            "text": "Initialize Flurry Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  startSession()  are required. Example:  #include  PluginFlurryAnalytics/PluginFlurryAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  std::string eventName =  test event1 ;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   init plugin, must be first invoke   static void setAppVersion ( const std::string   version ) ;   Explicitly specifies the App Version that Flurry will use to group Analytics data.   static std::string getFlurryAgentVersion ( ) ;   Retrieves the Flurry Agent Build Version.   static void setShowErrorInLogEnabled ( bool value ) ;   Displays an exception in the debug log if thrown during a Session.   static void setDebugLogEnabled ( bool value ) ;   Generates debug logs to console.   static void setLogLevel ( FA_FlurryLogLevel value ) ;   Generates debug logs to console.   static void setSessionContinueSeconds ( float seconds ) ;   Set the timeout for expiring a Flurry session.   static void setCrashReportingEnabled ( bool value ) ;   Enable automatic collection of crash reports.   static void startSession ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static void endSession ( ) ;   end session, just valid on Android   static bool activeSessionExists ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static std::string getSessionID ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static void pauseBackgroundSession ( ) ;   Pauses a Flurry session left running in background. on valid on iOS   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ) ;   Adds an SDK origin specified by  originName and  originVersion.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        std::map  std::string ,\n                        std::string    parameters ) ;   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        const std::string   parameters ) ;   just for lua, js binding, have the same function with addOrigin(string, string, map)   static int logEvent ( const std::string   eventName ) ;   Records a custom event specified by  eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ) ;   Records a custom parameterized event specified by  eventName with  parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ) ;   just for lua, js binding, have same function with logEvent(string, map)   static int logEvent ( const std::string   eventName , bool timed ) ;   Records a timed event specified by  eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ,\n                      bool timed ) ;   Records a custom parameterized timed event specified by  eventName with  parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ,\n                      bool timed ) ;   just for lua, js binding, have the same function with logEvent(string, map, bool)   static void endTimedEvent ( const std::string   eventId ) ;   End a timed event   static void endTimedEvent ( const std::string   eventName ,\n                            std::map  std::string ,\n                            std::string    parameters ) ;   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   static void endTimedEvent ( const std::string   eventName ,\n                            const std::string   parameters ) ;   just for lua, js binding, have same function with endTimeEvent(string, map)   static void logError ( const std::string   errorID ,\n                       const std::string   message ,\n                       const std::string   info ) ;   Records an app exception. Commonly used to catch unhandled exceptions.   static void logPageView ( ) ;   Explicitly track a page view during a session.   static void setUserID ( const std::string   userID ) ;   Assign a unique id for a user in your app.   static void setAge ( int age ) ;   Set your user's age in years.   static void setGender ( const std::string   gender ) ;   Set your user's gender.        static void setReportLocation ( bool reportLocation ) ;   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;   Set the location of the session.   static void clearLocation ( ) ;   clear the default location.valid on Android   static void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;   Set session to report when app closes.valid on iOS   static void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;   Set session to report when app is sent to the background.valid on iOS   static void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;   Set session to support background execution.valid on iOS   static void setEventLoggingEnabled ( bool value ) ;   Enable custom event logging.   static void setPulseEnabled ( bool value ) ;   Enables Flurry Pulse   static void setListener ( FlurryAnalyticsListener * listener ) ;   set listener for session callback   static FlurryAnalyticsListener * getListener ( ) ;   get listener   static void removeListener ( ) ;   remove listener, just set null, will not delete it\n        the user should delete listener self   Listeners  void flurrySessionDidCreateWithInfo ( std::map  std::string ,\n                                      std::string    info );   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   2.3 Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public  init (android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Flurry Analytics JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFlurryAnalyticsJS.hpp\n\n#include \nPluginFlurryAnalyticsJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS_helper);\n\n\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log(\nsession started\n)\n        console.log(\nAPIKey :\n + jsonInfo.apiKey + \n session id :\n + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAppVersion(version);\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLogLevel(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.activeSessionExists();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getSessionID();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.pauseBackgroundSession();\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName);\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logError(errorID, message, info);\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logPageView();\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setUserID(userID);\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAge(age);\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setGender(gender);\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.clearLocation();\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setPulseEnabled(value);\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setListener(listener);\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info);\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\n2.3 Edit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public \ninit\n(android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Flurry with Javascript"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Flurry Analytics JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFlurryAnalyticsJS.hpp \n#include  PluginFlurryAnalyticsJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS_helper);  Initialize Flurry Analytics  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFlurryAnalytics.init();  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log( session started )\n        console.log( APIKey :  + jsonInfo.apiKey +   session id :  + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics.init();   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics.setAppVersion(version);   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setLogLevel(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics.startSession();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.endSession();   end session, just valid on Android   sdkbox.PluginFlurryAnalytics.activeSessionExists();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.getSessionID();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.pauseBackgroundSession();   Pauses a Flurry session left running in background. on valid on iOS   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);   Adds an SDK origin specified by  originName and  originVersion.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName);   Records a custom event specified by  eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   Records a custom parameterized event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);   Records a timed event specified by  eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   Records a custom parameterized timed event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);   End a timed event   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics.logError(errorID, message, info);   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics.logPageView();   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics.setUserID(userID);   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics.setAge(age);   Set your user's age in years.   sdkbox.PluginFlurryAnalytics.setGender(gender);   Set your user's gender.   sdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   sdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);   Set the location of the session.   sdkbox.PluginFlurryAnalytics.clearLocation();   clear the default location.valid on Android   sdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);   Set session to report when app closes.valid on iOS   sdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);   Set session to report when app is sent to the background.valid on iOS   sdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);   Set session to support background execution.valid on iOS   sdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);   Enable custom event logging.   sdkbox.PluginFlurryAnalytics.setPulseEnabled(value);   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics.setListener(listener);   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info);   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   2.3 Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public  init (android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:init()\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nlocal eventName = \ntest event1\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName)\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print(\napiKey:\n, ret.apiKey, \nsessionId:\n, ret.sessionId)\n        -- check session state\n        print(\nFlurry analytics session exist: \n, f:activeSessionExists())\n        print(\nFlurry analytics session: \n, f:getSessionID())\n        local eventName = \ntest event1\n\n        sdkbox.PluginFlurryAnalytics:logEvent(eventName)\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics:init()\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAppVersion(version)\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getFlurryAgentVersion()\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value)\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value)\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLogLevel(value)\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds)\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value)\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endSession()\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:activeSessionExists()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getSessionID()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:pauseBackgroundSession()\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion)\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName)\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, timed)\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventId)\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logError(errorID, message, info)\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logPageView()\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setUserID(userID)\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAge(age)\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setGender(gender)\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation)\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy)\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:clearLocation()\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose)\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled)\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled)\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value)\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setPulseEnabled(value)\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setListener(listener)\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info)\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\n2.3 Edit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public \ninit\n(android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Flurry with Lua"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#usage", 
            "text": "Initialize Flurry Analytics   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginFlurryAnalytics:init()  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  local eventName =  test event1 \nsdkbox.PluginFlurryAnalytics:logEvent(eventName)  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print( apiKey: , ret.apiKey,  sessionId: , ret.sessionId)\n        -- check session state\n        print( Flurry analytics session exist:  , f:activeSessionExists())\n        print( Flurry analytics session:  , f:getSessionID())\n        local eventName =  test event1 \n        sdkbox.PluginFlurryAnalytics:logEvent(eventName)\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics:init()   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics:setAppVersion(version)   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics:getFlurryAgentVersion()   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value)   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value)   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setLogLevel(value)   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds)   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value)   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics:startSession()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:endSession()   end session, just valid on Android   sdkbox.PluginFlurryAnalytics:activeSessionExists()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:getSessionID()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:pauseBackgroundSession()   Pauses a Flurry session left running in background. on valid on iOS   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion)   Adds an SDK origin specified by  originName and  originVersion.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName)   Records a custom event specified by  eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)   Records a custom parameterized event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName, timed)   Records a timed event specified by  eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)   Records a custom parameterized timed event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventId)   End a timed event   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics:logError(errorID, message, info)   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics:logPageView()   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics:setUserID(userID)   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics:setAge(age)   Set your user's age in years.   sdkbox.PluginFlurryAnalytics:setGender(gender)   Set your user's gender.   sdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation)   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   sdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy)   Set the location of the session.   sdkbox.PluginFlurryAnalytics:clearLocation()   clear the default location.valid on Android   sdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose)   Set session to report when app closes.valid on iOS   sdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled)   Set session to report when app is sent to the background.valid on iOS   sdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled)   Set session to support background execution.valid on iOS   sdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value)   Enable custom event logging.   sdkbox.PluginFlurryAnalytics:setPulseEnabled(value)   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics:setListener(listener)   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info)   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   2.3 Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public  init (android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nstartSession()\n are required. Example:\n\n\n#include \nPluginFlurryAnalytics/PluginFlurryAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nstd::string eventName = \ntest event1\n;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nstatic void setAppVersion ( const std::string \n version ) ;\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nstatic std::string getFlurryAgentVersion ( ) ;\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nstatic void setShowErrorInLogEnabled ( bool value ) ;\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nstatic void setDebugLogEnabled ( bool value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setLogLevel ( FA_FlurryLogLevel value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setSessionContinueSeconds ( float seconds ) ;\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nstatic void setCrashReportingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic void endSession ( ) ;\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nstatic bool activeSessionExists ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic std::string getSessionID ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic void pauseBackgroundSession ( ) ;\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ) ;\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        std::map \nstd::string ,\n                        std::string\n \n parameters ) ;\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ) ;\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName , bool timed ) ;\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventId ) ;\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            std::map \nstd::string ,\n                            std::string\n \n parameters ) ;\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nstatic void logError ( const std::string \n errorID ,\n                       const std::string \n message ,\n                       const std::string \n info ) ;\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nstatic void logPageView ( ) ;\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nstatic void setAge ( int age ) ;\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nstatic void setGender ( const std::string \n gender ) ;\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\n     static void setReportLocation ( bool reportLocation ) ;\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nstatic void clearLocation ( ) ;\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nstatic void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nstatic void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nstatic void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nstatic void setEventLoggingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nstatic void setPulseEnabled ( bool value ) ;\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nstatic void setListener ( FlurryAnalyticsListener * listener ) ;\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nstatic FlurryAnalyticsListener * getListener ( ) ;\n\n\n\n\n\n\nget listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listener, just set null, will not delete it\n        the user should delete listener self\n\n\n\n\nListeners\n\n\nvoid flurrySessionDidCreateWithInfo ( std::map \nstd::string ,\n                                      std::string\n \n info );\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public \ninit\n(android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Flurry with C++"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#usage", 
            "text": "Initialize Flurry Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  startSession()  are required. Example:  #include  PluginFlurryAnalytics/PluginFlurryAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  std::string eventName =  test event1 ;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   init plugin, must be first invoke   static void setAppVersion ( const std::string   version ) ;   Explicitly specifies the App Version that Flurry will use to group Analytics data.   static std::string getFlurryAgentVersion ( ) ;   Retrieves the Flurry Agent Build Version.   static void setShowErrorInLogEnabled ( bool value ) ;   Displays an exception in the debug log if thrown during a Session.   static void setDebugLogEnabled ( bool value ) ;   Generates debug logs to console.   static void setLogLevel ( FA_FlurryLogLevel value ) ;   Generates debug logs to console.   static void setSessionContinueSeconds ( float seconds ) ;   Set the timeout for expiring a Flurry session.   static void setCrashReportingEnabled ( bool value ) ;   Enable automatic collection of crash reports.   static void startSession ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static void endSession ( ) ;   end session, just valid on Android   static bool activeSessionExists ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static std::string getSessionID ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static void pauseBackgroundSession ( ) ;   Pauses a Flurry session left running in background. on valid on iOS   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ) ;   Adds an SDK origin specified by  originName and  originVersion.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        std::map  std::string ,\n                        std::string    parameters ) ;   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        const std::string   parameters ) ;   just for lua, js binding, have the same function with addOrigin(string, string, map)   static int logEvent ( const std::string   eventName ) ;   Records a custom event specified by  eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ) ;   Records a custom parameterized event specified by  eventName with  parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ) ;   just for lua, js binding, have same function with logEvent(string, map)   static int logEvent ( const std::string   eventName , bool timed ) ;   Records a timed event specified by  eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ,\n                      bool timed ) ;   Records a custom parameterized timed event specified by  eventName with  parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ,\n                      bool timed ) ;   just for lua, js binding, have the same function with logEvent(string, map, bool)   static void endTimedEvent ( const std::string   eventId ) ;   End a timed event   static void endTimedEvent ( const std::string   eventName ,\n                            std::map  std::string ,\n                            std::string    parameters ) ;   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   static void endTimedEvent ( const std::string   eventName ,\n                            const std::string   parameters ) ;   just for lua, js binding, have same function with endTimeEvent(string, map)   static void logError ( const std::string   errorID ,\n                       const std::string   message ,\n                       const std::string   info ) ;   Records an app exception. Commonly used to catch unhandled exceptions.   static void logPageView ( ) ;   Explicitly track a page view during a session.   static void setUserID ( const std::string   userID ) ;   Assign a unique id for a user in your app.   static void setAge ( int age ) ;   Set your user's age in years.   static void setGender ( const std::string   gender ) ;   Set your user's gender.        static void setReportLocation ( bool reportLocation ) ;   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;   Set the location of the session.   static void clearLocation ( ) ;   clear the default location.valid on Android   static void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;   Set session to report when app closes.valid on iOS   static void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;   Set session to report when app is sent to the background.valid on iOS   static void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;   Set session to support background execution.valid on iOS   static void setEventLoggingEnabled ( bool value ) ;   Enable custom event logging.   static void setPulseEnabled ( bool value ) ;   Enables Flurry Pulse   static void setListener ( FlurryAnalyticsListener * listener ) ;   set listener for session callback   static FlurryAnalyticsListener * getListener ( ) ;   get listener   static void removeListener ( ) ;   remove listener, just set null, will not delete it\n        the user should delete listener self   Listeners  void flurrySessionDidCreateWithInfo ( std::map  std::string ,\n                                      std::string    info );   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public  init (android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Flurry Analytics JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFlurryAnalyticsJS.hpp\n\n#include \nPluginFlurryAnalyticsJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS_helper);\n\n\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log(\nsession started\n)\n        console.log(\nAPIKey :\n + jsonInfo.apiKey + \n session id :\n + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAppVersion(version);\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLogLevel(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.activeSessionExists();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getSessionID();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.pauseBackgroundSession();\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName);\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logError(errorID, message, info);\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logPageView();\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setUserID(userID);\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAge(age);\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setGender(gender);\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.clearLocation();\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setPulseEnabled(value);\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setListener(listener);\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info);\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public \ninit\n(android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Flurry with Javascript"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Flurry Analytics JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFlurryAnalyticsJS.hpp \n#include  PluginFlurryAnalyticsJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS_helper);  Initialize Flurry Analytics  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFlurryAnalytics.init();  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log( session started )\n        console.log( APIKey :  + jsonInfo.apiKey +   session id :  + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics.init();   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics.setAppVersion(version);   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setLogLevel(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics.startSession();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.endSession();   end session, just valid on Android   sdkbox.PluginFlurryAnalytics.activeSessionExists();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.getSessionID();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.pauseBackgroundSession();   Pauses a Flurry session left running in background. on valid on iOS   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);   Adds an SDK origin specified by  originName and  originVersion.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName);   Records a custom event specified by  eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   Records a custom parameterized event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);   Records a timed event specified by  eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   Records a custom parameterized timed event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);   End a timed event   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics.logError(errorID, message, info);   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics.logPageView();   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics.setUserID(userID);   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics.setAge(age);   Set your user's age in years.   sdkbox.PluginFlurryAnalytics.setGender(gender);   Set your user's gender.   sdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   sdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);   Set the location of the session.   sdkbox.PluginFlurryAnalytics.clearLocation();   clear the default location.valid on Android   sdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);   Set session to report when app closes.valid on iOS   sdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);   Set session to report when app is sent to the background.valid on iOS   sdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);   Set session to support background execution.valid on iOS   sdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);   Enable custom event logging.   sdkbox.PluginFlurryAnalytics.setPulseEnabled(value);   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics.setListener(listener);   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info);   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public  init (android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:init()\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nlocal eventName = \ntest event1\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName)\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print(\napiKey:\n, ret.apiKey, \nsessionId:\n, ret.sessionId)\n        -- check session state\n        print(\nFlurry analytics session exist: \n, f:activeSessionExists())\n        print(\nFlurry analytics session: \n, f:getSessionID())\n        local eventName = \ntest event1\n\n        sdkbox.PluginFlurryAnalytics:logEvent(eventName)\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics:init()\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAppVersion(version)\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getFlurryAgentVersion()\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value)\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value)\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLogLevel(value)\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds)\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value)\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endSession()\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:activeSessionExists()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getSessionID()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:pauseBackgroundSession()\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion)\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName)\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, timed)\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventId)\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logError(errorID, message, info)\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logPageView()\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setUserID(userID)\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAge(age)\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setGender(gender)\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation)\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy)\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:clearLocation()\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose)\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled)\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled)\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value)\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setPulseEnabled(value)\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setListener(listener)\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info)\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public \ninit\n(android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Flurry with Lua"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#usage", 
            "text": "Initialize Flurry Analytics   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginFlurryAnalytics:init()  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  local eventName =  test event1 \nsdkbox.PluginFlurryAnalytics:logEvent(eventName)  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print( apiKey: , ret.apiKey,  sessionId: , ret.sessionId)\n        -- check session state\n        print( Flurry analytics session exist:  , f:activeSessionExists())\n        print( Flurry analytics session:  , f:getSessionID())\n        local eventName =  test event1 \n        sdkbox.PluginFlurryAnalytics:logEvent(eventName)\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics:init()   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics:setAppVersion(version)   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics:getFlurryAgentVersion()   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value)   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value)   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setLogLevel(value)   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds)   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value)   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics:startSession()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:endSession()   end session, just valid on Android   sdkbox.PluginFlurryAnalytics:activeSessionExists()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:getSessionID()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:pauseBackgroundSession()   Pauses a Flurry session left running in background. on valid on iOS   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion)   Adds an SDK origin specified by  originName and  originVersion.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName)   Records a custom event specified by  eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)   Records a custom parameterized event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName, timed)   Records a timed event specified by  eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)   Records a custom parameterized timed event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventId)   End a timed event   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics:logError(errorID, message, info)   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics:logPageView()   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics:setUserID(userID)   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics:setAge(age)   Set your user's age in years.   sdkbox.PluginFlurryAnalytics:setGender(gender)   Set your user's gender.   sdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation)   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   sdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy)   Set the location of the session.   sdkbox.PluginFlurryAnalytics:clearLocation()   clear the default location.valid on Android   sdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose)   Set session to report when app closes.valid on iOS   sdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled)   Set session to report when app is sent to the background.valid on iOS   sdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled)   Set session to support background execution.valid on iOS   sdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value)   Enable custom event logging.   sdkbox.PluginFlurryAnalytics:setPulseEnabled(value)   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics:setListener(listener)   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info)   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # flurry\n-keep class com.flurry.** { *; }\n-dontwarn com.flurry.**\n-keepattributes *Annotation*,EnclosingMethod,Signature\n-keepclasseswithmembers class * {\n    public  init (android.content.Context, android.util.AttributeSet, int);\n}\n\n# Google Play Services library\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#If you are using the Google Mobile Ads SDK, add the following:\n# Preserve GMS ads classes\n-keep class com.google.android.gms.** { *;\n}\n-dontwarn com.google.android.gms.**\n\n\n#If you are using the InMobi SDK, add the following:\n# Preserve InMobi Ads classes\n-keep class com.inmobi.** { *;\n}\n-dontwarn com.inmobi.**\n#If you are using the Millennial Media SDK, add the following:\n# Preserve Millennial Ads classes\n-keep class com.millennialmedia.** { *;\n}\n-dontwarn com.millennialmedia.**\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\nCertain SDKBOX plugins do not work together. If you use \nFyber\n, then you cannot also use the \nAdColony\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Fyber\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginFyber/PluginFyber.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFyber::init();\n}\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default \nplacementId\n\n\nsdkbox::PluginFyber::showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom \nplacementId\n\n\nsdkbox::PluginFyber::showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for \nBrandEngage\n offers availability with \ndefault placementId\n:\n\n\nsdkbox::PluginFyber::requestOffers();\n\n\n\n\nQueries the server for \nBrandEngage\n offers availability with custom \nplacementId\n:\n\n\nsdkbox::PluginFyber::requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox::PluginFyber::requestOffers();\nsdkbox::PluginFyber::showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available:\n\n\nsdkbox::PluginFyber::requestInterstitial();\n\n\n\n\nShows an interstitial ad. Call \nrequestInterstitial\n first:\n\n\nsdkbox::PluginFyber::showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was invoked for the current user ID / app ID combination:\n\n\nsdkbox::PluginFyber::requestDeltaOfCoins();\n\n\n\n\nor:\n\n\nsdkbox::PluginFyber::requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::FyberListener\n and override the functions listed:\n\n\n\n\n#include \nPluginFyber/PluginFyber.h\n\nclass MyClass : public sdkbox::FyberListener\n{\nprivate:\n    void onVirtualCurrencyConnectorFailed(int error,\n                                                  const std::string\n errorCode,\n                                                  const std::string\n errorMsg);\n    void onVirtualCurrencyConnectorSuccess(double deltaOfCoins,\n                                                   const std::string\n currencyId,\n                                                   const std::string\n currencyName,\n                                                   const std::string\n transactionId);\n    void onCanShowInterstitial(bool canShowInterstitial);\n    void onInterstitialDidShow();\n    void onInterstitialDismiss(const std::string\n reason);\n    void onInterstitialFailed();\n    void onBrandEngageClientReceiveOffers(bool areOffersAvailable);\n    void onBrandEngageClientChangeStatus(int status, const std::string\n msg);\n    void onOfferWallFinish(int status);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginFyber::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( FyberListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for fyber events\n\n\n\n\nstatic FyberListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void showOfferWall ( const std::string \n placementId = \n ) ;\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nstatic void requestOffers ( const std::string \n placementId = \n ) ;\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nstatic void showOffers ( ) ;\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nstatic void requestInterstitial ( ) ;\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nstatic void showInterstitial ( ) ;\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nstatic void requestDeltaOfCoins ( const std::string \n currencyId = \n ) ;\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nvoid onVirtualCurrencyConnectorFailed ( int error ,\n                                        const std::string \n errorCode ,\n                                        const std::string \n errorMsg );\n\n\n\n\nvoid onVirtualCurrencyConnectorSuccess ( double deltaOfCoins ,\n                                         const std::string \n currencyId ,\n                                         const std::string \n currencyName ,\n                                         const std::string \n transactionId );\n\n\n\n\nvoid onCanShowInterstitial ( bool canShowInterstitial );\n\n\n\n\nvoid onInterstitialDidShow ( );\n\n\n\n\nvoid onInterstitialDismiss ( const std::string \n reason );\n\n\n\n\nvoid onInterstitialFailed ( );\n\n\n\n\nvoid onBrandEngageClientReceiveOffers ( bool areOffersAvailable );\n\n\n\n\nvoid onBrandEngageClientChangeStatus ( int status , const std::string \n msg );\n\n\n\n\nvoid onOfferWallFinish ( int status );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nCopy the \nfyber_lib\n directories from \nplugin/android/libs\n to your \nproject_root\n/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n    android:name=\ncom.fyber.ads.ofw.OfferWallActivity\n\n    android:configChanges=\nscreenSize|orientation\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.videos.RewardedVideoActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:hardwareAccelerated=\ntrue\n\n  android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.interstitials.InterstitialActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.fyber.cache.CacheVideoDownloadService\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nservice android:name=\ncom.fyber.cache.CacheVideoDownloadService\n android:exported=\nfalse\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Fyber with C++"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.  Certain SDKBOX plugins do not work together. If you use  Fyber , then you cannot also use the  AdColony  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#usage", 
            "text": "Initialize Fyber  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginFyber/PluginFyber.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFyber::init();\n}  Using Fyber  Offer Wall  Displaying the Offer Wall with default  placementId  sdkbox::PluginFyber::showOfferWall();  Displaying the Offer Wall with custom  placementId  sdkbox::PluginFyber::showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for  BrandEngage  offers availability with  default placementId :  sdkbox::PluginFyber::requestOffers();  Queries the server for  BrandEngage  offers availability with custom  placementId :  sdkbox::PluginFyber::requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox::PluginFyber::requestOffers();\nsdkbox::PluginFyber::showOffers();  Interstitials  Check if interstitial ads are available:  sdkbox::PluginFyber::requestInterstitial();  Shows an interstitial ad. Call  requestInterstitial  first:  sdkbox::PluginFyber::showInterstitial();  Fetches the amount of a given currency earned since the last time this method was invoked for the current user ID / app ID combination:  sdkbox::PluginFyber::requestDeltaOfCoins();  or:  sdkbox::PluginFyber::requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.   Allow your class to extend  sdkbox::FyberListener  and override the functions listed:   #include  PluginFyber/PluginFyber.h \nclass MyClass : public sdkbox::FyberListener\n{\nprivate:\n    void onVirtualCurrencyConnectorFailed(int error,\n                                                  const std::string  errorCode,\n                                                  const std::string  errorMsg);\n    void onVirtualCurrencyConnectorSuccess(double deltaOfCoins,\n                                                   const std::string  currencyId,\n                                                   const std::string  currencyName,\n                                                   const std::string  transactionId);\n    void onCanShowInterstitial(bool canShowInterstitial);\n    void onInterstitialDidShow();\n    void onInterstitialDismiss(const std::string  reason);\n    void onInterstitialFailed();\n    void onBrandEngageClientReceiveOffers(bool areOffersAvailable);\n    void onBrandEngageClientChangeStatus(int status, const std::string  msg);\n    void onOfferWallFinish(int status);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginFyber::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( FyberListener * listener ) ;   Set listener to listen for fyber events   static FyberListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void showOfferWall ( const std::string   placementId =   ) ;   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   static void requestOffers ( const std::string   placementId =   ) ;   Queries the server for BrandEngage offers availability.   static void showOffers ( ) ;   Starts running an available engagement.   static void requestInterstitial ( ) ;   Check if interstitial ads are available   static void showInterstitial ( ) ;   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   static void requestDeltaOfCoins ( const std::string   currencyId =   ) ;   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  void onVirtualCurrencyConnectorFailed ( int error ,\n                                        const std::string   errorCode ,\n                                        const std::string   errorMsg );  void onVirtualCurrencyConnectorSuccess ( double deltaOfCoins ,\n                                         const std::string   currencyId ,\n                                         const std::string   currencyName ,\n                                         const std::string   transactionId );  void onCanShowInterstitial ( bool canShowInterstitial );  void onInterstitialDidShow ( );  void onInterstitialDismiss ( const std::string   reason );  void onInterstitialFailed ( );  void onBrandEngageClientReceiveOffers ( bool areOffersAvailable );  void onBrandEngageClientChangeStatus ( int status , const std::string   msg );  void onOfferWallFinish ( int status );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginFyber.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Copy the  fyber_lib  directories from  plugin/android/libs  to your  project_root /libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also a few necessary meta-data tags that also need to be added:  activity\n    android:name= com.fyber.ads.ofw.OfferWallActivity \n    android:configChanges= screenSize|orientation  /  activity\n    android:name= com.fyber.ads.videos.RewardedVideoActivity \n    android:configChanges= screenSize|orientation \n    android:hardwareAccelerated= true \n  android:theme= @android:style/Theme.Translucent  /  activity\n    android:name= com.fyber.ads.interstitials.InterstitialActivity \n    android:configChanges= screenSize|orientation \n    android:theme= @android:style/Theme.Translucent  /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.fyber.cache.CacheVideoDownloadService \n    android:hardwareAccelerated= true /  service android:name= com.fyber.cache.CacheVideoDownloadService  android:exported= false  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v3-js/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\nCertain SDKBOX plugins do not work together. If you use \nFyber\n, then you cannot also use the \nAdColony\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Fyber JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFyberJS.hpp\n\n#include \nPluginFyberJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFyberJS);\nsc-\naddRegisterCallback(register_all_PluginFyberJS_helper);\n\n\n\n\nInitialize Fyber\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFyber.init();\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default placementId\n\n\nsdkbox.PluginFyber.showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom placementId\n\n\nsdkbox.PluginFyber.showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for BrandEngage offers availability with default placementId.\n\n\nsdkbox.PluginFyber.requestOffers();\n\n\n\n\nQueries the server for BrandEngage offers availability with custom placementId.\n\n\nsdkbox.PluginFyber.requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox.PluginFyber.requestOffers();\nsdkbox.PluginFyber.showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available\n\n\nsdkbox.PluginFyber.requestInterstitial();\n\n\n\n\nShows an interstitial ad. call \nrequestInterstitial\n first.\n\n\nsdkbox.PluginFyber.showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins();\n\n\n\n\nor\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\nsdkbox.PluginFyber.setListener({\n    onVirtualCurrencyConnectorFailed: function(error, errorCode, errorMsg) {},\n    onVirtualCurrencyConnectorSuccess: function(deltaOfCoins, currencyId, currencyName, transactionId) {},\n    onCanShowInterstitial: function(canShowInterstitial) {},\n    onInterstitialDidShow: function() {},\n    onInterstitialDismiss: function(reason) {},\n    onInterstitialFailed: function() {},\n    onBrandEngageClientReceiveOffers: function(areOffersAvailable) {},\n    onBrandEngageClientChangeStatus: function(status, msg) {},\n    onOfferWallFinish: function(status) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFyber.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFyber.showOfferWall(placementId);\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nsdkbox.PluginFyber.requestOffers(placementId);\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nsdkbox.PluginFyber.showOffers();\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nsdkbox.PluginFyber.requestInterstitial();\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nsdkbox.PluginFyber.showInterstitial();\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins(currencyId);\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nonVirtualCurrencyConnectorFailed(error, errorCode, errorMsg);\n\n\n\n\nonVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId);\n\n\n\n\nonCanShowInterstitial(canShowInterstitial);\n\n\n\n\nonInterstitialDidShow();\n\n\n\n\nonInterstitialDismiss(reason);\n\n\n\n\nonInterstitialFailed();\n\n\n\n\nonBrandEngageClientReceiveOffers(areOffersAvailable);\n\n\n\n\nonBrandEngageClientChangeStatus(status, msg);\n\n\n\n\nonOfferWallFinish(status);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nCopy the \nfyber_lib\n directories from \nplugin/android/libs\n to your \nproject_root\n/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n    android:name=\ncom.fyber.ads.ofw.OfferWallActivity\n\n    android:configChanges=\nscreenSize|orientation\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.videos.RewardedVideoActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:hardwareAccelerated=\ntrue\n\n  android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.interstitials.InterstitialActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.fyber.cache.CacheVideoDownloadService\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nservice android:name=\ncom.fyber.cache.CacheVideoDownloadService\n android:exported=\nfalse\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Fyber with Javascript"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.  Certain SDKBOX plugins do not work together. If you use  Fyber , then you cannot also use the  AdColony  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Fyber JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFyberJS.hpp \n#include  PluginFyberJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFyberJS);\nsc- addRegisterCallback(register_all_PluginFyberJS_helper);  Initialize Fyber  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFyber.init();  Using Fyber  Offer Wall  Displaying the Offer Wall with default placementId  sdkbox.PluginFyber.showOfferWall();  Displaying the Offer Wall with custom placementId  sdkbox.PluginFyber.showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for BrandEngage offers availability with default placementId.  sdkbox.PluginFyber.requestOffers();  Queries the server for BrandEngage offers availability with custom placementId.  sdkbox.PluginFyber.requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox.PluginFyber.requestOffers();\nsdkbox.PluginFyber.showOffers();  Interstitials  Check if interstitial ads are available  sdkbox.PluginFyber.requestInterstitial();  Shows an interstitial ad. call  requestInterstitial  first.  sdkbox.PluginFyber.showInterstitial();  Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.  sdkbox.PluginFyber.requestDeltaOfCoins();  or  sdkbox.PluginFyber.requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.  sdkbox.PluginFyber.setListener({\n    onVirtualCurrencyConnectorFailed: function(error, errorCode, errorMsg) {},\n    onVirtualCurrencyConnectorSuccess: function(deltaOfCoins, currencyId, currencyName, transactionId) {},\n    onCanShowInterstitial: function(canShowInterstitial) {},\n    onInterstitialDidShow: function() {},\n    onInterstitialDismiss: function(reason) {},\n    onInterstitialFailed: function() {},\n    onBrandEngageClientReceiveOffers: function(areOffersAvailable) {},\n    onBrandEngageClientChangeStatus: function(status, msg) {},\n    onOfferWallFinish: function(status) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFyber.init();   initialize the plugin instance.   sdkbox.PluginFyber.showOfferWall(placementId);   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   sdkbox.PluginFyber.requestOffers(placementId);   Queries the server for BrandEngage offers availability.   sdkbox.PluginFyber.showOffers();   Starts running an available engagement.   sdkbox.PluginFyber.requestInterstitial();   Check if interstitial ads are available   sdkbox.PluginFyber.showInterstitial();   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   sdkbox.PluginFyber.requestDeltaOfCoins(currencyId);   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  onVirtualCurrencyConnectorFailed(error, errorCode, errorMsg);  onVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId);  onCanShowInterstitial(canShowInterstitial);  onInterstitialDidShow();  onInterstitialDismiss(reason);  onInterstitialFailed();  onBrandEngageClientReceiveOffers(areOffersAvailable);  onBrandEngageClientChangeStatus(status, msg);  onOfferWallFinish(status);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginFyber.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Copy the  fyber_lib  directories from  plugin/android/libs  to your  project_root /libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also a few necessary meta-data tags that also need to be added:  activity\n    android:name= com.fyber.ads.ofw.OfferWallActivity \n    android:configChanges= screenSize|orientation  /  activity\n    android:name= com.fyber.ads.videos.RewardedVideoActivity \n    android:configChanges= screenSize|orientation \n    android:hardwareAccelerated= true \n  android:theme= @android:style/Theme.Translucent  /  activity\n    android:name= com.fyber.ads.interstitials.InterstitialActivity \n    android:configChanges= screenSize|orientation \n    android:theme= @android:style/Theme.Translucent  /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.fyber.cache.CacheVideoDownloadService \n    android:hardwareAccelerated= true /  service android:name= com.fyber.cache.CacheVideoDownloadService  android:exported= false  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\nCertain SDKBOX plugins do not work together. If you use \nFyber\n, then you cannot also use the \nAdColony\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Fyber\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginFyber:init();\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default placementId\n\n\nsdkbox.PluginFyber:showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom placementId\n\n\nsdkbox.PluginFyber:showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for BrandEngage offers availability with default placementId.\n\n\nsdkbox.PluginFyber:requestOffers();\n\n\n\n\nQueries the server for BrandEngage offers availability with custom placementId.\n\n\nsdkbox.PluginFyber:requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox.PluginFyber:requestOffers();\nsdkbox.PluginFyber:showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available\n\n\nsdkbox.PluginFyber:requestInterstitial();\n\n\n\n\nShows an interstitial ad. call \nrequestInterstitial\n first.\n\n\nsdkbox.PluginFyber:showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins();\n\n\n\n\nor\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\nsdkbox.PluginFyber:setListener(function(args)\n    dump(args)\n    if args.name == \nonVirtualCurrencyConnectorFailed\n then\n    elseif args.name == \nonVirtualCurrencyConnectorSuccess\n then\n    elseif args.name == \nonCanShowInterstitial\n then\n    elseif args.name == \nonInterstitialDidShow\n then\n    elseif args.name == \nonInterstitialDismiss\n then\n    elseif args.name == \nonInterstitialFailed\n then\n    elseif args.name == \nonBrandEngageClientReceiveOffers\n then\n    elseif args.name == \nonBrandEngageClientChangeStatus\n then\n    elseif args.name == \nonOfferWallFinish\n then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFyber:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFyber:showOfferWall(placementId)\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nsdkbox.PluginFyber:requestOffers(placementId)\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nsdkbox.PluginFyber:showOffers()\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nsdkbox.PluginFyber:requestInterstitial()\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nsdkbox.PluginFyber:showInterstitial()\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins(currencyId)\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nonVirtualCurrencyConnectorFailed(error, errorCode, errorMsg)\n\n\n\n\nonVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId)\n\n\n\n\nonCanShowInterstitial(canShowInterstitial)\n\n\n\n\nonInterstitialDidShow()\n\n\n\n\nonInterstitialDismiss(reason)\n\n\n\n\nonInterstitialFailed()\n\n\n\n\nonBrandEngageClientReceiveOffers(areOffersAvailable)\n\n\n\n\nonBrandEngageClientChangeStatus(status, msg)\n\n\n\n\nonOfferWallFinish(status)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nCopy the \nfyber_lib\n directories from \nplugin/android/libs\n to your \nproject_root\n/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n    android:name=\ncom.fyber.ads.ofw.OfferWallActivity\n\n    android:configChanges=\nscreenSize|orientation\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.videos.RewardedVideoActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:hardwareAccelerated=\ntrue\n\n  android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.interstitials.InterstitialActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.fyber.cache.CacheVideoDownloadService\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nservice android:name=\ncom.fyber.cache.CacheVideoDownloadService\n android:exported=\nfalse\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Fyber with Lua"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.  Certain SDKBOX plugins do not work together. If you use  Fyber , then you cannot also use the  AdColony  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#usage", 
            "text": "Initialize Fyber  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginFyber:init();  Using Fyber  Offer Wall  Displaying the Offer Wall with default placementId  sdkbox.PluginFyber:showOfferWall();  Displaying the Offer Wall with custom placementId  sdkbox.PluginFyber:showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for BrandEngage offers availability with default placementId.  sdkbox.PluginFyber:requestOffers();  Queries the server for BrandEngage offers availability with custom placementId.  sdkbox.PluginFyber:requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox.PluginFyber:requestOffers();\nsdkbox.PluginFyber:showOffers();  Interstitials  Check if interstitial ads are available  sdkbox.PluginFyber:requestInterstitial();  Shows an interstitial ad. call  requestInterstitial  first.  sdkbox.PluginFyber:showInterstitial();  Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.  sdkbox.PluginFyber:requestDeltaOfCoins();  or  sdkbox.PluginFyber:requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.  sdkbox.PluginFyber:setListener(function(args)\n    dump(args)\n    if args.name ==  onVirtualCurrencyConnectorFailed  then\n    elseif args.name ==  onVirtualCurrencyConnectorSuccess  then\n    elseif args.name ==  onCanShowInterstitial  then\n    elseif args.name ==  onInterstitialDidShow  then\n    elseif args.name ==  onInterstitialDismiss  then\n    elseif args.name ==  onInterstitialFailed  then\n    elseif args.name ==  onBrandEngageClientReceiveOffers  then\n    elseif args.name ==  onBrandEngageClientChangeStatus  then\n    elseif args.name ==  onOfferWallFinish  then\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFyber:init()   initialize the plugin instance.   sdkbox.PluginFyber:showOfferWall(placementId)   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   sdkbox.PluginFyber:requestOffers(placementId)   Queries the server for BrandEngage offers availability.   sdkbox.PluginFyber:showOffers()   Starts running an available engagement.   sdkbox.PluginFyber:requestInterstitial()   Check if interstitial ads are available   sdkbox.PluginFyber:showInterstitial()   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   sdkbox.PluginFyber:requestDeltaOfCoins(currencyId)   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  onVirtualCurrencyConnectorFailed(error, errorCode, errorMsg)  onVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId)  onCanShowInterstitial(canShowInterstitial)  onInterstitialDidShow()  onInterstitialDismiss(reason)  onInterstitialFailed()  onBrandEngageClientReceiveOffers(areOffersAvailable)  onBrandEngageClientChangeStatus(status, msg)  onOfferWallFinish(status)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginFyber.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Copy the  fyber_lib  directories from  plugin/android/libs  to your  project_root /libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also a few necessary meta-data tags that also need to be added:  activity\n    android:name= com.fyber.ads.ofw.OfferWallActivity \n    android:configChanges= screenSize|orientation  /  activity\n    android:name= com.fyber.ads.videos.RewardedVideoActivity \n    android:configChanges= screenSize|orientation \n    android:hardwareAccelerated= true \n  android:theme= @android:style/Theme.Translucent  /  activity\n    android:name= com.fyber.ads.interstitials.InterstitialActivity \n    android:configChanges= screenSize|orientation \n    android:theme= @android:style/Theme.Translucent  /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.fyber.cache.CacheVideoDownloadService \n    android:hardwareAccelerated= true /  service android:name= com.fyber.cache.CacheVideoDownloadService  android:exported= false  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\nCertain SDKBOX plugins do not work together. If you use \nFyber\n, then you cannot also use the \nAdColony\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Fyber\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginFyber/PluginFyber.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFyber::init();\n}\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default \nplacementId\n\n\nsdkbox::PluginFyber::showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom \nplacementId\n\n\nsdkbox::PluginFyber::showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for \nBrandEngage\n offers availability with \ndefault placementId\n:\n\n\nsdkbox::PluginFyber::requestOffers();\n\n\n\n\nQueries the server for \nBrandEngage\n offers availability with custom \nplacementId\n:\n\n\nsdkbox::PluginFyber::requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox::PluginFyber::requestOffers();\nsdkbox::PluginFyber::showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available:\n\n\nsdkbox::PluginFyber::requestInterstitial();\n\n\n\n\nShows an interstitial ad. Call \nrequestInterstitial\n first:\n\n\nsdkbox::PluginFyber::showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was invoked for the current user ID / app ID combination:\n\n\nsdkbox::PluginFyber::requestDeltaOfCoins();\n\n\n\n\nor:\n\n\nsdkbox::PluginFyber::requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::FyberListener\n and override the functions listed:\n\n\n\n\n#include \nPluginFyber/PluginFyber.h\n\nclass MyClass : public sdkbox::FyberListener\n{\nprivate:\n    void onVirtualCurrencyConnectorFailed(int error,\n                                                  const std::string\n errorCode,\n                                                  const std::string\n errorMsg);\n    void onVirtualCurrencyConnectorSuccess(double deltaOfCoins,\n                                                   const std::string\n currencyId,\n                                                   const std::string\n currencyName,\n                                                   const std::string\n transactionId);\n    void onCanShowInterstitial(bool canShowInterstitial);\n    void onInterstitialDidShow();\n    void onInterstitialDismiss(const std::string\n reason);\n    void onInterstitialFailed();\n    void onBrandEngageClientReceiveOffers(bool areOffersAvailable);\n    void onBrandEngageClientChangeStatus(int status, const std::string\n msg);\n    void onOfferWallFinish(int status);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginFyber::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( FyberListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for fyber events\n\n\n\n\nstatic FyberListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void showOfferWall ( const std::string \n placementId = \n ) ;\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nstatic void requestOffers ( const std::string \n placementId = \n ) ;\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nstatic void showOffers ( ) ;\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nstatic void requestInterstitial ( ) ;\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nstatic void showInterstitial ( ) ;\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nstatic void requestDeltaOfCoins ( const std::string \n currencyId = \n ) ;\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nvoid onVirtualCurrencyConnectorFailed ( int error ,\n                                        const std::string \n errorCode ,\n                                        const std::string \n errorMsg );\n\n\n\n\nvoid onVirtualCurrencyConnectorSuccess ( double deltaOfCoins ,\n                                         const std::string \n currencyId ,\n                                         const std::string \n currencyName ,\n                                         const std::string \n transactionId );\n\n\n\n\nvoid onCanShowInterstitial ( bool canShowInterstitial );\n\n\n\n\nvoid onInterstitialDidShow ( );\n\n\n\n\nvoid onInterstitialDismiss ( const std::string \n reason );\n\n\n\n\nvoid onInterstitialFailed ( );\n\n\n\n\nvoid onBrandEngageClientReceiveOffers ( bool areOffersAvailable );\n\n\n\n\nvoid onBrandEngageClientChangeStatus ( int status , const std::string \n msg );\n\n\n\n\nvoid onOfferWallFinish ( int status );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n    android:name=\ncom.fyber.ads.ofw.OfferWallActivity\n\n    android:configChanges=\nscreenSize|orientation\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.videos.RewardedVideoActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:hardwareAccelerated=\ntrue\n\n  android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.interstitials.InterstitialActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.fyber.cache.CacheVideoDownloadService\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nservice android:name=\ncom.fyber.cache.CacheVideoDownloadService\n android:exported=\nfalse\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Fyber with C++"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.  Certain SDKBOX plugins do not work together. If you use  Fyber , then you cannot also use the  AdColony  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#usage", 
            "text": "Initialize Fyber  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginFyber/PluginFyber.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFyber::init();\n}  Using Fyber  Offer Wall  Displaying the Offer Wall with default  placementId  sdkbox::PluginFyber::showOfferWall();  Displaying the Offer Wall with custom  placementId  sdkbox::PluginFyber::showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for  BrandEngage  offers availability with  default placementId :  sdkbox::PluginFyber::requestOffers();  Queries the server for  BrandEngage  offers availability with custom  placementId :  sdkbox::PluginFyber::requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox::PluginFyber::requestOffers();\nsdkbox::PluginFyber::showOffers();  Interstitials  Check if interstitial ads are available:  sdkbox::PluginFyber::requestInterstitial();  Shows an interstitial ad. Call  requestInterstitial  first:  sdkbox::PluginFyber::showInterstitial();  Fetches the amount of a given currency earned since the last time this method was invoked for the current user ID / app ID combination:  sdkbox::PluginFyber::requestDeltaOfCoins();  or:  sdkbox::PluginFyber::requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.   Allow your class to extend  sdkbox::FyberListener  and override the functions listed:   #include  PluginFyber/PluginFyber.h \nclass MyClass : public sdkbox::FyberListener\n{\nprivate:\n    void onVirtualCurrencyConnectorFailed(int error,\n                                                  const std::string  errorCode,\n                                                  const std::string  errorMsg);\n    void onVirtualCurrencyConnectorSuccess(double deltaOfCoins,\n                                                   const std::string  currencyId,\n                                                   const std::string  currencyName,\n                                                   const std::string  transactionId);\n    void onCanShowInterstitial(bool canShowInterstitial);\n    void onInterstitialDidShow();\n    void onInterstitialDismiss(const std::string  reason);\n    void onInterstitialFailed();\n    void onBrandEngageClientReceiveOffers(bool areOffersAvailable);\n    void onBrandEngageClientChangeStatus(int status, const std::string  msg);\n    void onOfferWallFinish(int status);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginFyber::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( FyberListener * listener ) ;   Set listener to listen for fyber events   static FyberListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void showOfferWall ( const std::string   placementId =   ) ;   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   static void requestOffers ( const std::string   placementId =   ) ;   Queries the server for BrandEngage offers availability.   static void showOffers ( ) ;   Starts running an available engagement.   static void requestInterstitial ( ) ;   Check if interstitial ads are available   static void showInterstitial ( ) ;   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   static void requestDeltaOfCoins ( const std::string   currencyId =   ) ;   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  void onVirtualCurrencyConnectorFailed ( int error ,\n                                        const std::string   errorCode ,\n                                        const std::string   errorMsg );  void onVirtualCurrencyConnectorSuccess ( double deltaOfCoins ,\n                                         const std::string   currencyId ,\n                                         const std::string   currencyName ,\n                                         const std::string   transactionId );  void onCanShowInterstitial ( bool canShowInterstitial );  void onInterstitialDidShow ( );  void onInterstitialDismiss ( const std::string   reason );  void onInterstitialFailed ( );  void onBrandEngageClientReceiveOffers ( bool areOffersAvailable );  void onBrandEngageClientChangeStatus ( int status , const std::string   msg );  void onOfferWallFinish ( int status );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFyber.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  activity\n    android:name= com.fyber.ads.ofw.OfferWallActivity \n    android:configChanges= screenSize|orientation  /  activity\n    android:name= com.fyber.ads.videos.RewardedVideoActivity \n    android:configChanges= screenSize|orientation \n    android:hardwareAccelerated= true \n  android:theme= @android:style/Theme.Translucent  /  activity\n    android:name= com.fyber.ads.interstitials.InterstitialActivity \n    android:configChanges= screenSize|orientation \n    android:theme= @android:style/Theme.Translucent  /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.fyber.cache.CacheVideoDownloadService \n    android:hardwareAccelerated= true /  service android:name= com.fyber.cache.CacheVideoDownloadService  android:exported= false  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v2-js/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\nCertain SDKBOX plugins do not work together. If you use \nFyber\n, then you cannot also use the \nAdColony\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Fyber JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFyberJS.hpp\n\n#include \nPluginFyberJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFyberJS);\nsc-\naddRegisterCallback(register_all_PluginFyberJS_helper);\n\n\n\n\nInitialize Fyber\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFyber.init();\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default placementId\n\n\nsdkbox.PluginFyber.showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom placementId\n\n\nsdkbox.PluginFyber.showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for BrandEngage offers availability with default placementId.\n\n\nsdkbox.PluginFyber.requestOffers();\n\n\n\n\nQueries the server for BrandEngage offers availability with custom placementId.\n\n\nsdkbox.PluginFyber.requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox.PluginFyber.requestOffers();\nsdkbox.PluginFyber.showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available\n\n\nsdkbox.PluginFyber.requestInterstitial();\n\n\n\n\nShows an interstitial ad. call \nrequestInterstitial\n first.\n\n\nsdkbox.PluginFyber.showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins();\n\n\n\n\nor\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\nsdkbox.PluginFyber.setListener({\n    onVirtualCurrencyConnectorFailed: function(error, errorCode, errorMsg) {},\n    onVirtualCurrencyConnectorSuccess: function(deltaOfCoins, currencyId, currencyName, transactionId) {},\n    onCanShowInterstitial: function(canShowInterstitial) {},\n    onInterstitialDidShow: function() {},\n    onInterstitialDismiss: function(reason) {},\n    onInterstitialFailed: function() {},\n    onBrandEngageClientReceiveOffers: function(areOffersAvailable) {},\n    onBrandEngageClientChangeStatus: function(status, msg) {},\n    onOfferWallFinish: function(status) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFyber.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFyber.showOfferWall(placementId);\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nsdkbox.PluginFyber.requestOffers(placementId);\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nsdkbox.PluginFyber.showOffers();\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nsdkbox.PluginFyber.requestInterstitial();\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nsdkbox.PluginFyber.showInterstitial();\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins(currencyId);\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nonVirtualCurrencyConnectorFailed(error, errorCode, errorMsg);\n\n\n\n\nonVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId);\n\n\n\n\nonCanShowInterstitial(canShowInterstitial);\n\n\n\n\nonInterstitialDidShow();\n\n\n\n\nonInterstitialDismiss(reason);\n\n\n\n\nonInterstitialFailed();\n\n\n\n\nonBrandEngageClientReceiveOffers(areOffersAvailable);\n\n\n\n\nonBrandEngageClientChangeStatus(status, msg);\n\n\n\n\nonOfferWallFinish(status);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n    android:name=\ncom.fyber.ads.ofw.OfferWallActivity\n\n    android:configChanges=\nscreenSize|orientation\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.videos.RewardedVideoActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:hardwareAccelerated=\ntrue\n\n  android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.interstitials.InterstitialActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.fyber.cache.CacheVideoDownloadService\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nservice android:name=\ncom.fyber.cache.CacheVideoDownloadService\n android:exported=\nfalse\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Fyber with Javascript"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.  Certain SDKBOX plugins do not work together. If you use  Fyber , then you cannot also use the  AdColony  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Fyber JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFyberJS.hpp \n#include  PluginFyberJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFyberJS);\nsc- addRegisterCallback(register_all_PluginFyberJS_helper);  Initialize Fyber  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFyber.init();  Using Fyber  Offer Wall  Displaying the Offer Wall with default placementId  sdkbox.PluginFyber.showOfferWall();  Displaying the Offer Wall with custom placementId  sdkbox.PluginFyber.showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for BrandEngage offers availability with default placementId.  sdkbox.PluginFyber.requestOffers();  Queries the server for BrandEngage offers availability with custom placementId.  sdkbox.PluginFyber.requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox.PluginFyber.requestOffers();\nsdkbox.PluginFyber.showOffers();  Interstitials  Check if interstitial ads are available  sdkbox.PluginFyber.requestInterstitial();  Shows an interstitial ad. call  requestInterstitial  first.  sdkbox.PluginFyber.showInterstitial();  Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.  sdkbox.PluginFyber.requestDeltaOfCoins();  or  sdkbox.PluginFyber.requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.  sdkbox.PluginFyber.setListener({\n    onVirtualCurrencyConnectorFailed: function(error, errorCode, errorMsg) {},\n    onVirtualCurrencyConnectorSuccess: function(deltaOfCoins, currencyId, currencyName, transactionId) {},\n    onCanShowInterstitial: function(canShowInterstitial) {},\n    onInterstitialDidShow: function() {},\n    onInterstitialDismiss: function(reason) {},\n    onInterstitialFailed: function() {},\n    onBrandEngageClientReceiveOffers: function(areOffersAvailable) {},\n    onBrandEngageClientChangeStatus: function(status, msg) {},\n    onOfferWallFinish: function(status) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFyber.init();   initialize the plugin instance.   sdkbox.PluginFyber.showOfferWall(placementId);   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   sdkbox.PluginFyber.requestOffers(placementId);   Queries the server for BrandEngage offers availability.   sdkbox.PluginFyber.showOffers();   Starts running an available engagement.   sdkbox.PluginFyber.requestInterstitial();   Check if interstitial ads are available   sdkbox.PluginFyber.showInterstitial();   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   sdkbox.PluginFyber.requestDeltaOfCoins(currencyId);   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  onVirtualCurrencyConnectorFailed(error, errorCode, errorMsg);  onVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId);  onCanShowInterstitial(canShowInterstitial);  onInterstitialDidShow();  onInterstitialDismiss(reason);  onInterstitialFailed();  onBrandEngageClientReceiveOffers(areOffersAvailable);  onBrandEngageClientChangeStatus(status, msg);  onOfferWallFinish(status);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFyber.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  activity\n    android:name= com.fyber.ads.ofw.OfferWallActivity \n    android:configChanges= screenSize|orientation  /  activity\n    android:name= com.fyber.ads.videos.RewardedVideoActivity \n    android:configChanges= screenSize|orientation \n    android:hardwareAccelerated= true \n  android:theme= @android:style/Theme.Translucent  /  activity\n    android:name= com.fyber.ads.interstitials.InterstitialActivity \n    android:configChanges= screenSize|orientation \n    android:theme= @android:style/Theme.Translucent  /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.fyber.cache.CacheVideoDownloadService \n    android:hardwareAccelerated= true /  service android:name= com.fyber.cache.CacheVideoDownloadService  android:exported= false  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\nCertain SDKBOX plugins do not work together. If you use \nFyber\n, then you cannot also use the \nAdColony\n and \nSOOMLA GROW\n services, in the same project.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Fyber\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginFyber:init();\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default placementId\n\n\nsdkbox.PluginFyber:showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom placementId\n\n\nsdkbox.PluginFyber:showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for BrandEngage offers availability with default placementId.\n\n\nsdkbox.PluginFyber:requestOffers();\n\n\n\n\nQueries the server for BrandEngage offers availability with custom placementId.\n\n\nsdkbox.PluginFyber:requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox.PluginFyber:requestOffers();\nsdkbox.PluginFyber:showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available\n\n\nsdkbox.PluginFyber:requestInterstitial();\n\n\n\n\nShows an interstitial ad. call \nrequestInterstitial\n first.\n\n\nsdkbox.PluginFyber:showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins();\n\n\n\n\nor\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\nsdkbox.PluginFyber:setListener(function(args)\n    dump(args)\n    if args.name == \nonVirtualCurrencyConnectorFailed\n then\n    elseif args.name == \nonVirtualCurrencyConnectorSuccess\n then\n    elseif args.name == \nonCanShowInterstitial\n then\n    elseif args.name == \nonInterstitialDidShow\n then\n    elseif args.name == \nonInterstitialDismiss\n then\n    elseif args.name == \nonInterstitialFailed\n then\n    elseif args.name == \nonBrandEngageClientReceiveOffers\n then\n    elseif args.name == \nonBrandEngageClientChangeStatus\n then\n    elseif args.name == \nonOfferWallFinish\n then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFyber:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFyber:showOfferWall(placementId)\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nsdkbox.PluginFyber:requestOffers(placementId)\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nsdkbox.PluginFyber:showOffers()\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nsdkbox.PluginFyber:requestInterstitial()\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nsdkbox.PluginFyber:showInterstitial()\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins(currencyId)\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nonVirtualCurrencyConnectorFailed(error, errorCode, errorMsg)\n\n\n\n\nonVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId)\n\n\n\n\nonCanShowInterstitial(canShowInterstitial)\n\n\n\n\nonInterstitialDidShow()\n\n\n\n\nonInterstitialDismiss(reason)\n\n\n\n\nonInterstitialFailed()\n\n\n\n\nonBrandEngageClientReceiveOffers(areOffersAvailable)\n\n\n\n\nonBrandEngageClientChangeStatus(status, msg)\n\n\n\n\nonOfferWallFinish(status)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity\n    android:name=\ncom.fyber.ads.ofw.OfferWallActivity\n\n    android:configChanges=\nscreenSize|orientation\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.videos.RewardedVideoActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:hardwareAccelerated=\ntrue\n\n  android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:name=\ncom.fyber.ads.interstitials.InterstitialActivity\n\n    android:configChanges=\nscreenSize|orientation\n\n    android:theme=\n@android:style/Theme.Translucent\n /\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.fyber.cache.CacheVideoDownloadService\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nservice android:name=\ncom.fyber.cache.CacheVideoDownloadService\n android:exported=\nfalse\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Fyber with Lua"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.  Certain SDKBOX plugins do not work together. If you use  Fyber , then you cannot also use the  AdColony  and  SOOMLA GROW  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15    JSON Configuration  SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#usage", 
            "text": "Initialize Fyber  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginFyber:init();  Using Fyber  Offer Wall  Displaying the Offer Wall with default placementId  sdkbox.PluginFyber:showOfferWall();  Displaying the Offer Wall with custom placementId  sdkbox.PluginFyber:showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for BrandEngage offers availability with default placementId.  sdkbox.PluginFyber:requestOffers();  Queries the server for BrandEngage offers availability with custom placementId.  sdkbox.PluginFyber:requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox.PluginFyber:requestOffers();\nsdkbox.PluginFyber:showOffers();  Interstitials  Check if interstitial ads are available  sdkbox.PluginFyber:requestInterstitial();  Shows an interstitial ad. call  requestInterstitial  first.  sdkbox.PluginFyber:showInterstitial();  Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.  sdkbox.PluginFyber:requestDeltaOfCoins();  or  sdkbox.PluginFyber:requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.  sdkbox.PluginFyber:setListener(function(args)\n    dump(args)\n    if args.name ==  onVirtualCurrencyConnectorFailed  then\n    elseif args.name ==  onVirtualCurrencyConnectorSuccess  then\n    elseif args.name ==  onCanShowInterstitial  then\n    elseif args.name ==  onInterstitialDidShow  then\n    elseif args.name ==  onInterstitialDismiss  then\n    elseif args.name ==  onInterstitialFailed  then\n    elseif args.name ==  onBrandEngageClientReceiveOffers  then\n    elseif args.name ==  onBrandEngageClientChangeStatus  then\n    elseif args.name ==  onOfferWallFinish  then\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFyber:init()   initialize the plugin instance.   sdkbox.PluginFyber:showOfferWall(placementId)   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   sdkbox.PluginFyber:requestOffers(placementId)   Queries the server for BrandEngage offers availability.   sdkbox.PluginFyber:showOffers()   Starts running an available engagement.   sdkbox.PluginFyber:requestInterstitial()   Check if interstitial ads are available   sdkbox.PluginFyber:showInterstitial()   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   sdkbox.PluginFyber:requestDeltaOfCoins(currencyId)   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  onVirtualCurrencyConnectorFailed(error, errorCode, errorMsg)  onVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId)  onCanShowInterstitial(canShowInterstitial)  onInterstitialDidShow()  onInterstitialDismiss(reason)  onInterstitialFailed()  onBrandEngageClientReceiveOffers(areOffersAvailable)  onBrandEngageClientChangeStatus(status, msg)  onOfferWallFinish(status)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFyber.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  activity\n    android:name= com.fyber.ads.ofw.OfferWallActivity \n    android:configChanges= screenSize|orientation  /  activity\n    android:name= com.fyber.ads.videos.RewardedVideoActivity \n    android:configChanges= screenSize|orientation \n    android:hardwareAccelerated= true \n  android:theme= @android:style/Theme.Translucent  /  activity\n    android:name= com.fyber.ads.interstitials.InterstitialActivity \n    android:configChanges= screenSize|orientation \n    android:theme= @android:style/Theme.Translucent  /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.fyber.cache.CacheVideoDownloadService \n    android:hardwareAccelerated= true /  service android:name= com.fyber.cache.CacheVideoDownloadService  android:exported= false  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # Fyber\n\n-keep class com.fyber.** { *; }\n-dontwarn com.fyber.**\n-keep class com.sponsorpay.mediation.** { *;}\n-keepattributes JavascriptInterface\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n-keep class android.webkit.JavascriptInterface\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginGoogleAnalytics/PluginGoogleAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox::PluginGoogleAnalytics::stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox::PluginGoogleAnalytics::startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nstatic void stopSession ( ) ;\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nstatic void dispatchHits ( ) ;\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nstatic void dispatchPeriodically ( int seconds ) ;\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nstatic void stopPeriodicalDispatch ( ) ;\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nstatic void logScreen ( string title ) ;\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nstatic void logEvent ( string eventCategory ,\n                       string eventAction ,\n                       string eventLabel ,\n                       int value ) ;\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nstatic void logException ( string exceptionDescription , bool isFatal ) ;\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nstatic void logTiming ( string timingCategory ,\n                        int timingInterval ,\n                        string timingName ,\n                        string timingLabel ) ;\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nstatic void logSocial ( string socialNetwork ,\n                        string socialAction ,\n                        string socialTarget ) ;\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nstatic void setDryRun ( bool dr ) ;\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nstatic void enableAdvertisingTracking ( bool e ) ;\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nstatic void createTracker ( string trackerId ) ;\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nstatic void enableTracker ( string trackerId ) ;\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n  \nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n  \nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNext, register the \nAnalyticsReceiver\n:\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.AnalyticsReceiver\n\n    android:enabled=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.google.android.gms.analytics.ANALYTICS_DISPATCH\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.AnalyticsService\n\n    android:enabled=\ntrue\n\n    android:exported=\nfalse\n/\n\n\n\n\n\nIf you want to use optional \nReceivers\n, specify them next:\n\n\n!-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.CampaignTrackingReceiver\n\n    android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.CampaignTrackingService\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNotice the \nandroid:resource=\n attribute. This gives you the path of where to create this file, in this case it would be \nproject_root\n/res/xml\n.\n\n\nThis file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Google Analytics with C++"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#usage", 
            "text": "Initialize Google Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginGoogleAnalytics/PluginGoogleAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}  You can always manually stop recording events at any time by calling:  sdkbox::PluginGoogleAnalytics::stopSession();  However, in-order to record events again you must then manually call:  sdkbox::PluginGoogleAnalytics::startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void startSession ( ) ;   The analytics session is being explicitly started at plugin initialization time.   static void stopSession ( ) ;   You normally will never stop a session manually.   static void dispatchHits ( ) ;   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   static void dispatchPeriodically ( int seconds ) ;   Change the dispatch info time period to the desired amount of seconds.   static void stopPeriodicalDispatch ( ) ;   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   static void logScreen ( string title ) ;   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   static void logEvent ( string eventCategory ,\n                       string eventAction ,\n                       string eventLabel ,\n                       int value ) ;   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   static void logException ( string exceptionDescription , bool isFatal ) ;   Log an exception. It is a basic support for in-app events.   static void logTiming ( string timingCategory ,\n                        int timingInterval ,\n                        string timingName ,\n                        string timingLabel ) ;   Measure a time inside the application.   static void logSocial ( string socialNetwork ,\n                        string socialAction ,\n                        string socialTarget ) ;   Log a social event.   static void setDryRun ( bool dr ) ;   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   static void enableAdvertisingTracking ( bool e ) ;   Enable advertising tracking when in google's ad vendors.   static void createTracker ( string trackerId ) ;   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   static void enableTracker ( string trackerId ) ;   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  / \n   uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  / \n   uses-permission android:name= android.permission.WAKE_LOCK  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Next, register the  AnalyticsReceiver :  receiver android:name= com.google.android.gms.analytics.AnalyticsReceiver \n    android:enabled= true \n     intent-filter \n         action android:name= com.google.android.gms.analytics.ANALYTICS_DISPATCH  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.AnalyticsService \n    android:enabled= true \n    android:exported= false /   If you want to use optional  Receivers , specify them next:  !-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --  receiver android:name= com.google.android.gms.analytics.CampaignTrackingReceiver \n    android:exported= true \n     intent-filter \n         action android:name= com.android.vending.INSTALL_REFERRER  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.CampaignTrackingService  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Notice the  android:resource=  attribute. This gives you the path of where to create this file, in this case it would be  project_root /res/xml .  This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Google Analytics JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginGoogleAnalyticsJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginGoogleAnalyticsJS);\n\n\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchPeriodically(seconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logScreen(title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value);\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.setDryRun(dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.createTracker(trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableTracker(trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n  \nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n  \nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNext, register the \nAnalyticsReceiver\n:\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.AnalyticsReceiver\n\n    android:enabled=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.google.android.gms.analytics.ANALYTICS_DISPATCH\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.AnalyticsService\n\n    android:enabled=\ntrue\n\n    android:exported=\nfalse\n/\n\n\n\n\n\nIf you want to use optional \nReceivers\n, specify them next:\n\n\n!-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.CampaignTrackingReceiver\n\n    android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.CampaignTrackingService\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNotice the \nandroid:resource=\n attribute. This gives you the path of where to create this file, in this case it would be \nproject_root\n/res/xml\n.\n\n\nThis file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Google Analytics with Javascript"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Google Analytics JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginGoogleAnalyticsJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginGoogleAnalyticsJS);  Initialize Google Analytics  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginGoogleAnalytics.init();  You can always manually stop recording events at any time by calling:  sdkbox.PluginGoogleAnalytics.stopSession();  However, in-order to record events again you must then manually call:  sdkbox.PluginGoogleAnalytics.startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginGoogleAnalytics.init();   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics.startSession();   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics.stopSession();   You normally will never stop a session manually.   sdkbox.PluginGoogleAnalytics.dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics.dispatchPeriodically(seconds);   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   sdkbox.PluginGoogleAnalytics.logScreen(title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   sdkbox.PluginGoogleAnalytics.logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value);   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   sdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);   Log an exception. It is a basic support for in-app events.   sdkbox.PluginGoogleAnalytics.logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel);   Measure a time inside the application.   sdkbox.PluginGoogleAnalytics.logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget);   Log a social event.   sdkbox.PluginGoogleAnalytics.setDryRun(dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics.createTracker(trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics.enableTracker(trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  / \n   uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  / \n   uses-permission android:name= android.permission.WAKE_LOCK  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Next, register the  AnalyticsReceiver :  receiver android:name= com.google.android.gms.analytics.AnalyticsReceiver \n    android:enabled= true \n     intent-filter \n         action android:name= com.google.android.gms.analytics.ANALYTICS_DISPATCH  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.AnalyticsService \n    android:enabled= true \n    android:exported= false /   If you want to use optional  Receivers , specify them next:  !-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --  receiver android:name= com.google.android.gms.analytics.CampaignTrackingReceiver \n    android:exported= true \n     intent-filter \n         action android:name= com.android.vending.INSTALL_REFERRER  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.CampaignTrackingService  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Notice the  android:resource=  attribute. This gives you the path of where to create this file, in this case it would be  project_root /res/xml .  This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:init()\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox.PluginGoogleAnalytics:stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox.PluginGoogleAnalytics:startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginGoogleAnalytics:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:startSession()\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopSession()\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchHits()\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchPeriodically(seconds)\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch()\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logScreen(title)\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value)\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal)\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel)\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget)\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:setDryRun(dr)\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e)\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:createTracker(trackerId)\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableTracker(trackerId)\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n  \nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n  \nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNext, register the \nAnalyticsReceiver\n:\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.AnalyticsReceiver\n\n    android:enabled=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.google.android.gms.analytics.ANALYTICS_DISPATCH\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.AnalyticsService\n\n    android:enabled=\ntrue\n\n    android:exported=\nfalse\n/\n\n\n\n\n\nIf you want to use optional \nReceivers\n, specify them next:\n\n\n!-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.CampaignTrackingReceiver\n\n    android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.CampaignTrackingService\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNotice the \nandroid:resource=\n attribute. This gives you the path of where to create this file, in this case it would be \nproject_root\n/res/xml\n.\n\n\nThis file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Google Analytics with Lua"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#usage", 
            "text": "Initialize Google Analytics   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginGoogleAnalytics:init()  You can always manually stop recording events at any time by calling:  sdkbox.PluginGoogleAnalytics:stopSession();  However, in-order to record events again you must then manually call:  sdkbox.PluginGoogleAnalytics:startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginGoogleAnalytics:init()   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics:startSession()   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics:stopSession()   You normally will never stop a session manually.   sdkbox.PluginGoogleAnalytics:dispatchHits()   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics:dispatchPeriodically(seconds)   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch()   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   sdkbox.PluginGoogleAnalytics:logScreen(title)   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   sdkbox.PluginGoogleAnalytics:logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value)   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   sdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal)   Log an exception. It is a basic support for in-app events.   sdkbox.PluginGoogleAnalytics:logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel)   Measure a time inside the application.   sdkbox.PluginGoogleAnalytics:logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget)   Log a social event.   sdkbox.PluginGoogleAnalytics:setDryRun(dr)   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e)   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics:createTracker(trackerId)   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics:enableTracker(trackerId)   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  / \n   uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  / \n   uses-permission android:name= android.permission.WAKE_LOCK  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Next, register the  AnalyticsReceiver :  receiver android:name= com.google.android.gms.analytics.AnalyticsReceiver \n    android:enabled= true \n     intent-filter \n         action android:name= com.google.android.gms.analytics.ANALYTICS_DISPATCH  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.AnalyticsService \n    android:enabled= true \n    android:exported= false /   If you want to use optional  Receivers , specify them next:  !-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --  receiver android:name= com.google.android.gms.analytics.CampaignTrackingReceiver \n    android:exported= true \n     intent-filter \n         action android:name= com.android.vending.INSTALL_REFERRER  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.CampaignTrackingService  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Notice the  android:resource=  attribute. This gives you the path of where to create this file, in this case it would be  project_root /res/xml .  This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginGoogleAnalytics/PluginGoogleAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox::PluginGoogleAnalytics::stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox::PluginGoogleAnalytics::startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nstatic void stopSession ( ) ;\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nstatic void dispatchHits ( ) ;\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nstatic void dispatchPeriodically ( int seconds ) ;\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nstatic void stopPeriodicalDispatch ( ) ;\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nstatic void logScreen ( string title ) ;\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nstatic void logEvent ( string eventCategory ,\n                       string eventAction ,\n                       string eventLabel ,\n                       int value ) ;\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nstatic void logException ( string exceptionDescription , bool isFatal ) ;\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nstatic void logTiming ( string timingCategory ,\n                        int timingInterval ,\n                        string timingName ,\n                        string timingLabel ) ;\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nstatic void logSocial ( string socialNetwork ,\n                        string socialAction ,\n                        string socialTarget ) ;\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nstatic void setDryRun ( bool dr ) ;\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nstatic void enableAdvertisingTracking ( bool e ) ;\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nstatic void createTracker ( string trackerId ) ;\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nstatic void enableTracker ( string trackerId ) ;\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNext, register the \nAnalyticsReceiver\n:\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.AnalyticsReceiver\n\n    android:enabled=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.google.android.gms.analytics.ANALYTICS_DISPATCH\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.AnalyticsService\n\n    android:enabled=\ntrue\n\n    android:exported=\nfalse\n/\n\n\n\n\n\nIf you want to use optional \nReceivers\n, specify them next:\n\n\n!-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.CampaignTrackingReceiver\n\n    android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.CampaignTrackingService\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNotice the \nandroid:resource=\n attribute. This gives you the path of where to create this file, in this case it would be \nproject_root\n/res/xml\n.\n\n\nThis file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Google Analytics with C++"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#usage", 
            "text": "Initialize Google Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginGoogleAnalytics/PluginGoogleAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}  You can always manually stop recording events at any time by calling:  sdkbox::PluginGoogleAnalytics::stopSession();  However, in-order to record events again you must then manually call:  sdkbox::PluginGoogleAnalytics::startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void startSession ( ) ;   The analytics session is being explicitly started at plugin initialization time.   static void stopSession ( ) ;   You normally will never stop a session manually.   static void dispatchHits ( ) ;   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   static void dispatchPeriodically ( int seconds ) ;   Change the dispatch info time period to the desired amount of seconds.   static void stopPeriodicalDispatch ( ) ;   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   static void logScreen ( string title ) ;   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   static void logEvent ( string eventCategory ,\n                       string eventAction ,\n                       string eventLabel ,\n                       int value ) ;   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   static void logException ( string exceptionDescription , bool isFatal ) ;   Log an exception. It is a basic support for in-app events.   static void logTiming ( string timingCategory ,\n                        int timingInterval ,\n                        string timingName ,\n                        string timingLabel ) ;   Measure a time inside the application.   static void logSocial ( string socialNetwork ,\n                        string socialAction ,\n                        string socialTarget ) ;   Log a social event.   static void setDryRun ( bool dr ) ;   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   static void enableAdvertisingTracking ( bool e ) ;   Enable advertising tracking when in google's ad vendors.   static void createTracker ( string trackerId ) ;   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   static void enableTracker ( string trackerId ) ;   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.WAKE_LOCK  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Next, register the  AnalyticsReceiver :  receiver android:name= com.google.android.gms.analytics.AnalyticsReceiver \n    android:enabled= true \n     intent-filter \n         action android:name= com.google.android.gms.analytics.ANALYTICS_DISPATCH  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.AnalyticsService \n    android:enabled= true \n    android:exported= false /   If you want to use optional  Receivers , specify them next:  !-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --  receiver android:name= com.google.android.gms.analytics.CampaignTrackingReceiver \n    android:exported= true \n     intent-filter \n         action android:name= com.android.vending.INSTALL_REFERRER  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.CampaignTrackingService  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Notice the  android:resource=  attribute. This gives you the path of where to create this file, in this case it would be  project_root /res/xml .  This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Google Analytics JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginGoogleAnalyticsJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginGoogleAnalyticsJS);\n\n\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchPeriodically(seconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logScreen(title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value);\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.setDryRun(dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.createTracker(trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableTracker(trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNext, register the \nAnalyticsReceiver\n:\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.AnalyticsReceiver\n\n    android:enabled=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.google.android.gms.analytics.ANALYTICS_DISPATCH\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.AnalyticsService\n\n    android:enabled=\ntrue\n\n    android:exported=\nfalse\n/\n\n\n\n\n\nIf you want to use optional \nReceivers\n, specify them next:\n\n\n!-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.CampaignTrackingReceiver\n\n    android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.CampaignTrackingService\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNotice the \nandroid:resource=\n attribute. This gives you the path of where to create this file, in this case it would be \nproject_root\n/res/xml\n.\n\n\nThis file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Google Analytics with Javascript"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Google Analytics JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginGoogleAnalyticsJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginGoogleAnalyticsJS);  Initialize Google Analytics  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginGoogleAnalytics.init();  You can always manually stop recording events at any time by calling:  sdkbox.PluginGoogleAnalytics.stopSession();  However, in-order to record events again you must then manually call:  sdkbox.PluginGoogleAnalytics.startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginGoogleAnalytics.init();   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics.startSession();   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics.stopSession();   You normally will never stop a session manually.   sdkbox.PluginGoogleAnalytics.dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics.dispatchPeriodically(seconds);   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   sdkbox.PluginGoogleAnalytics.logScreen(title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   sdkbox.PluginGoogleAnalytics.logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value);   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   sdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);   Log an exception. It is a basic support for in-app events.   sdkbox.PluginGoogleAnalytics.logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel);   Measure a time inside the application.   sdkbox.PluginGoogleAnalytics.logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget);   Log a social event.   sdkbox.PluginGoogleAnalytics.setDryRun(dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics.createTracker(trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics.enableTracker(trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.WAKE_LOCK  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Next, register the  AnalyticsReceiver :  receiver android:name= com.google.android.gms.analytics.AnalyticsReceiver \n    android:enabled= true \n     intent-filter \n         action android:name= com.google.android.gms.analytics.ANALYTICS_DISPATCH  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.AnalyticsService \n    android:enabled= true \n    android:exported= false /   If you want to use optional  Receivers , specify them next:  !-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --  receiver android:name= com.google.android.gms.analytics.CampaignTrackingReceiver \n    android:exported= true \n     intent-filter \n         action android:name= com.android.vending.INSTALL_REFERRER  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.CampaignTrackingService  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Notice the  android:resource=  attribute. This gives you the path of where to create this file, in this case it would be  project_root /res/xml .  This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:init()\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox.PluginGoogleAnalytics:stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox.PluginGoogleAnalytics:startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginGoogleAnalytics:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:startSession()\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopSession()\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchHits()\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchPeriodically(seconds)\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch()\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logScreen(title)\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value)\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal)\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel)\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget)\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:setDryRun(dr)\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e)\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:createTracker(trackerId)\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableTracker(trackerId)\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNext, register the \nAnalyticsReceiver\n:\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.AnalyticsReceiver\n\n    android:enabled=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.google.android.gms.analytics.ANALYTICS_DISPATCH\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.AnalyticsService\n\n    android:enabled=\ntrue\n\n    android:exported=\nfalse\n/\n\n\n\n\n\nIf you want to use optional \nReceivers\n, specify them next:\n\n\n!-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --\n\n\nreceiver android:name=\ncom.google.android.gms.analytics.CampaignTrackingReceiver\n\n    android:exported=\ntrue\n\n    \nintent-filter\n\n        \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n    \n/intent-filter\n\n\n/receiver\n\n\nservice android:name=\ncom.google.android.gms.analytics.CampaignTrackingService\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nNotice the \nandroid:resource=\n attribute. This gives you the path of where to create this file, in this case it would be \nproject_root\n/res/xml\n.\n\n\nThis file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Google Analytics with Lua"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#usage", 
            "text": "Initialize Google Analytics   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginGoogleAnalytics:init()  You can always manually stop recording events at any time by calling:  sdkbox.PluginGoogleAnalytics:stopSession();  However, in-order to record events again you must then manually call:  sdkbox.PluginGoogleAnalytics:startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginGoogleAnalytics:init()   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics:startSession()   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics:stopSession()   You normally will never stop a session manually.   sdkbox.PluginGoogleAnalytics:dispatchHits()   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics:dispatchPeriodically(seconds)   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch()   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   sdkbox.PluginGoogleAnalytics:logScreen(title)   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   sdkbox.PluginGoogleAnalytics:logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value)   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   sdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal)   Log an exception. It is a basic support for in-app events.   sdkbox.PluginGoogleAnalytics:logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel)   Measure a time inside the application.   sdkbox.PluginGoogleAnalytics:logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget)   Log a social event.   sdkbox.PluginGoogleAnalytics:setDryRun(dr)   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e)   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics:createTracker(trackerId)   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics:enableTracker(trackerId)   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.WAKE_LOCK  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Next, register the  AnalyticsReceiver :  receiver android:name= com.google.android.gms.analytics.AnalyticsReceiver \n    android:enabled= true \n     intent-filter \n         action android:name= com.google.android.gms.analytics.ANALYTICS_DISPATCH  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.AnalyticsService \n    android:enabled= true \n    android:exported= false /   If you want to use optional  Receivers , specify them next:  !-- Optionally, register CampaignTrackingReceiver and CampaignTrackingService to enable installation campaign reporting --  receiver android:name= com.google.android.gms.analytics.CampaignTrackingReceiver \n    android:exported= true \n     intent-filter \n         action android:name= com.android.vending.INSTALL_REFERRER  / \n     /intent-filter  /receiver  service android:name= com.google.android.gms.analytics.CampaignTrackingService  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file needs to be created and populated with a few required settings. So where does it go? Take a look again at the code tag from above:  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Notice the  android:resource=  attribute. This gives you the path of where to create this file, in this case it would be  project_root /res/xml .  This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep class com.google.android.gms.** { *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginIAP/PluginIAP.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::IAP::init();\n}\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox::IAP::refresh()\n.\n\n\n\n\nonProductRequestSuccess\n will be trigged if retrieved successfully.\n\n\nonProductRequestFailure\n will be trigged if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox::IAP::purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox::IAP::restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\n\n\nAllow your class to extend \nsdkbox::IAPListener\n:\n\n\n\n\n#include \nPluginIAP/PluginIAP.h\n\nclass MyClass : public sdkbox::IAPListener\n{\nprivate:\n  virtual void onInitialized(bool ok) override;\n  virtual void onSuccess(sdkbox::Product const\n p) override;\n  virtual void onFailure(sdkbox::Product const\n p, const std::string \nmsg) override;\n  virtual void onCanceled(sdkbox::Product const\n p) override;\n  virtual void onRestored(sdkbox::Product const\n p) override;\n  virtual void onProductRequestSuccess(std::vector\nsdkbox::Product\n const \nproducts) override;\n  virtual void onProductRequestFailure(const std::string \nmsg) override;\n  void onRestoreComplete(bool ok, const std::string \nmsg);\n}\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::IAP::setListener(listener);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nstatic void setDebug ( bool debug ) ;\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nstatic void purchase ( const std::string \n name ) ;\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nstatic void refresh ( ) ;\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nstatic void restore ( ) ;\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nstatic void setListener ( IAPListener * listener ) ;\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nvoid onInitialized ( bool ok );\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nvoid onSuccess ( const Product \n p );\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nvoid onFailure ( const Product \n p , const std::string \n msg );\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nvoid onCanceled ( const Product \n p );\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nvoid onRestored ( const Product \n p );\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nvoid onProductRequestSuccess ( const std::vector \nProduct\n \n products );\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nvoid onProductRequestFailure ( const std::string \n msg );\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nvoid onRestoreComplete ( bool ok , const std::string \n msg );\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy jar files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 - v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "In-App Purchases(IAP) with C++"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#usage", 
            "text": "Initialize IAP  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginIAP/PluginIAP.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::IAP::init();\n}  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox::IAP::refresh() .   onProductRequestSuccess  will be trigged if retrieved successfully.  onProductRequestFailure  will be trigged if exception occurs.   Make a purchase  To make a purchase call  sdkbox::IAP::purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox::IAP::restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.   Allow your class to extend  sdkbox::IAPListener :   #include  PluginIAP/PluginIAP.h \nclass MyClass : public sdkbox::IAPListener\n{\nprivate:\n  virtual void onInitialized(bool ok) override;\n  virtual void onSuccess(sdkbox::Product const  p) override;\n  virtual void onFailure(sdkbox::Product const  p, const std::string  msg) override;\n  virtual void onCanceled(sdkbox::Product const  p) override;\n  virtual void onRestored(sdkbox::Product const  p) override;\n  virtual void onProductRequestSuccess(std::vector sdkbox::Product  const  products) override;\n  virtual void onProductRequestFailure(const std::string  msg) override;\n  void onRestoreComplete(bool ok, const std::string  msg);\n}   Create a  listener  that handles callbacks:   sdkbox::IAP::setListener(listener);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   Initialize SDKBox IAP   static void setDebug ( bool debug ) ;   Enable/disable debug logging   static void purchase ( const std::string   name ) ;   Make a purchase request   static void refresh ( ) ;   Refresh the IAP data(title, price, description)   static void restore ( ) ;   Restore purchase   static void setListener ( IAPListener * listener ) ;   Set listener for IAP   static void removeListener ( ) ;   Remove listener for IAP   Listeners  void onInitialized ( bool ok );   Called when IAP initialized   void onSuccess ( const Product   p );   Called when an IAP processed successfully   void onFailure ( const Product   p , const std::string   msg );   Called when an IAP fails   void onCanceled ( const Product   p );   Called when user canceled the IAP   void onRestored ( const Product   p );   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   void onProductRequestSuccess ( const std::vector  Product    products );   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   void onProductRequestFailure ( const std::string   msg );   Called when the product request fails   void onRestoreComplete ( bool ok , const std::string   msg );   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework  SystemConfiguration.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy jar files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 - v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/iap/v3-js/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the IAP JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginIAPJS.hpp\n\n#include \nPluginIAPJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginIAPJS);\nsc-\naddRegisterCallback(register_all_PluginIAPJS_helper);\n\n\n\n\nInitialize IAP\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.IAP.init();\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP.refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP.purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP.restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i \n products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP.setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP.purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP.refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP.restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP.setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP.removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nonInitialized(ok);\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nonSuccess(p);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nonFailure(p, msg);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nonCanceled(p);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nonRestored(p);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nonProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nonProductRequestFailure(msg);\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nonRestoreComplete(ok, msg);\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy jar files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 - v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "In-App Purchases(IAP) with Javascript"
        }, 
        {
            "location": "/plugins/iap/v3-js/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/iap/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the IAP JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginIAPJS.hpp \n#include  PluginIAPJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginIAPJS);\nsc- addRegisterCallback(register_all_PluginIAPJS_helper);  Initialize IAP  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.IAP.init();  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP.refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP.purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP.restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i   products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-js/#api-reference", 
            "text": "Methods  sdkbox.IAP.init();   Initialize SDKBox IAP   sdkbox.IAP.setDebug(debug);   Enable/disable debug logging   sdkbox.IAP.purchase(name);   Make a purchase request   sdkbox.IAP.refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP.restore();   Restore purchase   sdkbox.IAP.setListener(listener);   Set listener for IAP   sdkbox.IAP.removeListener();   Remove listener for IAP   Listeners  onInitialized(ok);   Called when IAP initialized   onSuccess(p);   Called when an IAP processed successfully   onFailure(p, msg);   Called when an IAP fails   onCanceled(p);   Called when user canceled the IAP   onRestored(p);   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   onProductRequestFailure(msg);   Called when the product request fails   onRestoreComplete(ok, msg);   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework  SystemConfiguration.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy jar files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 - v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/iap/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/iap/v3-lua/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.IAP:init()\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP:refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP:purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP:restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP:setListener(function(args)\n        if \nonSuccess\n == args.event then\n                local product = args.product\n                dump(product, \nonSuccess:\n)\n        elseif \nonFailure\n == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product, \nonFailure:\n)\n                print(\nmsg:\n, msg)\n        elseif \nonCanceled\n == args.event then\n                local product = args.product\n                dump(product, \nonCanceled:\n)\n        elseif \nonRestored\n == args.event then\n                local product = args.product\n                dump(product, \nonRestored:\n)\n        elseif \nonProductRequestSuccess\n == args.event then\n                local products = args.products\n                dump(products, \nonProductRequestSuccess:\n)\n        elseif \nonProductRequestFailure\n == args.event then\n                local msg = args.msg\n                print(\nmsg:\n, msg)\n        else\n                print(\nunknown event \n, args.event)\n        end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP:init()\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP:setDebug(debug)\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP:purchase(name)\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP:refresh()\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP:restore()\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP:setListener(listener)\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP:removeListener()\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nonInitialized(ok)\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nonSuccess(p)\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nonFailure(p, msg)\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nonCanceled(p)\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nonRestored(p)\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nonProductRequestSuccess(products)\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nonProductRequestFailure(msg)\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nonRestoreComplete(ok, msg)\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy jar files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 - v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "In-App Purchases(IAP) with Lua"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#usage", 
            "text": "Initialize IAP   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.IAP:init()  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP:refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP:purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP:restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP:setListener(function(args)\n        if  onSuccess  == args.event then\n                local product = args.product\n                dump(product,  onSuccess: )\n        elseif  onFailure  == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product,  onFailure: )\n                print( msg: , msg)\n        elseif  onCanceled  == args.event then\n                local product = args.product\n                dump(product,  onCanceled: )\n        elseif  onRestored  == args.event then\n                local product = args.product\n                dump(product,  onRestored: )\n        elseif  onProductRequestSuccess  == args.event then\n                local products = args.products\n                dump(products,  onProductRequestSuccess: )\n        elseif  onProductRequestFailure  == args.event then\n                local msg = args.msg\n                print( msg: , msg)\n        else\n                print( unknown event  , args.event)\n        end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.IAP:init()   Initialize SDKBox IAP   sdkbox.IAP:setDebug(debug)   Enable/disable debug logging   sdkbox.IAP:purchase(name)   Make a purchase request   sdkbox.IAP:refresh()   Refresh the IAP data(title, price, description)   sdkbox.IAP:restore()   Restore purchase   sdkbox.IAP:setListener(listener)   Set listener for IAP   sdkbox.IAP:removeListener()   Remove listener for IAP   Listeners  onInitialized(ok)   Called when IAP initialized   onSuccess(p)   Called when an IAP processed successfully   onFailure(p, msg)   Called when an IAP fails   onCanceled(p)   Called when user canceled the IAP   onRestored(p)   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   onProductRequestSuccess(products)   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   onProductRequestFailure(msg)   Called when the product request fails   onRestoreComplete(ok, msg)   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework  SystemConfiguration.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy jar files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 - v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginIAP/PluginIAP.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::IAP::init();\n}\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox::IAP::refresh()\n.\n\n\n\n\nonProductRequestSuccess\n will be trigged if retrieved successfully.\n\n\nonProductRequestFailure\n will be trigged if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox::IAP::purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox::IAP::restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\n\n\nAllow your class to extend \nsdkbox::IAPListener\n:\n\n\n\n\n#include \nPluginIAP/PluginIAP.h\n\nclass MyClass : public sdkbox::IAPListener\n{\nprivate:\n  virtual void onInitialized(bool ok) override;\n  virtual void onSuccess(sdkbox::Product const\n p) override;\n  virtual void onFailure(sdkbox::Product const\n p, const std::string \nmsg) override;\n  virtual void onCanceled(sdkbox::Product const\n p) override;\n  virtual void onRestored(sdkbox::Product const\n p) override;\n  virtual void onProductRequestSuccess(std::vector\nsdkbox::Product\n const \nproducts) override;\n  virtual void onProductRequestFailure(const std::string \nmsg) override;\n  void onRestoreComplete(bool ok, const std::string \nmsg);\n}\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::IAP::setListener(listener);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nstatic void setDebug ( bool debug ) ;\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nstatic void purchase ( const std::string \n name ) ;\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nstatic void refresh ( ) ;\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nstatic void restore ( ) ;\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nstatic void setListener ( IAPListener * listener ) ;\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nvoid onInitialized ( bool ok );\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nvoid onSuccess ( const Product \n p );\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nvoid onFailure ( const Product \n p , const std::string \n msg );\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nvoid onCanceled ( const Product \n p );\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nvoid onRestored ( const Product \n p );\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nvoid onProductRequestSuccess ( const std::vector \nProduct\n \n products );\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nvoid onProductRequestFailure ( const std::string \n msg );\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nvoid onRestoreComplete ( bool ok , const std::string \n msg );\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy jar files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "In-App Purchases(IAP) with C++"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#usage", 
            "text": "Initialize IAP  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginIAP/PluginIAP.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::IAP::init();\n}  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox::IAP::refresh() .   onProductRequestSuccess  will be trigged if retrieved successfully.  onProductRequestFailure  will be trigged if exception occurs.   Make a purchase  To make a purchase call  sdkbox::IAP::purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox::IAP::restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.   Allow your class to extend  sdkbox::IAPListener :   #include  PluginIAP/PluginIAP.h \nclass MyClass : public sdkbox::IAPListener\n{\nprivate:\n  virtual void onInitialized(bool ok) override;\n  virtual void onSuccess(sdkbox::Product const  p) override;\n  virtual void onFailure(sdkbox::Product const  p, const std::string  msg) override;\n  virtual void onCanceled(sdkbox::Product const  p) override;\n  virtual void onRestored(sdkbox::Product const  p) override;\n  virtual void onProductRequestSuccess(std::vector sdkbox::Product  const  products) override;\n  virtual void onProductRequestFailure(const std::string  msg) override;\n  void onRestoreComplete(bool ok, const std::string  msg);\n}   Create a  listener  that handles callbacks:   sdkbox::IAP::setListener(listener);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   Initialize SDKBox IAP   static void setDebug ( bool debug ) ;   Enable/disable debug logging   static void purchase ( const std::string   name ) ;   Make a purchase request   static void refresh ( ) ;   Refresh the IAP data(title, price, description)   static void restore ( ) ;   Restore purchase   static void setListener ( IAPListener * listener ) ;   Set listener for IAP   static void removeListener ( ) ;   Remove listener for IAP   Listeners  void onInitialized ( bool ok );   Called when IAP initialized   void onSuccess ( const Product   p );   Called when an IAP processed successfully   void onFailure ( const Product   p , const std::string   msg );   Called when an IAP fails   void onCanceled ( const Product   p );   Called when user canceled the IAP   void onRestored ( const Product   p );   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   void onProductRequestSuccess ( const std::vector  Product    products );   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   void onProductRequestFailure ( const std::string   msg );   Called when the product request fails   void onRestoreComplete ( bool ok , const std::string   msg );   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework  SystemConfiguration.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy jar files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/iap/v2-js/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the IAP JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginIAPJS.hpp\n\n#include \nPluginIAPJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginIAPJS);\nsc-\naddRegisterCallback(register_all_PluginIAPJS_helper);\n\n\n\n\nInitialize IAP\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.IAP.init();\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP.refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP.purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP.restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i \n products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP.setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP.purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP.refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP.restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP.setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP.removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nonInitialized(ok);\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nonSuccess(p);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nonFailure(p, msg);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nonCanceled(p);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nonRestored(p);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nonProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nonProductRequestFailure(msg);\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nonRestoreComplete(ok, msg);\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy jar files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "In-App Purchases(IAP) with Javascript"
        }, 
        {
            "location": "/plugins/iap/v2-js/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/iap/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the IAP JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginIAPJS.hpp \n#include  PluginIAPJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginIAPJS);\nsc- addRegisterCallback(register_all_PluginIAPJS_helper);  Initialize IAP  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.IAP.init();  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP.refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP.purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP.restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i   products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-js/#api-reference", 
            "text": "Methods  sdkbox.IAP.init();   Initialize SDKBox IAP   sdkbox.IAP.setDebug(debug);   Enable/disable debug logging   sdkbox.IAP.purchase(name);   Make a purchase request   sdkbox.IAP.refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP.restore();   Restore purchase   sdkbox.IAP.setListener(listener);   Set listener for IAP   sdkbox.IAP.removeListener();   Remove listener for IAP   Listeners  onInitialized(ok);   Called when IAP initialized   onSuccess(p);   Called when an IAP processed successfully   onFailure(p, msg);   Called when an IAP fails   onCanceled(p);   Called when user canceled the IAP   onRestored(p);   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   onProductRequestFailure(msg);   Called when the product request fails   onRestoreComplete(ok, msg);   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework  SystemConfiguration.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy jar files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/iap/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/iap/v2-lua/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.IAP:init()\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP:refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP:purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP:restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP:setListener(function(args)\n        if \nonSuccess\n == args.event then\n                local product = args.product\n                dump(product, \nonSuccess:\n)\n        elseif \nonFailure\n == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product, \nonFailure:\n)\n                print(\nmsg:\n, msg)\n        elseif \nonCanceled\n == args.event then\n                local product = args.product\n                dump(product, \nonCanceled:\n)\n        elseif \nonRestored\n == args.event then\n                local product = args.product\n                dump(product, \nonRestored:\n)\n        elseif \nonProductRequestSuccess\n == args.event then\n                local products = args.products\n                dump(products, \nonProductRequestSuccess:\n)\n        elseif \nonProductRequestFailure\n == args.event then\n                local msg = args.msg\n                print(\nmsg:\n, msg)\n        else\n                print(\nunknown event \n, args.event)\n        end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP:init()\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP:setDebug(debug)\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP:purchase(name)\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP:refresh()\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP:restore()\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP:setListener(listener)\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP:removeListener()\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nonInitialized(ok)\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nonSuccess(p)\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nonFailure(p, msg)\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nonCanceled(p)\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nonRestored(p)\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nonProductRequestSuccess(products)\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nonProductRequestFailure(msg)\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nonRestoreComplete(ok, msg)\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy jar files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "In-App Purchases(IAP) with Lua"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#usage", 
            "text": "Initialize IAP   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.IAP:init()  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP:refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP:purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP:restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP:setListener(function(args)\n        if  onSuccess  == args.event then\n                local product = args.product\n                dump(product,  onSuccess: )\n        elseif  onFailure  == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product,  onFailure: )\n                print( msg: , msg)\n        elseif  onCanceled  == args.event then\n                local product = args.product\n                dump(product,  onCanceled: )\n        elseif  onRestored  == args.event then\n                local product = args.product\n                dump(product,  onRestored: )\n        elseif  onProductRequestSuccess  == args.event then\n                local products = args.products\n                dump(products,  onProductRequestSuccess: )\n        elseif  onProductRequestFailure  == args.event then\n                local msg = args.msg\n                print( msg: , msg)\n        else\n                print( unknown event  , args.event)\n        end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.IAP:init()   Initialize SDKBox IAP   sdkbox.IAP:setDebug(debug)   Enable/disable debug logging   sdkbox.IAP:purchase(name)   Make a purchase request   sdkbox.IAP:refresh()   Refresh the IAP data(title, price, description)   sdkbox.IAP:restore()   Restore purchase   sdkbox.IAP:setListener(listener)   Set listener for IAP   sdkbox.IAP:removeListener()   Remove listener for IAP   Listeners  onInitialized(ok)   Called when IAP initialized   onSuccess(p)   Called when an IAP processed successfully   onFailure(p, msg)   Called when an IAP fails   onCanceled(p)   Called when user canceled the IAP   onRestored(p)   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   onProductRequestSuccess(products)   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   onProductRequestFailure(msg)   Called when the product request fails   onRestoreComplete(ok, msg)   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework  SystemConfiguration.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy jar files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/", 
            "text": "InMobi\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import inmobi\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the InMobi configuration, you need to replace \naccount_id\n item with your specific \nInMobi\n account information.\n\n\nInMobi\n:{\n    \ninterstitial_placement_id\n: \n1449919424310\n,       //interstitial id\n    \naccount_id\n: \n922cc696d9fa475097651b5cad78567d\n, \n    \nbanner_h\n: 50,                                     //banner height\n    \nbanner_placement_id\n: \n1447081423897\n              //remove if needn't\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize InMobi\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginInMobi/PluginInMobi.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginInMobi::init();\n}\n\n\n\n\nShow interstitial\n\n\nAfter initialization you can begin to use the InMobi functionality:\n\n\n// Manually Loading Ads\nsdkbox::PluginInMobi::loadInterstitial();\n\nif (sdkbox::PluginInMobi::isInterstitialReady()) {\n    CCLOG(\nPlugin InMobi interstitial ad is ready\n);\n    sdkbox::PluginInMobi::showInterstitial();\n} else {\n    CCLOG(\nPlugin InMobi interstitial ad is not ready\n);\n}\n\n\n\n\nSet Log level\n\n\nYou can set log level with follow function\n\n\nsdkbox::PluginInMobi::setLogLevel(sdkbox::PluginInMobi::SBIMSDKLogLevel::kIMSDKLogLevelDebug);\n\n\n\n\nSet user data\n\n\nYou can use following functions to set user data\n\n\nsdkbox::PluginInMobi::addIdForType(\ntest\n, sdkbox::PluginInMobi::SBIMSDKIdType::kIMSDKIdTypeLogin);\nsdkbox::PluginInMobi::removeIdType(sdkbox::PluginInMobi::SBIMSDKIdType::kIMSDKIdTypeLogin);\nsdkbox::PluginInMobi::setAge(18);\nsdkbox::PluginInMobi::setAreaCode(\n900\n);\nsdkbox::PluginInMobi::setAgeGroup(sdkbox::PluginInMobi::SBIMSDKAgeGroup::kIMSDKAgeGroupBetween18And20);\nsdkbox::PluginInMobi::setYearOfBirth(1989);\nsdkbox::PluginInMobi::setEducation(sdkbox::PluginInMobi::SBIMSDKEducation::kIMSDKEducationHighSchoolOrLess);\nsdkbox::PluginInMobi::setEthnicity(sdkbox::PluginInMobi::SBIMSDKEthnicity::kIMSDKEthnicityHispanic);\nsdkbox::PluginInMobi::setGender(sdkbox::PluginInMobi::SBIMSDKGender::kIMSDKGenderMale);\nsdkbox::PluginInMobi::setHouseholdIncome(sdkbox::PluginInMobi::SBIMSDKHouseholdIncome::kIMSDKHouseholdIncomeBelow5kUSD);\nsdkbox::PluginInMobi::setIncome(4500);\nsdkbox::PluginInMobi::setInterests(\ngame\n);\nsdkbox::PluginInMobi::setLanguage(\nen-us\n);\nsdkbox::PluginInMobi::setLocation(\ncd\n, \nsc\n, \nusa\n);\nsdkbox::PluginInMobi::setLocation(102, 348);\nsdkbox::PluginInMobi::setNationality(\nnationality\n);\nsdkbox::PluginInMobi::setPostalCode(\n618000\n);\n\n\n\n\nCatch InMobi events (optional)\n\n\nThis allows you to catch the \nInMobi\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::InMobiListener\n\n\n\n\n#include \nPluginInMobi/PluginInMobi.h\n\nclass MyClass : public sdkbox::InMobiListener {\npublic:\n    void bannerDidFinishLoading() {\n        CCLOG(\nbannerDidFinishLoading\n);\n    };\n    void bannerDidFailToLoadWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string\n description) {\n        CCLOG(\nbannerDidFailToLoadWithError status:%d, desc:%s\n, code, description.c_str());\n    };\n\n    void bannerDidInteractWithParams(std::map\nstd::string, std::string\n params) {\n        CCLOG(\nbannerDidInteractWithParams\n);\n    };\n\n    void userWillLeaveApplicationFromBanner() {\n        CCLOG(\nuserWillLeaveApplicationFromBanner\n);\n    };\n\n    void bannerWillPresentScreen() {\n        CCLOG(\nbannerWillPresentScreen\n);\n    };\n\n    void bannerDidPresentScreen() {\n        CCLOG(\nbannerDidPresentScreen\n);\n    };\n\n    void bannerWillDismissScreen() {\n        CCLOG(\nbannerWillDismissScreen\n);\n    };\n\n    void bannerDidDismissScreen() {\n        CCLOG(\nbannerDidDismissScreen\n);\n    };\n\n    void bannerRewardActionCompletedWithRewards(std::map\nstd::string, std::string\n rewards) {\n        CCLOG(\nbannerRewardActionCompletedWithRewards\n);\n    };\n\n    void interstitialDidFinishLoading() {\n        CCLOG(\ninterstitialDidFinishLoading\n);\n    };\n\n    void interstitialDidFailToLoadWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string\n description) {\n        CCLOG(\ninterstitialDidFailToLoadWithError status:%d, desc:%s\n, code, description.c_str());\n    };\n\n    void interstitialWillPresent() {\n        CCLOG(\ninterstitialWillPresent\n);\n    };\n\n    void interstitialDidPresent() {\n        CCLOG(\ninterstitialDidPresent\n);\n    };\n\n    void interstitialDidFailToPresentWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string\n description) {\n        CCLOG(\ninterstitialDidFailToPresentWithError\n);\n    };\n\n    void interstitialWillDismiss() {\n        CCLOG(\ninterstitialWillDismiss\n);\n    };\n\n    void interstitialDidDismiss() {\n        CCLOG(\ninterstitialDidDismiss\n);\n    };\n\n    void interstitialDidInteractWithParams(std::map\nstd::string, std::string\n params) {\n        CCLOG(\ninterstitialDidInteractWithParams\n);\n    };\n\n    void interstitialRewardActionCompletedWithRewards(std::map\nstd::string, std::string\n rewards) {\n        CCLOG(\ninterstitialRewardActionCompletedWithRewards\n);\n    };\n\n    void userWillLeaveApplicationFromInterstitial() {\n        CCLOG(\nuserWillLeaveApplicationFromInterstitial\n);\n    };\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginInMobi::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( InMobiListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for inmobi events\n\n\n\n\nstatic InMobiListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic std::string getVersion ( ) ;\n\n\n\n\n\n\nUse this to get the version of the SDK.\n@return The version of the SDK.\n\n\n\n\nstatic void setLogLevel ( SBIMSDKLogLevel desiredLogLevel ) ;\n\n\n\n\n\n\nSet the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.\n\n\n\n\nstatic void addIdForType ( const std::string \n identifier ,\n                           SBIMSDKIdType type ) ;\n\n\n\n\n\n\nRegister a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.\n\n\n\n\nstatic void removeIdType ( SBIMSDKIdType type ) ;\n\n\n\n\n\n\nDeregister a particular set of Ids\n@param type The user Id type.\n\n\n\n\nstatic void setAge ( int age ) ;\n\n\n\n\n\n\nProvide the user's age to the SDK for targetting purposes.\n@param age The user's age.\n\n\n\n\nstatic void setAreaCode ( const std::string \n areaCode ) ;\n\n\n\n\n\n\nProvide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.\n\n\n\n\nstatic void setAgeGroup ( SBIMSDKAgeGroup ageGroup ) ;\n\n\n\n\n\n\nProvide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.\n\n\n\n\nstatic void setYearOfBirth ( int yearOfBirth ) ;\n\n\n\n\n\n\nProvide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.\n\n\n\n\nstatic void setEducation ( SBIMSDKEducation education ) ;\n\n\n\n\n\n\nProvide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.\n\n\n\n\nstatic void setEthnicity ( SBIMSDKEthnicity ethnicity ) ;\n\n\n\n\n\n\nProvide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.\n\n\n\n\nstatic void setGender ( SBIMSDKGender gender ) ;\n\n\n\n\n\n\nProvide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.\n\n\n\n\nstatic void setHouseholdIncome ( SBIMSDKHouseholdIncome income ) ;\n\n\n\n\n\n\nProvide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.\n\n\n\n\nstatic void setIncome ( unsigned int income ) ;\n\n\n\n\n\n\nProvide the user's income to the SDK for targetting purposes.\n@param income The user's income.\n\n\n\n\nstatic void setInterests ( const std::string \n interests ) ;\n\n\n\n\n\n\nProvide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.\n\n\n\n\nstatic void setLanguage ( const std::string \n language ) ;\n\n\n\n\n\n\nProvide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.\n\n\n\n\nstatic void setLocation ( const std::string \n city ,\n                          const std::string \n state ,\n                          const std::string \n country ) ;\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.\n\n\n\n\nstatic void setLocation ( double latitude , double longitude ) ;\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param location: The location of the user\n\n\n\n\nstatic void setNationality ( const std::string \n nationality ) ;\n\n\n\n\n\n\nProvide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.\n\n\n\n\nstatic void setPostalCode ( const std::string \n postalcode ) ;\n\n\n\n\n\n\nProvide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.\n\n\n\n\nstatic void shouldAutoRefresh ( bool refresh ) ;\n\n\n\n\n\n\nControl if the banner should auto-refresh ad content.\n\n\n\n\nstatic void setRefreshInterval ( int interval ) ;\n\n\n\n\n\n\nSpecify the refresh interval for the banner ad.\n\n\n\n\nstatic void loadBanner ( ) ;\n\n\n\n\n\n\nSubmit a request to load banner ad content.\n\n\n\n\nstatic void disableHardwareAccelerationForBanner ( ) ;\n\n\n\n\n\n\nTurn off hardware acceleration on the underlying views.\nvaild on android\n\n\n\n\nstatic void setBannerAnimationType ( SBIMBannerAnimationType animationType ) ;\n\n\n\n\n\n\nSet the animation preference on the banner views during ad refresh.\n\n\n\n\nstatic void setBannerExtras ( const std::map \nstd::string ,\n                              std::string\n \n extras ) ;\n\n\n\n\n\n\nSet any additional custom parameters that will be sent in the ad request.\n\n\n\n\nstatic void setBannerKeywords ( const std::string \n keywords ) ;\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nstatic void loadInterstitial ( ) ;\n\n\n\n\n\n\nSubmit a request to load interstitial ad content.\n\n\n\n\nstatic bool isInterstitialReady ( ) ;\n\n\n\n\n\n\nReturns true if the interstitial was loaded successfully and in ready to be shown.\n\n\n\n\nstatic void showInterstitial ( ) ;\n\n\n\n\n\n\nDisplays the interstitial on the screen\n\n\n\n\nstatic void showInterstitial ( SBIMInterstitialAnimationType type ) ;\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on ios\n\n\n\n\nstatic void showInterstitial ( int enterAnimationResourcedId ,\n                               int exitAnimationResourceId ) ;\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on android\n\n\n\n\nstatic void disableHardwareAccelerationForInterstitial ( ) ;\n\n\n\n\n\n\nDisable hardware acceleration on the underlying views.\nvalid on android\n\n\n\n\nstatic void setInterstitialExtras ( const std::map \nstd::string ,\n                                    std::string\n \n extras ) ;\n\n\n\n\n\n\nSet any additional custom parameters that will be sent in the ad request.\n\n\n\n\nstatic void setInterstitialKeywords ( const std::string \n keywords ) ;\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nListeners\n\n\nvoid bannerDidFinishLoading ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner has finished loading\n\n\n\n\nvoid bannerDidFailToLoadWithError ( PluginInMobi::SBIMStatusCode code ,\n                                    const std::string \n description ) {\n\n\n\n\n\n\nNotifies the delegate that the banner has failed to load with some error.\n\n\n\n\nvoid bannerDidInteractWithParams ( std::map \nstd::string ,\n                                   std::string\n params ) {\n\n\n\n\n\n\nNotifies the delegate that the banner was interacted with.\n\n\n\n\nvoid userWillLeaveApplicationFromBanner ( ) {\n\n\n\n\n\n\nNotifies the delegate that the user would be taken out of the application context.\n\n\n\n\nvoid bannerWillPresentScreen ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner would be presenting a full screen content.\n\n\n\n\nvoid bannerDidPresentScreen ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner has finished presenting screen.\n\n\n\n\nvoid bannerWillDismissScreen ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner will start dismissing the presented screen.\n\n\n\n\nvoid bannerDidDismissScreen ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner has dismissed the presented screen.\n\n\n\n\nvoid bannerRewardActionCompletedWithRewards ( std::map \nstd::string ,\n                                              std::string\n rewards ) {\n\n\n\n\n\n\nNotifies the delegate that the user has completed the action to be incentivised with.\n\n\n\n\nvoid interstitialDidFinishLoading ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has finished loading\n\n\n\n\nvoid interstitialDidFailToLoadWithError ( PluginInMobi::SBIMStatusCode code ,\n                                          const std::string \n description ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to load with some error.\n\n\n\n\nvoid interstitialWillPresent ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial would be presented.\n\n\n\n\nvoid interstitialDidPresent ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been presented.\n\n\n\n\nvoid interstitialDidFailToPresentWithError ( PluginInMobi::SBIMStatusCode code ,\n                                             const std::string \n description ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to present with some error.\n\n\n\n\nvoid interstitialWillDismiss ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial will be dismissed.\n\n\n\n\nvoid interstitialDidDismiss ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been dismissed.\n\n\n\n\nvoid interstitialDidInteractWithParams ( std::map \nstd::string ,\n                                         std::string\n params ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been interacted with.\n\n\n\n\nvoid interstitialRewardActionCompletedWithRewards ( std::map \nstd::string ,\n                                                    std::string\n rewards ) {\n\n\n\n\n\n\nNotifies the delegate that the user has performed the action to be incentivised with.\n\n\n\n\nvoid userWillLeaveApplicationFromInterstitial ( ) {\n\n\n\n\n\n\nNotifies the delegate that the user will leave application context.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nInMobi\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginInMobi.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nSafariServices.framework\n\n\nGameController.framework\n\n\nlibsqlite3.0.tbd\n\n\nlibc++.tbd\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nInMobiLib.jar\n\n\nPluginInMobi.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n!--Mandatory permissions to receive ads--\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n!--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.CHANGE_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n/\n\n\nuses-permission android:name=\nandroid.permission.RECORD_AUDIO\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n/\n\n\nuses-permission android:name=\ncom.google.android.gms.permission.ACTIVITY_RECOGNITION\n/\n\n\nuses-permission android:name=\nandroid.permission.READ_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.GET_TASKS\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "InMobi with C++"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/#inmobi", 
            "text": "", 
            "title": "InMobi"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import inmobi", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the InMobi configuration, you need to replace  account_id  item with your specific  InMobi  account information.  InMobi :{\n     interstitial_placement_id :  1449919424310 ,       //interstitial id\n     account_id :  922cc696d9fa475097651b5cad78567d , \n     banner_h : 50,                                     //banner height\n     banner_placement_id :  1447081423897               //remove if needn't\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/#usage", 
            "text": "Initialize InMobi  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginInMobi/PluginInMobi.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginInMobi::init();\n}  Show interstitial  After initialization you can begin to use the InMobi functionality:  // Manually Loading Ads\nsdkbox::PluginInMobi::loadInterstitial();\n\nif (sdkbox::PluginInMobi::isInterstitialReady()) {\n    CCLOG( Plugin InMobi interstitial ad is ready );\n    sdkbox::PluginInMobi::showInterstitial();\n} else {\n    CCLOG( Plugin InMobi interstitial ad is not ready );\n}  Set Log level  You can set log level with follow function  sdkbox::PluginInMobi::setLogLevel(sdkbox::PluginInMobi::SBIMSDKLogLevel::kIMSDKLogLevelDebug);  Set user data  You can use following functions to set user data  sdkbox::PluginInMobi::addIdForType( test , sdkbox::PluginInMobi::SBIMSDKIdType::kIMSDKIdTypeLogin);\nsdkbox::PluginInMobi::removeIdType(sdkbox::PluginInMobi::SBIMSDKIdType::kIMSDKIdTypeLogin);\nsdkbox::PluginInMobi::setAge(18);\nsdkbox::PluginInMobi::setAreaCode( 900 );\nsdkbox::PluginInMobi::setAgeGroup(sdkbox::PluginInMobi::SBIMSDKAgeGroup::kIMSDKAgeGroupBetween18And20);\nsdkbox::PluginInMobi::setYearOfBirth(1989);\nsdkbox::PluginInMobi::setEducation(sdkbox::PluginInMobi::SBIMSDKEducation::kIMSDKEducationHighSchoolOrLess);\nsdkbox::PluginInMobi::setEthnicity(sdkbox::PluginInMobi::SBIMSDKEthnicity::kIMSDKEthnicityHispanic);\nsdkbox::PluginInMobi::setGender(sdkbox::PluginInMobi::SBIMSDKGender::kIMSDKGenderMale);\nsdkbox::PluginInMobi::setHouseholdIncome(sdkbox::PluginInMobi::SBIMSDKHouseholdIncome::kIMSDKHouseholdIncomeBelow5kUSD);\nsdkbox::PluginInMobi::setIncome(4500);\nsdkbox::PluginInMobi::setInterests( game );\nsdkbox::PluginInMobi::setLanguage( en-us );\nsdkbox::PluginInMobi::setLocation( cd ,  sc ,  usa );\nsdkbox::PluginInMobi::setLocation(102, 348);\nsdkbox::PluginInMobi::setNationality( nationality );\nsdkbox::PluginInMobi::setPostalCode( 618000 );  Catch InMobi events (optional)  This allows you to catch the  InMobi  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::InMobiListener   #include  PluginInMobi/PluginInMobi.h \nclass MyClass : public sdkbox::InMobiListener {\npublic:\n    void bannerDidFinishLoading() {\n        CCLOG( bannerDidFinishLoading );\n    };\n    void bannerDidFailToLoadWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string  description) {\n        CCLOG( bannerDidFailToLoadWithError status:%d, desc:%s , code, description.c_str());\n    };\n\n    void bannerDidInteractWithParams(std::map std::string, std::string  params) {\n        CCLOG( bannerDidInteractWithParams );\n    };\n\n    void userWillLeaveApplicationFromBanner() {\n        CCLOG( userWillLeaveApplicationFromBanner );\n    };\n\n    void bannerWillPresentScreen() {\n        CCLOG( bannerWillPresentScreen );\n    };\n\n    void bannerDidPresentScreen() {\n        CCLOG( bannerDidPresentScreen );\n    };\n\n    void bannerWillDismissScreen() {\n        CCLOG( bannerWillDismissScreen );\n    };\n\n    void bannerDidDismissScreen() {\n        CCLOG( bannerDidDismissScreen );\n    };\n\n    void bannerRewardActionCompletedWithRewards(std::map std::string, std::string  rewards) {\n        CCLOG( bannerRewardActionCompletedWithRewards );\n    };\n\n    void interstitialDidFinishLoading() {\n        CCLOG( interstitialDidFinishLoading );\n    };\n\n    void interstitialDidFailToLoadWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string  description) {\n        CCLOG( interstitialDidFailToLoadWithError status:%d, desc:%s , code, description.c_str());\n    };\n\n    void interstitialWillPresent() {\n        CCLOG( interstitialWillPresent );\n    };\n\n    void interstitialDidPresent() {\n        CCLOG( interstitialDidPresent );\n    };\n\n    void interstitialDidFailToPresentWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string  description) {\n        CCLOG( interstitialDidFailToPresentWithError );\n    };\n\n    void interstitialWillDismiss() {\n        CCLOG( interstitialWillDismiss );\n    };\n\n    void interstitialDidDismiss() {\n        CCLOG( interstitialDidDismiss );\n    };\n\n    void interstitialDidInteractWithParams(std::map std::string, std::string  params) {\n        CCLOG( interstitialDidInteractWithParams );\n    };\n\n    void interstitialRewardActionCompletedWithRewards(std::map std::string, std::string  rewards) {\n        CCLOG( interstitialRewardActionCompletedWithRewards );\n    };\n\n    void userWillLeaveApplicationFromInterstitial() {\n        CCLOG( userWillLeaveApplicationFromInterstitial );\n    };\n};   Create a  listener  that handles callbacks:   sdkbox::PluginInMobi::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( InMobiListener * listener ) ;   Set listener to listen for inmobi events   static InMobiListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static std::string getVersion ( ) ;   Use this to get the version of the SDK.\n@return The version of the SDK.   static void setLogLevel ( SBIMSDKLogLevel desiredLogLevel ) ;   Set the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.   static void addIdForType ( const std::string   identifier ,\n                           SBIMSDKIdType type ) ;   Register a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.   static void removeIdType ( SBIMSDKIdType type ) ;   Deregister a particular set of Ids\n@param type The user Id type.   static void setAge ( int age ) ;   Provide the user's age to the SDK for targetting purposes.\n@param age The user's age.   static void setAreaCode ( const std::string   areaCode ) ;   Provide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.   static void setAgeGroup ( SBIMSDKAgeGroup ageGroup ) ;   Provide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.   static void setYearOfBirth ( int yearOfBirth ) ;   Provide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.   static void setEducation ( SBIMSDKEducation education ) ;   Provide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.   static void setEthnicity ( SBIMSDKEthnicity ethnicity ) ;   Provide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.   static void setGender ( SBIMSDKGender gender ) ;   Provide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.   static void setHouseholdIncome ( SBIMSDKHouseholdIncome income ) ;   Provide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.   static void setIncome ( unsigned int income ) ;   Provide the user's income to the SDK for targetting purposes.\n@param income The user's income.   static void setInterests ( const std::string   interests ) ;   Provide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.   static void setLanguage ( const std::string   language ) ;   Provide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.   static void setLocation ( const std::string   city ,\n                          const std::string   state ,\n                          const std::string   country ) ;   Provide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.   static void setLocation ( double latitude , double longitude ) ;   Provide the user's location to the SDK for targetting purposes.\n@param location: The location of the user   static void setNationality ( const std::string   nationality ) ;   Provide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.   static void setPostalCode ( const std::string   postalcode ) ;   Provide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.   static void shouldAutoRefresh ( bool refresh ) ;   Control if the banner should auto-refresh ad content.   static void setRefreshInterval ( int interval ) ;   Specify the refresh interval for the banner ad.   static void loadBanner ( ) ;   Submit a request to load banner ad content.   static void disableHardwareAccelerationForBanner ( ) ;   Turn off hardware acceleration on the underlying views.\nvaild on android   static void setBannerAnimationType ( SBIMBannerAnimationType animationType ) ;   Set the animation preference on the banner views during ad refresh.   static void setBannerExtras ( const std::map  std::string ,\n                              std::string    extras ) ;   Set any additional custom parameters that will be sent in the ad request.   static void setBannerKeywords ( const std::string   keywords ) ;   Set comma delimited keywords for targeting purpose   static void loadInterstitial ( ) ;   Submit a request to load interstitial ad content.   static bool isInterstitialReady ( ) ;   Returns true if the interstitial was loaded successfully and in ready to be shown.   static void showInterstitial ( ) ;   Displays the interstitial on the screen   static void showInterstitial ( SBIMInterstitialAnimationType type ) ;   Displays the interstitial on the screen\nvalid on ios   static void showInterstitial ( int enterAnimationResourcedId ,\n                               int exitAnimationResourceId ) ;   Displays the interstitial on the screen\nvalid on android   static void disableHardwareAccelerationForInterstitial ( ) ;   Disable hardware acceleration on the underlying views.\nvalid on android   static void setInterstitialExtras ( const std::map  std::string ,\n                                    std::string    extras ) ;   Set any additional custom parameters that will be sent in the ad request.   static void setInterstitialKeywords ( const std::string   keywords ) ;   Set comma delimited keywords for targeting purpose   Listeners  void bannerDidFinishLoading ( ) {   Notifies the delegate that the banner has finished loading   void bannerDidFailToLoadWithError ( PluginInMobi::SBIMStatusCode code ,\n                                    const std::string   description ) {   Notifies the delegate that the banner has failed to load with some error.   void bannerDidInteractWithParams ( std::map  std::string ,\n                                   std::string  params ) {   Notifies the delegate that the banner was interacted with.   void userWillLeaveApplicationFromBanner ( ) {   Notifies the delegate that the user would be taken out of the application context.   void bannerWillPresentScreen ( ) {   Notifies the delegate that the banner would be presenting a full screen content.   void bannerDidPresentScreen ( ) {   Notifies the delegate that the banner has finished presenting screen.   void bannerWillDismissScreen ( ) {   Notifies the delegate that the banner will start dismissing the presented screen.   void bannerDidDismissScreen ( ) {   Notifies the delegate that the banner has dismissed the presented screen.   void bannerRewardActionCompletedWithRewards ( std::map  std::string ,\n                                              std::string  rewards ) {   Notifies the delegate that the user has completed the action to be incentivised with.   void interstitialDidFinishLoading ( ) {   Notifies the delegate that the interstitial has finished loading   void interstitialDidFailToLoadWithError ( PluginInMobi::SBIMStatusCode code ,\n                                          const std::string   description ) {   Notifies the delegate that the interstitial has failed to load with some error.   void interstitialWillPresent ( ) {   Notifies the delegate that the interstitial would be presented.   void interstitialDidPresent ( ) {   Notifies the delegate that the interstitial has been presented.   void interstitialDidFailToPresentWithError ( PluginInMobi::SBIMStatusCode code ,\n                                             const std::string   description ) {   Notifies the delegate that the interstitial has failed to present with some error.   void interstitialWillDismiss ( ) {   Notifies the delegate that the interstitial will be dismissed.   void interstitialDidDismiss ( ) {   Notifies the delegate that the interstitial has been dismissed.   void interstitialDidInteractWithParams ( std::map  std::string ,\n                                         std::string  params ) {   Notifies the delegate that the interstitial has been interacted with.   void interstitialRewardActionCompletedWithRewards ( std::map  std::string ,\n                                                    std::string  rewards ) {   Notifies the delegate that the user has performed the action to be incentivised with.   void userWillLeaveApplicationFromInterstitial ( ) {   Notifies the delegate that the user will leave application context.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  InMobi  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginInMobi.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CoreLocation.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework  SafariServices.framework  GameController.framework  libsqlite3.0.tbd  libc++.tbd", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   InMobiLib.jar  PluginInMobi.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  !--Mandatory permissions to receive ads--  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  !--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_FINE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /  uses-permission android:name= android.permission.CHANGE_WIFI_STATE /  uses-permission android:name= android.permission.VIBRATE /  uses-permission android:name= android.permission.RECORD_AUDIO /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE /  uses-permission android:name= com.google.android.gms.permission.ACTIVITY_RECOGNITION /  uses-permission android:name= android.permission.READ_CALENDAR /  uses-permission android:name= android.permission.WRITE_CALENDAR /  uses-permission android:name= android.permission.GET_TASKS /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/inmobi/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/", 
            "text": "InMobi\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import inmobi\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the InMobi configuration, you need to replace \naccount_id\n item with your specific \nInMobi\n account information.\n\n\nInMobi\n:{\n    \ninterstitial_placement_id\n: \n1449919424310\n,       //interstitial id\n    \naccount_id\n: \n922cc696d9fa475097651b5cad78567d\n, \n    \nbanner_h\n: 50,                                     //banner height\n    \nbanner_placement_id\n: \n1447081423897\n              //remove if needn't\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the InMobi JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginInMobiJS.hpp\n\n#include \nPluginInMobiJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginInMobiJS);\nsc-\naddRegisterCallback(register_all_PluginInMobiJS_helper);\n\n\n\n\nInitialize InMobi\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginInMobi.init();\n\n\n\n\nShow Interstitial\n\n\nAfter initialization you can begin to use the InMobi functionality. Use \nshowInterstitial\n wherever you want from your code:\n\n\n// Manually Loading Ads\nsdkbox.PluginInMobi.loadInterstitial();\n\n// show interstitial\nif (sdkbox.PluginInMobi.isInterstitialReady()) {\n    console.log('inmobi interstitial ad is ready');\n    sdkbox.PluginInMobi.showInterstitial();\n} else {\n    console.log('inmobi interstitial ad is not ready');\n}\n\n\n\n\nSet Log level\n\n\nYou can set log level with follow function\n\n\nsdkbox.PluginInMobi.setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);\n\n\n\n\nSet user data\n\n\nYou can use following functions to set user data\n\n\nsdkbox.PluginInMobi.addIdForType(\ntest\n, sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nsdkbox.PluginInMobi.removeIdType(sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nsdkbox.PluginInMobi.setAge(18);\nsdkbox.PluginInMobi.setAreaCode(\narea code\n);\nsdkbox.PluginInMobi.setAgeGroup(sdkbox.PluginInMobi.SBIMSDKAgeGroup.kIMSDKAgeGroupBetween18And20);\nsdkbox.PluginInMobi.setYearOfBirth(1989);\nsdkbox.PluginInMobi.setEducation(sdkbox.PluginInMobi.SBIMSDKEducation.kIMSDKEducationHighSchoolOrLess);\nsdkbox.PluginInMobi.setEthnicity(sdkbox.PluginInMobi.SBIMSDKEthnicity.kIMSDKEthnicityHispanic);\nsdkbox.PluginInMobi.setGender(sdkbox.PluginInMobi.SBIMSDKGender.kIMSDKGenderMale);\nsdkbox.PluginInMobi.setHouseholdIncome(sdkbox.PluginInMobi.SBIMSDKHouseholdIncome.kIMSDKHouseholdIncomeBelow5kUSD);\nsdkbox.PluginInMobi.setIncome(4500);\nsdkbox.PluginInMobi.setInterests(\ngame\n);\nsdkbox.PluginInMobi.setLanguage(\nzh-cn\n);\nsdkbox.PluginInMobi.setLocation(\ncd\n, \nsc\n, \nusa\n);\nsdkbox.PluginInMobi.setLocation(102, 348);\nsdkbox.PluginInMobi.setNationality(\nnationality\n);\nsdkbox.PluginInMobi.setPostalCode(\n618000\n);\n\n\n\n\nCatch InMobi events (optional)\n\n\nThis allows you to catch the \nInMobi\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nvar plugin = sdkbox.PluginInMobi\nplugin.setListener({\n    bannerDidFinishLoading: function() { console.log('bannerDidFinishLoading'); },\n    bannerDidFailToLoadWithError: function(code, description) { console.log('bannerDidFailToLoadWithError code:' + code + ' desc:' + description); },\n    bannerDidInteractWithParams: function(params) { console.log('bannerDidInteractWithParams'); },\n    userWillLeaveApplicationFromBanner: function() { console.log('userWillLeaveApplicationFromBanner'); },\n    bannerWillPresentScreen: function() { console.log('bannerWillPresentScreen'); },\n    bannerDidPresentScreen: function() { console.log('bannerDidPresentScreen'); },\n    bannerWillDismissScreen: function() { console.log('bannerWillDismissScreen'); },\n    bannerDidDismissScreen: function() { console.log('bannerDidDismissScreen'); },\n    bannerRewardActionCompletedWithRewards: function(rewards) { console.log('bannerRewardActionCompletedWithRewards'); },\n    interstitialDidFinishLoading: function() { console.log('interstitialDidFinishLoading'); },\n    interstitialDidFailToLoadWithError: function(code, description) { console.log('interstitialDidFailToLoadWithError code:' + code + ' desc:' + description); },\n    interstitialWillPresent: function() { console.log('interstitialWillPresent'); },\n    interstitialDidPresent: function() { console.log('interstitialDidPresent'); },\n    interstitialDidFailToPresentWithError: function(code, description) { console.log('interstitialDidFailToPresentWithError code:' + code + ' desc:' + description); },\n    interstitialWillDismiss: function() { console.log('interstitialWillDismiss'); },\n    interstitialDidDismiss: function() { console.log('interstitialDidDismiss'); },\n    interstitialDidInteractWithParams: function(params) { console.log('interstitialDidInteractWithParams'); },\n    interstitialRewardActionCompletedWithRewards: function(rewards) { console.log('interstitialRewardActionCompletedWithRewards'); },\n    userWillLeaveApplicationFromInterstitial: function() { console.log('userWillLeaveApplicationFromInterstitial'); }\n})\nplugin.init();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginInMobi.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginInMobi.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for inmobi events\n\n\n\n\nsdkbox.PluginInMobi.getVersion();\n\n\n\n\n\n\nUse this to get the version of the SDK.\n@return The version of the SDK.\n\n\n\n\nsdkbox.PluginInMobi.setLogLevel(desiredLogLevel);\n\n\n\n\n\n\nSet the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.\n\n\n\n\nsdkbox.PluginInMobi.addIdForType(identifier, type);\n\n\n\n\n\n\nRegister a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.\n\n\n\n\nsdkbox.PluginInMobi.removeIdType(type);\n\n\n\n\n\n\nDeregister a particular set of Ids\n@param type The user Id type.\n\n\n\n\nsdkbox.PluginInMobi.setAge(age);\n\n\n\n\n\n\nProvide the user's age to the SDK for targetting purposes.\n@param age The user's age.\n\n\n\n\nsdkbox.PluginInMobi.setAreaCode(areaCode);\n\n\n\n\n\n\nProvide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.\n\n\n\n\nsdkbox.PluginInMobi.setAgeGroup(ageGroup);\n\n\n\n\n\n\nProvide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.\n\n\n\n\nsdkbox.PluginInMobi.setYearOfBirth(yearOfBirth);\n\n\n\n\n\n\nProvide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.\n\n\n\n\nsdkbox.PluginInMobi.setEducation(education);\n\n\n\n\n\n\nProvide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.\n\n\n\n\nsdkbox.PluginInMobi.setEthnicity(ethnicity);\n\n\n\n\n\n\nProvide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.\n\n\n\n\nsdkbox.PluginInMobi.setGender(gender);\n\n\n\n\n\n\nProvide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.\n\n\n\n\nsdkbox.PluginInMobi.setHouseholdIncome(income);\n\n\n\n\n\n\nProvide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.\n\n\n\n\nsdkbox.PluginInMobi.setIncome(income);\n\n\n\n\n\n\nProvide the user's income to the SDK for targetting purposes.\n@param income The user's income.\n\n\n\n\nsdkbox.PluginInMobi.setInterests(interests);\n\n\n\n\n\n\nProvide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.\n\n\n\n\nsdkbox.PluginInMobi.setLanguage(language);\n\n\n\n\n\n\nProvide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.\n\n\n\n\nsdkbox.PluginInMobi.setLocation(city, state, country);\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.\n\n\n\n\nsdkbox.PluginInMobi.setLocation(latitude, longitude);\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param location: The location of the user\n\n\n\n\nsdkbox.PluginInMobi.setNationality(nationality);\n\n\n\n\n\n\nProvide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.\n\n\n\n\nsdkbox.PluginInMobi.setPostalCode(postalcode);\n\n\n\n\n\n\nProvide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.\n\n\n\n\nsdkbox.PluginInMobi.shouldAutoRefresh(refresh);\n\n\n\n\n\n\nControl if the banner should auto-refresh ad content.\n\n\n\n\nsdkbox.PluginInMobi.setRefreshInterval(interval);\n\n\n\n\n\n\nSpecify the refresh interval for the banner ad.\n\n\n\n\nsdkbox.PluginInMobi.loadBanner();\n\n\n\n\n\n\nSubmit a request to load banner ad content.\n\n\n\n\nsdkbox.PluginInMobi.disableHardwareAccelerationForBanner();\n\n\n\n\n\n\nTurn off hardware acceleration on the underlying views.\nvaild on android\n\n\n\n\nsdkbox.PluginInMobi.setBannerAnimationType(animationType);\n\n\n\n\n\n\nSet the animation preference on the banner views during ad refresh.\n\n\n\n\nsdkbox.PluginInMobi.setBannerKeywords(keywords);\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nsdkbox.PluginInMobi.loadInterstitial();\n\n\n\n\n\n\nSubmit a request to load interstitial ad content.\n\n\n\n\nsdkbox.PluginInMobi.isInterstitialReady();\n\n\n\n\n\n\nReturns true if the interstitial was loaded successfully and in ready to be shown.\n\n\n\n\nsdkbox.PluginInMobi.showInterstitial();\n\n\n\n\n\n\nDisplays the interstitial on the screen\n\n\n\n\nsdkbox.PluginInMobi.showInterstitial(type);\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on ios\n\n\n\n\nsdkbox.PluginInMobi.showInterstitial(enterAnimationResourcedId,\n                                      exitAnimationResourceId);\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on android\n\n\n\n\nsdkbox.PluginInMobi.disableHardwareAccelerationForInterstitial();\n\n\n\n\n\n\nDisable hardware acceleration on the underlying views.\nvalid on android\n\n\n\n\nsdkbox.PluginInMobi.setInterstitialKeywords(keywords);\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nListeners\n\n\nbannerDidFinishLoading();\n\n\n\n\n\n\nNotifies the delegate that the banner has finished loading\n\n\n\n\nbannerDidFailToLoadWithError(code, description);\n\n\n\n\n\n\nNotifies the delegate that the banner has failed to load with some error.\n\n\n\n\nbannerDidInteractWithParams(params);\n\n\n\n\n\n\nNotifies the delegate that the banner was interacted with.\n\n\n\n\nuserWillLeaveApplicationFromBanner();\n\n\n\n\n\n\nNotifies the delegate that the user would be taken out of the application context.\n\n\n\n\nbannerWillPresentScreen();\n\n\n\n\n\n\nNotifies the delegate that the banner would be presenting a full screen content.\n\n\n\n\nbannerDidPresentScreen();\n\n\n\n\n\n\nNotifies the delegate that the banner has finished presenting screen.\n\n\n\n\nbannerWillDismissScreen();\n\n\n\n\n\n\nNotifies the delegate that the banner will start dismissing the presented screen.\n\n\n\n\nbannerDidDismissScreen();\n\n\n\n\n\n\nNotifies the delegate that the banner has dismissed the presented screen.\n\n\n\n\nbannerRewardActionCompletedWithRewards(rewards);\n\n\n\n\n\n\nNotifies the delegate that the user has completed the action to be incentivised with.\n\n\n\n\ninterstitialDidFinishLoading();\n\n\n\n\n\n\nNotifies the delegate that the interstitial has finished loading\n\n\n\n\ninterstitialDidFailToLoadWithError(code, description);\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to load with some error.\n\n\n\n\ninterstitialWillPresent();\n\n\n\n\n\n\nNotifies the delegate that the interstitial would be presented.\n\n\n\n\ninterstitialDidPresent();\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been presented.\n\n\n\n\ninterstitialDidFailToPresentWithError(code, description);\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to present with some error.\n\n\n\n\ninterstitialWillDismiss();\n\n\n\n\n\n\nNotifies the delegate that the interstitial will be dismissed.\n\n\n\n\ninterstitialDidDismiss();\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been dismissed.\n\n\n\n\ninterstitialDidInteractWithParams(params);\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been interacted with.\n\n\n\n\ninterstitialRewardActionCompletedWithRewards(rewards);\n\n\n\n\n\n\nNotifies the delegate that the user has performed the action to be incentivised with.\n\n\n\n\nuserWillLeaveApplicationFromInterstitial();\n\n\n\n\n\n\nNotifies the delegate that the user will leave application context.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nInMobi\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginInMobi.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nSafariServices.framework\n\n\nGameController.framework\n\n\nlibsqlite3.0.tbd\n\n\nlibc++.tbd\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nInMobiLib.jar\n\n\nPluginInMobi.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n!--Mandatory permissions to receive ads--\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n!--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.CHANGE_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n/\n\n\nuses-permission android:name=\nandroid.permission.RECORD_AUDIO\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n/\n\n\nuses-permission android:name=\ncom.google.android.gms.permission.ACTIVITY_RECOGNITION\n/\n\n\nuses-permission android:name=\nandroid.permission.READ_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.GET_TASKS\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "InMobi with Javascript"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/#inmobi", 
            "text": "", 
            "title": "InMobi"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import inmobi", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the InMobi configuration, you need to replace  account_id  item with your specific  InMobi  account information.  InMobi :{\n     interstitial_placement_id :  1449919424310 ,       //interstitial id\n     account_id :  922cc696d9fa475097651b5cad78567d , \n     banner_h : 50,                                     //banner height\n     banner_placement_id :  1447081423897               //remove if needn't\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the InMobi JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginInMobiJS.hpp \n#include  PluginInMobiJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginInMobiJS);\nsc- addRegisterCallback(register_all_PluginInMobiJS_helper);  Initialize InMobi  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginInMobi.init();  Show Interstitial  After initialization you can begin to use the InMobi functionality. Use  showInterstitial  wherever you want from your code:  // Manually Loading Ads\nsdkbox.PluginInMobi.loadInterstitial();\n\n// show interstitial\nif (sdkbox.PluginInMobi.isInterstitialReady()) {\n    console.log('inmobi interstitial ad is ready');\n    sdkbox.PluginInMobi.showInterstitial();\n} else {\n    console.log('inmobi interstitial ad is not ready');\n}  Set Log level  You can set log level with follow function  sdkbox.PluginInMobi.setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);  Set user data  You can use following functions to set user data  sdkbox.PluginInMobi.addIdForType( test , sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nsdkbox.PluginInMobi.removeIdType(sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nsdkbox.PluginInMobi.setAge(18);\nsdkbox.PluginInMobi.setAreaCode( area code );\nsdkbox.PluginInMobi.setAgeGroup(sdkbox.PluginInMobi.SBIMSDKAgeGroup.kIMSDKAgeGroupBetween18And20);\nsdkbox.PluginInMobi.setYearOfBirth(1989);\nsdkbox.PluginInMobi.setEducation(sdkbox.PluginInMobi.SBIMSDKEducation.kIMSDKEducationHighSchoolOrLess);\nsdkbox.PluginInMobi.setEthnicity(sdkbox.PluginInMobi.SBIMSDKEthnicity.kIMSDKEthnicityHispanic);\nsdkbox.PluginInMobi.setGender(sdkbox.PluginInMobi.SBIMSDKGender.kIMSDKGenderMale);\nsdkbox.PluginInMobi.setHouseholdIncome(sdkbox.PluginInMobi.SBIMSDKHouseholdIncome.kIMSDKHouseholdIncomeBelow5kUSD);\nsdkbox.PluginInMobi.setIncome(4500);\nsdkbox.PluginInMobi.setInterests( game );\nsdkbox.PluginInMobi.setLanguage( zh-cn );\nsdkbox.PluginInMobi.setLocation( cd ,  sc ,  usa );\nsdkbox.PluginInMobi.setLocation(102, 348);\nsdkbox.PluginInMobi.setNationality( nationality );\nsdkbox.PluginInMobi.setPostalCode( 618000 );  Catch InMobi events (optional)  This allows you to catch the  InMobi  events so that you can perform operations based upon responses. A simple example might look like this:  var plugin = sdkbox.PluginInMobi\nplugin.setListener({\n    bannerDidFinishLoading: function() { console.log('bannerDidFinishLoading'); },\n    bannerDidFailToLoadWithError: function(code, description) { console.log('bannerDidFailToLoadWithError code:' + code + ' desc:' + description); },\n    bannerDidInteractWithParams: function(params) { console.log('bannerDidInteractWithParams'); },\n    userWillLeaveApplicationFromBanner: function() { console.log('userWillLeaveApplicationFromBanner'); },\n    bannerWillPresentScreen: function() { console.log('bannerWillPresentScreen'); },\n    bannerDidPresentScreen: function() { console.log('bannerDidPresentScreen'); },\n    bannerWillDismissScreen: function() { console.log('bannerWillDismissScreen'); },\n    bannerDidDismissScreen: function() { console.log('bannerDidDismissScreen'); },\n    bannerRewardActionCompletedWithRewards: function(rewards) { console.log('bannerRewardActionCompletedWithRewards'); },\n    interstitialDidFinishLoading: function() { console.log('interstitialDidFinishLoading'); },\n    interstitialDidFailToLoadWithError: function(code, description) { console.log('interstitialDidFailToLoadWithError code:' + code + ' desc:' + description); },\n    interstitialWillPresent: function() { console.log('interstitialWillPresent'); },\n    interstitialDidPresent: function() { console.log('interstitialDidPresent'); },\n    interstitialDidFailToPresentWithError: function(code, description) { console.log('interstitialDidFailToPresentWithError code:' + code + ' desc:' + description); },\n    interstitialWillDismiss: function() { console.log('interstitialWillDismiss'); },\n    interstitialDidDismiss: function() { console.log('interstitialDidDismiss'); },\n    interstitialDidInteractWithParams: function(params) { console.log('interstitialDidInteractWithParams'); },\n    interstitialRewardActionCompletedWithRewards: function(rewards) { console.log('interstitialRewardActionCompletedWithRewards'); },\n    userWillLeaveApplicationFromInterstitial: function() { console.log('userWillLeaveApplicationFromInterstitial'); }\n})\nplugin.init();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginInMobi.init();   initialize the plugin instance.   sdkbox.PluginInMobi.setListener(listener);   Set listener to listen for inmobi events   sdkbox.PluginInMobi.getVersion();   Use this to get the version of the SDK.\n@return The version of the SDK.   sdkbox.PluginInMobi.setLogLevel(desiredLogLevel);   Set the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.   sdkbox.PluginInMobi.addIdForType(identifier, type);   Register a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.   sdkbox.PluginInMobi.removeIdType(type);   Deregister a particular set of Ids\n@param type The user Id type.   sdkbox.PluginInMobi.setAge(age);   Provide the user's age to the SDK for targetting purposes.\n@param age The user's age.   sdkbox.PluginInMobi.setAreaCode(areaCode);   Provide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.   sdkbox.PluginInMobi.setAgeGroup(ageGroup);   Provide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.   sdkbox.PluginInMobi.setYearOfBirth(yearOfBirth);   Provide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.   sdkbox.PluginInMobi.setEducation(education);   Provide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.   sdkbox.PluginInMobi.setEthnicity(ethnicity);   Provide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.   sdkbox.PluginInMobi.setGender(gender);   Provide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.   sdkbox.PluginInMobi.setHouseholdIncome(income);   Provide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.   sdkbox.PluginInMobi.setIncome(income);   Provide the user's income to the SDK for targetting purposes.\n@param income The user's income.   sdkbox.PluginInMobi.setInterests(interests);   Provide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.   sdkbox.PluginInMobi.setLanguage(language);   Provide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.   sdkbox.PluginInMobi.setLocation(city, state, country);   Provide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.   sdkbox.PluginInMobi.setLocation(latitude, longitude);   Provide the user's location to the SDK for targetting purposes.\n@param location: The location of the user   sdkbox.PluginInMobi.setNationality(nationality);   Provide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.   sdkbox.PluginInMobi.setPostalCode(postalcode);   Provide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.   sdkbox.PluginInMobi.shouldAutoRefresh(refresh);   Control if the banner should auto-refresh ad content.   sdkbox.PluginInMobi.setRefreshInterval(interval);   Specify the refresh interval for the banner ad.   sdkbox.PluginInMobi.loadBanner();   Submit a request to load banner ad content.   sdkbox.PluginInMobi.disableHardwareAccelerationForBanner();   Turn off hardware acceleration on the underlying views.\nvaild on android   sdkbox.PluginInMobi.setBannerAnimationType(animationType);   Set the animation preference on the banner views during ad refresh.   sdkbox.PluginInMobi.setBannerKeywords(keywords);   Set comma delimited keywords for targeting purpose   sdkbox.PluginInMobi.loadInterstitial();   Submit a request to load interstitial ad content.   sdkbox.PluginInMobi.isInterstitialReady();   Returns true if the interstitial was loaded successfully and in ready to be shown.   sdkbox.PluginInMobi.showInterstitial();   Displays the interstitial on the screen   sdkbox.PluginInMobi.showInterstitial(type);   Displays the interstitial on the screen\nvalid on ios   sdkbox.PluginInMobi.showInterstitial(enterAnimationResourcedId,\n                                      exitAnimationResourceId);   Displays the interstitial on the screen\nvalid on android   sdkbox.PluginInMobi.disableHardwareAccelerationForInterstitial();   Disable hardware acceleration on the underlying views.\nvalid on android   sdkbox.PluginInMobi.setInterstitialKeywords(keywords);   Set comma delimited keywords for targeting purpose   Listeners  bannerDidFinishLoading();   Notifies the delegate that the banner has finished loading   bannerDidFailToLoadWithError(code, description);   Notifies the delegate that the banner has failed to load with some error.   bannerDidInteractWithParams(params);   Notifies the delegate that the banner was interacted with.   userWillLeaveApplicationFromBanner();   Notifies the delegate that the user would be taken out of the application context.   bannerWillPresentScreen();   Notifies the delegate that the banner would be presenting a full screen content.   bannerDidPresentScreen();   Notifies the delegate that the banner has finished presenting screen.   bannerWillDismissScreen();   Notifies the delegate that the banner will start dismissing the presented screen.   bannerDidDismissScreen();   Notifies the delegate that the banner has dismissed the presented screen.   bannerRewardActionCompletedWithRewards(rewards);   Notifies the delegate that the user has completed the action to be incentivised with.   interstitialDidFinishLoading();   Notifies the delegate that the interstitial has finished loading   interstitialDidFailToLoadWithError(code, description);   Notifies the delegate that the interstitial has failed to load with some error.   interstitialWillPresent();   Notifies the delegate that the interstitial would be presented.   interstitialDidPresent();   Notifies the delegate that the interstitial has been presented.   interstitialDidFailToPresentWithError(code, description);   Notifies the delegate that the interstitial has failed to present with some error.   interstitialWillDismiss();   Notifies the delegate that the interstitial will be dismissed.   interstitialDidDismiss();   Notifies the delegate that the interstitial has been dismissed.   interstitialDidInteractWithParams(params);   Notifies the delegate that the interstitial has been interacted with.   interstitialRewardActionCompletedWithRewards(rewards);   Notifies the delegate that the user has performed the action to be incentivised with.   userWillLeaveApplicationFromInterstitial();   Notifies the delegate that the user will leave application context.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  InMobi  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginInMobi.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CoreLocation.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework  SafariServices.framework  GameController.framework  libsqlite3.0.tbd  libc++.tbd   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   InMobiLib.jar  PluginInMobi.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  !--Mandatory permissions to receive ads--  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  !--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_FINE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /  uses-permission android:name= android.permission.CHANGE_WIFI_STATE /  uses-permission android:name= android.permission.VIBRATE /  uses-permission android:name= android.permission.RECORD_AUDIO /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE /  uses-permission android:name= com.google.android.gms.permission.ACTIVITY_RECOGNITION /  uses-permission android:name= android.permission.READ_CALENDAR /  uses-permission android:name= android.permission.WRITE_CALENDAR /  uses-permission android:name= android.permission.GET_TASKS /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/inmobi/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/", 
            "text": "InMobi\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import inmobi\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the InMobi configuration, you need to replace \naccount_id\n item with your specific \nInMobi\n account information.\n\n\nInMobi\n:{\n    \ninterstitial_placement_id\n: \n1449919424310\n,       //interstitial id\n    \naccount_id\n: \n922cc696d9fa475097651b5cad78567d\n, \n    \nbanner_h\n: 50,                                     //banner height\n    \nbanner_placement_id\n: \n1447081423897\n              //remove if needn't\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize InMobi\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginInMobi:init()\n\n\n\n\nShow interstitial\n\n\nAfter initialization you can begin to use the InMobi functionality:\n\n\nlocal plugin = sdkbox.PluginInMobi\nplugin:setListener(function(args)\n    local event = args.event\n    dump(args, \ninmobi listener info:\n)\nend)\nplugin:init()\n\n-- Manually Loading Ads\n-- plugin:loadInterstitial();\n\n-- show intestitial\nif plugin:isInterstitialReady() then\n    print('inmobi interstitial ad is ready');\n    plugin:showInterstitial();\nelse\n    print('inmobi interstitial ad is not ready');\nend\n\n\n\n\nSet Log level\n\n\nYou can set log level with follow function\n\n\nplugin:setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);\n\n\n\n\nSet user data\n\n\nYou can use following functions to set user data\n\n\n-- setting if need\nprint(\ninmobi plugin version:\n .. plugin:getVersion());\nplugin:setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);\nplugin:addIdForType(\ntest\n, sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nplugin:removeIdType(sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nplugin:setAge(18);\nplugin:setAreaCode(\narea code\n);\nplugin:setAgeGroup(sdkbox.PluginInMobi.SBIMSDKAgeGroup.kIMSDKAgeGroupBetween18And20);\nplugin:setYearOfBirth(1989);\nplugin:setEducation(sdkbox.PluginInMobi.SBIMSDKEducation.kIMSDKEducationHighSchoolOrLess);\nplugin:setEthnicity(sdkbox.PluginInMobi.SBIMSDKEthnicity.kIMSDKEthnicityHispanic);\nplugin:setGender(sdkbox.PluginInMobi.SBIMSDKGender.kIMSDKGenderMale);\nplugin:setHouseholdIncome(sdkbox.PluginInMobi.SBIMSDKHouseholdIncome.kIMSDKHouseholdIncomeBelow5kUSD);\nplugin:setIncome(4500);\nplugin:setInterests(\ngame\n);\nplugin:setLanguage(\nzh-cn\n);\nplugin:setLocation(\ncd\n, \nsc\n, \nusa\n);\nplugin:setLocation(102, 348);\nplugin:setNationality(\nnationality\n);\nplugin:setPostalCode(\n618000\n);\n\n\n\n\nCatch InMobi events (optional)\n\n\nThis allows you to catch the \nInMobi\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nlocal plugin = sdkbox.PluginInMobi\nplugin:setListener(function(args)\n    local event = args.event -- event same with function name of InMobiListener\n    dump(args, \ninmobi listener info:\n)\nend)\nplugin:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginInMobi:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginInMobi:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for inmobi events\n\n\n\n\nsdkbox.PluginInMobi:getVersion()\n\n\n\n\n\n\nUse this to get the version of the SDK.\n@return The version of the SDK.\n\n\n\n\nsdkbox.PluginInMobi:setLogLevel(desiredLogLevel)\n\n\n\n\n\n\nSet the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.\n\n\n\n\nsdkbox.PluginInMobi:addIdForType(identifier, type)\n\n\n\n\n\n\nRegister a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.\n\n\n\n\nsdkbox.PluginInMobi:removeIdType(type)\n\n\n\n\n\n\nDeregister a particular set of Ids\n@param type The user Id type.\n\n\n\n\nsdkbox.PluginInMobi:setAge(age)\n\n\n\n\n\n\nProvide the user's age to the SDK for targetting purposes.\n@param age The user's age.\n\n\n\n\nsdkbox.PluginInMobi:setAreaCode(areaCode)\n\n\n\n\n\n\nProvide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.\n\n\n\n\nsdkbox.PluginInMobi:setAgeGroup(ageGroup)\n\n\n\n\n\n\nProvide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.\n\n\n\n\nsdkbox.PluginInMobi:setYearOfBirth(yearOfBirth)\n\n\n\n\n\n\nProvide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.\n\n\n\n\nsdkbox.PluginInMobi:setEducation(education)\n\n\n\n\n\n\nProvide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.\n\n\n\n\nsdkbox.PluginInMobi:setEthnicity(ethnicity)\n\n\n\n\n\n\nProvide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.\n\n\n\n\nsdkbox.PluginInMobi:setGender(gender)\n\n\n\n\n\n\nProvide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.\n\n\n\n\nsdkbox.PluginInMobi:setHouseholdIncome(income)\n\n\n\n\n\n\nProvide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.\n\n\n\n\nsdkbox.PluginInMobi:setIncome(income)\n\n\n\n\n\n\nProvide the user's income to the SDK for targetting purposes.\n@param income The user's income.\n\n\n\n\nsdkbox.PluginInMobi:setInterests(interests)\n\n\n\n\n\n\nProvide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.\n\n\n\n\nsdkbox.PluginInMobi:setLanguage(language)\n\n\n\n\n\n\nProvide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.\n\n\n\n\nsdkbox.PluginInMobi:setLocation(city, state, country)\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.\n\n\n\n\nsdkbox.PluginInMobi:setLocation(latitude, longitude)\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param location: The location of the user\n\n\n\n\nsdkbox.PluginInMobi:setNationality(nationality)\n\n\n\n\n\n\nProvide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.\n\n\n\n\nsdkbox.PluginInMobi:setPostalCode(postalcode)\n\n\n\n\n\n\nProvide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.\n\n\n\n\nsdkbox.PluginInMobi:shouldAutoRefresh(refresh)\n\n\n\n\n\n\nControl if the banner should auto-refresh ad content.\n\n\n\n\nsdkbox.PluginInMobi:setRefreshInterval(interval)\n\n\n\n\n\n\nSpecify the refresh interval for the banner ad.\n\n\n\n\nsdkbox.PluginInMobi:loadBanner()\n\n\n\n\n\n\nSubmit a request to load banner ad content.\n\n\n\n\nsdkbox.PluginInMobi:disableHardwareAccelerationForBanner()\n\n\n\n\n\n\nTurn off hardware acceleration on the underlying views.\nvaild on android\n\n\n\n\nsdkbox.PluginInMobi:setBannerAnimationType(animationType)\n\n\n\n\n\n\nSet the animation preference on the banner views during ad refresh.\n\n\n\n\nsdkbox.PluginInMobi:setBannerKeywords(keywords)\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nsdkbox.PluginInMobi:loadInterstitial()\n\n\n\n\n\n\nSubmit a request to load interstitial ad content.\n\n\n\n\nsdkbox.PluginInMobi:isInterstitialReady()\n\n\n\n\n\n\nReturns true if the interstitial was loaded successfully and in ready to be shown.\n\n\n\n\nsdkbox.PluginInMobi:showInterstitial()\n\n\n\n\n\n\nDisplays the interstitial on the screen\n\n\n\n\nsdkbox.PluginInMobi:showInterstitial(type)\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on ios\n\n\n\n\nsdkbox.PluginInMobi:showInterstitial(enterAnimationResourcedId,\n                                      exitAnimationResourceId)\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on android\n\n\n\n\nsdkbox.PluginInMobi:disableHardwareAccelerationForInterstitial()\n\n\n\n\n\n\nDisable hardware acceleration on the underlying views.\nvalid on android\n\n\n\n\nsdkbox.PluginInMobi:setInterstitialKeywords(keywords)\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nListeners\n\n\nbannerDidFinishLoading()\n\n\n\n\n\n\nNotifies the delegate that the banner has finished loading\n\n\n\n\nbannerDidFailToLoadWithError(code, description)\n\n\n\n\n\n\nNotifies the delegate that the banner has failed to load with some error.\n\n\n\n\nbannerDidInteractWithParams(params)\n\n\n\n\n\n\nNotifies the delegate that the banner was interacted with.\n\n\n\n\nuserWillLeaveApplicationFromBanner()\n\n\n\n\n\n\nNotifies the delegate that the user would be taken out of the application context.\n\n\n\n\nbannerWillPresentScreen()\n\n\n\n\n\n\nNotifies the delegate that the banner would be presenting a full screen content.\n\n\n\n\nbannerDidPresentScreen()\n\n\n\n\n\n\nNotifies the delegate that the banner has finished presenting screen.\n\n\n\n\nbannerWillDismissScreen()\n\n\n\n\n\n\nNotifies the delegate that the banner will start dismissing the presented screen.\n\n\n\n\nbannerDidDismissScreen()\n\n\n\n\n\n\nNotifies the delegate that the banner has dismissed the presented screen.\n\n\n\n\nbannerRewardActionCompletedWithRewards(rewards)\n\n\n\n\n\n\nNotifies the delegate that the user has completed the action to be incentivised with.\n\n\n\n\ninterstitialDidFinishLoading()\n\n\n\n\n\n\nNotifies the delegate that the interstitial has finished loading\n\n\n\n\ninterstitialDidFailToLoadWithError(code, description)\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to load with some error.\n\n\n\n\ninterstitialWillPresent()\n\n\n\n\n\n\nNotifies the delegate that the interstitial would be presented.\n\n\n\n\ninterstitialDidPresent()\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been presented.\n\n\n\n\ninterstitialDidFailToPresentWithError(code, description)\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to present with some error.\n\n\n\n\ninterstitialWillDismiss()\n\n\n\n\n\n\nNotifies the delegate that the interstitial will be dismissed.\n\n\n\n\ninterstitialDidDismiss()\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been dismissed.\n\n\n\n\ninterstitialDidInteractWithParams(params)\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been interacted with.\n\n\n\n\ninterstitialRewardActionCompletedWithRewards(rewards)\n\n\n\n\n\n\nNotifies the delegate that the user has performed the action to be incentivised with.\n\n\n\n\nuserWillLeaveApplicationFromInterstitial()\n\n\n\n\n\n\nNotifies the delegate that the user will leave application context.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nInMobi\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginInMobi.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nSafariServices.framework\n\n\nGameController.framework\n\n\nlibsqlite3.0.tbd\n\n\nlibc++.tbd\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nInMobiLib.jar\n\n\nPluginInMobi.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n!--Mandatory permissions to receive ads--\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n!--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.CHANGE_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n/\n\n\nuses-permission android:name=\nandroid.permission.RECORD_AUDIO\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n/\n\n\nuses-permission android:name=\ncom.google.android.gms.permission.ACTIVITY_RECOGNITION\n/\n\n\nuses-permission android:name=\nandroid.permission.READ_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.GET_TASKS\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "InMobi with Lua"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/#inmobi", 
            "text": "", 
            "title": "InMobi"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import inmobi", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the InMobi configuration, you need to replace  account_id  item with your specific  InMobi  account information.  InMobi :{\n     interstitial_placement_id :  1449919424310 ,       //interstitial id\n     account_id :  922cc696d9fa475097651b5cad78567d , \n     banner_h : 50,                                     //banner height\n     banner_placement_id :  1447081423897               //remove if needn't\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/#usage", 
            "text": "Initialize InMobi  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginInMobi:init()  Show interstitial  After initialization you can begin to use the InMobi functionality:  local plugin = sdkbox.PluginInMobi\nplugin:setListener(function(args)\n    local event = args.event\n    dump(args,  inmobi listener info: )\nend)\nplugin:init()\n\n-- Manually Loading Ads\n-- plugin:loadInterstitial();\n\n-- show intestitial\nif plugin:isInterstitialReady() then\n    print('inmobi interstitial ad is ready');\n    plugin:showInterstitial();\nelse\n    print('inmobi interstitial ad is not ready');\nend  Set Log level  You can set log level with follow function  plugin:setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);  Set user data  You can use following functions to set user data  -- setting if need\nprint( inmobi plugin version:  .. plugin:getVersion());\nplugin:setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);\nplugin:addIdForType( test , sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nplugin:removeIdType(sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nplugin:setAge(18);\nplugin:setAreaCode( area code );\nplugin:setAgeGroup(sdkbox.PluginInMobi.SBIMSDKAgeGroup.kIMSDKAgeGroupBetween18And20);\nplugin:setYearOfBirth(1989);\nplugin:setEducation(sdkbox.PluginInMobi.SBIMSDKEducation.kIMSDKEducationHighSchoolOrLess);\nplugin:setEthnicity(sdkbox.PluginInMobi.SBIMSDKEthnicity.kIMSDKEthnicityHispanic);\nplugin:setGender(sdkbox.PluginInMobi.SBIMSDKGender.kIMSDKGenderMale);\nplugin:setHouseholdIncome(sdkbox.PluginInMobi.SBIMSDKHouseholdIncome.kIMSDKHouseholdIncomeBelow5kUSD);\nplugin:setIncome(4500);\nplugin:setInterests( game );\nplugin:setLanguage( zh-cn );\nplugin:setLocation( cd ,  sc ,  usa );\nplugin:setLocation(102, 348);\nplugin:setNationality( nationality );\nplugin:setPostalCode( 618000 );  Catch InMobi events (optional)  This allows you to catch the  InMobi  events so that you can perform operations based upon responses. A simple example might look like this:  local plugin = sdkbox.PluginInMobi\nplugin:setListener(function(args)\n    local event = args.event -- event same with function name of InMobiListener\n    dump(args,  inmobi listener info: )\nend)\nplugin:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginInMobi:init()   initialize the plugin instance.   sdkbox.PluginInMobi:setListener(listener)   Set listener to listen for inmobi events   sdkbox.PluginInMobi:getVersion()   Use this to get the version of the SDK.\n@return The version of the SDK.   sdkbox.PluginInMobi:setLogLevel(desiredLogLevel)   Set the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.   sdkbox.PluginInMobi:addIdForType(identifier, type)   Register a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.   sdkbox.PluginInMobi:removeIdType(type)   Deregister a particular set of Ids\n@param type The user Id type.   sdkbox.PluginInMobi:setAge(age)   Provide the user's age to the SDK for targetting purposes.\n@param age The user's age.   sdkbox.PluginInMobi:setAreaCode(areaCode)   Provide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.   sdkbox.PluginInMobi:setAgeGroup(ageGroup)   Provide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.   sdkbox.PluginInMobi:setYearOfBirth(yearOfBirth)   Provide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.   sdkbox.PluginInMobi:setEducation(education)   Provide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.   sdkbox.PluginInMobi:setEthnicity(ethnicity)   Provide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.   sdkbox.PluginInMobi:setGender(gender)   Provide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.   sdkbox.PluginInMobi:setHouseholdIncome(income)   Provide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.   sdkbox.PluginInMobi:setIncome(income)   Provide the user's income to the SDK for targetting purposes.\n@param income The user's income.   sdkbox.PluginInMobi:setInterests(interests)   Provide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.   sdkbox.PluginInMobi:setLanguage(language)   Provide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.   sdkbox.PluginInMobi:setLocation(city, state, country)   Provide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.   sdkbox.PluginInMobi:setLocation(latitude, longitude)   Provide the user's location to the SDK for targetting purposes.\n@param location: The location of the user   sdkbox.PluginInMobi:setNationality(nationality)   Provide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.   sdkbox.PluginInMobi:setPostalCode(postalcode)   Provide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.   sdkbox.PluginInMobi:shouldAutoRefresh(refresh)   Control if the banner should auto-refresh ad content.   sdkbox.PluginInMobi:setRefreshInterval(interval)   Specify the refresh interval for the banner ad.   sdkbox.PluginInMobi:loadBanner()   Submit a request to load banner ad content.   sdkbox.PluginInMobi:disableHardwareAccelerationForBanner()   Turn off hardware acceleration on the underlying views.\nvaild on android   sdkbox.PluginInMobi:setBannerAnimationType(animationType)   Set the animation preference on the banner views during ad refresh.   sdkbox.PluginInMobi:setBannerKeywords(keywords)   Set comma delimited keywords for targeting purpose   sdkbox.PluginInMobi:loadInterstitial()   Submit a request to load interstitial ad content.   sdkbox.PluginInMobi:isInterstitialReady()   Returns true if the interstitial was loaded successfully and in ready to be shown.   sdkbox.PluginInMobi:showInterstitial()   Displays the interstitial on the screen   sdkbox.PluginInMobi:showInterstitial(type)   Displays the interstitial on the screen\nvalid on ios   sdkbox.PluginInMobi:showInterstitial(enterAnimationResourcedId,\n                                      exitAnimationResourceId)   Displays the interstitial on the screen\nvalid on android   sdkbox.PluginInMobi:disableHardwareAccelerationForInterstitial()   Disable hardware acceleration on the underlying views.\nvalid on android   sdkbox.PluginInMobi:setInterstitialKeywords(keywords)   Set comma delimited keywords for targeting purpose   Listeners  bannerDidFinishLoading()   Notifies the delegate that the banner has finished loading   bannerDidFailToLoadWithError(code, description)   Notifies the delegate that the banner has failed to load with some error.   bannerDidInteractWithParams(params)   Notifies the delegate that the banner was interacted with.   userWillLeaveApplicationFromBanner()   Notifies the delegate that the user would be taken out of the application context.   bannerWillPresentScreen()   Notifies the delegate that the banner would be presenting a full screen content.   bannerDidPresentScreen()   Notifies the delegate that the banner has finished presenting screen.   bannerWillDismissScreen()   Notifies the delegate that the banner will start dismissing the presented screen.   bannerDidDismissScreen()   Notifies the delegate that the banner has dismissed the presented screen.   bannerRewardActionCompletedWithRewards(rewards)   Notifies the delegate that the user has completed the action to be incentivised with.   interstitialDidFinishLoading()   Notifies the delegate that the interstitial has finished loading   interstitialDidFailToLoadWithError(code, description)   Notifies the delegate that the interstitial has failed to load with some error.   interstitialWillPresent()   Notifies the delegate that the interstitial would be presented.   interstitialDidPresent()   Notifies the delegate that the interstitial has been presented.   interstitialDidFailToPresentWithError(code, description)   Notifies the delegate that the interstitial has failed to present with some error.   interstitialWillDismiss()   Notifies the delegate that the interstitial will be dismissed.   interstitialDidDismiss()   Notifies the delegate that the interstitial has been dismissed.   interstitialDidInteractWithParams(params)   Notifies the delegate that the interstitial has been interacted with.   interstitialRewardActionCompletedWithRewards(rewards)   Notifies the delegate that the user has performed the action to be incentivised with.   userWillLeaveApplicationFromInterstitial()   Notifies the delegate that the user will leave application context.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  InMobi  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginInMobi.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CoreLocation.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework  SafariServices.framework  GameController.framework  libsqlite3.0.tbd  libc++.tbd   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   InMobiLib.jar  PluginInMobi.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  !--Mandatory permissions to receive ads--  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  !--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_FINE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /  uses-permission android:name= android.permission.CHANGE_WIFI_STATE /  uses-permission android:name= android.permission.VIBRATE /  uses-permission android:name= android.permission.RECORD_AUDIO /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE /  uses-permission android:name= com.google.android.gms.permission.ACTIVITY_RECOGNITION /  uses-permission android:name= android.permission.READ_CALENDAR /  uses-permission android:name= android.permission.WRITE_CALENDAR /  uses-permission android:name= android.permission.GET_TASKS /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/inmobi/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/", 
            "text": "InMobi\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import inmobi\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the InMobi configuration, you need to replace \naccount_id\n item with your specific \nInMobi\n account information.\n\n\nInMobi\n:{\n    \ninterstitial_placement_id\n: \n1449919424310\n,       //interstitial id\n    \naccount_id\n: \n922cc696d9fa475097651b5cad78567d\n, \n    \nbanner_h\n: 50,                                     //banner height\n    \nbanner_placement_id\n: \n1447081423897\n              //remove if needn't\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize InMobi\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginInMobi/PluginInMobi.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginInMobi::init();\n}\n\n\n\n\nShow interstitial\n\n\nAfter initialization you can begin to use the InMobi functionality:\n\n\n// Manually Loading Ads\nsdkbox::PluginInMobi::loadInterstitial();\n\nif (sdkbox::PluginInMobi::isInterstitialReady()) {\n    CCLOG(\nPlugin InMobi interstitial ad is ready\n);\n    sdkbox::PluginInMobi::showInterstitial();\n} else {\n    CCLOG(\nPlugin InMobi interstitial ad is not ready\n);\n}\n\n\n\n\nSet Log level\n\n\nYou can set log level with follow function\n\n\nsdkbox::PluginInMobi::setLogLevel(sdkbox::PluginInMobi::SBIMSDKLogLevel::kIMSDKLogLevelDebug);\n\n\n\n\nSet user data\n\n\nYou can use following functions to set user data\n\n\nsdkbox::PluginInMobi::addIdForType(\ntest\n, sdkbox::PluginInMobi::SBIMSDKIdType::kIMSDKIdTypeLogin);\nsdkbox::PluginInMobi::removeIdType(sdkbox::PluginInMobi::SBIMSDKIdType::kIMSDKIdTypeLogin);\nsdkbox::PluginInMobi::setAge(18);\nsdkbox::PluginInMobi::setAreaCode(\n900\n);\nsdkbox::PluginInMobi::setAgeGroup(sdkbox::PluginInMobi::SBIMSDKAgeGroup::kIMSDKAgeGroupBetween18And20);\nsdkbox::PluginInMobi::setYearOfBirth(1989);\nsdkbox::PluginInMobi::setEducation(sdkbox::PluginInMobi::SBIMSDKEducation::kIMSDKEducationHighSchoolOrLess);\nsdkbox::PluginInMobi::setEthnicity(sdkbox::PluginInMobi::SBIMSDKEthnicity::kIMSDKEthnicityHispanic);\nsdkbox::PluginInMobi::setGender(sdkbox::PluginInMobi::SBIMSDKGender::kIMSDKGenderMale);\nsdkbox::PluginInMobi::setHouseholdIncome(sdkbox::PluginInMobi::SBIMSDKHouseholdIncome::kIMSDKHouseholdIncomeBelow5kUSD);\nsdkbox::PluginInMobi::setIncome(4500);\nsdkbox::PluginInMobi::setInterests(\ngame\n);\nsdkbox::PluginInMobi::setLanguage(\nen-us\n);\nsdkbox::PluginInMobi::setLocation(\ncd\n, \nsc\n, \nusa\n);\nsdkbox::PluginInMobi::setLocation(102, 348);\nsdkbox::PluginInMobi::setNationality(\nnationality\n);\nsdkbox::PluginInMobi::setPostalCode(\n618000\n);\n\n\n\n\nCatch InMobi events (optional)\n\n\nThis allows you to catch the \nInMobi\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::InMobiListener\n\n\n\n\n#include \nPluginInMobi/PluginInMobi.h\n\nclass MyClass : public sdkbox::InMobiListener {\npublic:\n    void bannerDidFinishLoading() {\n        CCLOG(\nbannerDidFinishLoading\n);\n    };\n    void bannerDidFailToLoadWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string\n description) {\n        CCLOG(\nbannerDidFailToLoadWithError status:%d, desc:%s\n, code, description.c_str());\n    };\n\n    void bannerDidInteractWithParams(std::map\nstd::string, std::string\n params) {\n        CCLOG(\nbannerDidInteractWithParams\n);\n    };\n\n    void userWillLeaveApplicationFromBanner() {\n        CCLOG(\nuserWillLeaveApplicationFromBanner\n);\n    };\n\n    void bannerWillPresentScreen() {\n        CCLOG(\nbannerWillPresentScreen\n);\n    };\n\n    void bannerDidPresentScreen() {\n        CCLOG(\nbannerDidPresentScreen\n);\n    };\n\n    void bannerWillDismissScreen() {\n        CCLOG(\nbannerWillDismissScreen\n);\n    };\n\n    void bannerDidDismissScreen() {\n        CCLOG(\nbannerDidDismissScreen\n);\n    };\n\n    void bannerRewardActionCompletedWithRewards(std::map\nstd::string, std::string\n rewards) {\n        CCLOG(\nbannerRewardActionCompletedWithRewards\n);\n    };\n\n    void interstitialDidFinishLoading() {\n        CCLOG(\ninterstitialDidFinishLoading\n);\n    };\n\n    void interstitialDidFailToLoadWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string\n description) {\n        CCLOG(\ninterstitialDidFailToLoadWithError status:%d, desc:%s\n, code, description.c_str());\n    };\n\n    void interstitialWillPresent() {\n        CCLOG(\ninterstitialWillPresent\n);\n    };\n\n    void interstitialDidPresent() {\n        CCLOG(\ninterstitialDidPresent\n);\n    };\n\n    void interstitialDidFailToPresentWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string\n description) {\n        CCLOG(\ninterstitialDidFailToPresentWithError\n);\n    };\n\n    void interstitialWillDismiss() {\n        CCLOG(\ninterstitialWillDismiss\n);\n    };\n\n    void interstitialDidDismiss() {\n        CCLOG(\ninterstitialDidDismiss\n);\n    };\n\n    void interstitialDidInteractWithParams(std::map\nstd::string, std::string\n params) {\n        CCLOG(\ninterstitialDidInteractWithParams\n);\n    };\n\n    void interstitialRewardActionCompletedWithRewards(std::map\nstd::string, std::string\n rewards) {\n        CCLOG(\ninterstitialRewardActionCompletedWithRewards\n);\n    };\n\n    void userWillLeaveApplicationFromInterstitial() {\n        CCLOG(\nuserWillLeaveApplicationFromInterstitial\n);\n    };\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginInMobi::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( InMobiListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for inmobi events\n\n\n\n\nstatic InMobiListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic std::string getVersion ( ) ;\n\n\n\n\n\n\nUse this to get the version of the SDK.\n@return The version of the SDK.\n\n\n\n\nstatic void setLogLevel ( SBIMSDKLogLevel desiredLogLevel ) ;\n\n\n\n\n\n\nSet the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.\n\n\n\n\nstatic void addIdForType ( const std::string \n identifier ,\n                           SBIMSDKIdType type ) ;\n\n\n\n\n\n\nRegister a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.\n\n\n\n\nstatic void removeIdType ( SBIMSDKIdType type ) ;\n\n\n\n\n\n\nDeregister a particular set of Ids\n@param type The user Id type.\n\n\n\n\nstatic void setAge ( int age ) ;\n\n\n\n\n\n\nProvide the user's age to the SDK for targetting purposes.\n@param age The user's age.\n\n\n\n\nstatic void setAreaCode ( const std::string \n areaCode ) ;\n\n\n\n\n\n\nProvide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.\n\n\n\n\nstatic void setAgeGroup ( SBIMSDKAgeGroup ageGroup ) ;\n\n\n\n\n\n\nProvide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.\n\n\n\n\nstatic void setYearOfBirth ( int yearOfBirth ) ;\n\n\n\n\n\n\nProvide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.\n\n\n\n\nstatic void setEducation ( SBIMSDKEducation education ) ;\n\n\n\n\n\n\nProvide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.\n\n\n\n\nstatic void setEthnicity ( SBIMSDKEthnicity ethnicity ) ;\n\n\n\n\n\n\nProvide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.\n\n\n\n\nstatic void setGender ( SBIMSDKGender gender ) ;\n\n\n\n\n\n\nProvide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.\n\n\n\n\nstatic void setHouseholdIncome ( SBIMSDKHouseholdIncome income ) ;\n\n\n\n\n\n\nProvide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.\n\n\n\n\nstatic void setIncome ( unsigned int income ) ;\n\n\n\n\n\n\nProvide the user's income to the SDK for targetting purposes.\n@param income The user's income.\n\n\n\n\nstatic void setInterests ( const std::string \n interests ) ;\n\n\n\n\n\n\nProvide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.\n\n\n\n\nstatic void setLanguage ( const std::string \n language ) ;\n\n\n\n\n\n\nProvide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.\n\n\n\n\nstatic void setLocation ( const std::string \n city ,\n                          const std::string \n state ,\n                          const std::string \n country ) ;\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.\n\n\n\n\nstatic void setLocation ( double latitude , double longitude ) ;\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param location: The location of the user\n\n\n\n\nstatic void setNationality ( const std::string \n nationality ) ;\n\n\n\n\n\n\nProvide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.\n\n\n\n\nstatic void setPostalCode ( const std::string \n postalcode ) ;\n\n\n\n\n\n\nProvide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.\n\n\n\n\nstatic void shouldAutoRefresh ( bool refresh ) ;\n\n\n\n\n\n\nControl if the banner should auto-refresh ad content.\n\n\n\n\nstatic void setRefreshInterval ( int interval ) ;\n\n\n\n\n\n\nSpecify the refresh interval for the banner ad.\n\n\n\n\nstatic void loadBanner ( ) ;\n\n\n\n\n\n\nSubmit a request to load banner ad content.\n\n\n\n\nstatic void disableHardwareAccelerationForBanner ( ) ;\n\n\n\n\n\n\nTurn off hardware acceleration on the underlying views.\nvaild on android\n\n\n\n\nstatic void setBannerAnimationType ( SBIMBannerAnimationType animationType ) ;\n\n\n\n\n\n\nSet the animation preference on the banner views during ad refresh.\n\n\n\n\nstatic void setBannerExtras ( const std::map \nstd::string ,\n                              std::string\n \n extras ) ;\n\n\n\n\n\n\nSet any additional custom parameters that will be sent in the ad request.\n\n\n\n\nstatic void setBannerKeywords ( const std::string \n keywords ) ;\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nstatic void loadInterstitial ( ) ;\n\n\n\n\n\n\nSubmit a request to load interstitial ad content.\n\n\n\n\nstatic bool isInterstitialReady ( ) ;\n\n\n\n\n\n\nReturns true if the interstitial was loaded successfully and in ready to be shown.\n\n\n\n\nstatic void showInterstitial ( ) ;\n\n\n\n\n\n\nDisplays the interstitial on the screen\n\n\n\n\nstatic void showInterstitial ( SBIMInterstitialAnimationType type ) ;\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on ios\n\n\n\n\nstatic void showInterstitial ( int enterAnimationResourcedId ,\n                               int exitAnimationResourceId ) ;\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on android\n\n\n\n\nstatic void disableHardwareAccelerationForInterstitial ( ) ;\n\n\n\n\n\n\nDisable hardware acceleration on the underlying views.\nvalid on android\n\n\n\n\nstatic void setInterstitialExtras ( const std::map \nstd::string ,\n                                    std::string\n \n extras ) ;\n\n\n\n\n\n\nSet any additional custom parameters that will be sent in the ad request.\n\n\n\n\nstatic void setInterstitialKeywords ( const std::string \n keywords ) ;\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nListeners\n\n\nvoid bannerDidFinishLoading ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner has finished loading\n\n\n\n\nvoid bannerDidFailToLoadWithError ( PluginInMobi::SBIMStatusCode code ,\n                                    const std::string \n description ) {\n\n\n\n\n\n\nNotifies the delegate that the banner has failed to load with some error.\n\n\n\n\nvoid bannerDidInteractWithParams ( std::map \nstd::string ,\n                                   std::string\n params ) {\n\n\n\n\n\n\nNotifies the delegate that the banner was interacted with.\n\n\n\n\nvoid userWillLeaveApplicationFromBanner ( ) {\n\n\n\n\n\n\nNotifies the delegate that the user would be taken out of the application context.\n\n\n\n\nvoid bannerWillPresentScreen ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner would be presenting a full screen content.\n\n\n\n\nvoid bannerDidPresentScreen ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner has finished presenting screen.\n\n\n\n\nvoid bannerWillDismissScreen ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner will start dismissing the presented screen.\n\n\n\n\nvoid bannerDidDismissScreen ( ) {\n\n\n\n\n\n\nNotifies the delegate that the banner has dismissed the presented screen.\n\n\n\n\nvoid bannerRewardActionCompletedWithRewards ( std::map \nstd::string ,\n                                              std::string\n rewards ) {\n\n\n\n\n\n\nNotifies the delegate that the user has completed the action to be incentivised with.\n\n\n\n\nvoid interstitialDidFinishLoading ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has finished loading\n\n\n\n\nvoid interstitialDidFailToLoadWithError ( PluginInMobi::SBIMStatusCode code ,\n                                          const std::string \n description ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to load with some error.\n\n\n\n\nvoid interstitialWillPresent ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial would be presented.\n\n\n\n\nvoid interstitialDidPresent ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been presented.\n\n\n\n\nvoid interstitialDidFailToPresentWithError ( PluginInMobi::SBIMStatusCode code ,\n                                             const std::string \n description ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to present with some error.\n\n\n\n\nvoid interstitialWillDismiss ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial will be dismissed.\n\n\n\n\nvoid interstitialDidDismiss ( ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been dismissed.\n\n\n\n\nvoid interstitialDidInteractWithParams ( std::map \nstd::string ,\n                                         std::string\n params ) {\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been interacted with.\n\n\n\n\nvoid interstitialRewardActionCompletedWithRewards ( std::map \nstd::string ,\n                                                    std::string\n rewards ) {\n\n\n\n\n\n\nNotifies the delegate that the user has performed the action to be incentivised with.\n\n\n\n\nvoid userWillLeaveApplicationFromInterstitial ( ) {\n\n\n\n\n\n\nNotifies the delegate that the user will leave application context.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nInMobi\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginInMobi.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nSafariServices.framework\n\n\nGameController.framework\n\n\nlibsqlite3.0.tbd\n\n\nlibc++.tbd\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nInMobi-5.1.0.jar\n\n\nPluginInMobi.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n!--Mandatory permissions to receive ads--\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n!--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.CHANGE_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n/\n\n\nuses-permission android:name=\nandroid.permission.RECORD_AUDIO\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n/\n\n\nuses-permission android:name=\ncom.google.android.gms.permission.ACTIVITY_RECOGNITION\n/\n\n\nuses-permission android:name=\nandroid.permission.READ_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.GET_TASKS\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "InMobi with C++"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/#inmobi", 
            "text": "", 
            "title": "InMobi"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import inmobi", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the InMobi configuration, you need to replace  account_id  item with your specific  InMobi  account information.  InMobi :{\n     interstitial_placement_id :  1449919424310 ,       //interstitial id\n     account_id :  922cc696d9fa475097651b5cad78567d , \n     banner_h : 50,                                     //banner height\n     banner_placement_id :  1447081423897               //remove if needn't\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/#usage", 
            "text": "Initialize InMobi  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginInMobi/PluginInMobi.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginInMobi::init();\n}  Show interstitial  After initialization you can begin to use the InMobi functionality:  // Manually Loading Ads\nsdkbox::PluginInMobi::loadInterstitial();\n\nif (sdkbox::PluginInMobi::isInterstitialReady()) {\n    CCLOG( Plugin InMobi interstitial ad is ready );\n    sdkbox::PluginInMobi::showInterstitial();\n} else {\n    CCLOG( Plugin InMobi interstitial ad is not ready );\n}  Set Log level  You can set log level with follow function  sdkbox::PluginInMobi::setLogLevel(sdkbox::PluginInMobi::SBIMSDKLogLevel::kIMSDKLogLevelDebug);  Set user data  You can use following functions to set user data  sdkbox::PluginInMobi::addIdForType( test , sdkbox::PluginInMobi::SBIMSDKIdType::kIMSDKIdTypeLogin);\nsdkbox::PluginInMobi::removeIdType(sdkbox::PluginInMobi::SBIMSDKIdType::kIMSDKIdTypeLogin);\nsdkbox::PluginInMobi::setAge(18);\nsdkbox::PluginInMobi::setAreaCode( 900 );\nsdkbox::PluginInMobi::setAgeGroup(sdkbox::PluginInMobi::SBIMSDKAgeGroup::kIMSDKAgeGroupBetween18And20);\nsdkbox::PluginInMobi::setYearOfBirth(1989);\nsdkbox::PluginInMobi::setEducation(sdkbox::PluginInMobi::SBIMSDKEducation::kIMSDKEducationHighSchoolOrLess);\nsdkbox::PluginInMobi::setEthnicity(sdkbox::PluginInMobi::SBIMSDKEthnicity::kIMSDKEthnicityHispanic);\nsdkbox::PluginInMobi::setGender(sdkbox::PluginInMobi::SBIMSDKGender::kIMSDKGenderMale);\nsdkbox::PluginInMobi::setHouseholdIncome(sdkbox::PluginInMobi::SBIMSDKHouseholdIncome::kIMSDKHouseholdIncomeBelow5kUSD);\nsdkbox::PluginInMobi::setIncome(4500);\nsdkbox::PluginInMobi::setInterests( game );\nsdkbox::PluginInMobi::setLanguage( en-us );\nsdkbox::PluginInMobi::setLocation( cd ,  sc ,  usa );\nsdkbox::PluginInMobi::setLocation(102, 348);\nsdkbox::PluginInMobi::setNationality( nationality );\nsdkbox::PluginInMobi::setPostalCode( 618000 );  Catch InMobi events (optional)  This allows you to catch the  InMobi  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::InMobiListener   #include  PluginInMobi/PluginInMobi.h \nclass MyClass : public sdkbox::InMobiListener {\npublic:\n    void bannerDidFinishLoading() {\n        CCLOG( bannerDidFinishLoading );\n    };\n    void bannerDidFailToLoadWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string  description) {\n        CCLOG( bannerDidFailToLoadWithError status:%d, desc:%s , code, description.c_str());\n    };\n\n    void bannerDidInteractWithParams(std::map std::string, std::string  params) {\n        CCLOG( bannerDidInteractWithParams );\n    };\n\n    void userWillLeaveApplicationFromBanner() {\n        CCLOG( userWillLeaveApplicationFromBanner );\n    };\n\n    void bannerWillPresentScreen() {\n        CCLOG( bannerWillPresentScreen );\n    };\n\n    void bannerDidPresentScreen() {\n        CCLOG( bannerDidPresentScreen );\n    };\n\n    void bannerWillDismissScreen() {\n        CCLOG( bannerWillDismissScreen );\n    };\n\n    void bannerDidDismissScreen() {\n        CCLOG( bannerDidDismissScreen );\n    };\n\n    void bannerRewardActionCompletedWithRewards(std::map std::string, std::string  rewards) {\n        CCLOG( bannerRewardActionCompletedWithRewards );\n    };\n\n    void interstitialDidFinishLoading() {\n        CCLOG( interstitialDidFinishLoading );\n    };\n\n    void interstitialDidFailToLoadWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string  description) {\n        CCLOG( interstitialDidFailToLoadWithError status:%d, desc:%s , code, description.c_str());\n    };\n\n    void interstitialWillPresent() {\n        CCLOG( interstitialWillPresent );\n    };\n\n    void interstitialDidPresent() {\n        CCLOG( interstitialDidPresent );\n    };\n\n    void interstitialDidFailToPresentWithError(sdkbox::PluginInMobi::SBIMStatusCode code, const std::string  description) {\n        CCLOG( interstitialDidFailToPresentWithError );\n    };\n\n    void interstitialWillDismiss() {\n        CCLOG( interstitialWillDismiss );\n    };\n\n    void interstitialDidDismiss() {\n        CCLOG( interstitialDidDismiss );\n    };\n\n    void interstitialDidInteractWithParams(std::map std::string, std::string  params) {\n        CCLOG( interstitialDidInteractWithParams );\n    };\n\n    void interstitialRewardActionCompletedWithRewards(std::map std::string, std::string  rewards) {\n        CCLOG( interstitialRewardActionCompletedWithRewards );\n    };\n\n    void userWillLeaveApplicationFromInterstitial() {\n        CCLOG( userWillLeaveApplicationFromInterstitial );\n    };\n};   Create a  listener  that handles callbacks:   sdkbox::PluginInMobi::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( InMobiListener * listener ) ;   Set listener to listen for inmobi events   static InMobiListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static std::string getVersion ( ) ;   Use this to get the version of the SDK.\n@return The version of the SDK.   static void setLogLevel ( SBIMSDKLogLevel desiredLogLevel ) ;   Set the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.   static void addIdForType ( const std::string   identifier ,\n                           SBIMSDKIdType type ) ;   Register a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.   static void removeIdType ( SBIMSDKIdType type ) ;   Deregister a particular set of Ids\n@param type The user Id type.   static void setAge ( int age ) ;   Provide the user's age to the SDK for targetting purposes.\n@param age The user's age.   static void setAreaCode ( const std::string   areaCode ) ;   Provide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.   static void setAgeGroup ( SBIMSDKAgeGroup ageGroup ) ;   Provide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.   static void setYearOfBirth ( int yearOfBirth ) ;   Provide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.   static void setEducation ( SBIMSDKEducation education ) ;   Provide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.   static void setEthnicity ( SBIMSDKEthnicity ethnicity ) ;   Provide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.   static void setGender ( SBIMSDKGender gender ) ;   Provide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.   static void setHouseholdIncome ( SBIMSDKHouseholdIncome income ) ;   Provide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.   static void setIncome ( unsigned int income ) ;   Provide the user's income to the SDK for targetting purposes.\n@param income The user's income.   static void setInterests ( const std::string   interests ) ;   Provide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.   static void setLanguage ( const std::string   language ) ;   Provide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.   static void setLocation ( const std::string   city ,\n                          const std::string   state ,\n                          const std::string   country ) ;   Provide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.   static void setLocation ( double latitude , double longitude ) ;   Provide the user's location to the SDK for targetting purposes.\n@param location: The location of the user   static void setNationality ( const std::string   nationality ) ;   Provide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.   static void setPostalCode ( const std::string   postalcode ) ;   Provide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.   static void shouldAutoRefresh ( bool refresh ) ;   Control if the banner should auto-refresh ad content.   static void setRefreshInterval ( int interval ) ;   Specify the refresh interval for the banner ad.   static void loadBanner ( ) ;   Submit a request to load banner ad content.   static void disableHardwareAccelerationForBanner ( ) ;   Turn off hardware acceleration on the underlying views.\nvaild on android   static void setBannerAnimationType ( SBIMBannerAnimationType animationType ) ;   Set the animation preference on the banner views during ad refresh.   static void setBannerExtras ( const std::map  std::string ,\n                              std::string    extras ) ;   Set any additional custom parameters that will be sent in the ad request.   static void setBannerKeywords ( const std::string   keywords ) ;   Set comma delimited keywords for targeting purpose   static void loadInterstitial ( ) ;   Submit a request to load interstitial ad content.   static bool isInterstitialReady ( ) ;   Returns true if the interstitial was loaded successfully and in ready to be shown.   static void showInterstitial ( ) ;   Displays the interstitial on the screen   static void showInterstitial ( SBIMInterstitialAnimationType type ) ;   Displays the interstitial on the screen\nvalid on ios   static void showInterstitial ( int enterAnimationResourcedId ,\n                               int exitAnimationResourceId ) ;   Displays the interstitial on the screen\nvalid on android   static void disableHardwareAccelerationForInterstitial ( ) ;   Disable hardware acceleration on the underlying views.\nvalid on android   static void setInterstitialExtras ( const std::map  std::string ,\n                                    std::string    extras ) ;   Set any additional custom parameters that will be sent in the ad request.   static void setInterstitialKeywords ( const std::string   keywords ) ;   Set comma delimited keywords for targeting purpose   Listeners  void bannerDidFinishLoading ( ) {   Notifies the delegate that the banner has finished loading   void bannerDidFailToLoadWithError ( PluginInMobi::SBIMStatusCode code ,\n                                    const std::string   description ) {   Notifies the delegate that the banner has failed to load with some error.   void bannerDidInteractWithParams ( std::map  std::string ,\n                                   std::string  params ) {   Notifies the delegate that the banner was interacted with.   void userWillLeaveApplicationFromBanner ( ) {   Notifies the delegate that the user would be taken out of the application context.   void bannerWillPresentScreen ( ) {   Notifies the delegate that the banner would be presenting a full screen content.   void bannerDidPresentScreen ( ) {   Notifies the delegate that the banner has finished presenting screen.   void bannerWillDismissScreen ( ) {   Notifies the delegate that the banner will start dismissing the presented screen.   void bannerDidDismissScreen ( ) {   Notifies the delegate that the banner has dismissed the presented screen.   void bannerRewardActionCompletedWithRewards ( std::map  std::string ,\n                                              std::string  rewards ) {   Notifies the delegate that the user has completed the action to be incentivised with.   void interstitialDidFinishLoading ( ) {   Notifies the delegate that the interstitial has finished loading   void interstitialDidFailToLoadWithError ( PluginInMobi::SBIMStatusCode code ,\n                                          const std::string   description ) {   Notifies the delegate that the interstitial has failed to load with some error.   void interstitialWillPresent ( ) {   Notifies the delegate that the interstitial would be presented.   void interstitialDidPresent ( ) {   Notifies the delegate that the interstitial has been presented.   void interstitialDidFailToPresentWithError ( PluginInMobi::SBIMStatusCode code ,\n                                             const std::string   description ) {   Notifies the delegate that the interstitial has failed to present with some error.   void interstitialWillDismiss ( ) {   Notifies the delegate that the interstitial will be dismissed.   void interstitialDidDismiss ( ) {   Notifies the delegate that the interstitial has been dismissed.   void interstitialDidInteractWithParams ( std::map  std::string ,\n                                         std::string  params ) {   Notifies the delegate that the interstitial has been interacted with.   void interstitialRewardActionCompletedWithRewards ( std::map  std::string ,\n                                                    std::string  rewards ) {   Notifies the delegate that the user has performed the action to be incentivised with.   void userWillLeaveApplicationFromInterstitial ( ) {   Notifies the delegate that the user will leave application context.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  InMobi  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginInMobi.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CoreLocation.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework  SafariServices.framework  GameController.framework  libsqlite3.0.tbd  libc++.tbd", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   InMobi-5.1.0.jar  PluginInMobi.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  !--Mandatory permissions to receive ads--  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  !--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_FINE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /  uses-permission android:name= android.permission.CHANGE_WIFI_STATE /  uses-permission android:name= android.permission.VIBRATE /  uses-permission android:name= android.permission.RECORD_AUDIO /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE /  uses-permission android:name= com.google.android.gms.permission.ACTIVITY_RECOGNITION /  uses-permission android:name= android.permission.READ_CALENDAR /  uses-permission android:name= android.permission.WRITE_CALENDAR /  uses-permission android:name= android.permission.GET_TASKS /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/inmobi/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/", 
            "text": "InMobi\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import inmobi\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the InMobi configuration, you need to replace \naccount_id\n item with your specific \nInMobi\n account information.\n\n\nInMobi\n:{\n    \ninterstitial_placement_id\n: \n1449919424310\n,       //interstitial id\n    \naccount_id\n: \n922cc696d9fa475097651b5cad78567d\n, \n    \nbanner_h\n: 50,                                     //banner height\n    \nbanner_placement_id\n: \n1447081423897\n              //remove if needn't\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the InMobi JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginInMobiJS.hpp\n\n#include \nPluginInMobiJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginInMobiJS);\nsc-\naddRegisterCallback(register_all_PluginInMobiJS_helper);\n\n\n\n\nInitialize InMobi\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginInMobi.init();\n\n\n\n\nShow Interstitial\n\n\nAfter initialization you can begin to use the InMobi functionality. Use \nshowInterstitial\n wherever you want from your code:\n\n\n// Manually Loading Ads\nsdkbox.PluginInMobi.loadInterstitial();\n\n// show interstitial\nif (sdkbox.PluginInMobi.isInterstitialReady()) {\n    console.log('inmobi interstitial ad is ready');\n    sdkbox.PluginInMobi.showInterstitial();\n} else {\n    console.log('inmobi interstitial ad is not ready');\n}\n\n\n\n\nSet Log level\n\n\nYou can set log level with follow function\n\n\nsdkbox.PluginInMobi.setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);\n\n\n\n\nSet user data\n\n\nYou can use following functions to set user data\n\n\nsdkbox.PluginInMobi.addIdForType(\ntest\n, sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nsdkbox.PluginInMobi.removeIdType(sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nsdkbox.PluginInMobi.setAge(18);\nsdkbox.PluginInMobi.setAreaCode(\narea code\n);\nsdkbox.PluginInMobi.setAgeGroup(sdkbox.PluginInMobi.SBIMSDKAgeGroup.kIMSDKAgeGroupBetween18And20);\nsdkbox.PluginInMobi.setYearOfBirth(1989);\nsdkbox.PluginInMobi.setEducation(sdkbox.PluginInMobi.SBIMSDKEducation.kIMSDKEducationHighSchoolOrLess);\nsdkbox.PluginInMobi.setEthnicity(sdkbox.PluginInMobi.SBIMSDKEthnicity.kIMSDKEthnicityHispanic);\nsdkbox.PluginInMobi.setGender(sdkbox.PluginInMobi.SBIMSDKGender.kIMSDKGenderMale);\nsdkbox.PluginInMobi.setHouseholdIncome(sdkbox.PluginInMobi.SBIMSDKHouseholdIncome.kIMSDKHouseholdIncomeBelow5kUSD);\nsdkbox.PluginInMobi.setIncome(4500);\nsdkbox.PluginInMobi.setInterests(\ngame\n);\nsdkbox.PluginInMobi.setLanguage(\nzh-cn\n);\nsdkbox.PluginInMobi.setLocation(\ncd\n, \nsc\n, \nusa\n);\nsdkbox.PluginInMobi.setLocation(102, 348);\nsdkbox.PluginInMobi.setNationality(\nnationality\n);\nsdkbox.PluginInMobi.setPostalCode(\n618000\n);\n\n\n\n\nCatch InMobi events (optional)\n\n\nThis allows you to catch the \nInMobi\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nvar plugin = sdkbox.PluginInMobi\nplugin.setListener({\n    bannerDidFinishLoading: function() { console.log('bannerDidFinishLoading'); },\n    bannerDidFailToLoadWithError: function(code, description) { console.log('bannerDidFailToLoadWithError code:' + code + ' desc:' + description); },\n    bannerDidInteractWithParams: function(params) { console.log('bannerDidInteractWithParams'); },\n    userWillLeaveApplicationFromBanner: function() { console.log('userWillLeaveApplicationFromBanner'); },\n    bannerWillPresentScreen: function() { console.log('bannerWillPresentScreen'); },\n    bannerDidPresentScreen: function() { console.log('bannerDidPresentScreen'); },\n    bannerWillDismissScreen: function() { console.log('bannerWillDismissScreen'); },\n    bannerDidDismissScreen: function() { console.log('bannerDidDismissScreen'); },\n    bannerRewardActionCompletedWithRewards: function(rewards) { console.log('bannerRewardActionCompletedWithRewards'); },\n    interstitialDidFinishLoading: function() { console.log('interstitialDidFinishLoading'); },\n    interstitialDidFailToLoadWithError: function(code, description) { console.log('interstitialDidFailToLoadWithError code:' + code + ' desc:' + description); },\n    interstitialWillPresent: function() { console.log('interstitialWillPresent'); },\n    interstitialDidPresent: function() { console.log('interstitialDidPresent'); },\n    interstitialDidFailToPresentWithError: function(code, description) { console.log('interstitialDidFailToPresentWithError code:' + code + ' desc:' + description); },\n    interstitialWillDismiss: function() { console.log('interstitialWillDismiss'); },\n    interstitialDidDismiss: function() { console.log('interstitialDidDismiss'); },\n    interstitialDidInteractWithParams: function(params) { console.log('interstitialDidInteractWithParams'); },\n    interstitialRewardActionCompletedWithRewards: function(rewards) { console.log('interstitialRewardActionCompletedWithRewards'); },\n    userWillLeaveApplicationFromInterstitial: function() { console.log('userWillLeaveApplicationFromInterstitial'); }\n})\nplugin.init();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginInMobi.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginInMobi.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for inmobi events\n\n\n\n\nsdkbox.PluginInMobi.getVersion();\n\n\n\n\n\n\nUse this to get the version of the SDK.\n@return The version of the SDK.\n\n\n\n\nsdkbox.PluginInMobi.setLogLevel(desiredLogLevel);\n\n\n\n\n\n\nSet the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.\n\n\n\n\nsdkbox.PluginInMobi.addIdForType(identifier, type);\n\n\n\n\n\n\nRegister a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.\n\n\n\n\nsdkbox.PluginInMobi.removeIdType(type);\n\n\n\n\n\n\nDeregister a particular set of Ids\n@param type The user Id type.\n\n\n\n\nsdkbox.PluginInMobi.setAge(age);\n\n\n\n\n\n\nProvide the user's age to the SDK for targetting purposes.\n@param age The user's age.\n\n\n\n\nsdkbox.PluginInMobi.setAreaCode(areaCode);\n\n\n\n\n\n\nProvide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.\n\n\n\n\nsdkbox.PluginInMobi.setAgeGroup(ageGroup);\n\n\n\n\n\n\nProvide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.\n\n\n\n\nsdkbox.PluginInMobi.setYearOfBirth(yearOfBirth);\n\n\n\n\n\n\nProvide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.\n\n\n\n\nsdkbox.PluginInMobi.setEducation(education);\n\n\n\n\n\n\nProvide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.\n\n\n\n\nsdkbox.PluginInMobi.setEthnicity(ethnicity);\n\n\n\n\n\n\nProvide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.\n\n\n\n\nsdkbox.PluginInMobi.setGender(gender);\n\n\n\n\n\n\nProvide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.\n\n\n\n\nsdkbox.PluginInMobi.setHouseholdIncome(income);\n\n\n\n\n\n\nProvide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.\n\n\n\n\nsdkbox.PluginInMobi.setIncome(income);\n\n\n\n\n\n\nProvide the user's income to the SDK for targetting purposes.\n@param income The user's income.\n\n\n\n\nsdkbox.PluginInMobi.setInterests(interests);\n\n\n\n\n\n\nProvide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.\n\n\n\n\nsdkbox.PluginInMobi.setLanguage(language);\n\n\n\n\n\n\nProvide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.\n\n\n\n\nsdkbox.PluginInMobi.setLocation(city, state, country);\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.\n\n\n\n\nsdkbox.PluginInMobi.setLocation(latitude, longitude);\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param location: The location of the user\n\n\n\n\nsdkbox.PluginInMobi.setNationality(nationality);\n\n\n\n\n\n\nProvide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.\n\n\n\n\nsdkbox.PluginInMobi.setPostalCode(postalcode);\n\n\n\n\n\n\nProvide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.\n\n\n\n\nsdkbox.PluginInMobi.shouldAutoRefresh(refresh);\n\n\n\n\n\n\nControl if the banner should auto-refresh ad content.\n\n\n\n\nsdkbox.PluginInMobi.setRefreshInterval(interval);\n\n\n\n\n\n\nSpecify the refresh interval for the banner ad.\n\n\n\n\nsdkbox.PluginInMobi.loadBanner();\n\n\n\n\n\n\nSubmit a request to load banner ad content.\n\n\n\n\nsdkbox.PluginInMobi.disableHardwareAccelerationForBanner();\n\n\n\n\n\n\nTurn off hardware acceleration on the underlying views.\nvaild on android\n\n\n\n\nsdkbox.PluginInMobi.setBannerAnimationType(animationType);\n\n\n\n\n\n\nSet the animation preference on the banner views during ad refresh.\n\n\n\n\nsdkbox.PluginInMobi.setBannerKeywords(keywords);\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nsdkbox.PluginInMobi.loadInterstitial();\n\n\n\n\n\n\nSubmit a request to load interstitial ad content.\n\n\n\n\nsdkbox.PluginInMobi.isInterstitialReady();\n\n\n\n\n\n\nReturns true if the interstitial was loaded successfully and in ready to be shown.\n\n\n\n\nsdkbox.PluginInMobi.showInterstitial();\n\n\n\n\n\n\nDisplays the interstitial on the screen\n\n\n\n\nsdkbox.PluginInMobi.showInterstitial(type);\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on ios\n\n\n\n\nsdkbox.PluginInMobi.showInterstitial(enterAnimationResourcedId,\n                                      exitAnimationResourceId);\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on android\n\n\n\n\nsdkbox.PluginInMobi.disableHardwareAccelerationForInterstitial();\n\n\n\n\n\n\nDisable hardware acceleration on the underlying views.\nvalid on android\n\n\n\n\nsdkbox.PluginInMobi.setInterstitialKeywords(keywords);\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nListeners\n\n\nbannerDidFinishLoading();\n\n\n\n\n\n\nNotifies the delegate that the banner has finished loading\n\n\n\n\nbannerDidFailToLoadWithError(code, description);\n\n\n\n\n\n\nNotifies the delegate that the banner has failed to load with some error.\n\n\n\n\nbannerDidInteractWithParams(params);\n\n\n\n\n\n\nNotifies the delegate that the banner was interacted with.\n\n\n\n\nuserWillLeaveApplicationFromBanner();\n\n\n\n\n\n\nNotifies the delegate that the user would be taken out of the application context.\n\n\n\n\nbannerWillPresentScreen();\n\n\n\n\n\n\nNotifies the delegate that the banner would be presenting a full screen content.\n\n\n\n\nbannerDidPresentScreen();\n\n\n\n\n\n\nNotifies the delegate that the banner has finished presenting screen.\n\n\n\n\nbannerWillDismissScreen();\n\n\n\n\n\n\nNotifies the delegate that the banner will start dismissing the presented screen.\n\n\n\n\nbannerDidDismissScreen();\n\n\n\n\n\n\nNotifies the delegate that the banner has dismissed the presented screen.\n\n\n\n\nbannerRewardActionCompletedWithRewards(rewards);\n\n\n\n\n\n\nNotifies the delegate that the user has completed the action to be incentivised with.\n\n\n\n\ninterstitialDidFinishLoading();\n\n\n\n\n\n\nNotifies the delegate that the interstitial has finished loading\n\n\n\n\ninterstitialDidFailToLoadWithError(code, description);\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to load with some error.\n\n\n\n\ninterstitialWillPresent();\n\n\n\n\n\n\nNotifies the delegate that the interstitial would be presented.\n\n\n\n\ninterstitialDidPresent();\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been presented.\n\n\n\n\ninterstitialDidFailToPresentWithError(code, description);\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to present with some error.\n\n\n\n\ninterstitialWillDismiss();\n\n\n\n\n\n\nNotifies the delegate that the interstitial will be dismissed.\n\n\n\n\ninterstitialDidDismiss();\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been dismissed.\n\n\n\n\ninterstitialDidInteractWithParams(params);\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been interacted with.\n\n\n\n\ninterstitialRewardActionCompletedWithRewards(rewards);\n\n\n\n\n\n\nNotifies the delegate that the user has performed the action to be incentivised with.\n\n\n\n\nuserWillLeaveApplicationFromInterstitial();\n\n\n\n\n\n\nNotifies the delegate that the user will leave application context.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nInMobi\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginInMobi.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nSafariServices.framework\n\n\nGameController.framework\n\n\nlibsqlite3.0.tbd\n\n\nlibc++.tbd\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nInMobi-5.1.0.jar\n\n\nPluginInMobi.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n!--Mandatory permissions to receive ads--\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n!--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.CHANGE_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n/\n\n\nuses-permission android:name=\nandroid.permission.RECORD_AUDIO\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n/\n\n\nuses-permission android:name=\ncom.google.android.gms.permission.ACTIVITY_RECOGNITION\n/\n\n\nuses-permission android:name=\nandroid.permission.READ_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.GET_TASKS\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "InMobi with Javascript"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/#inmobi", 
            "text": "", 
            "title": "InMobi"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import inmobi", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the InMobi configuration, you need to replace  account_id  item with your specific  InMobi  account information.  InMobi :{\n     interstitial_placement_id :  1449919424310 ,       //interstitial id\n     account_id :  922cc696d9fa475097651b5cad78567d , \n     banner_h : 50,                                     //banner height\n     banner_placement_id :  1447081423897               //remove if needn't\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the InMobi JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginInMobiJS.hpp \n#include  PluginInMobiJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginInMobiJS);\nsc- addRegisterCallback(register_all_PluginInMobiJS_helper);  Initialize InMobi  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginInMobi.init();  Show Interstitial  After initialization you can begin to use the InMobi functionality. Use  showInterstitial  wherever you want from your code:  // Manually Loading Ads\nsdkbox.PluginInMobi.loadInterstitial();\n\n// show interstitial\nif (sdkbox.PluginInMobi.isInterstitialReady()) {\n    console.log('inmobi interstitial ad is ready');\n    sdkbox.PluginInMobi.showInterstitial();\n} else {\n    console.log('inmobi interstitial ad is not ready');\n}  Set Log level  You can set log level with follow function  sdkbox.PluginInMobi.setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);  Set user data  You can use following functions to set user data  sdkbox.PluginInMobi.addIdForType( test , sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nsdkbox.PluginInMobi.removeIdType(sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nsdkbox.PluginInMobi.setAge(18);\nsdkbox.PluginInMobi.setAreaCode( area code );\nsdkbox.PluginInMobi.setAgeGroup(sdkbox.PluginInMobi.SBIMSDKAgeGroup.kIMSDKAgeGroupBetween18And20);\nsdkbox.PluginInMobi.setYearOfBirth(1989);\nsdkbox.PluginInMobi.setEducation(sdkbox.PluginInMobi.SBIMSDKEducation.kIMSDKEducationHighSchoolOrLess);\nsdkbox.PluginInMobi.setEthnicity(sdkbox.PluginInMobi.SBIMSDKEthnicity.kIMSDKEthnicityHispanic);\nsdkbox.PluginInMobi.setGender(sdkbox.PluginInMobi.SBIMSDKGender.kIMSDKGenderMale);\nsdkbox.PluginInMobi.setHouseholdIncome(sdkbox.PluginInMobi.SBIMSDKHouseholdIncome.kIMSDKHouseholdIncomeBelow5kUSD);\nsdkbox.PluginInMobi.setIncome(4500);\nsdkbox.PluginInMobi.setInterests( game );\nsdkbox.PluginInMobi.setLanguage( zh-cn );\nsdkbox.PluginInMobi.setLocation( cd ,  sc ,  usa );\nsdkbox.PluginInMobi.setLocation(102, 348);\nsdkbox.PluginInMobi.setNationality( nationality );\nsdkbox.PluginInMobi.setPostalCode( 618000 );  Catch InMobi events (optional)  This allows you to catch the  InMobi  events so that you can perform operations based upon responses. A simple example might look like this:  var plugin = sdkbox.PluginInMobi\nplugin.setListener({\n    bannerDidFinishLoading: function() { console.log('bannerDidFinishLoading'); },\n    bannerDidFailToLoadWithError: function(code, description) { console.log('bannerDidFailToLoadWithError code:' + code + ' desc:' + description); },\n    bannerDidInteractWithParams: function(params) { console.log('bannerDidInteractWithParams'); },\n    userWillLeaveApplicationFromBanner: function() { console.log('userWillLeaveApplicationFromBanner'); },\n    bannerWillPresentScreen: function() { console.log('bannerWillPresentScreen'); },\n    bannerDidPresentScreen: function() { console.log('bannerDidPresentScreen'); },\n    bannerWillDismissScreen: function() { console.log('bannerWillDismissScreen'); },\n    bannerDidDismissScreen: function() { console.log('bannerDidDismissScreen'); },\n    bannerRewardActionCompletedWithRewards: function(rewards) { console.log('bannerRewardActionCompletedWithRewards'); },\n    interstitialDidFinishLoading: function() { console.log('interstitialDidFinishLoading'); },\n    interstitialDidFailToLoadWithError: function(code, description) { console.log('interstitialDidFailToLoadWithError code:' + code + ' desc:' + description); },\n    interstitialWillPresent: function() { console.log('interstitialWillPresent'); },\n    interstitialDidPresent: function() { console.log('interstitialDidPresent'); },\n    interstitialDidFailToPresentWithError: function(code, description) { console.log('interstitialDidFailToPresentWithError code:' + code + ' desc:' + description); },\n    interstitialWillDismiss: function() { console.log('interstitialWillDismiss'); },\n    interstitialDidDismiss: function() { console.log('interstitialDidDismiss'); },\n    interstitialDidInteractWithParams: function(params) { console.log('interstitialDidInteractWithParams'); },\n    interstitialRewardActionCompletedWithRewards: function(rewards) { console.log('interstitialRewardActionCompletedWithRewards'); },\n    userWillLeaveApplicationFromInterstitial: function() { console.log('userWillLeaveApplicationFromInterstitial'); }\n})\nplugin.init();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginInMobi.init();   initialize the plugin instance.   sdkbox.PluginInMobi.setListener(listener);   Set listener to listen for inmobi events   sdkbox.PluginInMobi.getVersion();   Use this to get the version of the SDK.\n@return The version of the SDK.   sdkbox.PluginInMobi.setLogLevel(desiredLogLevel);   Set the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.   sdkbox.PluginInMobi.addIdForType(identifier, type);   Register a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.   sdkbox.PluginInMobi.removeIdType(type);   Deregister a particular set of Ids\n@param type The user Id type.   sdkbox.PluginInMobi.setAge(age);   Provide the user's age to the SDK for targetting purposes.\n@param age The user's age.   sdkbox.PluginInMobi.setAreaCode(areaCode);   Provide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.   sdkbox.PluginInMobi.setAgeGroup(ageGroup);   Provide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.   sdkbox.PluginInMobi.setYearOfBirth(yearOfBirth);   Provide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.   sdkbox.PluginInMobi.setEducation(education);   Provide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.   sdkbox.PluginInMobi.setEthnicity(ethnicity);   Provide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.   sdkbox.PluginInMobi.setGender(gender);   Provide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.   sdkbox.PluginInMobi.setHouseholdIncome(income);   Provide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.   sdkbox.PluginInMobi.setIncome(income);   Provide the user's income to the SDK for targetting purposes.\n@param income The user's income.   sdkbox.PluginInMobi.setInterests(interests);   Provide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.   sdkbox.PluginInMobi.setLanguage(language);   Provide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.   sdkbox.PluginInMobi.setLocation(city, state, country);   Provide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.   sdkbox.PluginInMobi.setLocation(latitude, longitude);   Provide the user's location to the SDK for targetting purposes.\n@param location: The location of the user   sdkbox.PluginInMobi.setNationality(nationality);   Provide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.   sdkbox.PluginInMobi.setPostalCode(postalcode);   Provide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.   sdkbox.PluginInMobi.shouldAutoRefresh(refresh);   Control if the banner should auto-refresh ad content.   sdkbox.PluginInMobi.setRefreshInterval(interval);   Specify the refresh interval for the banner ad.   sdkbox.PluginInMobi.loadBanner();   Submit a request to load banner ad content.   sdkbox.PluginInMobi.disableHardwareAccelerationForBanner();   Turn off hardware acceleration on the underlying views.\nvaild on android   sdkbox.PluginInMobi.setBannerAnimationType(animationType);   Set the animation preference on the banner views during ad refresh.   sdkbox.PluginInMobi.setBannerKeywords(keywords);   Set comma delimited keywords for targeting purpose   sdkbox.PluginInMobi.loadInterstitial();   Submit a request to load interstitial ad content.   sdkbox.PluginInMobi.isInterstitialReady();   Returns true if the interstitial was loaded successfully and in ready to be shown.   sdkbox.PluginInMobi.showInterstitial();   Displays the interstitial on the screen   sdkbox.PluginInMobi.showInterstitial(type);   Displays the interstitial on the screen\nvalid on ios   sdkbox.PluginInMobi.showInterstitial(enterAnimationResourcedId,\n                                      exitAnimationResourceId);   Displays the interstitial on the screen\nvalid on android   sdkbox.PluginInMobi.disableHardwareAccelerationForInterstitial();   Disable hardware acceleration on the underlying views.\nvalid on android   sdkbox.PluginInMobi.setInterstitialKeywords(keywords);   Set comma delimited keywords for targeting purpose   Listeners  bannerDidFinishLoading();   Notifies the delegate that the banner has finished loading   bannerDidFailToLoadWithError(code, description);   Notifies the delegate that the banner has failed to load with some error.   bannerDidInteractWithParams(params);   Notifies the delegate that the banner was interacted with.   userWillLeaveApplicationFromBanner();   Notifies the delegate that the user would be taken out of the application context.   bannerWillPresentScreen();   Notifies the delegate that the banner would be presenting a full screen content.   bannerDidPresentScreen();   Notifies the delegate that the banner has finished presenting screen.   bannerWillDismissScreen();   Notifies the delegate that the banner will start dismissing the presented screen.   bannerDidDismissScreen();   Notifies the delegate that the banner has dismissed the presented screen.   bannerRewardActionCompletedWithRewards(rewards);   Notifies the delegate that the user has completed the action to be incentivised with.   interstitialDidFinishLoading();   Notifies the delegate that the interstitial has finished loading   interstitialDidFailToLoadWithError(code, description);   Notifies the delegate that the interstitial has failed to load with some error.   interstitialWillPresent();   Notifies the delegate that the interstitial would be presented.   interstitialDidPresent();   Notifies the delegate that the interstitial has been presented.   interstitialDidFailToPresentWithError(code, description);   Notifies the delegate that the interstitial has failed to present with some error.   interstitialWillDismiss();   Notifies the delegate that the interstitial will be dismissed.   interstitialDidDismiss();   Notifies the delegate that the interstitial has been dismissed.   interstitialDidInteractWithParams(params);   Notifies the delegate that the interstitial has been interacted with.   interstitialRewardActionCompletedWithRewards(rewards);   Notifies the delegate that the user has performed the action to be incentivised with.   userWillLeaveApplicationFromInterstitial();   Notifies the delegate that the user will leave application context.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  InMobi  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginInMobi.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CoreLocation.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework  SafariServices.framework  GameController.framework  libsqlite3.0.tbd  libc++.tbd   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   InMobi-5.1.0.jar  PluginInMobi.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  !--Mandatory permissions to receive ads--  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  !--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_FINE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /  uses-permission android:name= android.permission.CHANGE_WIFI_STATE /  uses-permission android:name= android.permission.VIBRATE /  uses-permission android:name= android.permission.RECORD_AUDIO /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE /  uses-permission android:name= com.google.android.gms.permission.ACTIVITY_RECOGNITION /  uses-permission android:name= android.permission.READ_CALENDAR /  uses-permission android:name= android.permission.WRITE_CALENDAR /  uses-permission android:name= android.permission.GET_TASKS /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/inmobi/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/", 
            "text": "InMobi\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import inmobi\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the InMobi configuration, you need to replace \naccount_id\n item with your specific \nInMobi\n account information.\n\n\nInMobi\n:{\n    \ninterstitial_placement_id\n: \n1449919424310\n,       //interstitial id\n    \naccount_id\n: \n922cc696d9fa475097651b5cad78567d\n, \n    \nbanner_h\n: 50,                                     //banner height\n    \nbanner_placement_id\n: \n1447081423897\n              //remove if needn't\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize InMobi\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginInMobi:init()\n\n\n\n\nShow interstitial\n\n\nAfter initialization you can begin to use the InMobi functionality:\n\n\nlocal plugin = sdkbox.PluginInMobi\nplugin:setListener(function(args)\n    local event = args.event\n    dump(args, \ninmobi listener info:\n)\nend)\nplugin:init()\n\n-- Manually Loading Ads\n-- plugin:loadInterstitial();\n\n-- show intestitial\nif plugin:isInterstitialReady() then\n    print('inmobi interstitial ad is ready');\n    plugin:showInterstitial();\nelse\n    print('inmobi interstitial ad is not ready');\nend\n\n\n\n\nSet Log level\n\n\nYou can set log level with follow function\n\n\nplugin:setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);\n\n\n\n\nSet user data\n\n\nYou can use following functions to set user data\n\n\n-- setting if need\nprint(\ninmobi plugin version:\n .. plugin:getVersion());\nplugin:setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);\nplugin:addIdForType(\ntest\n, sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nplugin:removeIdType(sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nplugin:setAge(18);\nplugin:setAreaCode(\narea code\n);\nplugin:setAgeGroup(sdkbox.PluginInMobi.SBIMSDKAgeGroup.kIMSDKAgeGroupBetween18And20);\nplugin:setYearOfBirth(1989);\nplugin:setEducation(sdkbox.PluginInMobi.SBIMSDKEducation.kIMSDKEducationHighSchoolOrLess);\nplugin:setEthnicity(sdkbox.PluginInMobi.SBIMSDKEthnicity.kIMSDKEthnicityHispanic);\nplugin:setGender(sdkbox.PluginInMobi.SBIMSDKGender.kIMSDKGenderMale);\nplugin:setHouseholdIncome(sdkbox.PluginInMobi.SBIMSDKHouseholdIncome.kIMSDKHouseholdIncomeBelow5kUSD);\nplugin:setIncome(4500);\nplugin:setInterests(\ngame\n);\nplugin:setLanguage(\nzh-cn\n);\nplugin:setLocation(\ncd\n, \nsc\n, \nusa\n);\nplugin:setLocation(102, 348);\nplugin:setNationality(\nnationality\n);\nplugin:setPostalCode(\n618000\n);\n\n\n\n\nCatch InMobi events (optional)\n\n\nThis allows you to catch the \nInMobi\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nlocal plugin = sdkbox.PluginInMobi\nplugin:setListener(function(args)\n    local event = args.event -- event same with function name of InMobiListener\n    dump(args, \ninmobi listener info:\n)\nend)\nplugin:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginInMobi:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginInMobi:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for inmobi events\n\n\n\n\nsdkbox.PluginInMobi:getVersion()\n\n\n\n\n\n\nUse this to get the version of the SDK.\n@return The version of the SDK.\n\n\n\n\nsdkbox.PluginInMobi:setLogLevel(desiredLogLevel)\n\n\n\n\n\n\nSet the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.\n\n\n\n\nsdkbox.PluginInMobi:addIdForType(identifier, type)\n\n\n\n\n\n\nRegister a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.\n\n\n\n\nsdkbox.PluginInMobi:removeIdType(type)\n\n\n\n\n\n\nDeregister a particular set of Ids\n@param type The user Id type.\n\n\n\n\nsdkbox.PluginInMobi:setAge(age)\n\n\n\n\n\n\nProvide the user's age to the SDK for targetting purposes.\n@param age The user's age.\n\n\n\n\nsdkbox.PluginInMobi:setAreaCode(areaCode)\n\n\n\n\n\n\nProvide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.\n\n\n\n\nsdkbox.PluginInMobi:setAgeGroup(ageGroup)\n\n\n\n\n\n\nProvide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.\n\n\n\n\nsdkbox.PluginInMobi:setYearOfBirth(yearOfBirth)\n\n\n\n\n\n\nProvide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.\n\n\n\n\nsdkbox.PluginInMobi:setEducation(education)\n\n\n\n\n\n\nProvide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.\n\n\n\n\nsdkbox.PluginInMobi:setEthnicity(ethnicity)\n\n\n\n\n\n\nProvide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.\n\n\n\n\nsdkbox.PluginInMobi:setGender(gender)\n\n\n\n\n\n\nProvide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.\n\n\n\n\nsdkbox.PluginInMobi:setHouseholdIncome(income)\n\n\n\n\n\n\nProvide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.\n\n\n\n\nsdkbox.PluginInMobi:setIncome(income)\n\n\n\n\n\n\nProvide the user's income to the SDK for targetting purposes.\n@param income The user's income.\n\n\n\n\nsdkbox.PluginInMobi:setInterests(interests)\n\n\n\n\n\n\nProvide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.\n\n\n\n\nsdkbox.PluginInMobi:setLanguage(language)\n\n\n\n\n\n\nProvide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.\n\n\n\n\nsdkbox.PluginInMobi:setLocation(city, state, country)\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.\n\n\n\n\nsdkbox.PluginInMobi:setLocation(latitude, longitude)\n\n\n\n\n\n\nProvide the user's location to the SDK for targetting purposes.\n@param location: The location of the user\n\n\n\n\nsdkbox.PluginInMobi:setNationality(nationality)\n\n\n\n\n\n\nProvide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.\n\n\n\n\nsdkbox.PluginInMobi:setPostalCode(postalcode)\n\n\n\n\n\n\nProvide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.\n\n\n\n\nsdkbox.PluginInMobi:shouldAutoRefresh(refresh)\n\n\n\n\n\n\nControl if the banner should auto-refresh ad content.\n\n\n\n\nsdkbox.PluginInMobi:setRefreshInterval(interval)\n\n\n\n\n\n\nSpecify the refresh interval for the banner ad.\n\n\n\n\nsdkbox.PluginInMobi:loadBanner()\n\n\n\n\n\n\nSubmit a request to load banner ad content.\n\n\n\n\nsdkbox.PluginInMobi:disableHardwareAccelerationForBanner()\n\n\n\n\n\n\nTurn off hardware acceleration on the underlying views.\nvaild on android\n\n\n\n\nsdkbox.PluginInMobi:setBannerAnimationType(animationType)\n\n\n\n\n\n\nSet the animation preference on the banner views during ad refresh.\n\n\n\n\nsdkbox.PluginInMobi:setBannerKeywords(keywords)\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nsdkbox.PluginInMobi:loadInterstitial()\n\n\n\n\n\n\nSubmit a request to load interstitial ad content.\n\n\n\n\nsdkbox.PluginInMobi:isInterstitialReady()\n\n\n\n\n\n\nReturns true if the interstitial was loaded successfully and in ready to be shown.\n\n\n\n\nsdkbox.PluginInMobi:showInterstitial()\n\n\n\n\n\n\nDisplays the interstitial on the screen\n\n\n\n\nsdkbox.PluginInMobi:showInterstitial(type)\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on ios\n\n\n\n\nsdkbox.PluginInMobi:showInterstitial(enterAnimationResourcedId,\n                                      exitAnimationResourceId)\n\n\n\n\n\n\nDisplays the interstitial on the screen\nvalid on android\n\n\n\n\nsdkbox.PluginInMobi:disableHardwareAccelerationForInterstitial()\n\n\n\n\n\n\nDisable hardware acceleration on the underlying views.\nvalid on android\n\n\n\n\nsdkbox.PluginInMobi:setInterstitialKeywords(keywords)\n\n\n\n\n\n\nSet comma delimited keywords for targeting purpose\n\n\n\n\nListeners\n\n\nbannerDidFinishLoading()\n\n\n\n\n\n\nNotifies the delegate that the banner has finished loading\n\n\n\n\nbannerDidFailToLoadWithError(code, description)\n\n\n\n\n\n\nNotifies the delegate that the banner has failed to load with some error.\n\n\n\n\nbannerDidInteractWithParams(params)\n\n\n\n\n\n\nNotifies the delegate that the banner was interacted with.\n\n\n\n\nuserWillLeaveApplicationFromBanner()\n\n\n\n\n\n\nNotifies the delegate that the user would be taken out of the application context.\n\n\n\n\nbannerWillPresentScreen()\n\n\n\n\n\n\nNotifies the delegate that the banner would be presenting a full screen content.\n\n\n\n\nbannerDidPresentScreen()\n\n\n\n\n\n\nNotifies the delegate that the banner has finished presenting screen.\n\n\n\n\nbannerWillDismissScreen()\n\n\n\n\n\n\nNotifies the delegate that the banner will start dismissing the presented screen.\n\n\n\n\nbannerDidDismissScreen()\n\n\n\n\n\n\nNotifies the delegate that the banner has dismissed the presented screen.\n\n\n\n\nbannerRewardActionCompletedWithRewards(rewards)\n\n\n\n\n\n\nNotifies the delegate that the user has completed the action to be incentivised with.\n\n\n\n\ninterstitialDidFinishLoading()\n\n\n\n\n\n\nNotifies the delegate that the interstitial has finished loading\n\n\n\n\ninterstitialDidFailToLoadWithError(code, description)\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to load with some error.\n\n\n\n\ninterstitialWillPresent()\n\n\n\n\n\n\nNotifies the delegate that the interstitial would be presented.\n\n\n\n\ninterstitialDidPresent()\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been presented.\n\n\n\n\ninterstitialDidFailToPresentWithError(code, description)\n\n\n\n\n\n\nNotifies the delegate that the interstitial has failed to present with some error.\n\n\n\n\ninterstitialWillDismiss()\n\n\n\n\n\n\nNotifies the delegate that the interstitial will be dismissed.\n\n\n\n\ninterstitialDidDismiss()\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been dismissed.\n\n\n\n\ninterstitialDidInteractWithParams(params)\n\n\n\n\n\n\nNotifies the delegate that the interstitial has been interacted with.\n\n\n\n\ninterstitialRewardActionCompletedWithRewards(rewards)\n\n\n\n\n\n\nNotifies the delegate that the user has performed the action to be incentivised with.\n\n\n\n\nuserWillLeaveApplicationFromInterstitial()\n\n\n\n\n\n\nNotifies the delegate that the user will leave application context.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nInMobi\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginInMobi.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nSecurity.framework\n\n\nSocial.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nSafariServices.framework\n\n\nGameController.framework\n\n\nlibsqlite3.0.tbd\n\n\nlibc++.tbd\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nInMobi-5.1.0.jar\n\n\nPluginInMobi.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n!--Mandatory permissions to receive ads--\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n!--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_FINE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.CHANGE_WIFI_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n/\n\n\nuses-permission android:name=\nandroid.permission.RECORD_AUDIO\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n/\n\n\nuses-permission android:name=\ncom.google.android.gms.permission.ACTIVITY_RECOGNITION\n/\n\n\nuses-permission android:name=\nandroid.permission.READ_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.WRITE_CALENDAR\n/\n\n\nuses-permission android:name=\nandroid.permission.GET_TASKS\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "InMobi with Lua"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/#inmobi", 
            "text": "", 
            "title": "InMobi"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX InMobi plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import inmobi", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the InMobi configuration, you need to replace  account_id  item with your specific  InMobi  account information.  InMobi :{\n     interstitial_placement_id :  1449919424310 ,       //interstitial id\n     account_id :  922cc696d9fa475097651b5cad78567d , \n     banner_h : 50,                                     //banner height\n     banner_placement_id :  1447081423897               //remove if needn't\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/#usage", 
            "text": "Initialize InMobi  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginInMobi:init()  Show interstitial  After initialization you can begin to use the InMobi functionality:  local plugin = sdkbox.PluginInMobi\nplugin:setListener(function(args)\n    local event = args.event\n    dump(args,  inmobi listener info: )\nend)\nplugin:init()\n\n-- Manually Loading Ads\n-- plugin:loadInterstitial();\n\n-- show intestitial\nif plugin:isInterstitialReady() then\n    print('inmobi interstitial ad is ready');\n    plugin:showInterstitial();\nelse\n    print('inmobi interstitial ad is not ready');\nend  Set Log level  You can set log level with follow function  plugin:setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);  Set user data  You can use following functions to set user data  -- setting if need\nprint( inmobi plugin version:  .. plugin:getVersion());\nplugin:setLogLevel(sdkbox.PluginInMobi.SBIMSDKLogLevel.kIMSDKLogLevelDebug);\nplugin:addIdForType( test , sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nplugin:removeIdType(sdkbox.PluginInMobi.SBIMSDKIdType.kIMSDKIdTypeLogin);\nplugin:setAge(18);\nplugin:setAreaCode( area code );\nplugin:setAgeGroup(sdkbox.PluginInMobi.SBIMSDKAgeGroup.kIMSDKAgeGroupBetween18And20);\nplugin:setYearOfBirth(1989);\nplugin:setEducation(sdkbox.PluginInMobi.SBIMSDKEducation.kIMSDKEducationHighSchoolOrLess);\nplugin:setEthnicity(sdkbox.PluginInMobi.SBIMSDKEthnicity.kIMSDKEthnicityHispanic);\nplugin:setGender(sdkbox.PluginInMobi.SBIMSDKGender.kIMSDKGenderMale);\nplugin:setHouseholdIncome(sdkbox.PluginInMobi.SBIMSDKHouseholdIncome.kIMSDKHouseholdIncomeBelow5kUSD);\nplugin:setIncome(4500);\nplugin:setInterests( game );\nplugin:setLanguage( zh-cn );\nplugin:setLocation( cd ,  sc ,  usa );\nplugin:setLocation(102, 348);\nplugin:setNationality( nationality );\nplugin:setPostalCode( 618000 );  Catch InMobi events (optional)  This allows you to catch the  InMobi  events so that you can perform operations based upon responses. A simple example might look like this:  local plugin = sdkbox.PluginInMobi\nplugin:setListener(function(args)\n    local event = args.event -- event same with function name of InMobiListener\n    dump(args,  inmobi listener info: )\nend)\nplugin:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginInMobi:init()   initialize the plugin instance.   sdkbox.PluginInMobi:setListener(listener)   Set listener to listen for inmobi events   sdkbox.PluginInMobi:getVersion()   Use this to get the version of the SDK.\n@return The version of the SDK.   sdkbox.PluginInMobi:setLogLevel(desiredLogLevel)   Set the log level for SDK's logs\n@param desiredLogLevel The desired level of logs.   sdkbox.PluginInMobi:addIdForType(identifier, type)   Register a user specific id with the SDK\n@param identifier The user Id.\n@param type The user Id type.   sdkbox.PluginInMobi:removeIdType(type)   Deregister a particular set of Ids\n@param type The user Id type.   sdkbox.PluginInMobi:setAge(age)   Provide the user's age to the SDK for targetting purposes.\n@param age The user's age.   sdkbox.PluginInMobi:setAreaCode(areaCode)   Provide the user's area code to the SDK for targetting purposes.\n@param areaCode The user's area code.   sdkbox.PluginInMobi:setAgeGroup(ageGroup)   Provide the user's age group to the SDK for targetting purposes.\n@param ageGroup The user's age group.   sdkbox.PluginInMobi:setYearOfBirth(yearOfBirth)   Provide a user's date of birth to the SDK for targetting purposes.\n@param dateOfBirth The user's date of birth.   sdkbox.PluginInMobi:setEducation(education)   Provide the user's education status to the SDK for targetting purposes.\n@param education The user's education status.   sdkbox.PluginInMobi:setEthnicity(ethnicity)   Provide the user's ethnicity to the SDK for targetting purposes.\n@param ethnicity The user's ethnicity.   sdkbox.PluginInMobi:setGender(gender)   Provide the user's gender to the SDK for targetting purposes.\n@param gender The user's gender.   sdkbox.PluginInMobi:setHouseholdIncome(income)   Provide the user's household income to the SDK for targetting purposes.\n@param income The user's household income.   sdkbox.PluginInMobi:setIncome(income)   Provide the user's income to the SDK for targetting purposes.\n@param income The user's income.   sdkbox.PluginInMobi:setInterests(interests)   Provide the user's interests to the SDK for targetting purposes.\n@param interests The user's interests.   sdkbox.PluginInMobi:setLanguage(language)   Provide the user's preferred language to the SDK for targetting purposes.\n@param language The user's language.   sdkbox.PluginInMobi:setLocation(city, state, country)   Provide the user's location to the SDK for targetting purposes.\n@param city The user's city.\n@param state The user's state.\n@param country The user's country.   sdkbox.PluginInMobi:setLocation(latitude, longitude)   Provide the user's location to the SDK for targetting purposes.\n@param location: The location of the user   sdkbox.PluginInMobi:setNationality(nationality)   Provide the user's nationality to the SDK for targetting purposes.\n@param nationality The user's nationality.   sdkbox.PluginInMobi:setPostalCode(postalcode)   Provide the user's postal code to the SDK for targetting purposes.\n@param postalcode The user's postalcode.   sdkbox.PluginInMobi:shouldAutoRefresh(refresh)   Control if the banner should auto-refresh ad content.   sdkbox.PluginInMobi:setRefreshInterval(interval)   Specify the refresh interval for the banner ad.   sdkbox.PluginInMobi:loadBanner()   Submit a request to load banner ad content.   sdkbox.PluginInMobi:disableHardwareAccelerationForBanner()   Turn off hardware acceleration on the underlying views.\nvaild on android   sdkbox.PluginInMobi:setBannerAnimationType(animationType)   Set the animation preference on the banner views during ad refresh.   sdkbox.PluginInMobi:setBannerKeywords(keywords)   Set comma delimited keywords for targeting purpose   sdkbox.PluginInMobi:loadInterstitial()   Submit a request to load interstitial ad content.   sdkbox.PluginInMobi:isInterstitialReady()   Returns true if the interstitial was loaded successfully and in ready to be shown.   sdkbox.PluginInMobi:showInterstitial()   Displays the interstitial on the screen   sdkbox.PluginInMobi:showInterstitial(type)   Displays the interstitial on the screen\nvalid on ios   sdkbox.PluginInMobi:showInterstitial(enterAnimationResourcedId,\n                                      exitAnimationResourceId)   Displays the interstitial on the screen\nvalid on android   sdkbox.PluginInMobi:disableHardwareAccelerationForInterstitial()   Disable hardware acceleration on the underlying views.\nvalid on android   sdkbox.PluginInMobi:setInterstitialKeywords(keywords)   Set comma delimited keywords for targeting purpose   Listeners  bannerDidFinishLoading()   Notifies the delegate that the banner has finished loading   bannerDidFailToLoadWithError(code, description)   Notifies the delegate that the banner has failed to load with some error.   bannerDidInteractWithParams(params)   Notifies the delegate that the banner was interacted with.   userWillLeaveApplicationFromBanner()   Notifies the delegate that the user would be taken out of the application context.   bannerWillPresentScreen()   Notifies the delegate that the banner would be presenting a full screen content.   bannerDidPresentScreen()   Notifies the delegate that the banner has finished presenting screen.   bannerWillDismissScreen()   Notifies the delegate that the banner will start dismissing the presented screen.   bannerDidDismissScreen()   Notifies the delegate that the banner has dismissed the presented screen.   bannerRewardActionCompletedWithRewards(rewards)   Notifies the delegate that the user has completed the action to be incentivised with.   interstitialDidFinishLoading()   Notifies the delegate that the interstitial has finished loading   interstitialDidFailToLoadWithError(code, description)   Notifies the delegate that the interstitial has failed to load with some error.   interstitialWillPresent()   Notifies the delegate that the interstitial would be presented.   interstitialDidPresent()   Notifies the delegate that the interstitial has been presented.   interstitialDidFailToPresentWithError(code, description)   Notifies the delegate that the interstitial has failed to present with some error.   interstitialWillDismiss()   Notifies the delegate that the interstitial will be dismissed.   interstitialDidDismiss()   Notifies the delegate that the interstitial has been dismissed.   interstitialDidInteractWithParams(params)   Notifies the delegate that the interstitial has been interacted with.   interstitialRewardActionCompletedWithRewards(rewards)   Notifies the delegate that the user has performed the action to be incentivised with.   userWillLeaveApplicationFromInterstitial()   Notifies the delegate that the user will leave application context.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  InMobi  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginInMobi.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CoreLocation.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  Security.framework  Social.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework  SafariServices.framework  GameController.framework  libsqlite3.0.tbd  libc++.tbd   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   InMobi-5.1.0.jar  PluginInMobi.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  !--Mandatory permissions to receive ads--  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  !--Recommended permissions to receive brand\u2010centric ads with interactive functionality for better eCPMs--  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_FINE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /  uses-permission android:name= android.permission.CHANGE_WIFI_STATE /  uses-permission android:name= android.permission.VIBRATE /  uses-permission android:name= android.permission.RECORD_AUDIO /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE /  uses-permission android:name= com.google.android.gms.permission.ACTIVITY_RECOGNITION /  uses-permission android:name= android.permission.READ_CALENDAR /  uses-permission android:name= android.permission.WRITE_CALENDAR /  uses-permission android:name= android.permission.GET_TASKS /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginInMobi\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugininmobi)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/inmobi/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt   Edit the file you specified to include the following:   # inmobi\n-keep class com.inmobi.** { *; }\n-dontwarn com.inmobi.**\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginKochava/PluginKochava.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox::PluginKochava::trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox::PluginKochava::spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox::PluginKochava::sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just\nneed to pass the \n.\n\n\nCatch Kochava events (optional)\n\n\nThis allows you to poll and catch \nKochava\n events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a \nlambda\n function:\n\n\nauto callback = [](const std::map\nstd::string, std::string\n* attribution)\n{\n  if (attribution)\n  {\n      typedef std::map\nstd::string, std::string\n map_type;\n      const map_type\n m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type\n kv = * it;\n          printf(\n%s -\n %s\n, kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);\n\n\n\n\nNote\n: Asking for attribution data could take a while. You can  poll\n \ngetAttributionData()\n until you get something back that is not \nnull\n.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nstatic void shutdown ( ) ;\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nstatic void enableLogging ( bool enabled ) ;\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nstatic void trackEvent ( const char * event , const char * value ) ;\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nstatic void spatialEvent ( const char * title , float x , float y , float z ) ;\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nstatic void setLimitAdTracking ( bool limitAdTracking ) ;\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nstatic const std::map \nstd::string , std::string\n * retrieveAttribution ( ) ;\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nstatic void sendDeepLink ( const char * url , const char * application ) ;\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nstatic void setAttributionCallback ( kochavaCallbackDict callback ) ;\n\n\n\n\n\n\nspecify callback for attribution\n\n\n\n\nstatic void setBeaconCallback ( kochavaCallbackString callback ) ;\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Kochava with C++"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#usage", 
            "text": "Initialize Kochava  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginKochava/PluginKochava.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox::PluginKochava::trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox::PluginKochava::spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox::PluginKochava::sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just\nneed to pass the  .  Catch Kochava events (optional)  This allows you to poll and catch  Kochava  events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a  lambda  function:  auto callback = [](const std::map std::string, std::string * attribution)\n{\n  if (attribution)\n  {\n      typedef std::map std::string, std::string  map_type;\n      const map_type  m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type  kv = * it;\n          printf( %s -  %s , kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);  Note : Asking for attribution data could take a while. You can  poll\n  getAttributionData()  until you get something back that is not  null .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   init the kochava service   static void shutdown ( ) ;   shutdown the kochava service   static void enableLogging ( bool enabled ) ;   enable kochava api logging   static void trackEvent ( const char * event , const char * value ) ;   track a single event   static void spatialEvent ( const char * title , float x , float y , float z ) ;   spatial event to help visualize data   static void setLimitAdTracking ( bool limitAdTracking ) ;   turn on/off ad tracking   static const std::map  std::string , std::string  * retrieveAttribution ( ) ;   returns the attribution data   static void sendDeepLink ( const char * url , const char * application ) ;   send a referral to where your app was opened from.   static void setAttributionCallback ( kochavaCallbackDict callback ) ;   specify callback for attribution   static void setBeaconCallback ( kochavaCallbackString callback ) ;   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/kochava/v3-js/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Kochava JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginKochavaJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginKochavaJS);\n\n\n\n\nInitialize Kochava\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava.trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nsdkbox.PluginKochava.shutdown();\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nsdkbox.PluginKochava.enableLogging(enabled);\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nsdkbox.PluginKochava.trackEvent(event, value);\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(title, x, y, z);\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nsdkbox.PluginKochava.setLimitAdTracking(limitAdTracking);\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nsdkbox.PluginKochava.retrieveAttribution();\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(url, application);\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nsdkbox.PluginKochava.setBeaconCallback(callback);\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Kochava with Javascript"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Kochava JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginKochavaJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginKochavaJS);  Initialize Kochava  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginKochava.init();  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava.trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava.spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava.sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava.init();   init the kochava service   sdkbox.PluginKochava.shutdown();   shutdown the kochava service   sdkbox.PluginKochava.enableLogging(enabled);   enable kochava api logging   sdkbox.PluginKochava.trackEvent(event, value);   track a single event   sdkbox.PluginKochava.spatialEvent(title, x, y, z);   spatial event to help visualize data   sdkbox.PluginKochava.setLimitAdTracking(limitAdTracking);   turn on/off ad tracking   sdkbox.PluginKochava.retrieveAttribution();   returns the attribution data   sdkbox.PluginKochava.sendDeepLink(url, application);   send a referral to where your app was opened from.   sdkbox.PluginKochava.setBeaconCallback(callback);   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginKochava:init()\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava:trackEvent(\nEVENT\n, \nVALUE\n)\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n)\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(\nURI\n, \nYOUR APP\n)\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava:init()\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nsdkbox.PluginKochava:shutdown()\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nsdkbox.PluginKochava:enableLogging(enabled)\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nsdkbox.PluginKochava:trackEvent(event, value)\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(title, x, y, z)\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nsdkbox.PluginKochava:setLimitAdTracking(limitAdTracking)\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nsdkbox.PluginKochava:retrieveAttribution()\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(url, application)\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nsdkbox.PluginKochava:setBeaconCallback(callback)\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Kochava with Lua"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#usage", 
            "text": "Initialize Kochava   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginKochava:init()  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava:trackEvent( EVENT ,  VALUE )   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava:spatialEvent( TITLE ,  X ,  Y ,  Z )   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava:sendDeepLink( URI ,  YOUR APP )  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava:init()   init the kochava service   sdkbox.PluginKochava:shutdown()   shutdown the kochava service   sdkbox.PluginKochava:enableLogging(enabled)   enable kochava api logging   sdkbox.PluginKochava:trackEvent(event, value)   track a single event   sdkbox.PluginKochava:spatialEvent(title, x, y, z)   spatial event to help visualize data   sdkbox.PluginKochava:setLimitAdTracking(limitAdTracking)   turn on/off ad tracking   sdkbox.PluginKochava:retrieveAttribution()   returns the attribution data   sdkbox.PluginKochava:sendDeepLink(url, application)   send a referral to where your app was opened from.   sdkbox.PluginKochava:setBeaconCallback(callback)   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginKochava/PluginKochava.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox::PluginKochava::trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox::PluginKochava::spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox::PluginKochava::sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just\nneed to pass the \n.\n\n\nCatch Kochava events (optional)\n\n\nThis allows you to poll and catch \nKochava\n events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a \nlambda\n function:\n\n\nauto callback = [](const std::map\nstd::string, std::string\n* attribution)\n{\n  if (attribution)\n  {\n      typedef std::map\nstd::string, std::string\n map_type;\n      const map_type\n m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type\n kv = * it;\n          printf(\n%s -\n %s\n, kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);\n\n\n\n\nNote\n: Asking for attribution data could take a while. You can  poll\n \ngetAttributionData()\n until you get something back that is not \nnull\n.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nstatic void shutdown ( ) ;\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nstatic void enableLogging ( bool enabled ) ;\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nstatic void trackEvent ( const char * event , const char * value ) ;\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nstatic void spatialEvent ( const char * title , float x , float y , float z ) ;\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nstatic void setLimitAdTracking ( bool limitAdTracking ) ;\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nstatic const std::map \nstd::string , std::string\n * retrieveAttribution ( ) ;\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nstatic void sendDeepLink ( const char * url , const char * application ) ;\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nstatic void setAttributionCallback ( kochavaCallbackDict callback ) ;\n\n\n\n\n\n\nspecify callback for attribution\n\n\n\n\nstatic void setBeaconCallback ( kochavaCallbackString callback ) ;\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Kochava with C++"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#usage", 
            "text": "Initialize Kochava  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginKochava/PluginKochava.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox::PluginKochava::trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox::PluginKochava::spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox::PluginKochava::sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just\nneed to pass the  .  Catch Kochava events (optional)  This allows you to poll and catch  Kochava  events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a  lambda  function:  auto callback = [](const std::map std::string, std::string * attribution)\n{\n  if (attribution)\n  {\n      typedef std::map std::string, std::string  map_type;\n      const map_type  m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type  kv = * it;\n          printf( %s -  %s , kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);  Note : Asking for attribution data could take a while. You can  poll\n  getAttributionData()  until you get something back that is not  null .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   init the kochava service   static void shutdown ( ) ;   shutdown the kochava service   static void enableLogging ( bool enabled ) ;   enable kochava api logging   static void trackEvent ( const char * event , const char * value ) ;   track a single event   static void spatialEvent ( const char * title , float x , float y , float z ) ;   spatial event to help visualize data   static void setLimitAdTracking ( bool limitAdTracking ) ;   turn on/off ad tracking   static const std::map  std::string , std::string  * retrieveAttribution ( ) ;   returns the attribution data   static void sendDeepLink ( const char * url , const char * application ) ;   send a referral to where your app was opened from.   static void setAttributionCallback ( kochavaCallbackDict callback ) ;   specify callback for attribution   static void setBeaconCallback ( kochavaCallbackString callback ) ;   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/kochava/v2-js/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Kochava JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginKochavaJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginKochavaJS);\n\n\n\n\nInitialize Kochava\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava.trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nsdkbox.PluginKochava.shutdown();\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nsdkbox.PluginKochava.enableLogging(enabled);\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nsdkbox.PluginKochava.trackEvent(event, value);\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(title, x, y, z);\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nsdkbox.PluginKochava.setLimitAdTracking(limitAdTracking);\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nsdkbox.PluginKochava.retrieveAttribution();\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(url, application);\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nsdkbox.PluginKochava.setBeaconCallback(callback);\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Kochava with Javascript"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Kochava JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginKochavaJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginKochavaJS);  Initialize Kochava  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginKochava.init();  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava.trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava.spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava.sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava.init();   init the kochava service   sdkbox.PluginKochava.shutdown();   shutdown the kochava service   sdkbox.PluginKochava.enableLogging(enabled);   enable kochava api logging   sdkbox.PluginKochava.trackEvent(event, value);   track a single event   sdkbox.PluginKochava.spatialEvent(title, x, y, z);   spatial event to help visualize data   sdkbox.PluginKochava.setLimitAdTracking(limitAdTracking);   turn on/off ad tracking   sdkbox.PluginKochava.retrieveAttribution();   returns the attribution data   sdkbox.PluginKochava.sendDeepLink(url, application);   send a referral to where your app was opened from.   sdkbox.PluginKochava.setBeaconCallback(callback);   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginKochava:init()\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava:trackEvent(\nEVENT\n, \nVALUE\n)\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n)\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(\nURI\n, \nYOUR APP\n)\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava:init()\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nsdkbox.PluginKochava:shutdown()\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nsdkbox.PluginKochava:enableLogging(enabled)\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nsdkbox.PluginKochava:trackEvent(event, value)\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(title, x, y, z)\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nsdkbox.PluginKochava:setLimitAdTracking(limitAdTracking)\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nsdkbox.PluginKochava:retrieveAttribution()\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(url, application)\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nsdkbox.PluginKochava:setBeaconCallback(callback)\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Kochava with Lua"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#usage", 
            "text": "Initialize Kochava   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginKochava:init()  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava:trackEvent( EVENT ,  VALUE )   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava:spatialEvent( TITLE ,  X ,  Y ,  Z )   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava:sendDeepLink( URI ,  YOUR APP )  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava:init()   init the kochava service   sdkbox.PluginKochava:shutdown()   shutdown the kochava service   sdkbox.PluginKochava:enableLogging(enabled)   enable kochava api logging   sdkbox.PluginKochava:trackEvent(event, value)   track a single event   sdkbox.PluginKochava:spatialEvent(title, x, y, z)   spatial event to help visualize data   sdkbox.PluginKochava:setLimitAdTracking(limitAdTracking)   turn on/off ad tracking   sdkbox.PluginKochava:retrieveAttribution()   returns the attribution data   sdkbox.PluginKochava:sendDeepLink(url, application)   send a referral to where your app was opened from.   sdkbox.PluginKochava:setBeaconCallback(callback)   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#kochava\n# Kochava Kit\n-keep public class com.kochava.android.** { *; }\n-dontwarn com.kochava.android.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/", 
            "text": "Leaderboard\n\n\nPrerequisites\n\n\nCurrently, \nLeaderboard\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Leaderboard\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginLeaderboard/PluginLeaderboard.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginLeaderboard::init();\n     sdkbox::IAP::init();\n}\n\n\n\n\nUsing Leaderboard\n\n\nSubmit score\n\n\nsdkbox::PluginLeaderboard::submitScore(leaderboardId, score);\n\n\n\n\nGet current score\n\n\nsdkbox::PluginLeaderboard::getLeaderboard(leaderboardId);\n\n\nLeaderboard events\n\n\nThis allows you to catch \nLeaderboard\n events so that you can perform operations after Leaderboard events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::LeaderboardListener\n and override the functions listed:\n\n\n\n\n#include \nPluginLeaderboard/PluginLeaderboard.h\n\nclass MyClass : public sdkbox::LeaderboardListener\n{\n    void onComplete ( std::string leaderboard ) {}\n    void onFail ( ) {}\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginLeaderboard::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\nInitialize SDKBox Leaderboard\n\n\n\n\nstatic void setListener ( LeaderboardListener * listener ) ;\n\n\n\n\n\n\nSet listener for Leaderboard\n\n\n\n\nstatic LeaderboardListener * getListener ( ) ;\n\n\n\n\n\n\nGet listener of Leaderboard\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove listener for Leaderboard\n\n\n\n\nstatic void submitScore ( const std::string \n leaderboardId , int score ) ;\n\n\n\n\nstatic void getLeaderboard ( const std::string \n leaderboardId ) ;\n\n\n\n\nListeners\n\n\nvoid onComplete ( std::string leaderboard );\n\n\n\n\nvoid onFail ( );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nLeaderboard\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginLeaderboard.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginLeaderboard.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Leaderboard with C++"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/#leaderboard", 
            "text": "", 
            "title": "Leaderboard"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/#prerequisites", 
            "text": "Currently,  Leaderboard  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/#usage", 
            "text": "Initialize Leaderboard  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginLeaderboard/PluginLeaderboard.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginLeaderboard::init();\n     sdkbox::IAP::init();\n}  Using Leaderboard  Submit score  sdkbox::PluginLeaderboard::submitScore(leaderboardId, score);  Get current score  sdkbox::PluginLeaderboard::getLeaderboard(leaderboardId);  Leaderboard events  This allows you to catch  Leaderboard  events so that you can perform operations after Leaderboard events have occurred.   Allow your class to extend  sdkbox::LeaderboardListener  and override the functions listed:   #include  PluginLeaderboard/PluginLeaderboard.h \nclass MyClass : public sdkbox::LeaderboardListener\n{\n    void onComplete ( std::string leaderboard ) {}\n    void onFail ( ) {}\n};   Create a  listener  that handles callbacks:   sdkbox::PluginLeaderboard::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   Initialize SDKBox Leaderboard   static void setListener ( LeaderboardListener * listener ) ;   Set listener for Leaderboard   static LeaderboardListener * getListener ( ) ;   Get listener of Leaderboard   static void removeListener ( ) ;   Remove listener for Leaderboard   static void submitScore ( const std::string   leaderboardId , int score ) ;  static void getLeaderboard ( const std::string   leaderboardId ) ;  Listeners  void onComplete ( std::string leaderboard );  void onFail ( );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Leaderboard  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginLeaderboard.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginLeaderboard.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/leaderboard/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/", 
            "text": "Leaderboard\n\n\nPrerequisites\n\n\nCurrently, \nLeaderboard\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Leaderboard JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginLeaderboardJS.hpp\n\n#include \nPluginLeaderboardJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginLeaderboardJS);\nsc-\naddRegisterCallback(register_all_PluginLeaderboardJS_helper);\n\n\n\n\nInitialize Leaderboard\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginLeaderboard.init();\nsdkbox.IAP.init();\n\n\n\n\nUsing Leaderboard\n\n\nSubmit score\n\n\nsdkbox.PluginLeaderboard.submitScore(leaderboardId, score);\n\n\n\n\nGet current score\n\n\nsdkbox.PluginLeaderboard.getLeaderboard(leaderboardId);\n\n\n\n\nLeaderboard events\n\n\nThis allows you to catch \nLeaderboard\n events so that you can perform operations after Leaderboard events have occurred.\n\n\nsdkbox.PluginLeaderboard.setListener({\n    onComplete: function(leaderboard) {},\n    onFail: function() {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginLeaderboard.init();\n\n\n\n\n\n\nInitialize SDKBox Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard.setListener(listener);\n\n\n\n\n\n\nSet listener for Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard.getListener();\n\n\n\n\n\n\nGet listener of Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard.removeListener();\n\n\n\n\n\n\nRemove listener for Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard.submitScore(leaderboardId, score);\n\n\n\n\nsdkbox.PluginLeaderboard.getLeaderboard(leaderboardId);\n\n\n\n\nListeners\n\n\nonComplete(leaderboard);\n\n\n\n\nonFail();\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nLeaderboard\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginLeaderboard.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginLeaderboard.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Leaderboard with Javascript"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/#leaderboard", 
            "text": "", 
            "title": "Leaderboard"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/#prerequisites", 
            "text": "Currently,  Leaderboard  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Leaderboard JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginLeaderboardJS.hpp \n#include  PluginLeaderboardJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginLeaderboardJS);\nsc- addRegisterCallback(register_all_PluginLeaderboardJS_helper);  Initialize Leaderboard  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginLeaderboard.init();\nsdkbox.IAP.init();  Using Leaderboard  Submit score  sdkbox.PluginLeaderboard.submitScore(leaderboardId, score);  Get current score  sdkbox.PluginLeaderboard.getLeaderboard(leaderboardId);  Leaderboard events  This allows you to catch  Leaderboard  events so that you can perform operations after Leaderboard events have occurred.  sdkbox.PluginLeaderboard.setListener({\n    onComplete: function(leaderboard) {},\n    onFail: function() {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginLeaderboard.init();   Initialize SDKBox Leaderboard   sdkbox.PluginLeaderboard.setListener(listener);   Set listener for Leaderboard   sdkbox.PluginLeaderboard.getListener();   Get listener of Leaderboard   sdkbox.PluginLeaderboard.removeListener();   Remove listener for Leaderboard   sdkbox.PluginLeaderboard.submitScore(leaderboardId, score);  sdkbox.PluginLeaderboard.getLeaderboard(leaderboardId);  Listeners  onComplete(leaderboard);  onFail();", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Leaderboard  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginLeaderboard.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginLeaderboard.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/leaderboard/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/", 
            "text": "Leaderboard\n\n\nPrerequisites\n\n\nCurrently, \nLeaderboard\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Leaderboard\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginLeaderboard:init();\nsdkbox.IAP:init();\n\n\n\n\nUsing Leaderboard\n\n\nSubmit score\n\n\nsdkbox.PluginLeaderboard:submitScore(leaderboardId, score);\n\n\n\n\nGet current score\n\n\nsdkbox.PluginLeaderboard:getLeaderboard(leaderboardId);\n\n\n\n\nLeaderboard events\n\n\nThis allows you to catch \nLeaderboard\n events so that you can perform operations after Leaderboard events have occurred.\n\n\nsdkbox.PluginLeaderboard:setListener(function(args)\n    dump(args)\n    if args.name == \nonComplete\n then\n    elseif args.name == \nonFail\n then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginLeaderboard:init()\n\n\n\n\n\n\nInitialize SDKBox Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard:setListener(listener)\n\n\n\n\n\n\nSet listener for Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard:getListener()\n\n\n\n\n\n\nGet listener of Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard:removeListener()\n\n\n\n\n\n\nRemove listener for Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard:submitScore(leaderboardId, score)\n\n\n\n\nsdkbox.PluginLeaderboard:getLeaderboard(leaderboardId)\n\n\n\n\nListeners\n\n\nonComplete(leaderboard)\n\n\n\n\nonFail()\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nLeaderboard\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginLeaderboard.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginLeaderboard.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Leaderboard with Lua"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/#leaderboard", 
            "text": "", 
            "title": "Leaderboard"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/#prerequisites", 
            "text": "Currently,  Leaderboard  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/#usage", 
            "text": "Initialize Leaderboard  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginLeaderboard:init();\nsdkbox.IAP:init();  Using Leaderboard  Submit score  sdkbox.PluginLeaderboard:submitScore(leaderboardId, score);  Get current score  sdkbox.PluginLeaderboard:getLeaderboard(leaderboardId);  Leaderboard events  This allows you to catch  Leaderboard  events so that you can perform operations after Leaderboard events have occurred.  sdkbox.PluginLeaderboard:setListener(function(args)\n    dump(args)\n    if args.name ==  onComplete  then\n    elseif args.name ==  onFail  then\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginLeaderboard:init()   Initialize SDKBox Leaderboard   sdkbox.PluginLeaderboard:setListener(listener)   Set listener for Leaderboard   sdkbox.PluginLeaderboard:getListener()   Get listener of Leaderboard   sdkbox.PluginLeaderboard:removeListener()   Remove listener for Leaderboard   sdkbox.PluginLeaderboard:submitScore(leaderboardId, score)  sdkbox.PluginLeaderboard:getLeaderboard(leaderboardId)  Listeners  onComplete(leaderboard)  onFail()", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Leaderboard  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginLeaderboard.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginLeaderboard.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/leaderboard/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/", 
            "text": "Leaderboard\n\n\nPrerequisites\n\n\nCurrently, \nLeaderboard\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Leaderboard\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginLeaderboard/PluginLeaderboard.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginLeaderboard::init();\n     sdkbox::IAP::init();\n}\n\n\n\n\nUsing Leaderboard\n\n\nSubmit score\n\n\nsdkbox::PluginLeaderboard::submitScore(leaderboardId, score);\n\n\n\n\nGet current score\n\n\nsdkbox::PluginLeaderboard::getLeaderboard(leaderboardId);\n\n\nLeaderboard events\n\n\nThis allows you to catch \nLeaderboard\n events so that you can perform operations after Leaderboard events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::LeaderboardListener\n and override the functions listed:\n\n\n\n\n#include \nPluginLeaderboard/PluginLeaderboard.h\n\nclass MyClass : public sdkbox::LeaderboardListener\n{\n    void onComplete ( std::string leaderboard ) {}\n    void onFail ( ) {}\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginLeaderboard::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\nInitialize SDKBox Leaderboard\n\n\n\n\nstatic void setListener ( LeaderboardListener * listener ) ;\n\n\n\n\n\n\nSet listener for Leaderboard\n\n\n\n\nstatic LeaderboardListener * getListener ( ) ;\n\n\n\n\n\n\nGet listener of Leaderboard\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove listener for Leaderboard\n\n\n\n\nstatic void submitScore ( const std::string \n leaderboardId , int score ) ;\n\n\n\n\nstatic void getLeaderboard ( const std::string \n leaderboardId ) ;\n\n\n\n\nListeners\n\n\nvoid onComplete ( std::string leaderboard );\n\n\n\n\nvoid onFail ( );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nLeaderboard\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginLeaderboard.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginLeaderboard.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Leaderboard with C++"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/#leaderboard", 
            "text": "", 
            "title": "Leaderboard"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/#prerequisites", 
            "text": "Currently,  Leaderboard  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/#usage", 
            "text": "Initialize Leaderboard  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginLeaderboard/PluginLeaderboard.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginLeaderboard::init();\n     sdkbox::IAP::init();\n}  Using Leaderboard  Submit score  sdkbox::PluginLeaderboard::submitScore(leaderboardId, score);  Get current score  sdkbox::PluginLeaderboard::getLeaderboard(leaderboardId);  Leaderboard events  This allows you to catch  Leaderboard  events so that you can perform operations after Leaderboard events have occurred.   Allow your class to extend  sdkbox::LeaderboardListener  and override the functions listed:   #include  PluginLeaderboard/PluginLeaderboard.h \nclass MyClass : public sdkbox::LeaderboardListener\n{\n    void onComplete ( std::string leaderboard ) {}\n    void onFail ( ) {}\n};   Create a  listener  that handles callbacks:   sdkbox::PluginLeaderboard::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   Initialize SDKBox Leaderboard   static void setListener ( LeaderboardListener * listener ) ;   Set listener for Leaderboard   static LeaderboardListener * getListener ( ) ;   Get listener of Leaderboard   static void removeListener ( ) ;   Remove listener for Leaderboard   static void submitScore ( const std::string   leaderboardId , int score ) ;  static void getLeaderboard ( const std::string   leaderboardId ) ;  Listeners  void onComplete ( std::string leaderboard );  void onFail ( );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Leaderboard  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginLeaderboard.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginLeaderboard.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/leaderboard/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/", 
            "text": "Leaderboard\n\n\nPrerequisites\n\n\nCurrently, \nLeaderboard\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Leaderboard JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginLeaderboardJS.hpp\n\n#include \nPluginLeaderboardJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginLeaderboardJS);\nsc-\naddRegisterCallback(register_all_PluginLeaderboardJS_helper);\n\n\n\n\nInitialize Leaderboard\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginLeaderboard.init();\nsdkbox.IAP.init();\n\n\n\n\nUsing Leaderboard\n\n\nSubmit score\n\n\nsdkbox.PluginLeaderboard.submitScore(leaderboardId, score);\n\n\n\n\nGet current score\n\n\nsdkbox.PluginLeaderboard.getLeaderboard(leaderboardId);\n\n\n\n\nLeaderboard events\n\n\nThis allows you to catch \nLeaderboard\n events so that you can perform operations after Leaderboard events have occurred.\n\n\nsdkbox.PluginLeaderboard.setListener({\n    onComplete: function(leaderboard) {},\n    onFail: function() {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginLeaderboard.init();\n\n\n\n\n\n\nInitialize SDKBox Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard.setListener(listener);\n\n\n\n\n\n\nSet listener for Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard.getListener();\n\n\n\n\n\n\nGet listener of Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard.removeListener();\n\n\n\n\n\n\nRemove listener for Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard.submitScore(leaderboardId, score);\n\n\n\n\nsdkbox.PluginLeaderboard.getLeaderboard(leaderboardId);\n\n\n\n\nListeners\n\n\nonComplete(leaderboard);\n\n\n\n\nonFail();\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nLeaderboard\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginLeaderboard.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginLeaderboard.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Leaderboard with Javascript"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/#leaderboard", 
            "text": "", 
            "title": "Leaderboard"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/#prerequisites", 
            "text": "Currently,  Leaderboard  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Leaderboard JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginLeaderboardJS.hpp \n#include  PluginLeaderboardJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginLeaderboardJS);\nsc- addRegisterCallback(register_all_PluginLeaderboardJS_helper);  Initialize Leaderboard  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginLeaderboard.init();\nsdkbox.IAP.init();  Using Leaderboard  Submit score  sdkbox.PluginLeaderboard.submitScore(leaderboardId, score);  Get current score  sdkbox.PluginLeaderboard.getLeaderboard(leaderboardId);  Leaderboard events  This allows you to catch  Leaderboard  events so that you can perform operations after Leaderboard events have occurred.  sdkbox.PluginLeaderboard.setListener({\n    onComplete: function(leaderboard) {},\n    onFail: function() {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginLeaderboard.init();   Initialize SDKBox Leaderboard   sdkbox.PluginLeaderboard.setListener(listener);   Set listener for Leaderboard   sdkbox.PluginLeaderboard.getListener();   Get listener of Leaderboard   sdkbox.PluginLeaderboard.removeListener();   Remove listener for Leaderboard   sdkbox.PluginLeaderboard.submitScore(leaderboardId, score);  sdkbox.PluginLeaderboard.getLeaderboard(leaderboardId);  Listeners  onComplete(leaderboard);  onFail();", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Leaderboard  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginLeaderboard.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginLeaderboard.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/leaderboard/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/", 
            "text": "Leaderboard\n\n\nPrerequisites\n\n\nCurrently, \nLeaderboard\n is only available for \nAndroid\n and only supports \nPlayphone\n as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Leaderboard\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginLeaderboard:init();\nsdkbox.IAP:init();\n\n\n\n\nUsing Leaderboard\n\n\nSubmit score\n\n\nsdkbox.PluginLeaderboard:submitScore(leaderboardId, score);\n\n\n\n\nGet current score\n\n\nsdkbox.PluginLeaderboard:getLeaderboard(leaderboardId);\n\n\n\n\nLeaderboard events\n\n\nThis allows you to catch \nLeaderboard\n events so that you can perform operations after Leaderboard events have occurred.\n\n\nsdkbox.PluginLeaderboard:setListener(function(args)\n    dump(args)\n    if args.name == \nonComplete\n then\n    elseif args.name == \nonFail\n then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginLeaderboard:init()\n\n\n\n\n\n\nInitialize SDKBox Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard:setListener(listener)\n\n\n\n\n\n\nSet listener for Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard:getListener()\n\n\n\n\n\n\nGet listener of Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard:removeListener()\n\n\n\n\n\n\nRemove listener for Leaderboard\n\n\n\n\nsdkbox.PluginLeaderboard:submitScore(leaderboardId, score)\n\n\n\n\nsdkbox.PluginLeaderboard:getLeaderboard(leaderboardId)\n\n\n\n\nListeners\n\n\nonComplete(leaderboard)\n\n\n\n\nonFail()\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nLeaderboard\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginLeaderboard.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nNone\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginLeaderboard.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Leaderboard with Lua"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/#leaderboard", 
            "text": "", 
            "title": "Leaderboard"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/#prerequisites", 
            "text": "Currently,  Leaderboard  is only available for  Android  and only supports  Playphone  as a backend. Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Leaderboard plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import leaderboard\n$ sdkbox import playphone\n$ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/#usage", 
            "text": "Initialize Leaderboard  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginLeaderboard:init();\nsdkbox.IAP:init();  Using Leaderboard  Submit score  sdkbox.PluginLeaderboard:submitScore(leaderboardId, score);  Get current score  sdkbox.PluginLeaderboard:getLeaderboard(leaderboardId);  Leaderboard events  This allows you to catch  Leaderboard  events so that you can perform operations after Leaderboard events have occurred.  sdkbox.PluginLeaderboard:setListener(function(args)\n    dump(args)\n    if args.name ==  onComplete  then\n    elseif args.name ==  onFail  then\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginLeaderboard:init()   Initialize SDKBox Leaderboard   sdkbox.PluginLeaderboard:setListener(listener)   Set listener for Leaderboard   sdkbox.PluginLeaderboard:getListener()   Get listener of Leaderboard   sdkbox.PluginLeaderboard:removeListener()   Remove listener for Leaderboard   sdkbox.PluginLeaderboard:submitScore(leaderboardId, score)  sdkbox.PluginLeaderboard:getLeaderboard(leaderboardId)  Listeners  onComplete(leaderboard)  onFail()", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Leaderboard  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginLeaderboard.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   None   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginLeaderboard.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   2.2 Edit  AndroidManifest.xml  To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginLeaderboard\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginleaderboard)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/leaderboard/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/playphone/v3-cpp/", 
            "text": "Playphone\n\n\nCurrently, \nPlayphone\n is only available for \nAndroid\n.  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import playphone\n\n\n\n\nExtra steps\n\n\nThe following step assumes you have already registered as a \nPlayphone Developer\n in the Playphone Developer Portal and created a new \ngame\n there.\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n add the following line:\n\n\n\n\nmeta-data android:name=\nstore\n android:value=\nplayphone\n /\n\n\nmeta-data android:name=\nleaderboard\n android:value=\nplayphone\n /\n\n\n\n\n\nNOTE: If you submit your \napk\n to other store, such as \nGoogle Play\n, please remove this line or set the \nstore\n with \ngoogleplay\n, otherwise, you will get wrong configuration for the other store. Example: \nmeta-data android:name=\"store\" android:value=\"googleplay\" /\n\n\n$ sdkbox set store googleplay\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Playphone configuration, you need to replace \nbase64EncodedPublicKey\n and \nyour secret key\n  with your specific Playphone account information.\n\n\nThe \n is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.\n\n\n is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.\n\n\nHere is an example adding \nPlayphone\n:\n\n\n{\n    \nios\n:\n    {\n    },\n    \nandroid\n:\n    {\n    },\n    \nplayphone\n :\n    {\n        \nskey\n:\nyour secret key\n,\n        \niap\n:\n        {\n            \nkey\n:\nbase64EncodedPublicKey\n,\n            \nitems\n:{\n                \nremove_ads\n:{\n                    \nid\n:\ncom.cocos2dx.non1\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ndouble_coin\n:{\n                    \nid\n:\ncom.cocos2dx.non2\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ncoin_package\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest2\n\n                },\n                \ncoin_package2\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest3\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Playphone with C++"
        }, 
        {
            "location": "/plugins/playphone/v3-cpp/#playphone", 
            "text": "Currently,  Playphone  is only available for  Android .  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Playphone"
        }, 
        {
            "location": "/plugins/playphone/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import playphone", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/playphone/v3-cpp/#extra-steps", 
            "text": "The following step assumes you have already registered as a  Playphone Developer  in the Playphone Developer Portal and created a new  game  there.  Setup Android   Open  AndroidManifest.xml  add the following line:   meta-data android:name= store  android:value= playphone  /  meta-data android:name= leaderboard  android:value= playphone  /   NOTE: If you submit your  apk  to other store, such as  Google Play , please remove this line or set the  store  with  googleplay , otherwise, you will get wrong configuration for the other store. Example:  meta-data android:name=\"store\" android:value=\"googleplay\" /  $ sdkbox set store googleplay  JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Playphone configuration, you need to replace  base64EncodedPublicKey  and  your secret key   with your specific Playphone account information.  The   is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.   is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.  Here is an example adding  Playphone :  {\n     ios :\n    {\n    },\n     android :\n    {\n    },\n     playphone  :\n    {\n         skey : your secret key ,\n         iap :\n        {\n             key : base64EncodedPublicKey ,\n             items :{\n                 remove_ads :{\n                     id : com.cocos2dx.non1 ,\n                     type : non_consumable \n                },\n                 double_coin :{\n                     id : com.cocos2dx.non2 ,\n                     type : non_consumable \n                },\n                 coin_package :{\n                     id : com.cocos2dx.plugintest2 \n                },\n                 coin_package2 :{\n                     id : com.cocos2dx.plugintest3 \n                }\n            }\n        }\n    }\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/playphone/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties  to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/playphone/v3-js/", 
            "text": "Playphone\n\n\nCurrently, \nPlayphone\n is only available for \nAndroid\n.  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import playphone\n\n\n\n\nExtra steps\n\n\nThe following step assumes you have already registered as a \nPlayphone Developer\n in the Playphone Developer Portal and created a new \ngame\n there.\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n add the following line:\n\n\n\n\nmeta-data android:name=\nstore\n android:value=\nplayphone\n /\n\n\nmeta-data android:name=\nleaderboard\n android:value=\nplayphone\n /\n\n\n\n\n\nNOTE: If you submit your \napk\n to other store, such as \nGoogle Play\n, please remove this line or set the \nstore\n with \ngoogleplay\n, otherwise, you will get wrong configuration for the other store. Example: \nmeta-data android:name=\"store\" android:value=\"googleplay\" /\n\n\n$ sdkbox set store googleplay\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Playphone configuration, you need to replace \nbase64EncodedPublicKey\n and \nyour secret key\n  with your specific Playphone account information.\n\n\nThe \n is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.\n\n\n is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.\n\n\nHere is an example adding \nPlayphone\n:\n\n\n{\n    \nios\n:\n    {\n    },\n    \nandroid\n:\n    {\n    },\n    \nplayphone\n :\n    {\n        \nskey\n:\nyour secret key\n,\n        \niap\n:\n        {\n            \nkey\n:\nbase64EncodedPublicKey\n,\n            \nitems\n:{\n                \nremove_ads\n:{\n                    \nid\n:\ncom.cocos2dx.non1\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ndouble_coin\n:{\n                    \nid\n:\ncom.cocos2dx.non2\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ncoin_package\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest2\n\n                },\n                \ncoin_package2\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest3\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Playphone with Javascript"
        }, 
        {
            "location": "/plugins/playphone/v3-js/#playphone", 
            "text": "Currently,  Playphone  is only available for  Android .  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Playphone"
        }, 
        {
            "location": "/plugins/playphone/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import playphone", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/playphone/v3-js/#extra-steps", 
            "text": "The following step assumes you have already registered as a  Playphone Developer  in the Playphone Developer Portal and created a new  game  there.  Setup Android   Open  AndroidManifest.xml  add the following line:   meta-data android:name= store  android:value= playphone  /  meta-data android:name= leaderboard  android:value= playphone  /   NOTE: If you submit your  apk  to other store, such as  Google Play , please remove this line or set the  store  with  googleplay , otherwise, you will get wrong configuration for the other store. Example:  meta-data android:name=\"store\" android:value=\"googleplay\" /  $ sdkbox set store googleplay  JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Playphone configuration, you need to replace  base64EncodedPublicKey  and  your secret key   with your specific Playphone account information.  The   is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.   is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.  Here is an example adding  Playphone :  {\n     ios :\n    {\n    },\n     android :\n    {\n    },\n     playphone  :\n    {\n         skey : your secret key ,\n         iap :\n        {\n             key : base64EncodedPublicKey ,\n             items :{\n                 remove_ads :{\n                     id : com.cocos2dx.non1 ,\n                     type : non_consumable \n                },\n                 double_coin :{\n                     id : com.cocos2dx.non2 ,\n                     type : non_consumable \n                },\n                 coin_package :{\n                     id : com.cocos2dx.plugintest2 \n                },\n                 coin_package2 :{\n                     id : com.cocos2dx.plugintest3 \n                }\n            }\n        }\n    }\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/playphone/v3-js/#proguard-optional", 
            "text": "Edit  project.properties  to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/playphone/v3-lua/", 
            "text": "Playphone\n\n\nCurrently, \nPlayphone\n is only available for \nAndroid\n.  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import playphone\n\n\n\n\nExtra steps\n\n\nThe following step assumes you have already registered as a \nPlayphone Developer\n in the Playphone Developer Portal and created a new \ngame\n there.\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n add the following line:\n\n\n\n\nmeta-data android:name=\nstore\n android:value=\nplayphone\n /\n\n\nmeta-data android:name=\nleaderboard\n android:value=\nplayphone\n /\n\n\n\n\n\nNOTE: If you submit your \napk\n to other store, such as \nGoogle Play\n, please remove this line or set the \nstore\n with \ngoogleplay\n, otherwise, you will get wrong configuration for the other store. Example: \nmeta-data android:name=\"store\" android:value=\"googleplay\" /\n\n\n$ sdkbox set store googleplay\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Playphone configuration, you need to replace \nbase64EncodedPublicKey\n and \nyour secret key\n  with your specific Playphone account information.\n\n\nThe \n is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.\n\n\n is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.\n\n\nHere is an example adding \nPlayphone\n:\n\n\n{\n    \nios\n:\n    {\n    },\n    \nandroid\n:\n    {\n    },\n    \nplayphone\n :\n    {\n        \nskey\n:\nyour secret key\n,\n        \niap\n:\n        {\n            \nkey\n:\nbase64EncodedPublicKey\n,\n            \nitems\n:{\n                \nremove_ads\n:{\n                    \nid\n:\ncom.cocos2dx.non1\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ndouble_coin\n:{\n                    \nid\n:\ncom.cocos2dx.non2\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ncoin_package\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest2\n\n                },\n                \ncoin_package2\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest3\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Playphone with Lua"
        }, 
        {
            "location": "/plugins/playphone/v3-lua/#playphone", 
            "text": "Currently,  Playphone  is only available for  Android .  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Playphone"
        }, 
        {
            "location": "/plugins/playphone/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import playphone", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/playphone/v3-lua/#extra-steps", 
            "text": "The following step assumes you have already registered as a  Playphone Developer  in the Playphone Developer Portal and created a new  game  there.  Setup Android   Open  AndroidManifest.xml  add the following line:   meta-data android:name= store  android:value= playphone  /  meta-data android:name= leaderboard  android:value= playphone  /   NOTE: If you submit your  apk  to other store, such as  Google Play , please remove this line or set the  store  with  googleplay , otherwise, you will get wrong configuration for the other store. Example:  meta-data android:name=\"store\" android:value=\"googleplay\" /  $ sdkbox set store googleplay  JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Playphone configuration, you need to replace  base64EncodedPublicKey  and  your secret key   with your specific Playphone account information.  The   is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.   is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.  Here is an example adding  Playphone :  {\n     ios :\n    {\n    },\n     android :\n    {\n    },\n     playphone  :\n    {\n         skey : your secret key ,\n         iap :\n        {\n             key : base64EncodedPublicKey ,\n             items :{\n                 remove_ads :{\n                     id : com.cocos2dx.non1 ,\n                     type : non_consumable \n                },\n                 double_coin :{\n                     id : com.cocos2dx.non2 ,\n                     type : non_consumable \n                },\n                 coin_package :{\n                     id : com.cocos2dx.plugintest2 \n                },\n                 coin_package2 :{\n                     id : com.cocos2dx.plugintest3 \n                }\n            }\n        }\n    }\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/playphone/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties  to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/playphone/v2-cpp/", 
            "text": "Playphone\n\n\nCurrently, \nPlayphone\n is only available for \nAndroid\n.  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import playphone\n\n\n\n\nExtra steps\n\n\nThe following step assumes you have already registered as a \nPlayphone Developer\n in the Playphone Developer Portal and created a new \ngame\n there.\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n add the following line:\n\n\n\n\nmeta-data android:name=\nstore\n android:value=\nplayphone\n /\n\n\nmeta-data android:name=\nleaderboard\n android:value=\nplayphone\n /\n\n\n\n\n\nNOTE: If you submit your \napk\n to other store, such as \nGoogle Play\n, please remove this line or set the \nstore\n with \ngoogleplay\n, otherwise, you will get wrong configuration for the other store. Example: \nmeta-data android:name=\"store\" android:value=\"googleplay\" /\n\n\n$ sdkbox set store googleplay\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Playphone configuration, you need to replace \nbase64EncodedPublicKey\n and \nyour secret key\n  with your specific Playphone account information.\n\n\nThe \n is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.\n\n\n is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.\n\n\nHere is an example adding \nPlayphone\n:\n\n\n{\n    \nios\n:\n    {\n    },\n    \nandroid\n:\n    {\n    },\n    \nplayphone\n :\n    {\n        \nskey\n:\nyour secret key\n,\n        \niap\n:\n        {\n            \nkey\n:\nbase64EncodedPublicKey\n,\n            \nitems\n:{\n                \nremove_ads\n:{\n                    \nid\n:\ncom.cocos2dx.non1\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ndouble_coin\n:{\n                    \nid\n:\ncom.cocos2dx.non2\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ncoin_package\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest2\n\n                },\n                \ncoin_package2\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest3\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Playphone with C++"
        }, 
        {
            "location": "/plugins/playphone/v2-cpp/#playphone", 
            "text": "Currently,  Playphone  is only available for  Android .  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Playphone"
        }, 
        {
            "location": "/plugins/playphone/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import playphone", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/playphone/v2-cpp/#extra-steps", 
            "text": "The following step assumes you have already registered as a  Playphone Developer  in the Playphone Developer Portal and created a new  game  there.  Setup Android   Open  AndroidManifest.xml  add the following line:   meta-data android:name= store  android:value= playphone  /  meta-data android:name= leaderboard  android:value= playphone  /   NOTE: If you submit your  apk  to other store, such as  Google Play , please remove this line or set the  store  with  googleplay , otherwise, you will get wrong configuration for the other store. Example:  meta-data android:name=\"store\" android:value=\"googleplay\" /  $ sdkbox set store googleplay  JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Playphone configuration, you need to replace  base64EncodedPublicKey  and  your secret key   with your specific Playphone account information.  The   is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.   is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.  Here is an example adding  Playphone :  {\n     ios :\n    {\n    },\n     android :\n    {\n    },\n     playphone  :\n    {\n         skey : your secret key ,\n         iap :\n        {\n             key : base64EncodedPublicKey ,\n             items :{\n                 remove_ads :{\n                     id : com.cocos2dx.non1 ,\n                     type : non_consumable \n                },\n                 double_coin :{\n                     id : com.cocos2dx.non2 ,\n                     type : non_consumable \n                },\n                 coin_package :{\n                     id : com.cocos2dx.plugintest2 \n                },\n                 coin_package2 :{\n                     id : com.cocos2dx.plugintest3 \n                }\n            }\n        }\n    }\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/playphone/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties  to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/playphone/v2-js/", 
            "text": "Playphone\n\n\nCurrently, \nPlayphone\n is only available for \nAndroid\n.  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import playphone\n\n\n\n\nExtra steps\n\n\nThe following step assumes you have already registered as a \nPlayphone Developer\n in the Playphone Developer Portal and created a new \ngame\n there.\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n add the following line:\n\n\n\n\nmeta-data android:name=\nstore\n android:value=\nplayphone\n /\n\n\nmeta-data android:name=\nleaderboard\n android:value=\nplayphone\n /\n\n\n\n\n\nNOTE: If you submit your \napk\n to other store, such as \nGoogle Play\n, please remove this line or set the \nstore\n with \ngoogleplay\n, otherwise, you will get wrong configuration for the other store. Example: \nmeta-data android:name=\"store\" android:value=\"googleplay\" /\n\n\n$ sdkbox set store googleplay\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Playphone configuration, you need to replace \nbase64EncodedPublicKey\n and \nyour secret key\n  with your specific Playphone account information.\n\n\nThe \n is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.\n\n\n is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.\n\n\nHere is an example adding \nPlayphone\n:\n\n\n{\n    \nios\n:\n    {\n    },\n    \nandroid\n:\n    {\n    },\n    \nplayphone\n :\n    {\n        \nskey\n:\nyour secret key\n,\n        \niap\n:\n        {\n            \nkey\n:\nbase64EncodedPublicKey\n,\n            \nitems\n:{\n                \nremove_ads\n:{\n                    \nid\n:\ncom.cocos2dx.non1\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ndouble_coin\n:{\n                    \nid\n:\ncom.cocos2dx.non2\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ncoin_package\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest2\n\n                },\n                \ncoin_package2\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest3\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Playphone with Javascript"
        }, 
        {
            "location": "/plugins/playphone/v2-js/#playphone", 
            "text": "Currently,  Playphone  is only available for  Android .  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Playphone"
        }, 
        {
            "location": "/plugins/playphone/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import playphone", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/playphone/v2-js/#extra-steps", 
            "text": "The following step assumes you have already registered as a  Playphone Developer  in the Playphone Developer Portal and created a new  game  there.  Setup Android   Open  AndroidManifest.xml  add the following line:   meta-data android:name= store  android:value= playphone  /  meta-data android:name= leaderboard  android:value= playphone  /   NOTE: If you submit your  apk  to other store, such as  Google Play , please remove this line or set the  store  with  googleplay , otherwise, you will get wrong configuration for the other store. Example:  meta-data android:name=\"store\" android:value=\"googleplay\" /  $ sdkbox set store googleplay  JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Playphone configuration, you need to replace  base64EncodedPublicKey  and  your secret key   with your specific Playphone account information.  The   is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.   is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.  Here is an example adding  Playphone :  {\n     ios :\n    {\n    },\n     android :\n    {\n    },\n     playphone  :\n    {\n         skey : your secret key ,\n         iap :\n        {\n             key : base64EncodedPublicKey ,\n             items :{\n                 remove_ads :{\n                     id : com.cocos2dx.non1 ,\n                     type : non_consumable \n                },\n                 double_coin :{\n                     id : com.cocos2dx.non2 ,\n                     type : non_consumable \n                },\n                 coin_package :{\n                     id : com.cocos2dx.plugintest2 \n                },\n                 coin_package2 :{\n                     id : com.cocos2dx.plugintest3 \n                }\n            }\n        }\n    }\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/playphone/v2-js/#proguard-optional", 
            "text": "Edit  project.properties  to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/playphone/v2-lua/", 
            "text": "Playphone\n\n\nCurrently, \nPlayphone\n is only available for \nAndroid\n.  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import playphone\n\n\n\n\nExtra steps\n\n\nThe following step assumes you have already registered as a \nPlayphone Developer\n in the Playphone Developer Portal and created a new \ngame\n there.\n\n\nSetup Android\n\n\n\n\nOpen \nAndroidManifest.xml\n add the following line:\n\n\n\n\nmeta-data android:name=\nstore\n android:value=\nplayphone\n /\n\n\nmeta-data android:name=\nleaderboard\n android:value=\nplayphone\n /\n\n\n\n\n\nNOTE: If you submit your \napk\n to other store, such as \nGoogle Play\n, please remove this line or set the \nstore\n with \ngoogleplay\n, otherwise, you will get wrong configuration for the other store. Example: \nmeta-data android:name=\"store\" android:value=\"googleplay\" /\n\n\n$ sdkbox set store googleplay\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Playphone configuration, you need to replace \nbase64EncodedPublicKey\n and \nyour secret key\n  with your specific Playphone account information.\n\n\nThe \n is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.\n\n\n is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.\n\n\nHere is an example adding \nPlayphone\n:\n\n\n{\n    \nios\n:\n    {\n    },\n    \nandroid\n:\n    {\n    },\n    \nplayphone\n :\n    {\n        \nskey\n:\nyour secret key\n,\n        \niap\n:\n        {\n            \nkey\n:\nbase64EncodedPublicKey\n,\n            \nitems\n:{\n                \nremove_ads\n:{\n                    \nid\n:\ncom.cocos2dx.non1\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ndouble_coin\n:{\n                    \nid\n:\ncom.cocos2dx.non2\n,\n                    \ntype\n:\nnon_consumable\n\n                },\n                \ncoin_package\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest2\n\n                },\n                \ncoin_package2\n:{\n                    \nid\n:\ncom.cocos2dx.plugintest3\n\n                }\n            }\n        }\n    }\n}\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nproguard.cfg\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Playphone with Lua"
        }, 
        {
            "location": "/plugins/playphone/v2-lua/#playphone", 
            "text": "Currently,  Playphone  is only available for  Android .  Playphone is the leading games-only platform in emerging markets. Learn more about Playphone at: http://playphone.com.", 
            "title": "Playphone"
        }, 
        {
            "location": "/plugins/playphone/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Playphone plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import playphone", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/playphone/v2-lua/#extra-steps", 
            "text": "The following step assumes you have already registered as a  Playphone Developer  in the Playphone Developer Portal and created a new  game  there.  Setup Android   Open  AndroidManifest.xml  add the following line:   meta-data android:name= store  android:value= playphone  /  meta-data android:name= leaderboard  android:value= playphone  /   NOTE: If you submit your  apk  to other store, such as  Google Play , please remove this line or set the  store  with  googleplay , otherwise, you will get wrong configuration for the other store. Example:  meta-data android:name=\"store\" android:value=\"googleplay\" /  $ sdkbox set store googleplay  JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Playphone configuration, you need to replace  base64EncodedPublicKey  and  your secret key   with your specific Playphone account information.  The   is the Public License Key for the game that can be found in the General section for that game in the Playphone Developer Portal.   is a unique key that identifies you as the Playphone developer and can be found in the Company section of the Profile page of the Playphone Developer Portal.  Here is an example adding  Playphone :  {\n     ios :\n    {\n    },\n     android :\n    {\n    },\n     playphone  :\n    {\n         skey : your secret key ,\n         iap :\n        {\n             key : base64EncodedPublicKey ,\n             items :{\n                 remove_ads :{\n                     id : com.cocos2dx.non1 ,\n                     type : non_consumable \n                },\n                 double_coin :{\n                     id : com.cocos2dx.non2 ,\n                     type : non_consumable \n                },\n                 coin_package :{\n                     id : com.cocos2dx.plugintest2 \n                },\n                 coin_package2 :{\n                     id : com.cocos2dx.plugintest3 \n                }\n            }\n        }\n    }\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/playphone/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties  to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   proguard.cfg   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#playphone\n-keep public class com.playphone.psgn.** { *; }\n-dontwarn com.playphone.psgn.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/review/v3-cpp/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps for Android\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Review\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginReview/PluginReview.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginReview::init();\n}\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox::PluginReview::setTitle(\ncustom title\n);\nsdkbox::PluginReview::setMessage(\ncustom message\n);\nsdkbox::PluginReview::setCancelButtonTitle(\ncustom cancel\n);\nsdkbox::PluginReview::setRateButtonTitle(\ncustom rate\n);\nsdkbox::PluginReview::setRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n to display rate prompt:\n\n\nsdkbox::PluginReview::show();\n\n\n\n\nIf you set \nUserEventLimit\n to something other than 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n to increase user event count. Example:\n\n\nsdkbox::PluginReview::userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::ReviewListener\n\n\n\n\n#include \nPluginReview/PluginReview.h\n\nclass MyClass : public sdkbox::ReviewListener\n{\nprivate:\n    void onDisplayAlert();\n    void onDeclineToRate();\n    void onRate();\n    void onRemindLater();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginReview::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( ReviewListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic ReviewListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void show ( bool force = false ) ;\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nstatic void userDidSignificantEvent ( bool canPromptForRating ) ;\n\n\n\n\nstatic void setTitle ( const std::string \n title ) ;\n\n\n\n\nstatic void setMessage ( const std::string \n message ) ;\n\n\n\n\nstatic void setCancelButtonTitle ( const std::string \n cancelTitle ) ;\n\n\n\n\nstatic void setRateButtonTitle ( const std::string \n rateTitle ) ;\n\n\n\n\nstatic void setRateLaterButtonTitle ( const std::string \n rateLaterTitle ) ;\n\n\n\n\nListeners\n\n\nvoid onDisplayAlert ( );\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nvoid onDeclineToRate ( );\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nvoid onRate ( );\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nvoid onRemindLater ( );\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproject_root\n directory. Make your Android project reference the \nplugin_review_res_project\n project.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static", 
            "title": "App Rating & Review with C++"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#extra-steps-for-android", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#usage", 
            "text": "Initialize Review  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginReview/PluginReview.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginReview::init();\n}  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox::PluginReview::setTitle( custom title );\nsdkbox::PluginReview::setMessage( custom message );\nsdkbox::PluginReview::setCancelButtonTitle( custom cancel );\nsdkbox::PluginReview::setRateButtonTitle( custom rate );\nsdkbox::PluginReview::setRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  to display rate prompt:  sdkbox::PluginReview::show();  If you set  UserEventLimit  to something other than 0 in  sdkbox.config , you must call  userDidSignificantEvent  to increase user event count. Example:  sdkbox::PluginReview::userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::ReviewListener   #include  PluginReview/PluginReview.h \nclass MyClass : public sdkbox::ReviewListener\n{\nprivate:\n    void onDisplayAlert();\n    void onDeclineToRate();\n    void onRate();\n    void onRemindLater();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginReview::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( ReviewListener * listener ) ;   Set listener to listen for adcolony events   static ReviewListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void show ( bool force = false ) ;   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   static void userDidSignificantEvent ( bool canPromptForRating ) ;  static void setTitle ( const std::string   title ) ;  static void setMessage ( const std::string   message ) ;  static void setCancelButtonTitle ( const std::string   cancelTitle ) ;  static void setRateButtonTitle ( const std::string   rateTitle ) ;  static void setRateLaterButtonTitle ( const std::string   rateLaterTitle ) ;  Listeners  void onDisplayAlert ( );   trigger when alert prompt show   void onDeclineToRate ( );   trigger when user refuse to rate   void onRate ( );   trigger when user want to rate   void onRemindLater ( );   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginReview.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy the  plugin_review_res_project  directory from  plugin/android  to your  project_root  directory. Make your Android project reference the  plugin_review_res_project  project.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/review/v3-js/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps for Android\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Review JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginReviewJS.hpp\n\n#include \nPluginReviewJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginReviewJS);\nsc-\naddRegisterCallback(register_all_PluginReviewJS_helper);\n\n\n\n\nInitialize Review\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginReview.init();\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox.PluginReview.setTitle(\ncustom title\n);\nsdkbox.PluginReview.setMessage(\ncustom message\n);\nsdkbox.PluginReview.setCancelButtonTitle(\ncustom cancel\n);\nsdkbox.PluginReview.setRateButtonTitle(\ncustom rate\n);\nsdkbox.PluginReview.setRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n try to display rate prompt:\n\n\nsdkbox.PluginReview.show();\n\n\n\n\nIf you set \nUserEventLimit\n not 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n increase user event count: \nuserDidSignificantEvent\n increase user event count\n\n\nsdkbox.PluginReview.userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nvar plugin = sdkbox.PluginReview\nplugin.setListener({\n  onDisplayAlert: function(data) {cc.log(\ndidDisplayAlert\n)},\n  onDeclineToRate: function(data) { cc.log(\ndidDeclineToRate\n) },\n  onRate: function(data) { cc.log(\ndidToRate\n) },\n  onRemindLater: function(data) { cc.log(\ndidToRemindLater\n) }\n})\nplugin.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginReview.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginReview.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginReview.show(force);\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nsdkbox.PluginReview.userDidSignificantEvent(canPromptForRating);\n\n\n\n\nsdkbox.PluginReview.setTitle(title);\n\n\n\n\nsdkbox.PluginReview.setMessage(message);\n\n\n\n\nsdkbox.PluginReview.setCancelButtonTitle(cancelTitle);\n\n\n\n\nsdkbox.PluginReview.setRateButtonTitle(rateTitle);\n\n\n\n\nsdkbox.PluginReview.setRateLaterButtonTitle(rateLaterTitle);\n\n\n\n\nListeners\n\n\nonDisplayAlert();\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nonDeclineToRate();\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nonRate();\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nonRemindLater();\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproject_root\n directory. Make your Android project reference the \nplugin_review_res_project\n project.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp", 
            "title": "App Rating & Review with Javascript"
        }, 
        {
            "location": "/plugins/review/v3-js/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/review/v3-js/#extra-steps-for-android", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Review JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginReviewJS.hpp \n#include  PluginReviewJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginReviewJS);\nsc- addRegisterCallback(register_all_PluginReviewJS_helper);  Initialize Review  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginReview.init();  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox.PluginReview.setTitle( custom title );\nsdkbox.PluginReview.setMessage( custom message );\nsdkbox.PluginReview.setCancelButtonTitle( custom cancel );\nsdkbox.PluginReview.setRateButtonTitle( custom rate );\nsdkbox.PluginReview.setRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  try to display rate prompt:  sdkbox.PluginReview.show();  If you set  UserEventLimit  not 0 in  sdkbox.config , you must call  userDidSignificantEvent  increase user event count:  userDidSignificantEvent  increase user event count  sdkbox.PluginReview.userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:  var plugin = sdkbox.PluginReview\nplugin.setListener({\n  onDisplayAlert: function(data) {cc.log( didDisplayAlert )},\n  onDeclineToRate: function(data) { cc.log( didDeclineToRate ) },\n  onRate: function(data) { cc.log( didToRate ) },\n  onRemindLater: function(data) { cc.log( didToRemindLater ) }\n})\nplugin.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginReview.init();   initialize the plugin instance.   sdkbox.PluginReview.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginReview.show(force);   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   sdkbox.PluginReview.userDidSignificantEvent(canPromptForRating);  sdkbox.PluginReview.setTitle(title);  sdkbox.PluginReview.setMessage(message);  sdkbox.PluginReview.setCancelButtonTitle(cancelTitle);  sdkbox.PluginReview.setRateButtonTitle(rateTitle);  sdkbox.PluginReview.setRateLaterButtonTitle(rateLaterTitle);  Listeners  onDisplayAlert();   trigger when alert prompt show   onDeclineToRate();   trigger when user refuse to rate   onRate();   trigger when user want to rate   onRemindLater();   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginReview.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy the  plugin_review_res_project  directory from  plugin/android  to your  project_root  directory. Make your Android project reference the  plugin_review_res_project  project.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/review/v3-lua/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps for Android\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Review\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginReview:init()\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox.PluginReview:setCustomPromptTitle(\ncustom title\n);\nsdkbox.PluginReview:setCustomPromptMessage(\ncustom message\n);\nsdkbox.PluginReview:setCustomPromptCancelButtonTitle(\ncustom cancel\n);\nsdkbox.PluginReview:setCustomPromptRateButtonTitle(\ncustom rate\n);\nsdkbox.PluginReview:setCustomPromptRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n try to display rate prompt:\n\n\nsdkbox.PluginReview:show();\n\n\n\n\nIf you set \nUserEventLimit\n not 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n increase user event count: \nuserDidSignificantEvent\n increase user event count\n\n\nsdkbox.PluginReview:userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nlocal plugin = sdkbox.PluginReview\nplugin:setListener(function(args)\n    local event = args.event\n    if \ndidDisplayAlert\n == event then\n        print(\ndidDisplayAlert\n)\n    elseif \ndidDeclineToRate\n == event then\n        print(\ndidDeclineToRate\n)\n    elseif \ndidToRate\n == event then\n        print(\ndidToRate\n)\n    elseif \ndidToRemindLater\n == event then\n        print(\ndidToRemindLater\n)\n    end\nend)\nplugin:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginReview:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginReview:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginReview:show(force)\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nsdkbox.PluginReview:userDidSignificantEvent(canPromptForRating)\n\n\n\n\nsdkbox.PluginReview:setTitle(title)\n\n\n\n\nsdkbox.PluginReview:setMessage(message)\n\n\n\n\nsdkbox.PluginReview:setCancelButtonTitle(cancelTitle)\n\n\n\n\nsdkbox.PluginReview:setRateButtonTitle(rateTitle)\n\n\n\n\nsdkbox.PluginReview:setRateLaterButtonTitle(rateLaterTitle)\n\n\n\n\nListeners\n\n\nonDisplayAlert()\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nonDeclineToRate()\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nonRate()\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nonRemindLater()\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproject_root\n directory. Make your Android project reference the \nplugin_review_res_project\n project.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp", 
            "title": "App Rating & Review with Lua"
        }, 
        {
            "location": "/plugins/review/v3-lua/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/review/v3-lua/#extra-steps-for-android", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v3-lua/#usage", 
            "text": "Initialize Review  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginReview:init()  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox.PluginReview:setCustomPromptTitle( custom title );\nsdkbox.PluginReview:setCustomPromptMessage( custom message );\nsdkbox.PluginReview:setCustomPromptCancelButtonTitle( custom cancel );\nsdkbox.PluginReview:setCustomPromptRateButtonTitle( custom rate );\nsdkbox.PluginReview:setCustomPromptRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  try to display rate prompt:  sdkbox.PluginReview:show();  If you set  UserEventLimit  not 0 in  sdkbox.config , you must call  userDidSignificantEvent  increase user event count:  userDidSignificantEvent  increase user event count  sdkbox.PluginReview:userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:  local plugin = sdkbox.PluginReview\nplugin:setListener(function(args)\n    local event = args.event\n    if  didDisplayAlert  == event then\n        print( didDisplayAlert )\n    elseif  didDeclineToRate  == event then\n        print( didDeclineToRate )\n    elseif  didToRate  == event then\n        print( didToRate )\n    elseif  didToRemindLater  == event then\n        print( didToRemindLater )\n    end\nend)\nplugin:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginReview:init()   initialize the plugin instance.   sdkbox.PluginReview:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginReview:show(force)   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   sdkbox.PluginReview:userDidSignificantEvent(canPromptForRating)  sdkbox.PluginReview:setTitle(title)  sdkbox.PluginReview:setMessage(message)  sdkbox.PluginReview:setCancelButtonTitle(cancelTitle)  sdkbox.PluginReview:setRateButtonTitle(rateTitle)  sdkbox.PluginReview:setRateLaterButtonTitle(rateLaterTitle)  Listeners  onDisplayAlert()   trigger when alert prompt show   onDeclineToRate()   trigger when user refuse to rate   onRate()   trigger when user want to rate   onRemindLater()   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginReview.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy the  plugin_review_res_project  directory from  plugin/android  to your  project_root  directory. Make your Android project reference the  plugin_review_res_project  project.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/review/v2-cpp/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps for Android\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Review\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginReview/PluginReview.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginReview::init();\n}\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox::PluginReview::setTitle(\ncustom title\n);\nsdkbox::PluginReview::setMessage(\ncustom message\n);\nsdkbox::PluginReview::setCancelButtonTitle(\ncustom cancel\n);\nsdkbox::PluginReview::setRateButtonTitle(\ncustom rate\n);\nsdkbox::PluginReview::setRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n to display rate prompt:\n\n\nsdkbox::PluginReview::show();\n\n\n\n\nIf you set \nUserEventLimit\n to something other than 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n to increase user event count. Example:\n\n\nsdkbox::PluginReview::userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::ReviewListener\n\n\n\n\n#include \nPluginReview/PluginReview.h\n\nclass MyClass : public sdkbox::ReviewListener\n{\nprivate:\n    void onDisplayAlert();\n    void onDeclineToRate();\n    void onRate();\n    void onRemindLater();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginReview::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( ReviewListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic ReviewListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void show ( bool force = false ) ;\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nstatic void userDidSignificantEvent ( bool canPromptForRating ) ;\n\n\n\n\nstatic void setTitle ( const std::string \n title ) ;\n\n\n\n\nstatic void setMessage ( const std::string \n message ) ;\n\n\n\n\nstatic void setCancelButtonTitle ( const std::string \n cancelTitle ) ;\n\n\n\n\nstatic void setRateButtonTitle ( const std::string \n rateTitle ) ;\n\n\n\n\nstatic void setRateLaterButtonTitle ( const std::string \n rateLaterTitle ) ;\n\n\n\n\nListeners\n\n\nvoid onDisplayAlert ( );\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nvoid onDeclineToRate ( );\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nvoid onRate ( );\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nvoid onRemindLater ( );\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproj.android\n directory. Make your Android project reference the \nplugin_review_res_project\n project.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9", 
            "title": "App Rating & Review with C++"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#extra-steps-for-android", 
            "text": "Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#usage", 
            "text": "Initialize Review  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginReview/PluginReview.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginReview::init();\n}  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox::PluginReview::setTitle( custom title );\nsdkbox::PluginReview::setMessage( custom message );\nsdkbox::PluginReview::setCancelButtonTitle( custom cancel );\nsdkbox::PluginReview::setRateButtonTitle( custom rate );\nsdkbox::PluginReview::setRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  to display rate prompt:  sdkbox::PluginReview::show();  If you set  UserEventLimit  to something other than 0 in  sdkbox.config , you must call  userDidSignificantEvent  to increase user event count. Example:  sdkbox::PluginReview::userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::ReviewListener   #include  PluginReview/PluginReview.h \nclass MyClass : public sdkbox::ReviewListener\n{\nprivate:\n    void onDisplayAlert();\n    void onDeclineToRate();\n    void onRate();\n    void onRemindLater();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginReview::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( ReviewListener * listener ) ;   Set listener to listen for adcolony events   static ReviewListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void show ( bool force = false ) ;   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   static void userDidSignificantEvent ( bool canPromptForRating ) ;  static void setTitle ( const std::string   title ) ;  static void setMessage ( const std::string   message ) ;  static void setCancelButtonTitle ( const std::string   cancelTitle ) ;  static void setRateButtonTitle ( const std::string   rateTitle ) ;  static void setRateLaterButtonTitle ( const std::string   rateLaterTitle ) ;  Listeners  void onDisplayAlert ( );   trigger when alert prompt show   void onDeclineToRate ( );   trigger when user refuse to rate   void onRate ( );   trigger when user want to rate   void onRemindLater ( );   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginReview.jar  sdkbox.jar   Copy the  plugin_review_res_project  directory from  plugin/android  to your  proj.android  directory. Make your Android project reference the  plugin_review_res_project  project.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/review/v2-js/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps for Android\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Review JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginReviewJS.hpp\n\n#include \nPluginReviewJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginReviewJS);\nsc-\naddRegisterCallback(register_all_PluginReviewJS_helper);\n\n\n\n\nInitialize Review\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginReview.init();\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox.PluginReview.setTitle(\ncustom title\n);\nsdkbox.PluginReview.setMessage(\ncustom message\n);\nsdkbox.PluginReview.setCancelButtonTitle(\ncustom cancel\n);\nsdkbox.PluginReview.setRateButtonTitle(\ncustom rate\n);\nsdkbox.PluginReview.setRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n try to display rate prompt:\n\n\nsdkbox.PluginReview.show();\n\n\n\n\nIf you set \nUserEventLimit\n not 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n increase user event count: \nuserDidSignificantEvent\n increase user event count\n\n\nsdkbox.PluginReview.userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nvar plugin = sdkbox.PluginReview\nplugin.setListener({\n  onDisplayAlert: function(data) {cc.log(\ndidDisplayAlert\n)},\n  onDeclineToRate: function(data) { cc.log(\ndidDeclineToRate\n) },\n  onRate: function(data) { cc.log(\ndidToRate\n) },\n  onRemindLater: function(data) { cc.log(\ndidToRemindLater\n) }\n})\nplugin.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginReview.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginReview.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginReview.show(force);\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nsdkbox.PluginReview.userDidSignificantEvent(canPromptForRating);\n\n\n\n\nsdkbox.PluginReview.setTitle(title);\n\n\n\n\nsdkbox.PluginReview.setMessage(message);\n\n\n\n\nsdkbox.PluginReview.setCancelButtonTitle(cancelTitle);\n\n\n\n\nsdkbox.PluginReview.setRateButtonTitle(rateTitle);\n\n\n\n\nsdkbox.PluginReview.setRateLaterButtonTitle(rateLaterTitle);\n\n\n\n\nListeners\n\n\nonDisplayAlert();\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nonDeclineToRate();\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nonRate();\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nonRemindLater();\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproj.android\n directory. Make your Android project reference the \nplugin_review_res_project\n project.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp", 
            "title": "App Rating & Review with Javascript"
        }, 
        {
            "location": "/plugins/review/v2-js/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/review/v2-js/#extra-steps-for-android", 
            "text": "Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Review JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginReviewJS.hpp \n#include  PluginReviewJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginReviewJS);\nsc- addRegisterCallback(register_all_PluginReviewJS_helper);  Initialize Review  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginReview.init();  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox.PluginReview.setTitle( custom title );\nsdkbox.PluginReview.setMessage( custom message );\nsdkbox.PluginReview.setCancelButtonTitle( custom cancel );\nsdkbox.PluginReview.setRateButtonTitle( custom rate );\nsdkbox.PluginReview.setRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  try to display rate prompt:  sdkbox.PluginReview.show();  If you set  UserEventLimit  not 0 in  sdkbox.config , you must call  userDidSignificantEvent  increase user event count:  userDidSignificantEvent  increase user event count  sdkbox.PluginReview.userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:  var plugin = sdkbox.PluginReview\nplugin.setListener({\n  onDisplayAlert: function(data) {cc.log( didDisplayAlert )},\n  onDeclineToRate: function(data) { cc.log( didDeclineToRate ) },\n  onRate: function(data) { cc.log( didToRate ) },\n  onRemindLater: function(data) { cc.log( didToRemindLater ) }\n})\nplugin.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginReview.init();   initialize the plugin instance.   sdkbox.PluginReview.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginReview.show(force);   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   sdkbox.PluginReview.userDidSignificantEvent(canPromptForRating);  sdkbox.PluginReview.setTitle(title);  sdkbox.PluginReview.setMessage(message);  sdkbox.PluginReview.setCancelButtonTitle(cancelTitle);  sdkbox.PluginReview.setRateButtonTitle(rateTitle);  sdkbox.PluginReview.setRateLaterButtonTitle(rateLaterTitle);  Listeners  onDisplayAlert();   trigger when alert prompt show   onDeclineToRate();   trigger when user refuse to rate   onRate();   trigger when user want to rate   onRemindLater();   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginReview.jar  sdkbox.jar   Copy the  plugin_review_res_project  directory from  plugin/android  to your  proj.android  directory. Make your Android project reference the  plugin_review_res_project  project.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/review/v2-lua/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\nExtra steps for Android\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Review\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginReview:init()\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox.PluginReview:setCustomPromptTitle(\ncustom title\n);\nsdkbox.PluginReview:setCustomPromptMessage(\ncustom message\n);\nsdkbox.PluginReview:setCustomPromptCancelButtonTitle(\ncustom cancel\n);\nsdkbox.PluginReview:setCustomPromptRateButtonTitle(\ncustom rate\n);\nsdkbox.PluginReview:setCustomPromptRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n try to display rate prompt:\n\n\nsdkbox.PluginReview:show();\n\n\n\n\nIf you set \nUserEventLimit\n not 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n increase user event count: \nuserDidSignificantEvent\n increase user event count\n\n\nsdkbox.PluginReview:userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nlocal plugin = sdkbox.PluginReview\nplugin:setListener(function(args)\n    local event = args.event\n    if \ndidDisplayAlert\n == event then\n        print(\ndidDisplayAlert\n)\n    elseif \ndidDeclineToRate\n == event then\n        print(\ndidDeclineToRate\n)\n    elseif \ndidToRate\n == event then\n        print(\ndidToRate\n)\n    elseif \ndidToRemindLater\n == event then\n        print(\ndidToRemindLater\n)\n    end\nend)\nplugin:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginReview:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginReview:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginReview:show(force)\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nsdkbox.PluginReview:userDidSignificantEvent(canPromptForRating)\n\n\n\n\nsdkbox.PluginReview:setTitle(title)\n\n\n\n\nsdkbox.PluginReview:setMessage(message)\n\n\n\n\nsdkbox.PluginReview:setCancelButtonTitle(cancelTitle)\n\n\n\n\nsdkbox.PluginReview:setRateButtonTitle(rateTitle)\n\n\n\n\nsdkbox.PluginReview:setRateLaterButtonTitle(rateLaterTitle)\n\n\n\n\nListeners\n\n\nonDisplayAlert()\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nonDeclineToRate()\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nonRate()\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nonRemindLater()\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproj.android\n directory. Make your Android project reference the \nplugin_review_res_project\n project.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp", 
            "title": "App Rating & Review with Lua"
        }, 
        {
            "location": "/plugins/review/v2-lua/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/review/v2-lua/#extra-steps-for-android", 
            "text": "Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v2-lua/#usage", 
            "text": "Initialize Review  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginReview:init()  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox.PluginReview:setCustomPromptTitle( custom title );\nsdkbox.PluginReview:setCustomPromptMessage( custom message );\nsdkbox.PluginReview:setCustomPromptCancelButtonTitle( custom cancel );\nsdkbox.PluginReview:setCustomPromptRateButtonTitle( custom rate );\nsdkbox.PluginReview:setCustomPromptRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  try to display rate prompt:  sdkbox.PluginReview:show();  If you set  UserEventLimit  not 0 in  sdkbox.config , you must call  userDidSignificantEvent  increase user event count:  userDidSignificantEvent  increase user event count  sdkbox.PluginReview:userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:  local plugin = sdkbox.PluginReview\nplugin:setListener(function(args)\n    local event = args.event\n    if  didDisplayAlert  == event then\n        print( didDisplayAlert )\n    elseif  didDeclineToRate  == event then\n        print( didDeclineToRate )\n    elseif  didToRate  == event then\n        print( didToRate )\n    elseif  didToRemindLater  == event then\n        print( didToRemindLater )\n    end\nend)\nplugin:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginReview:init()   initialize the plugin instance.   sdkbox.PluginReview:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginReview:show(force)   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   sdkbox.PluginReview:userDidSignificantEvent(canPromptForRating)  sdkbox.PluginReview:setTitle(title)  sdkbox.PluginReview:setMessage(message)  sdkbox.PluginReview:setCancelButtonTitle(cancelTitle)  sdkbox.PluginReview:setRateButtonTitle(rateTitle)  sdkbox.PluginReview:setRateLaterButtonTitle(rateLaterTitle)  Listeners  onDisplayAlert()   trigger when alert prompt show   onDeclineToRate()   trigger when user refuse to rate   onRate()   trigger when user want to rate   onRemindLater()   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginReview.jar  sdkbox.jar   Copy the  plugin_review_res_project  directory from  plugin/android  to your  proj.android  directory. Make your Android project reference the  plugin_review_res_project  project.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the \nKnowledge Base\n.\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nGROW\n, then you cannot also use the \nAdColony\n and \nFyber\n services, in the same project.\n\n\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize SOOMLA Grow\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginSoomlaGrow/PluginSoomlaGrow.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginSoomlaGrow::init();\n}\n\n\n\n\nUsing SOOMLA Grow's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n or \ngetUserInsightInfo()\n wherever you want from your code:\n\n\nsdkbox::PluginSoomlaGrow::refreshInsight();\nstd::string jsonStr = sdkbox::PluginSoomlaGrow::getUserInsightInfo();\n\n\n\n\nCatch GROW events (optional)\n\n\nThis allows you to catch the \nSOOMLA Grow\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::SoomlaGrowListener\n\n\n\n\n#include \nPluginSoomlaGrow/PluginSoomlaGrow.h\n\nclass MyClass : public sdkbox::SoomlaGrowListener\n{\nprivate:\n    void onHighWayInitialized();\n    void onHighWayConnected();\n    void onHighWayDisconnected();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginSoomlaGrow::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener(SoomlaGrowListener* listener);\n\n\n\n\n\n\nSet listener to listen for different events (list below)\n\n\n\n\nstatic SoomlaGrowListener* getListener();\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void refreshInsight();\n\n\n\n\n\n\nRefreshed GROW's Insights information from the server\n\n\n\n\nstatic std::string getUserInsightInfo();\n\n\n\n\n\n\nget user insight info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nvoid onHighWayInitialized();\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nvoid onHighWayConnected();\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nvoid onHighWayDisconnected();\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSOOMLA Grow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "SOOMLA Grow with C++"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  GROW , then you cannot also use the  AdColony  and  Fyber  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#usage", 
            "text": "Initialize SOOMLA Grow  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginSoomlaGrow/PluginSoomlaGrow.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginSoomlaGrow::init();\n}  Using SOOMLA Grow's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight  or  getUserInsightInfo()  wherever you want from your code:  sdkbox::PluginSoomlaGrow::refreshInsight();\nstd::string jsonStr = sdkbox::PluginSoomlaGrow::getUserInsightInfo();  Catch GROW events (optional)  This allows you to catch the  SOOMLA Grow  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::SoomlaGrowListener   #include  PluginSoomlaGrow/PluginSoomlaGrow.h \nclass MyClass : public sdkbox::SoomlaGrowListener\n{\nprivate:\n    void onHighWayInitialized();\n    void onHighWayConnected();\n    void onHighWayDisconnected();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginSoomlaGrow::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#api-reference", 
            "text": "Methods  static bool init();   initialize the plugin instance.   static void setListener(SoomlaGrowListener* listener);   Set listener to listen for different events (list below)   static SoomlaGrowListener* getListener();   Get the listener   static void removeListener();   Remove the listener, and can't listen to events anymore   static void refreshInsight();   Refreshed GROW's Insights information from the server   static std::string getUserInsightInfo();   get user insight info\n Note: the returned value may be empty   Listeners  void onHighWayInitialized();   This event is triggered once the highway initialized.   void onHighWayConnected();   This event is triggered once the highway is connected to server.   void onHighWayDisconnected();   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SOOMLA Grow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the \nKnowledge Base\n.\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nGROW\n, then you cannot also use the \nAdColony\n and \nFyber\n services, in the same project.\n\n\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the SOOMLA Grow JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginSoomlaGrowJS.hpp\n\n#include \nPluginSoomlaGrowJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginSoomlaGrowJS);\nsc-\naddRegisterCallback(register_all_PluginSoomlaGrowJS_helper);\n\n\n\n\nInitialize SoomlaGrow\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginSoomlaGrow.init();\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n, 'getUserInsightInfo' wherever you want from your code:\n\n\nsdkbox.PluginSoomlaGrow.refreshInsight()\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()\n\n\n\n\nCatch SoomlaGrow events (optional)\n\n\nThis allows you to catch the \nSOOMLA Grow\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginSoomlaGrow.setListener({\n            onHighWayInitialized: function(data) {cc.log(\nonHighWayInitialized\n)},\n            onHighWayConnected: function(data) { cc.log(\nonHighWayConnected\n) },\n            onHighWayDisconnected: function(data) { cc.log(\nonHighWayDisconnected\n) }\n            })\nsdkbox.PluginSoomlaGrow.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginSoomlaGrow.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginSoomlaGrow.setListener(listener);\n\n\n\n\n\n\nSet listener to listen to GROW events\n\n\n\n\nsdkbox.PluginSoomlaGrow.refreshInsight()\n\n\n\n\n\n\nRefreshed Insights information from the server\n\n\n\n\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()\n\n\n\n\n\n\nget user insights info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nonHighWayInitialized()\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nonHighWayConnected()\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nonHighWayDisconnected()\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSOOMLA Grow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "SOOMLA Grow with Javascript"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  GROW , then you cannot also use the  AdColony  and  Fyber  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the SOOMLA Grow JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginSoomlaGrowJS.hpp \n#include  PluginSoomlaGrowJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginSoomlaGrowJS);\nsc- addRegisterCallback(register_all_PluginSoomlaGrowJS_helper);  Initialize SoomlaGrow  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginSoomlaGrow.init();  Using GROW's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight , 'getUserInsightInfo' wherever you want from your code:  sdkbox.PluginSoomlaGrow.refreshInsight()\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()  Catch SoomlaGrow events (optional)  This allows you to catch the  SOOMLA Grow  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginSoomlaGrow.setListener({\n            onHighWayInitialized: function(data) {cc.log( onHighWayInitialized )},\n            onHighWayConnected: function(data) { cc.log( onHighWayConnected ) },\n            onHighWayDisconnected: function(data) { cc.log( onHighWayDisconnected ) }\n            })\nsdkbox.PluginSoomlaGrow.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginSoomlaGrow.init();   initialize the plugin instance.   sdkbox.PluginSoomlaGrow.setListener(listener);   Set listener to listen to GROW events   sdkbox.PluginSoomlaGrow.refreshInsight()   Refreshed Insights information from the server   sdkbox.PluginSoomlaGrow.getUserInsightInfo()   get user insights info\n Note: the returned value may be empty   Listeners  onHighWayInitialized()   This event is triggered once the highway initialized.   onHighWayConnected()   This event is triggered once the highway is connected to server.   onHighWayDisconnected()   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SOOMLA Grow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the \nKnowledge Base\n.\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nGROW\n, then you cannot also use the \nAdColony\n and \nFyber\n services, in the same project.\n\n\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize SoomlaGrow\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n, \ngetUserInsightInfo\n wherever you want from your code:\n\n\nsdkbox.PluginSoomlaGrow:refreshInsight()\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()\n\n\n\n\nCatch GROW events (optional)\n\n\nThis allows you to catch the \nSOOMLA Grow\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginSoomlaGrow:setListener(function(data)\n            if \nonHighWayInitialized\n == data.event then\n                //highway initialized\n            elseif \nonHighWayConnected\n == data.event then\n                //highway connected\n            elseif \nonHighWayDisconnected\n == data.event then\n                //highway disconnected\n            end\n        end)\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginSoomlaGrow:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for GROW events\n\n\n\n\nsdkbox.PluginSoomlaGrow:refreshInsight()\n\n\n\n\n\n\nRefreshed Insights information from the server\n\n\n\n\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()\n\n\n\n\n\n\nget user insight info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nonHighWayInitialized()\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nonHighWayConnected()\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nonHighWayDisconnected()\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSOOMLA Grow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "SOOMLA Grow with Lua"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  GROW , then you cannot also use the  AdColony  and  Fyber  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#usage", 
            "text": "Initialize SoomlaGrow  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginSoomlaGrow:init()  Using GROW's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight ,  getUserInsightInfo  wherever you want from your code:  sdkbox.PluginSoomlaGrow:refreshInsight()\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()  Catch GROW events (optional)  This allows you to catch the  SOOMLA Grow  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginSoomlaGrow:setListener(function(data)\n            if  onHighWayInitialized  == data.event then\n                //highway initialized\n            elseif  onHighWayConnected  == data.event then\n                //highway connected\n            elseif  onHighWayDisconnected  == data.event then\n                //highway disconnected\n            end\n        end)\nsdkbox.PluginSoomlaGrow:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginSoomlaGrow:init()   initialize the plugin instance.   sdkbox.PluginSoomlaGrow:setListener(listener)   Set listener to listen for GROW events   sdkbox.PluginSoomlaGrow:refreshInsight()   Refreshed Insights information from the server   sdkbox.PluginSoomlaGrow:getUserInsightInfo()   get user insight info\n Note: the returned value may be empty   Listeners  onHighWayInitialized()   This event is triggered once the highway initialized.   onHighWayConnected()   This event is triggered once the highway is connected to server.   onHighWayDisconnected()   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SOOMLA Grow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the \nKnowledge Base\n.\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nGROW\n, then you cannot also use the \nAdColony\n and \nFyber\n services, in the same project.\n\n\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize SOOMLA Grow\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginSoomlaGrow/PluginSoomlaGrow.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginSoomlaGrow::init();\n}\n\n\n\n\nUsing SOOMLA Grow's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n or \ngetUserInsightInfo()\n wherever you want from your code:\n\n\nsdkbox::PluginSoomlaGrow::refreshInsight();\nstd::string jsonStr = sdkbox::PluginSoomlaGrow::getUserInsightInfo();\n\n\n\n\nCatch GROW events (optional)\n\n\nThis allows you to catch the \nSOOMLA Grow\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::SoomlaGrowListener\n\n\n\n\n#include \nPluginSoomlaGrow/PluginSoomlaGrow.h\n\nclass MyClass : public sdkbox::SoomlaGrowListener\n{\nprivate:\n    void onHighWayInitialized();\n    void onHighWayConnected();\n    void onHighWayDisconnected();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginSoomlaGrow::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener(SoomlaGrowListener* listener);\n\n\n\n\n\n\nSet listener to listen for different events (list below)\n\n\n\n\nstatic SoomlaGrowListener* getListener();\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void refreshInsight();\n\n\n\n\n\n\nRefreshed GROW's Insights information from the server\n\n\n\n\nstatic std::string getUserInsightInfo();\n\n\n\n\n\n\nget user insight info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nvoid onHighWayInitialized();\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nvoid onHighWayConnected();\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nvoid onHighWayDisconnected();\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSOOMLA Grow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "SOOMLA Grow with C++"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  GROW , then you cannot also use the  AdColony  and  Fyber  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#usage", 
            "text": "Initialize SOOMLA Grow  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginSoomlaGrow/PluginSoomlaGrow.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginSoomlaGrow::init();\n}  Using SOOMLA Grow's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight  or  getUserInsightInfo()  wherever you want from your code:  sdkbox::PluginSoomlaGrow::refreshInsight();\nstd::string jsonStr = sdkbox::PluginSoomlaGrow::getUserInsightInfo();  Catch GROW events (optional)  This allows you to catch the  SOOMLA Grow  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::SoomlaGrowListener   #include  PluginSoomlaGrow/PluginSoomlaGrow.h \nclass MyClass : public sdkbox::SoomlaGrowListener\n{\nprivate:\n    void onHighWayInitialized();\n    void onHighWayConnected();\n    void onHighWayDisconnected();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginSoomlaGrow::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#api-reference", 
            "text": "Methods  static bool init();   initialize the plugin instance.   static void setListener(SoomlaGrowListener* listener);   Set listener to listen for different events (list below)   static SoomlaGrowListener* getListener();   Get the listener   static void removeListener();   Remove the listener, and can't listen to events anymore   static void refreshInsight();   Refreshed GROW's Insights information from the server   static std::string getUserInsightInfo();   get user insight info\n Note: the returned value may be empty   Listeners  void onHighWayInitialized();   This event is triggered once the highway initialized.   void onHighWayConnected();   This event is triggered once the highway is connected to server.   void onHighWayDisconnected();   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SOOMLA Grow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the \nKnowledge Base\n.\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nGROW\n, then you cannot also use the \nAdColony\n and \nFyber\n services, in the same project.\n\n\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the SOOMLA Grow JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginSoomlaGrowJS.hpp\n\n#include \nPluginSoomlaGrowJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginSoomlaGrowJS);\nsc-\naddRegisterCallback(register_all_PluginSoomlaGrowJS_helper);\n\n\n\n\nInitialize SoomlaGrow\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginSoomlaGrow.init();\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n, 'getUserInsightInfo' wherever you want from your code:\n\n\nsdkbox.PluginSoomlaGrow.refreshInsight()\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()\n\n\n\n\nCatch SoomlaGrow events (optional)\n\n\nThis allows you to catch the \nSOOMLA Grow\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginSoomlaGrow.setListener({\n            onHighWayInitialized: function(data) {cc.log(\nonHighWayInitialized\n)},\n            onHighWayConnected: function(data) { cc.log(\nonHighWayConnected\n) },\n            onHighWayDisconnected: function(data) { cc.log(\nonHighWayDisconnected\n) }\n            })\nsdkbox.PluginSoomlaGrow.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginSoomlaGrow.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginSoomlaGrow.setListener(listener);\n\n\n\n\n\n\nSet listener to listen to GROW events\n\n\n\n\nsdkbox.PluginSoomlaGrow.refreshInsight()\n\n\n\n\n\n\nRefreshed Insights information from the server\n\n\n\n\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()\n\n\n\n\n\n\nget user insights info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nonHighWayInitialized()\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nonHighWayConnected()\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nonHighWayDisconnected()\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSOOMLA Grow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "SOOMLA Grow with Javascript"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  GROW , then you cannot also use the  AdColony  and  Fyber  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the SOOMLA Grow JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginSoomlaGrowJS.hpp \n#include  PluginSoomlaGrowJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginSoomlaGrowJS);\nsc- addRegisterCallback(register_all_PluginSoomlaGrowJS_helper);  Initialize SoomlaGrow  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginSoomlaGrow.init();  Using GROW's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight , 'getUserInsightInfo' wherever you want from your code:  sdkbox.PluginSoomlaGrow.refreshInsight()\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()  Catch SoomlaGrow events (optional)  This allows you to catch the  SOOMLA Grow  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginSoomlaGrow.setListener({\n            onHighWayInitialized: function(data) {cc.log( onHighWayInitialized )},\n            onHighWayConnected: function(data) { cc.log( onHighWayConnected ) },\n            onHighWayDisconnected: function(data) { cc.log( onHighWayDisconnected ) }\n            })\nsdkbox.PluginSoomlaGrow.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginSoomlaGrow.init();   initialize the plugin instance.   sdkbox.PluginSoomlaGrow.setListener(listener);   Set listener to listen to GROW events   sdkbox.PluginSoomlaGrow.refreshInsight()   Refreshed Insights information from the server   sdkbox.PluginSoomlaGrow.getUserInsightInfo()   get user insights info\n Note: the returned value may be empty   Listeners  onHighWayInitialized()   This event is triggered once the highway initialized.   onHighWayConnected()   This event is triggered once the highway is connected to server.   onHighWayDisconnected()   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SOOMLA Grow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the \nKnowledge Base\n.\n\n\nPrerequisites\n\n\n\n\nCertain SDKBOX plugins do not work together. If you use \nGROW\n, then you cannot also use the \nAdColony\n and \nFyber\n services, in the same project.\n\n\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize SoomlaGrow\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n, \ngetUserInsightInfo\n wherever you want from your code:\n\n\nsdkbox.PluginSoomlaGrow:refreshInsight()\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()\n\n\n\n\nCatch GROW events (optional)\n\n\nThis allows you to catch the \nSOOMLA Grow\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginSoomlaGrow:setListener(function(data)\n            if \nonHighWayInitialized\n == data.event then\n                //highway initialized\n            elseif \nonHighWayConnected\n == data.event then\n                //highway connected\n            elseif \nonHighWayDisconnected\n == data.event then\n                //highway disconnected\n            end\n        end)\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginSoomlaGrow:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for GROW events\n\n\n\n\nsdkbox.PluginSoomlaGrow:refreshInsight()\n\n\n\n\n\n\nRefreshed Insights information from the server\n\n\n\n\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()\n\n\n\n\n\n\nget user insight info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nonHighWayInitialized()\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nonHighWayConnected()\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nonHighWayDisconnected()\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSOOMLA Grow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "SOOMLA Grow with Lua"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Analytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games. Information about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#prerequisites", 
            "text": "Certain SDKBOX plugins do not work together. If you use  GROW , then you cannot also use the  AdColony  and  Fyber  services, in the same project.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup the SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#usage", 
            "text": "Initialize SoomlaGrow  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginSoomlaGrow:init()  Using GROW's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight ,  getUserInsightInfo  wherever you want from your code:  sdkbox.PluginSoomlaGrow:refreshInsight()\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()  Catch GROW events (optional)  This allows you to catch the  SOOMLA Grow  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginSoomlaGrow:setListener(function(data)\n            if  onHighWayInitialized  == data.event then\n                //highway initialized\n            elseif  onHighWayConnected  == data.event then\n                //highway connected\n            elseif  onHighWayDisconnected  == data.event then\n                //highway disconnected\n            end\n        end)\nsdkbox.PluginSoomlaGrow:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginSoomlaGrow:init()   initialize the plugin instance.   sdkbox.PluginSoomlaGrow:setListener(listener)   Set listener to listen for GROW events   sdkbox.PluginSoomlaGrow:refreshInsight()   Refreshed Insights information from the server   sdkbox.PluginSoomlaGrow:getUserInsightInfo()   get user insight info\n Note: the returned value may be empty   Listeners  onHighWayInitialized()   This event is triggered once the highway initialized.   onHighWayConnected()   This event is triggered once the highway is connected to server.   onHighWayDisconnected()   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SOOMLA Grow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#soomlagrow\n-keep public class com.jirbo.soomlagrow.** { *; }\n-dontwarn com.jirbo.soomlagrow.**\n\n-keep public class com.soomla.** { *; }\n-dontwarn com.soomla.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nExtra steps\n\n\nSetup iOS\n\n\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nMobileAppTracker/MobileAppTracker.h\n\n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nmeasureSession()\n are required. Example:\n\n\n#include \nPluginTune/PluginTune.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\n{\n    PluginTune::measureEventName(\npurchase\n);\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName = \npurchase2\n;\n    event.refId     = \nRJ1357\n;\n    event.searchString = \nsweet crisp red apples\n;\n    event.attribute1 = \ncrisp\n;\n    event.attribute2 = \nred\n;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}\n\n\n\n\nNotice that at the end of the \nevent\n \nPluginTune::measureEvent(event)\n was called. This takes care of logging our event.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void setListener ( TuneListener * listener ) ;\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nstatic TuneListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove the listener, and can't listen to events anymore\n\n\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nstatic void setDebugMode ( bool enable ) ;\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nstatic void setAllowDuplicateRequests ( bool allow ) ;\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nstatic void checkForDeferredDeeplinkWithTimeout ( double timeout ) ;\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nstatic void automateIapEventMeasurement ( bool automate ) ;\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nstatic void setFacebookEventLogging ( bool logging , bool limit ) ;\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nstatic void setExistingUser ( bool existingUser ) ;\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nstatic void setAppleAdvertisingIdentifier ( const std::string \n appleAdvertisingIdentifier ,\n                                            bool adTrackingEnabled ) ;\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nstatic void setAppleVendorIdentifier ( const std::string \n appleVendorIdentifier ) ;\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nstatic void setCurrencyCode ( const std::string \n currencyCode ) ;\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nstatic void setJailbroken ( bool jailbroken ) ;\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nstatic void setPackageName ( const std::string \n packageName ) ;\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nstatic void setShouldAutoDetectJailbroken ( bool autoDetect ) ;\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nstatic void setShouldAutoGenerateAppleVendorIdentifier ( bool autoGenerate ) ;\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nstatic void setSiteId ( const std::string \n siteId ) ;\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nstatic void setTRUSTeId ( const std::string \n tpid ) ;\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nstatic void setUserEmail ( const std::string \n userEmail ) ;\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nstatic void setUserId ( const std::string \n userId ) ;\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nstatic void setUserName ( const std::string \n userName ) ;\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nstatic void setPhoneNumber ( const std::string \n phoneNumber ) ;\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nstatic void setFacebookUserId ( const std::string \n facebookUserId ) ;\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nstatic void setTwitterUserId ( const std::string \n twitterUserId ) ;\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nstatic void setGoogleUserId ( const std::string \n googleUserId ) ;\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nstatic void setAge ( int userAge ) ;\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nstatic void setGender ( Gender userGender ) ;\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nstatic void setLatitude ( double latitude , double longitude ) ;\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          double altitude ) ;\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nstatic void setAppAdTracking ( bool enable ) ;\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nstatic void setPayingUser ( bool isPayingUser ) ;\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nstatic void setPreloadData ( const TunePreloadData \n preloadData ) ;\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nstatic void setPreloadDataForScript ( const std::string \n jsonString ) ;\n\n\n\n\nstatic std::string matId ( ) ;\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nstatic std::string tuneId ( ) ;\n\n\n\n\n\n\nGet the Tune ID for this installation.\n\n\n\n\nstatic std::string openLogId ( ) ;\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nstatic bool isPayingUser ( ) ;\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nstatic void measureSession ( ) ;\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nstatic void measureEventName ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nstatic void measureEventId ( int eventId ) ;\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nstatic void measureEvent ( const TuneEvent \n event ) ;\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nstatic void measureEventForScript ( const std::string \n jsonString ) ;\n\n\n\n\nstatic void setUseCookieTracking ( bool enable ) ;\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nstatic void setRedirectUrl ( const std::string \n redirectUrl ) ;\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nstatic void startAppToAppTracking ( const std::string \n targetAppPackageName ,\n                                    const std::string \n targetAppAdvertiserId ,\n                                    const std::string \n targetAdvertiserOfferId ,\n                                    const std::string \n targetAdvertiserPublisherId ,\n                                    bool shouldRedirect ) ;\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nstatic void applicationDidOpenURL ( const std::string \n urlString ,\n                                    const std::string \n sourceApplication ) ;\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nvoid onMobileAppTrackerEnqueuedActionWithReferenceId ( const std::string \n referenceId );\n\n\n\n\nvoid onMobileAppTrackerDidSucceedWithData ( const std::string \n data );\n\n\n\n\nvoid onMobileAppTrackerDidFailWithError ( const std::string \n errorString );\n\n\n\n\nvoid onMobileAppTrackerDidReceiveDeeplink ( const std::string \n deeplink ,\n                                            bool timeout );\n\n\n\n\nvoid onMobileAppTrackerDidFailDeeplinkWithError ( const std::string \n errorString );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "Tune with C++"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#extra-steps", 
            "text": "Setup iOS   Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  MobileAppTracker/MobileAppTracker.h \n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#usage", 
            "text": "Initialize Tune  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  measureSession()  are required. Example:  #include  PluginTune/PluginTune.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  {\n    PluginTune::measureEventName( purchase );\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName =  purchase2 ;\n    event.refId     =  RJ1357 ;\n    event.searchString =  sweet crisp red apples ;\n    event.attribute1 =  crisp ;\n    event.attribute2 =  red ;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}  Notice that at the end of the  event   PluginTune::measureEvent(event)  was called. This takes care of logging our event.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#api-reference", 
            "text": "Methods  static void setListener ( TuneListener * listener ) ;   set a listener to listen for event changes.   static TuneListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   remove the listener, and can't listen to events anymore   static void init ( ) ;   init the instance.   static void setDebugMode ( bool enable ) ;   Specifies that the server responses should include debug information.   static void setAllowDuplicateRequests ( bool allow ) ;   Set to YES to allow duplicate requests to be registered with the MAT server.   static void checkForDeferredDeeplinkWithTimeout ( double timeout ) ;   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   static void automateIapEventMeasurement ( bool automate ) ;   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   static void setFacebookEventLogging ( bool logging , bool limit ) ;   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   static void setExistingUser ( bool existingUser ) ;   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   static void setAppleAdvertisingIdentifier ( const std::string   appleAdvertisingIdentifier ,\n                                            bool adTrackingEnabled ) ;   Set the Apple Advertising Identifier available in iOS 6.   static void setAppleVendorIdentifier ( const std::string   appleVendorIdentifier ) ;   Set the Apple Vendor Identifier available in iOS 6.   static void setCurrencyCode ( const std::string   currencyCode ) ;   Sets the currency code.   static void setJailbroken ( bool jailbroken ) ;   Sets the jailbroken device flag.   static void setPackageName ( const std::string   packageName ) ;   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   static void setShouldAutoDetectJailbroken ( bool autoDetect ) ;   Specifies if the sdk should auto detect if the iOS device is jailbroken.   static void setShouldAutoGenerateAppleVendorIdentifier ( bool autoGenerate ) ;   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   static void setSiteId ( const std::string   siteId ) ;   Sets the site ID.   static void setTRUSTeId ( const std::string   tpid ) ;   Set the TRUSTe Trusted Preference Identifier (TPID).   static void setUserEmail ( const std::string   userEmail ) ;   Sets the user's email address.   static void setUserId ( const std::string   userId ) ;   Sets the user ID.   static void setUserName ( const std::string   userName ) ;   Sets the user's name.   static void setPhoneNumber ( const std::string   phoneNumber ) ;   Sets the user's phone number.   static void setFacebookUserId ( const std::string   facebookUserId ) ;   Set user's Facebook ID.   static void setTwitterUserId ( const std::string   twitterUserId ) ;   Set user's Twitter ID.   static void setGoogleUserId ( const std::string   googleUserId ) ;   Set user's Google ID.   static void setAge ( int userAge ) ;   Sets the user's age.   static void setGender ( Gender userGender ) ;   Sets the user's gender.   static void setLatitude ( double latitude , double longitude ) ;   Sets the user's location.   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          double altitude ) ;   Sets the user's location including altitude.   static void setAppAdTracking ( bool enable ) ;   Set app-level ad-tracking.   static void setPayingUser ( bool isPayingUser ) ;   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   static void setPreloadData ( const TunePreloadData   preloadData ) ;   Sets publisher information for attribution.   static void setPreloadDataForScript ( const std::string   jsonString ) ;  static std::string matId ( ) ;   Get the MAT ID for this installation (mat_id).   static std::string tuneId ( ) ;   Get the Tune ID for this installation.   static std::string openLogId ( ) ;   Get the MAT log ID for the first app open (open_log_id).   static bool isPayingUser ( ) ;   Get whether the user is revenue-generating.   static void measureSession ( ) ;   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   static void measureEventName ( const std::string   eventName ) ;   Record an event for an Event Name.   static void measureEventId ( int eventId ) ;   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   static void measureEvent ( const TuneEvent   event ) ;   Record an event with a MATEvent.   static void measureEventForScript ( const std::string   jsonString ) ;  static void setUseCookieTracking ( bool enable ) ;   Sets whether or not to use cookie based tracking.   static void setRedirectUrl ( const std::string   redirectUrl ) ;   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   static void startAppToAppTracking ( const std::string   targetAppPackageName ,\n                                    const std::string   targetAppAdvertiserId ,\n                                    const std::string   targetAdvertiserOfferId ,\n                                    const std::string   targetAdvertiserPublisherId ,\n                                    bool shouldRedirect ) ;   Start an app-to-app tracking session on the MAT server.   static void applicationDidOpenURL ( const std::string   urlString ,\n                                    const std::string   sourceApplication ) ;   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  void onMobileAppTrackerEnqueuedActionWithReferenceId ( const std::string   referenceId );  void onMobileAppTrackerDidSucceedWithData ( const std::string   data );  void onMobileAppTrackerDidFailWithError ( const std::string   errorString );  void onMobileAppTrackerDidReceiveDeeplink ( const std::string   deeplink ,\n                                            bool timeout );  void onMobileAppTrackerDidFailDeeplinkWithError ( const std::string   errorString );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v3-js/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nExtra steps\n\n\nSetup iOS\n\n\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nMobileAppTracker/MobileAppTracker.h\n\n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Tune JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginTuneJS.hpp\n\n#include \nPluginTuneJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginTuneJS);\nsc-\naddRegisterCallback(register_all_PluginTuneJS_helper);\n\n\n\n\nInitialize Tune\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginTune.init();\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune.measureEventName(\nlogin\n);\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName = \npurchase\n;\nevent.refId = \nRJ1357\n;\nevent.searchString = \nsweet srisp red apples\n;\nevent.attribute1 = \nsrisp\n;\nevent.attribute2 = \nred\n;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEvent(JSON.stringify(event));\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data, timeout) {},\n  onFailDeeplink: function(errorString) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune.setListener(listener);\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginTune.init();\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nsdkbox.PluginTune.setDebugMode(enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune.setAllowDuplicateRequests(allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nsdkbox.PluginTune.automateIapEventMeasurement(automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune.setFacebookEventLogging(logging, limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune.setExistingUser(existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setCurrencyCode(currencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune.setJailbroken(jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune.setPackageName(packageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune.setSiteId(siteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune.setTRUSTeId(tpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune.setUserEmail(userEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune.setUserId(userId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune.setUserName(userName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune.setPhoneNumber(phoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune.setFacebookUserId(facebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune.setTwitterUserId(twitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune.setGoogleUserId(googleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune.setAge(userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune.setGender(userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude, altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune.setAppAdTracking(enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune.setPayingUser(isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune.setPreloadData(preloadData);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune.matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune.tuneId();\n\n\n\n\n\n\nGet the Tune ID for this installation.\n\n\n\n\nsdkbox.PluginTune.openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune.isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune.measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune.measureEventName(eventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune.measureEventId(eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune.measureEvent(event);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune.setUseCookieTracking(enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune.setRedirectUrl(redirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nonEnqueuedAction(referenceId);\n\n\n\n\nonSucceed(data);\n\n\n\n\nonFailed(errorString);\n\n\n\n\nonReceiveDeeplink(deeplink, timeout);\n\n\n\n\nonMobileAppTrackerDidFailDeeplinkWithError(errorString);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "Tune with Javascript"
        }, 
        {
            "location": "/plugins/tune/v3-js/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/tune/v3-js/#extra-steps", 
            "text": "Setup iOS   Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  MobileAppTracker/MobileAppTracker.h \n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Tune JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginTuneJS.hpp \n#include  PluginTuneJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginTuneJS);\nsc- addRegisterCallback(register_all_PluginTuneJS_helper);  Initialize Tune  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginTune.init();  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune.measureEventName( login );\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName =  purchase ;\nevent.refId =  RJ1357 ;\nevent.searchString =  sweet srisp red apples ;\nevent.attribute1 =  srisp ;\nevent.attribute2 =  red ;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEvent(JSON.stringify(event));  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data, timeout) {},\n  onFailDeeplink: function(errorString) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginTune.setListener(listener);   set a listener to listen for event changes.   sdkbox.PluginTune.init();   init the instance.   sdkbox.PluginTune.setDebugMode(enable);   Specifies that the server responses should include debug information.   sdkbox.PluginTune.setAllowDuplicateRequests(allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   sdkbox.PluginTune.automateIapEventMeasurement(automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune.setFacebookEventLogging(logging, limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   sdkbox.PluginTune.setExistingUser(existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune.setCurrencyCode(currencyCode);   Sets the currency code.   sdkbox.PluginTune.setJailbroken(jailbroken);   Sets the jailbroken device flag.   sdkbox.PluginTune.setPackageName(packageName);   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   sdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   sdkbox.PluginTune.setSiteId(siteId);   Sets the site ID.   sdkbox.PluginTune.setTRUSTeId(tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune.setUserEmail(userEmail);   Sets the user's email address.   sdkbox.PluginTune.setUserId(userId);   Sets the user ID.   sdkbox.PluginTune.setUserName(userName);   Sets the user's name.   sdkbox.PluginTune.setPhoneNumber(phoneNumber);   Sets the user's phone number.   sdkbox.PluginTune.setFacebookUserId(facebookUserId);   Set user's Facebook ID.   sdkbox.PluginTune.setTwitterUserId(twitterUserId);   Set user's Twitter ID.   sdkbox.PluginTune.setGoogleUserId(googleUserId);   Set user's Google ID.   sdkbox.PluginTune.setAge(userAge);   Sets the user's age.   sdkbox.PluginTune.setGender(userGender);   Sets the user's gender.   sdkbox.PluginTune.setLatitude(latitude, longitude);   Sets the user's location.   sdkbox.PluginTune.setLatitude(latitude, longitude, altitude);   Sets the user's location including altitude.   sdkbox.PluginTune.setAppAdTracking(enable);   Set app-level ad-tracking.   sdkbox.PluginTune.setPayingUser(isPayingUser);   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune.setPreloadData(preloadData);   Sets publisher information for attribution.   sdkbox.PluginTune.matId();   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune.tuneId();   Get the Tune ID for this installation.   sdkbox.PluginTune.openLogId();   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune.isPayingUser();   Get whether the user is revenue-generating.   sdkbox.PluginTune.measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune.measureEventName(eventName);   Record an event for an Event Name.   sdkbox.PluginTune.measureEventId(eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune.measureEvent(event);   Record an event with a MATEvent.   sdkbox.PluginTune.setUseCookieTracking(enable);   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune.setRedirectUrl(redirectUrl);   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect);   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  onEnqueuedAction(referenceId);  onSucceed(data);  onFailed(errorString);  onReceiveDeeplink(deeplink, timeout);  onMobileAppTrackerDidFailDeeplinkWithError(errorString);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/tune/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v3-lua/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nExtra steps\n\n\nSetup iOS\n\n\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nMobileAppTracker/MobileAppTracker.h\n\n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginTune:init()\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune:measureEventName(\nlogin\n)\nsdkbox.PluginTune:measureEventId(0123456789)\n\nlocal event = {}\nevent.eventName = \npurchase\n\nevent.refId = \nRJ1357\n\nevent.searchString = \nsweet srisp red apples\n\nevent.attribute1 = \nsrisp\n\nevent.attribute2 = \nred\n\nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune:setListener(function(eventName, eventData, timeout)\n        -- the third param \ntimeout\n valid, when eventName equal \nonReceiveDeeplink\n\n        print(eventName, eventData)\n    end)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune:setListener(listener)\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginTune:init()\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nsdkbox.PluginTune:setDebugMode(enable)\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune:setAllowDuplicateRequests(allow)\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout)\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nsdkbox.PluginTune:automateIapEventMeasurement(automate)\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune:setFacebookEventLogging(logging, limit)\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune:setExistingUser(existingUser)\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled)\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier)\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setCurrencyCode(currencyCode)\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune:setJailbroken(jailbroken)\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune:setPackageName(packageName)\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect)\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate)\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune:setSiteId(siteId)\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune:setTRUSTeId(tpid)\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune:setUserEmail(userEmail)\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune:setUserId(userId)\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune:setUserName(userName)\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune:setPhoneNumber(phoneNumber)\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune:setFacebookUserId(facebookUserId)\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune:setTwitterUserId(twitterUserId)\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune:setGoogleUserId(googleUserId)\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune:setAge(userAge)\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune:setGender(userGender)\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude)\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude, altitude)\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune:setAppAdTracking(enable)\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune:setPayingUser(isPayingUser)\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune:setPreloadData(preloadData)\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune:matId()\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune:tuneId()\n\n\n\n\n\n\nGet the Tune ID for this installation.\n\n\n\n\nsdkbox.PluginTune:openLogId()\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune:isPayingUser()\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune:measureSession()\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune:measureEventName(eventName)\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune:measureEventId(eventId)\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune:measureEvent(event)\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune:setUseCookieTracking(enable)\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune:setRedirectUrl(redirectUrl)\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect)\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication)\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nonEnqueuedAction(referenceId)\n\n\n\n\nonSucceed(data)\n\n\n\n\nonFailed(errorString)\n\n\n\n\nonReceiveDeeplink(deeplink, timeout)\n\n\n\n\nonMobileAppTrackerDidFailDeeplinkWithError(errorString)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproject_root\n/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "Tune with Lua"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#extra-steps", 
            "text": "Setup iOS   Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  MobileAppTracker/MobileAppTracker.h \n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#usage", 
            "text": "Initialize Tune  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginTune:init()  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune:measureEventName( login )\nsdkbox.PluginTune:measureEventId(0123456789)\n\nlocal event = {}\nevent.eventName =  purchase \nevent.refId =  RJ1357 \nevent.searchString =  sweet srisp red apples \nevent.attribute1 =  srisp \nevent.attribute2 =  red \nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune:setListener(function(eventName, eventData, timeout)\n        -- the third param  timeout  valid, when eventName equal  onReceiveDeeplink \n        print(eventName, eventData)\n    end)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginTune:setListener(listener)   set a listener to listen for event changes.   sdkbox.PluginTune:init()   init the instance.   sdkbox.PluginTune:setDebugMode(enable)   Specifies that the server responses should include debug information.   sdkbox.PluginTune:setAllowDuplicateRequests(allow)   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout)   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   sdkbox.PluginTune:automateIapEventMeasurement(automate)   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune:setFacebookEventLogging(logging, limit)   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   sdkbox.PluginTune:setExistingUser(existingUser)   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled)   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier)   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune:setCurrencyCode(currencyCode)   Sets the currency code.   sdkbox.PluginTune:setJailbroken(jailbroken)   Sets the jailbroken device flag.   sdkbox.PluginTune:setPackageName(packageName)   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   sdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect)   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate)   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   sdkbox.PluginTune:setSiteId(siteId)   Sets the site ID.   sdkbox.PluginTune:setTRUSTeId(tpid)   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune:setUserEmail(userEmail)   Sets the user's email address.   sdkbox.PluginTune:setUserId(userId)   Sets the user ID.   sdkbox.PluginTune:setUserName(userName)   Sets the user's name.   sdkbox.PluginTune:setPhoneNumber(phoneNumber)   Sets the user's phone number.   sdkbox.PluginTune:setFacebookUserId(facebookUserId)   Set user's Facebook ID.   sdkbox.PluginTune:setTwitterUserId(twitterUserId)   Set user's Twitter ID.   sdkbox.PluginTune:setGoogleUserId(googleUserId)   Set user's Google ID.   sdkbox.PluginTune:setAge(userAge)   Sets the user's age.   sdkbox.PluginTune:setGender(userGender)   Sets the user's gender.   sdkbox.PluginTune:setLatitude(latitude, longitude)   Sets the user's location.   sdkbox.PluginTune:setLatitude(latitude, longitude, altitude)   Sets the user's location including altitude.   sdkbox.PluginTune:setAppAdTracking(enable)   Set app-level ad-tracking.   sdkbox.PluginTune:setPayingUser(isPayingUser)   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune:setPreloadData(preloadData)   Sets publisher information for attribution.   sdkbox.PluginTune:matId()   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune:tuneId()   Get the Tune ID for this installation.   sdkbox.PluginTune:openLogId()   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune:isPayingUser()   Get whether the user is revenue-generating.   sdkbox.PluginTune:measureSession()   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune:measureEventName(eventName)   Record an event for an Event Name.   sdkbox.PluginTune:measureEventId(eventId)   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune:measureEvent(event)   Record an event with a MATEvent.   sdkbox.PluginTune:setUseCookieTracking(enable)   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune:setRedirectUrl(redirectUrl)   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect)   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication)   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  onEnqueuedAction(referenceId)  onSucceed(data)  onFailed(errorString)  onReceiveDeeplink(deeplink, timeout)  onMobileAppTrackerDidFailDeeplinkWithError(errorString)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: project_root /libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer SDK versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nExtra steps\n\n\nSetup iOS\n\n\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nMobileAppTracker/MobileAppTracker.h\n\n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nmeasureSession()\n are required. Example:\n\n\n#include \nPluginTune/PluginTune.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\n{\n    PluginTune::measureEventName(\npurchase\n);\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName = \npurchase2\n;\n    event.refId     = \nRJ1357\n;\n    event.searchString = \nsweet crisp red apples\n;\n    event.attribute1 = \ncrisp\n;\n    event.attribute2 = \nred\n;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}\n\n\n\n\nNotice that at the end of the \nevent\n \nPluginTune::measureEvent(event)\n was called. This takes care of logging our event.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void setListener ( TuneListener * listener ) ;\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nstatic TuneListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove the listener, and can't listen to events anymore\n\n\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nstatic void setDebugMode ( bool enable ) ;\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nstatic void setAllowDuplicateRequests ( bool allow ) ;\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nstatic void checkForDeferredDeeplinkWithTimeout ( double timeout ) ;\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nstatic void automateIapEventMeasurement ( bool automate ) ;\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nstatic void setFacebookEventLogging ( bool logging , bool limit ) ;\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nstatic void setExistingUser ( bool existingUser ) ;\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nstatic void setAppleAdvertisingIdentifier ( const std::string \n appleAdvertisingIdentifier ,\n                                            bool adTrackingEnabled ) ;\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nstatic void setAppleVendorIdentifier ( const std::string \n appleVendorIdentifier ) ;\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nstatic void setCurrencyCode ( const std::string \n currencyCode ) ;\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nstatic void setJailbroken ( bool jailbroken ) ;\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nstatic void setPackageName ( const std::string \n packageName ) ;\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nstatic void setShouldAutoDetectJailbroken ( bool autoDetect ) ;\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nstatic void setShouldAutoGenerateAppleVendorIdentifier ( bool autoGenerate ) ;\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nstatic void setSiteId ( const std::string \n siteId ) ;\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nstatic void setTRUSTeId ( const std::string \n tpid ) ;\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nstatic void setUserEmail ( const std::string \n userEmail ) ;\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nstatic void setUserId ( const std::string \n userId ) ;\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nstatic void setUserName ( const std::string \n userName ) ;\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nstatic void setPhoneNumber ( const std::string \n phoneNumber ) ;\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nstatic void setFacebookUserId ( const std::string \n facebookUserId ) ;\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nstatic void setTwitterUserId ( const std::string \n twitterUserId ) ;\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nstatic void setGoogleUserId ( const std::string \n googleUserId ) ;\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nstatic void setAge ( int userAge ) ;\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nstatic void setGender ( Gender userGender ) ;\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nstatic void setLatitude ( double latitude , double longitude ) ;\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          double altitude ) ;\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nstatic void setAppAdTracking ( bool enable ) ;\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nstatic void setPayingUser ( bool isPayingUser ) ;\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nstatic void setPreloadData ( const TunePreloadData \n preloadData ) ;\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nstatic void setPreloadDataForScript ( const std::string \n jsonString ) ;\n\n\n\n\nstatic std::string matId ( ) ;\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nstatic std::string tuneId ( ) ;\n\n\n\n\n\n\nGet the Tune ID for this installation.\n\n\n\n\nstatic std::string openLogId ( ) ;\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nstatic bool isPayingUser ( ) ;\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nstatic void measureSession ( ) ;\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nstatic void measureEventName ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nstatic void measureEventId ( int eventId ) ;\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nstatic void measureEvent ( const TuneEvent \n event ) ;\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nstatic void measureEventForScript ( const std::string \n jsonString ) ;\n\n\n\n\nstatic void setUseCookieTracking ( bool enable ) ;\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nstatic void setRedirectUrl ( const std::string \n redirectUrl ) ;\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nstatic void startAppToAppTracking ( const std::string \n targetAppPackageName ,\n                                    const std::string \n targetAppAdvertiserId ,\n                                    const std::string \n targetAdvertiserOfferId ,\n                                    const std::string \n targetAdvertiserPublisherId ,\n                                    bool shouldRedirect ) ;\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nstatic void applicationDidOpenURL ( const std::string \n urlString ,\n                                    const std::string \n sourceApplication ) ;\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nvoid onMobileAppTrackerEnqueuedActionWithReferenceId ( const std::string \n referenceId );\n\n\n\n\nvoid onMobileAppTrackerDidSucceedWithData ( const std::string \n data );\n\n\n\n\nvoid onMobileAppTrackerDidFailWithError ( const std::string \n errorString );\n\n\n\n\nvoid onMobileAppTrackerDidReceiveDeeplink ( const std::string \n deeplink ,\n                                            bool timeout );\n\n\n\n\nvoid onMobileAppTrackerDidFailDeeplinkWithError ( const std::string \n errorString );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\n    APP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "Tune with C++"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#extra-steps", 
            "text": "Setup iOS   Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  MobileAppTracker/MobileAppTracker.h \n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#usage", 
            "text": "Initialize Tune  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  measureSession()  are required. Example:  #include  PluginTune/PluginTune.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  {\n    PluginTune::measureEventName( purchase );\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName =  purchase2 ;\n    event.refId     =  RJ1357 ;\n    event.searchString =  sweet crisp red apples ;\n    event.attribute1 =  crisp ;\n    event.attribute2 =  red ;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}  Notice that at the end of the  event   PluginTune::measureEvent(event)  was called. This takes care of logging our event.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#api-reference", 
            "text": "Methods  static void setListener ( TuneListener * listener ) ;   set a listener to listen for event changes.   static TuneListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   remove the listener, and can't listen to events anymore   static void init ( ) ;   init the instance.   static void setDebugMode ( bool enable ) ;   Specifies that the server responses should include debug information.   static void setAllowDuplicateRequests ( bool allow ) ;   Set to YES to allow duplicate requests to be registered with the MAT server.   static void checkForDeferredDeeplinkWithTimeout ( double timeout ) ;   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   static void automateIapEventMeasurement ( bool automate ) ;   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   static void setFacebookEventLogging ( bool logging , bool limit ) ;   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   static void setExistingUser ( bool existingUser ) ;   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   static void setAppleAdvertisingIdentifier ( const std::string   appleAdvertisingIdentifier ,\n                                            bool adTrackingEnabled ) ;   Set the Apple Advertising Identifier available in iOS 6.   static void setAppleVendorIdentifier ( const std::string   appleVendorIdentifier ) ;   Set the Apple Vendor Identifier available in iOS 6.   static void setCurrencyCode ( const std::string   currencyCode ) ;   Sets the currency code.   static void setJailbroken ( bool jailbroken ) ;   Sets the jailbroken device flag.   static void setPackageName ( const std::string   packageName ) ;   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   static void setShouldAutoDetectJailbroken ( bool autoDetect ) ;   Specifies if the sdk should auto detect if the iOS device is jailbroken.   static void setShouldAutoGenerateAppleVendorIdentifier ( bool autoGenerate ) ;   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   static void setSiteId ( const std::string   siteId ) ;   Sets the site ID.   static void setTRUSTeId ( const std::string   tpid ) ;   Set the TRUSTe Trusted Preference Identifier (TPID).   static void setUserEmail ( const std::string   userEmail ) ;   Sets the user's email address.   static void setUserId ( const std::string   userId ) ;   Sets the user ID.   static void setUserName ( const std::string   userName ) ;   Sets the user's name.   static void setPhoneNumber ( const std::string   phoneNumber ) ;   Sets the user's phone number.   static void setFacebookUserId ( const std::string   facebookUserId ) ;   Set user's Facebook ID.   static void setTwitterUserId ( const std::string   twitterUserId ) ;   Set user's Twitter ID.   static void setGoogleUserId ( const std::string   googleUserId ) ;   Set user's Google ID.   static void setAge ( int userAge ) ;   Sets the user's age.   static void setGender ( Gender userGender ) ;   Sets the user's gender.   static void setLatitude ( double latitude , double longitude ) ;   Sets the user's location.   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          double altitude ) ;   Sets the user's location including altitude.   static void setAppAdTracking ( bool enable ) ;   Set app-level ad-tracking.   static void setPayingUser ( bool isPayingUser ) ;   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   static void setPreloadData ( const TunePreloadData   preloadData ) ;   Sets publisher information for attribution.   static void setPreloadDataForScript ( const std::string   jsonString ) ;  static std::string matId ( ) ;   Get the MAT ID for this installation (mat_id).   static std::string tuneId ( ) ;   Get the Tune ID for this installation.   static std::string openLogId ( ) ;   Get the MAT log ID for the first app open (open_log_id).   static bool isPayingUser ( ) ;   Get whether the user is revenue-generating.   static void measureSession ( ) ;   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   static void measureEventName ( const std::string   eventName ) ;   Record an event for an Event Name.   static void measureEventId ( int eventId ) ;   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   static void measureEvent ( const TuneEvent   event ) ;   Record an event with a MATEvent.   static void measureEventForScript ( const std::string   jsonString ) ;  static void setUseCookieTracking ( bool enable ) ;   Sets whether or not to use cookie based tracking.   static void setRedirectUrl ( const std::string   redirectUrl ) ;   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   static void startAppToAppTracking ( const std::string   targetAppPackageName ,\n                                    const std::string   targetAppAdvertiserId ,\n                                    const std::string   targetAdvertiserOfferId ,\n                                    const std::string   targetAdvertiserPublisherId ,\n                                    bool shouldRedirect ) ;   Start an app-to-app tracking session on the MAT server.   static void applicationDidOpenURL ( const std::string   urlString ,\n                                    const std::string   sourceApplication ) ;   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  void onMobileAppTrackerEnqueuedActionWithReferenceId ( const std::string   referenceId );  void onMobileAppTrackerDidSucceedWithData ( const std::string   data );  void onMobileAppTrackerDidFailWithError ( const std::string   errorString );  void onMobileAppTrackerDidReceiveDeeplink ( const std::string   deeplink ,\n                                            bool timeout );  void onMobileAppTrackerDidFailDeeplinkWithError ( const std::string   errorString );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:      APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v2-js/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nExtra steps\n\n\nSetup iOS\n\n\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nMobileAppTracker/MobileAppTracker.h\n\n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Tune JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginTuneJS.hpp\n\n#include \nPluginTuneJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginTuneJS);\nsc-\naddRegisterCallback(register_all_PluginTuneJS_helper);\n\n\n\n\nInitialize Tune\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginTune.init();\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune.measureEventName(\nlogin\n);\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName = \npurchase\n;\nevent.refId = \nRJ1357\n;\nevent.searchString = \nsweet srisp red apples\n;\nevent.attribute1 = \nsrisp\n;\nevent.attribute2 = \nred\n;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEvent(JSON.stringify(event));\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data, timeout) {},\n  onFailDeeplink: function(errorString) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune.setListener(listener);\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginTune.init();\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nsdkbox.PluginTune.setDebugMode(enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune.setAllowDuplicateRequests(allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nsdkbox.PluginTune.automateIapEventMeasurement(automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune.setFacebookEventLogging(logging, limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune.setExistingUser(existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setCurrencyCode(currencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune.setJailbroken(jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune.setPackageName(packageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune.setSiteId(siteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune.setTRUSTeId(tpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune.setUserEmail(userEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune.setUserId(userId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune.setUserName(userName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune.setPhoneNumber(phoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune.setFacebookUserId(facebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune.setTwitterUserId(twitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune.setGoogleUserId(googleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune.setAge(userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune.setGender(userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude, altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune.setAppAdTracking(enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune.setPayingUser(isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune.setPreloadData(preloadData);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune.matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune.tuneId();\n\n\n\n\n\n\nGet the Tune ID for this installation.\n\n\n\n\nsdkbox.PluginTune.openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune.isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune.measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune.measureEventName(eventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune.measureEventId(eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune.measureEvent(event);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune.setUseCookieTracking(enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune.setRedirectUrl(redirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nonEnqueuedAction(referenceId);\n\n\n\n\nonSucceed(data);\n\n\n\n\nonFailed(errorString);\n\n\n\n\nonReceiveDeeplink(deeplink, timeout);\n\n\n\n\nonMobileAppTrackerDidFailDeeplinkWithError(errorString);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\n    APP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "Tune with Javascript"
        }, 
        {
            "location": "/plugins/tune/v2-js/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/tune/v2-js/#extra-steps", 
            "text": "Setup iOS   Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  MobileAppTracker/MobileAppTracker.h \n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Tune JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginTuneJS.hpp \n#include  PluginTuneJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginTuneJS);\nsc- addRegisterCallback(register_all_PluginTuneJS_helper);  Initialize Tune  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginTune.init();  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune.measureEventName( login );\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName =  purchase ;\nevent.refId =  RJ1357 ;\nevent.searchString =  sweet srisp red apples ;\nevent.attribute1 =  srisp ;\nevent.attribute2 =  red ;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEvent(JSON.stringify(event));  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data, timeout) {},\n  onFailDeeplink: function(errorString) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginTune.setListener(listener);   set a listener to listen for event changes.   sdkbox.PluginTune.init();   init the instance.   sdkbox.PluginTune.setDebugMode(enable);   Specifies that the server responses should include debug information.   sdkbox.PluginTune.setAllowDuplicateRequests(allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   sdkbox.PluginTune.automateIapEventMeasurement(automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune.setFacebookEventLogging(logging, limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   sdkbox.PluginTune.setExistingUser(existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune.setCurrencyCode(currencyCode);   Sets the currency code.   sdkbox.PluginTune.setJailbroken(jailbroken);   Sets the jailbroken device flag.   sdkbox.PluginTune.setPackageName(packageName);   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   sdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   sdkbox.PluginTune.setSiteId(siteId);   Sets the site ID.   sdkbox.PluginTune.setTRUSTeId(tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune.setUserEmail(userEmail);   Sets the user's email address.   sdkbox.PluginTune.setUserId(userId);   Sets the user ID.   sdkbox.PluginTune.setUserName(userName);   Sets the user's name.   sdkbox.PluginTune.setPhoneNumber(phoneNumber);   Sets the user's phone number.   sdkbox.PluginTune.setFacebookUserId(facebookUserId);   Set user's Facebook ID.   sdkbox.PluginTune.setTwitterUserId(twitterUserId);   Set user's Twitter ID.   sdkbox.PluginTune.setGoogleUserId(googleUserId);   Set user's Google ID.   sdkbox.PluginTune.setAge(userAge);   Sets the user's age.   sdkbox.PluginTune.setGender(userGender);   Sets the user's gender.   sdkbox.PluginTune.setLatitude(latitude, longitude);   Sets the user's location.   sdkbox.PluginTune.setLatitude(latitude, longitude, altitude);   Sets the user's location including altitude.   sdkbox.PluginTune.setAppAdTracking(enable);   Set app-level ad-tracking.   sdkbox.PluginTune.setPayingUser(isPayingUser);   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune.setPreloadData(preloadData);   Sets publisher information for attribution.   sdkbox.PluginTune.matId();   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune.tuneId();   Get the Tune ID for this installation.   sdkbox.PluginTune.openLogId();   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune.isPayingUser();   Get whether the user is revenue-generating.   sdkbox.PluginTune.measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune.measureEventName(eventName);   Record an event for an Event Name.   sdkbox.PluginTune.measureEventId(eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune.measureEvent(event);   Record an event with a MATEvent.   sdkbox.PluginTune.setUseCookieTracking(enable);   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune.setRedirectUrl(redirectUrl);   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect);   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  onEnqueuedAction(referenceId);  onSucceed(data);  onFailed(errorString);  onReceiveDeeplink(deeplink, timeout);  onMobileAppTrackerDidFailDeeplinkWithError(errorString);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:      APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/tune/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v2-lua/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nExtra steps\n\n\nSetup iOS\n\n\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nMobileAppTracker/MobileAppTracker.h\n\n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginTune:init()\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune:measureEventName(\nlogin\n)\nsdkbox.PluginTune:measureEventId(0123456789)\n\nlocal event = {}\nevent.eventName = \npurchase\n\nevent.refId = \nRJ1357\n\nevent.searchString = \nsweet srisp red apples\n\nevent.attribute1 = \nsrisp\n\nevent.attribute2 = \nred\n\nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune:setListener(function(eventName, eventData, timeout)\n        -- the third param \ntimeout\n valid, when eventName equal \nonReceiveDeeplink\n\n        print(eventName, eventData)\n    end)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune:setListener(listener)\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginTune:init()\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nsdkbox.PluginTune:setDebugMode(enable)\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune:setAllowDuplicateRequests(allow)\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout)\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nsdkbox.PluginTune:automateIapEventMeasurement(automate)\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune:setFacebookEventLogging(logging, limit)\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune:setExistingUser(existingUser)\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled)\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier)\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setCurrencyCode(currencyCode)\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune:setJailbroken(jailbroken)\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune:setPackageName(packageName)\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect)\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate)\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune:setSiteId(siteId)\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune:setTRUSTeId(tpid)\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune:setUserEmail(userEmail)\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune:setUserId(userId)\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune:setUserName(userName)\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune:setPhoneNumber(phoneNumber)\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune:setFacebookUserId(facebookUserId)\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune:setTwitterUserId(twitterUserId)\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune:setGoogleUserId(googleUserId)\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune:setAge(userAge)\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune:setGender(userGender)\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude)\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude, altitude)\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune:setAppAdTracking(enable)\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune:setPayingUser(isPayingUser)\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune:setPreloadData(preloadData)\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune:matId()\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune:tuneId()\n\n\n\n\n\n\nGet the Tune ID for this installation.\n\n\n\n\nsdkbox.PluginTune:openLogId()\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune:isPayingUser()\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune:measureSession()\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune:measureEventName(eventName)\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune:measureEventId(eventId)\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune:measureEvent(event)\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune:setUseCookieTracking(enable)\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune:setRedirectUrl(redirectUrl)\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect)\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication)\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nonEnqueuedAction(referenceId)\n\n\n\n\nonSucceed(data)\n\n\n\n\nonFailed(errorString)\n\n\n\n\nonReceiveDeeplink(deeplink, timeout)\n\n\n\n\nonMobileAppTrackerDidFailDeeplinkWithError(errorString)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\n    APP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "Tune with Lua"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#extra-steps", 
            "text": "Setup iOS   Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  MobileAppTracker/MobileAppTracker.h \n\n- (void)applicationDidBecomeActive:(UIApplication *)application\n{\n    // MAT will not function without the measureSession call included\n    [MobileAppTracker measureSession];\n}\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n    [MobileAppTracker applicationDidOpenURL:[url absoluteString] sourceApplication:sourceApplication];\n\n    return YES;\n}", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#usage", 
            "text": "Initialize Tune  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginTune:init()  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune:measureEventName( login )\nsdkbox.PluginTune:measureEventId(0123456789)\n\nlocal event = {}\nevent.eventName =  purchase \nevent.refId =  RJ1357 \nevent.searchString =  sweet srisp red apples \nevent.attribute1 =  srisp \nevent.attribute2 =  red \nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune:setListener(function(eventName, eventData, timeout)\n        -- the third param  timeout  valid, when eventName equal  onReceiveDeeplink \n        print(eventName, eventData)\n    end)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginTune:setListener(listener)   set a listener to listen for event changes.   sdkbox.PluginTune:init()   init the instance.   sdkbox.PluginTune:setDebugMode(enable)   Specifies that the server responses should include debug information.   sdkbox.PluginTune:setAllowDuplicateRequests(allow)   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout)   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   sdkbox.PluginTune:automateIapEventMeasurement(automate)   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune:setFacebookEventLogging(logging, limit)   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   sdkbox.PluginTune:setExistingUser(existingUser)   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled)   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier)   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune:setCurrencyCode(currencyCode)   Sets the currency code.   sdkbox.PluginTune:setJailbroken(jailbroken)   Sets the jailbroken device flag.   sdkbox.PluginTune:setPackageName(packageName)   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   sdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect)   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate)   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   sdkbox.PluginTune:setSiteId(siteId)   Sets the site ID.   sdkbox.PluginTune:setTRUSTeId(tpid)   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune:setUserEmail(userEmail)   Sets the user's email address.   sdkbox.PluginTune:setUserId(userId)   Sets the user ID.   sdkbox.PluginTune:setUserName(userName)   Sets the user's name.   sdkbox.PluginTune:setPhoneNumber(phoneNumber)   Sets the user's phone number.   sdkbox.PluginTune:setFacebookUserId(facebookUserId)   Set user's Facebook ID.   sdkbox.PluginTune:setTwitterUserId(twitterUserId)   Set user's Twitter ID.   sdkbox.PluginTune:setGoogleUserId(googleUserId)   Set user's Google ID.   sdkbox.PluginTune:setAge(userAge)   Sets the user's age.   sdkbox.PluginTune:setGender(userGender)   Sets the user's gender.   sdkbox.PluginTune:setLatitude(latitude, longitude)   Sets the user's location.   sdkbox.PluginTune:setLatitude(latitude, longitude, altitude)   Sets the user's location including altitude.   sdkbox.PluginTune:setAppAdTracking(enable)   Set app-level ad-tracking.   sdkbox.PluginTune:setPayingUser(isPayingUser)   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune:setPreloadData(preloadData)   Sets publisher information for attribution.   sdkbox.PluginTune:matId()   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune:tuneId()   Get the Tune ID for this installation.   sdkbox.PluginTune:openLogId()   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune:isPayingUser()   Get whether the user is revenue-generating.   sdkbox.PluginTune:measureSession()   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune:measureEventName(eventName)   Record an event for an Event Name.   sdkbox.PluginTune:measureEventId(eventId)   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune:measureEvent(event)   Record an event with a MATEvent.   sdkbox.PluginTune:setUseCookieTracking(enable)   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune:setRedirectUrl(redirectUrl)   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect)   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication)   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  onEnqueuedAction(referenceId)  onSucceed(data)  onFailed(errorString)  onReceiveDeeplink(deeplink, timeout)  onMobileAppTrackerDidFailDeeplinkWithError(errorString)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:      APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n#tune\n-keep public class com.mobileapptracker.** {\n    public *;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/", 
            "text": "Valuepotion\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import valuepotion\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the ValuePotion configuration, you need to replace \nclient id\n and \nsecret key\n items with your specific \nValuepotion ID\n account information.\n\nsender id\n item valid on android, which is GCM(google cloud message) project number id\n\n\nValuePotion\n:{\n    \nclientId\n:\n9666f9668a4db516c8aaea439464da44\n,\n    \nsecretKey\n:\n1c110ebcdeeda25d\n,\n    \nsenderId\n:\n111111\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Valuepotion\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginValuePotion/PluginValuePotion.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginValuePotion::init();\n}\n\n\n\n\nUsing Valuepotion\n\n\nAfter initialization you can begin to use the Valuepotion functionality.\n\n\nsdkbox::PluginValuePotion::setTest(true);\nsdkbox::PluginValuePotion::hasCachedInterstitial(\ndefault\n);\n\nsdkbox::PluginValuePotion::trackEvent(\ntest event\n);\nsdkbox::PluginValuePotion::trackEvent(\ntest event with value 23\n, 23);\nsdkbox::PluginValuePotion::trackEvent(\ncategory\n, \nevent name\n, \nlabel\n, 45);\n\nsdkbox::PluginValuePotion::trackPurchaseEvent(\ntest event\n, 56, \nRMB\n, \norder id\n, \nproduct id\n);\nsdkbox::PluginValuePotion::trackPurchaseEvent(\ntest event\n, 67, \nUSD\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n);\nsdkbox::PluginValuePotion::trackPurchaseEvent(\ncategroy\n, \nevent name\n, \nlabel\n, 78, \nILY\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n);\n\nsdkbox::PluginValuePotion::userinfo(\nid\n, \nuser id\n);\nsdkbox::PluginValuePotion::userinfo(\nserverid\n, \nserver id\n);\nsdkbox::PluginValuePotion::userinfo(\nbirth\n, \n19991111\n); //YYYYMMDD\nsdkbox::PluginValuePotion::userinfo(\ngender\n, \nM\n);\nsdkbox::PluginValuePotion::userinfo(\nlevel\n, \n9\n);\nsdkbox::PluginValuePotion::userinfo(\nfriends\n, \n3\n);\nsdkbox::PluginValuePotion::userinfo(\naccounttype\n, \nfacebook\n);\n\n\n\n\nCatch Valuepotion events (optional)\n\n\nThis allows you to catch the \nValuepotion\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::ValuePotionListener\n\n\n\n\n#include \nPluginValuePotion/PluginValuePotion.h\n\nclass MyClass : public sdkbox::ValuePotionListener\n{\nprivate:\n    virtual void onCacheInterstitial(const char *placement);\n\n    virtual void onFailToCacheInterstitial(const char *placement, const char *errorMessage);\n\n    virtual void onOpenInterstitial(const char *placement);\n\n    virtual void onFailToOpenInterstitial(const char *placement, const char *errorMessage);\n\n    virtual void onCloseInterstitial(const char *placement);\n\n    virtual void onRequestOpenURL(const char *placement, const char *URL);\n\n    virtual void onRequestPurchase(const char *placement, const char *name, const char *productId, int quantity, const char *campaignId, const char *contentId);\n\n    virtual void onRequestRewards(const char *placement, std::vector\nsdkbox::ValuePotionReward\n rewards);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginValuePotion::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( ValuePotionListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic ValuePotionListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void setTest ( bool isTest ) ;\n\n\n\n\n\n\nfor intergation test\n\n\n\n\nstatic bool hasCachedInterstitial ( const char * placement ) ;\n\n\n\n\n\n\ncheck if ad is cached\n\n\n\n\nstatic void cacheInterstitial ( const char * placement ) ;\n\n\n\n\n\n\ncached ad\n\n\n\n\nstatic void openInterstitial ( const char * placement ) ;\n\n\n\n\n\n\nshow ad\n\n\n\n\nstatic void trackEvent ( const char * eventName ) ;\n\n\n\n\n\n\ntrack game event\n\n\n\n\nstatic void trackEvent ( const char * eventName , double eventValue ) ;\n\n\n\n\nstatic void trackEvent ( const char * category ,\n                         const char * eventName ,\n                         const char * label ,\n                         double eventValue ) ;\n\n\n\n\nstatic void trackPurchaseEvent ( const char * eventName ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ) ;\n\n\n\n\n\n\ntrack purchase event\n\n\n\n\nstatic void trackPurchaseEvent ( const char * eventName ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ,\n                                 const char * campaignId ,\n                                 const char * contentId ) ;\n\n\n\n\nstatic void trackPurchaseEvent ( const char * category ,\n                                 const char * eventName ,\n                                 const char * label ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ,\n                                 const char * campaignId ,\n                                 const char * contentId ) ;\n\n\n\n\nstatic void userinfo ( const char * attribute , const char * value ) ;\n\n\n\n\n\n\nset user info\n\n\n\n\nListeners\n\n\nvoid onCacheInterstitial ( const char * placement ) {\n\n\n\n\nvoid onFailToCacheInterstitial ( const char * placement ,\n                                 const char * errorMessage ) {\n\n\n\n\nvoid onOpenInterstitial ( const char * placement ) {\n\n\n\n\nvoid onFailToOpenInterstitial ( const char * placement ,\n                                const char * errorMessage ) {\n\n\n\n\nvoid onCloseInterstitial ( const char * placement ) {\n\n\n\n\nvoid onRequestOpenURL ( const char * placement , const char * URL ) {\n\n\n\n\nvoid onRequestPurchase ( const char * placement ,\n                         const char * name ,\n                         const char * productId ,\n                         int quantity ,\n                         const char * campaignId ,\n                         const char * contentId ) {\n\n\n\n\nvoid onRequestRewards ( const char * placement ,\n                        std::vector \nValuePotionReward\n rewards ) {\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nValuePotion\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginValuePotion.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nSystemConfiguration.framework\n\n\nCoreTelephony.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nvaluepotion.jar\n\n\nPluginValuePotion.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n /\n\n\n\n\n\nThere are also a few necessary tags that also need to be added:\n\n\napplication\n\n\n......\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n            android:value=\n@integer/google_play_services_version\n /\n\n\n\n!-- Valuepotion Components --\n\n\n!-- for interstital ad interface --\n\n\nactivity\n        android:name=\ncom.valuepotion.sdk.VPInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n \n\n\n/activity\n\n\n\n!-- for CPI tracking --\n\n\nreceiver\n        android:name=\ncom.valuepotion.sdk.VPInstallReceiver\n\n        android:exported=\ntrue\n \n\n        \nintent-filter\n\n                \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n\n/receiver\n\n\n!-- Valuepotion Components End --\n\n\n.....\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Valuepotion with C++"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/#valuepotion", 
            "text": "", 
            "title": "Valuepotion"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import valuepotion", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the ValuePotion configuration, you need to replace  client id  and  secret key  items with your specific  Valuepotion ID  account information. sender id  item valid on android, which is GCM(google cloud message) project number id  ValuePotion :{\n     clientId : 9666f9668a4db516c8aaea439464da44 ,\n     secretKey : 1c110ebcdeeda25d ,\n     senderId : 111111 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/#usage", 
            "text": "Initialize Valuepotion  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginValuePotion/PluginValuePotion.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginValuePotion::init();\n}  Using Valuepotion  After initialization you can begin to use the Valuepotion functionality.  sdkbox::PluginValuePotion::setTest(true);\nsdkbox::PluginValuePotion::hasCachedInterstitial( default );\n\nsdkbox::PluginValuePotion::trackEvent( test event );\nsdkbox::PluginValuePotion::trackEvent( test event with value 23 , 23);\nsdkbox::PluginValuePotion::trackEvent( category ,  event name ,  label , 45);\n\nsdkbox::PluginValuePotion::trackPurchaseEvent( test event , 56,  RMB ,  order id ,  product id );\nsdkbox::PluginValuePotion::trackPurchaseEvent( test event , 67,  USD ,  order id ,  product id ,  campaign id ,  content id );\nsdkbox::PluginValuePotion::trackPurchaseEvent( categroy ,  event name ,  label , 78,  ILY ,  order id ,  product id ,  campaign id ,  content id );\n\nsdkbox::PluginValuePotion::userinfo( id ,  user id );\nsdkbox::PluginValuePotion::userinfo( serverid ,  server id );\nsdkbox::PluginValuePotion::userinfo( birth ,  19991111 ); //YYYYMMDD\nsdkbox::PluginValuePotion::userinfo( gender ,  M );\nsdkbox::PluginValuePotion::userinfo( level ,  9 );\nsdkbox::PluginValuePotion::userinfo( friends ,  3 );\nsdkbox::PluginValuePotion::userinfo( accounttype ,  facebook );  Catch Valuepotion events (optional)  This allows you to catch the  Valuepotion  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::ValuePotionListener   #include  PluginValuePotion/PluginValuePotion.h \nclass MyClass : public sdkbox::ValuePotionListener\n{\nprivate:\n    virtual void onCacheInterstitial(const char *placement);\n\n    virtual void onFailToCacheInterstitial(const char *placement, const char *errorMessage);\n\n    virtual void onOpenInterstitial(const char *placement);\n\n    virtual void onFailToOpenInterstitial(const char *placement, const char *errorMessage);\n\n    virtual void onCloseInterstitial(const char *placement);\n\n    virtual void onRequestOpenURL(const char *placement, const char *URL);\n\n    virtual void onRequestPurchase(const char *placement, const char *name, const char *productId, int quantity, const char *campaignId, const char *contentId);\n\n    virtual void onRequestRewards(const char *placement, std::vector sdkbox::ValuePotionReward  rewards);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginValuePotion::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( ValuePotionListener * listener ) ;   Set listener to listen for adcolony events   static ValuePotionListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void setTest ( bool isTest ) ;   for intergation test   static bool hasCachedInterstitial ( const char * placement ) ;   check if ad is cached   static void cacheInterstitial ( const char * placement ) ;   cached ad   static void openInterstitial ( const char * placement ) ;   show ad   static void trackEvent ( const char * eventName ) ;   track game event   static void trackEvent ( const char * eventName , double eventValue ) ;  static void trackEvent ( const char * category ,\n                         const char * eventName ,\n                         const char * label ,\n                         double eventValue ) ;  static void trackPurchaseEvent ( const char * eventName ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ) ;   track purchase event   static void trackPurchaseEvent ( const char * eventName ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ,\n                                 const char * campaignId ,\n                                 const char * contentId ) ;  static void trackPurchaseEvent ( const char * category ,\n                                 const char * eventName ,\n                                 const char * label ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ,\n                                 const char * campaignId ,\n                                 const char * contentId ) ;  static void userinfo ( const char * attribute , const char * value ) ;   set user info   Listeners  void onCacheInterstitial ( const char * placement ) {  void onFailToCacheInterstitial ( const char * placement ,\n                                 const char * errorMessage ) {  void onOpenInterstitial ( const char * placement ) {  void onFailToOpenInterstitial ( const char * placement ,\n                                const char * errorMessage ) {  void onCloseInterstitial ( const char * placement ) {  void onRequestOpenURL ( const char * placement , const char * URL ) {  void onRequestPurchase ( const char * placement ,\n                         const char * name ,\n                         const char * productId ,\n                         int quantity ,\n                         const char * campaignId ,\n                         const char * contentId ) {  void onRequestRewards ( const char * placement ,\n                        std::vector  ValuePotionReward  rewards ) {", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  ValuePotion  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginValuePotion.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  Foundation.framework  CoreGraphics.framework  SystemConfiguration.framework  CoreTelephony.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   valuepotion.jar  PluginValuePotion.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE  /   There are also a few necessary tags that also need to be added:  application \n\n...... meta-data android:name= com.google.android.gms.version \n            android:value= @integer/google_play_services_version  /  !-- Valuepotion Components --  !-- for interstital ad interface --  activity\n        android:name= com.valuepotion.sdk.VPInterstitialActivity \n        android:theme= @android:style/Theme.Translucent    /activity  !-- for CPI tracking --  receiver\n        android:name= com.valuepotion.sdk.VPInstallReceiver \n        android:exported= true   \n         intent-filter \n                 action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter  /receiver  !-- Valuepotion Components End -- \n\n..... /application   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/valuepotion/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/", 
            "text": "Valuepotion\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import valuepotion\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the ValuePotion configuration, you need to replace \nclient id\n and \nsecret key\n items with your specific \nValuepotion ID\n account information.\n\nsender id\n item valid on android, which is GCM(google cloud message) project number id\n\n\nValuePotion\n:{\n    \nclientId\n:\n9666f9668a4db516c8aaea439464da44\n,\n    \nsecretKey\n:\n1c110ebcdeeda25d\n,\n    \nsenderId\n:\n111111\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Valuepotion JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginValuePotionJS.hpp\n\n#include \nPluginValuePotionJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginValuePotionJS);\nsc-\naddRegisterCallback(register_all_PluginValuePotionJS_helper);\n\n\n\n\nInitialize Valuepotion\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginValuePotion.init();\n\n\n\n\nUsing Valuepotion\n\n\nAfter initialization you can begin to use the Valuepotion functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginValuePotion.setTest(true)\nif (!sdkbox.PluginValuePotion.hasCachedInterstitial(\ndefault\n)) {\n    sdkbox.PluginValuePotion.cacheInterstitial(\ndefault\n)\n}\n\nsdkbox.PluginValuePotion.trackEvent(\ntest event\n)\nsdkbox.PluginValuePotion.trackEvent(\ntest event with value 23\n, 23)\nsdkbox.PluginValuePotion.trackEvent(\ncategory\n, \nevent name\n, \nlabel\n, 45)\n\nsdkbox.PluginValuePotion.trackPurchaseEvent(\ntest event\n, 56, \nRMB\n, \norder id\n, \nproduct id\n)\nsdkbox.PluginValuePotion.trackPurchaseEvent(\ntest event\n, 67, \nUSD\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n)\nsdkbox.PluginValuePotion.trackPurchaseEvent(\ncategroy\n, \nevent name\n, \nlabel\n, 78, \nILY\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n);\n\nsdkbox.PluginValuePotion.userinfo(\nid\n, \nuser id\n)\nsdkbox.PluginValuePotion.userinfo(\nserverid\n, \nserver id\n)\nsdkbox.PluginValuePotion.userinfo(\nbirth\n, \nbirther day\n)\nsdkbox.PluginValuePotion.userinfo(\ngender\n, \nM\n)\nsdkbox.PluginValuePotion.userinfo(\nlevel\n, \n9\n)\nsdkbox.PluginValuePotion.userinfo(\nfirends\n, \n3\n)\nsdkbox.PluginValuePotion.userinfo(\naccounttype\n, \nfacebook\n)\n\n\n\n\nCatch Valuepotion events (optional)\n\n\nThis allows you to catch the \nValuepotion\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginValuePotion.init();\nsdkbox.PluginValuePotion.setListener({\n    onCacheInterstitial: function(placement) { cc.log(\nonCacheInterstitial \n) },\n    onFailToCacheInterstitial: function(placement, errorMessage) { cc.log(\nonFailToCacheInterstitial \n) },\n    onOpenInterstitial: function(placement) { cc.log(\nonOpenInterstitial \n) },\n    onFailToOpenInterstitial: function(placement, errorMessage) { cc.log(\nonFailToOpenInterstitial \n) },\n    onCloseInterstitial: function(placement) { cc.log(\nonCloseInterstitial \n) },\n    onRequestOpenURL: function(placement, URL) { cc.log(\nonRequestOpenURL \n) },\n    onRequestPurchase: function(placement, name, productId, quantity, campaignId, contentId) {\n        cc.log(\nonRequestPurchase \n);\n    },\n    onRequestRewards: function(placement, rewards) {\n        cc.log(\nonRequestRewards \n);\n        for (var i = rewards.length - 1; i \n= 0; i--) {\n            var r = rewards[i]\n            cc.log(\n%d name:%s, q:%d\n, i, r.name, r.quantity)\n        };\n\n    }\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginValuePotion.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginValuePotion.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginValuePotion.setTest(isTest);\n\n\n\n\n\n\nfor intergation test\n\n\n\n\nsdkbox.PluginValuePotion.hasCachedInterstitial(placement);\n\n\n\n\n\n\ncheck if ad is cached\n\n\n\n\nsdkbox.PluginValuePotion.cacheInterstitial(placement);\n\n\n\n\n\n\ncached ad\n\n\n\n\nsdkbox.PluginValuePotion.openInterstitial(placement);\n\n\n\n\n\n\nshow ad\n\n\n\n\nsdkbox.PluginValuePotion.trackEvent(eventName);\n\n\n\n\n\n\ntrack game event\n\n\n\n\nsdkbox.PluginValuePotion.trackEvent(eventName, eventValue);\n\n\n\n\nsdkbox.PluginValuePotion.trackEvent(category, eventName, label, eventValue);\n\n\n\n\nsdkbox.PluginValuePotion.trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId);\n\n\n\n\n\n\ntrack purchase event\n\n\n\n\nsdkbox.PluginValuePotion.trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId);\n\n\n\n\nsdkbox.PluginValuePotion.trackPurchaseEvent(category,\n                                             eventName,\n                                             label,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId);\n\n\n\n\nsdkbox.PluginValuePotion.userinfo(attribute, value);\n\n\n\n\n\n\nset user info\n\n\n\n\nListeners\n\n\nonCacheInterstitial(placement);\n\n\n\n\nonFailToCacheInterstitial(placement, errorMessage);\n\n\n\n\nonOpenInterstitial(placement);\n\n\n\n\nonFailToOpenInterstitial(placement, errorMessage);\n\n\n\n\nonCloseInterstitial(placement);\n\n\n\n\nonRequestOpenURL(placement, URL);\n\n\n\n\nonRequestPurchase(placement, name, productId, quantity, campaignId, contentId);\n\n\n\n\nonRequestRewards(placement, rewards);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nValuePotion\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginValuePotion.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nSystemConfiguration.framework\n\n\nCoreTelephony.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nvaluepotion.jar\n\n\nPluginValuePotion.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n /\n\n\n\n\n\nThere are also a few necessary tags that also need to be added:\n\n\napplication\n\n\n......\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n            android:value=\n@integer/google_play_services_version\n /\n\n\n\n!-- Valuepotion Components --\n\n\n!-- for interstital ad interface --\n\n\nactivity\n        android:name=\ncom.valuepotion.sdk.VPInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n \n\n\n/activity\n\n\n\n!-- for CPI tracking --\n\n\nreceiver\n        android:name=\ncom.valuepotion.sdk.VPInstallReceiver\n\n        android:exported=\ntrue\n \n\n        \nintent-filter\n\n                \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n\n/receiver\n\n\n!-- Valuepotion Components End --\n\n\n.....\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Valuepotion with Javascript"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/#valuepotion", 
            "text": "", 
            "title": "Valuepotion"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import valuepotion", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the ValuePotion configuration, you need to replace  client id  and  secret key  items with your specific  Valuepotion ID  account information. sender id  item valid on android, which is GCM(google cloud message) project number id  ValuePotion :{\n     clientId : 9666f9668a4db516c8aaea439464da44 ,\n     secretKey : 1c110ebcdeeda25d ,\n     senderId : 111111 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Valuepotion JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginValuePotionJS.hpp \n#include  PluginValuePotionJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginValuePotionJS);\nsc- addRegisterCallback(register_all_PluginValuePotionJS_helper);  Initialize Valuepotion  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginValuePotion.init();  Using Valuepotion  After initialization you can begin to use the Valuepotion functionality. Use  check  wherever you want from your code:  sdkbox.PluginValuePotion.setTest(true)\nif (!sdkbox.PluginValuePotion.hasCachedInterstitial( default )) {\n    sdkbox.PluginValuePotion.cacheInterstitial( default )\n}\n\nsdkbox.PluginValuePotion.trackEvent( test event )\nsdkbox.PluginValuePotion.trackEvent( test event with value 23 , 23)\nsdkbox.PluginValuePotion.trackEvent( category ,  event name ,  label , 45)\n\nsdkbox.PluginValuePotion.trackPurchaseEvent( test event , 56,  RMB ,  order id ,  product id )\nsdkbox.PluginValuePotion.trackPurchaseEvent( test event , 67,  USD ,  order id ,  product id ,  campaign id ,  content id )\nsdkbox.PluginValuePotion.trackPurchaseEvent( categroy ,  event name ,  label , 78,  ILY ,  order id ,  product id ,  campaign id ,  content id );\n\nsdkbox.PluginValuePotion.userinfo( id ,  user id )\nsdkbox.PluginValuePotion.userinfo( serverid ,  server id )\nsdkbox.PluginValuePotion.userinfo( birth ,  birther day )\nsdkbox.PluginValuePotion.userinfo( gender ,  M )\nsdkbox.PluginValuePotion.userinfo( level ,  9 )\nsdkbox.PluginValuePotion.userinfo( firends ,  3 )\nsdkbox.PluginValuePotion.userinfo( accounttype ,  facebook )  Catch Valuepotion events (optional)  This allows you to catch the  Valuepotion  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginValuePotion.init();\nsdkbox.PluginValuePotion.setListener({\n    onCacheInterstitial: function(placement) { cc.log( onCacheInterstitial  ) },\n    onFailToCacheInterstitial: function(placement, errorMessage) { cc.log( onFailToCacheInterstitial  ) },\n    onOpenInterstitial: function(placement) { cc.log( onOpenInterstitial  ) },\n    onFailToOpenInterstitial: function(placement, errorMessage) { cc.log( onFailToOpenInterstitial  ) },\n    onCloseInterstitial: function(placement) { cc.log( onCloseInterstitial  ) },\n    onRequestOpenURL: function(placement, URL) { cc.log( onRequestOpenURL  ) },\n    onRequestPurchase: function(placement, name, productId, quantity, campaignId, contentId) {\n        cc.log( onRequestPurchase  );\n    },\n    onRequestRewards: function(placement, rewards) {\n        cc.log( onRequestRewards  );\n        for (var i = rewards.length - 1; i  = 0; i--) {\n            var r = rewards[i]\n            cc.log( %d name:%s, q:%d , i, r.name, r.quantity)\n        };\n\n    }\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginValuePotion.init();   initialize the plugin instance.   sdkbox.PluginValuePotion.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginValuePotion.setTest(isTest);   for intergation test   sdkbox.PluginValuePotion.hasCachedInterstitial(placement);   check if ad is cached   sdkbox.PluginValuePotion.cacheInterstitial(placement);   cached ad   sdkbox.PluginValuePotion.openInterstitial(placement);   show ad   sdkbox.PluginValuePotion.trackEvent(eventName);   track game event   sdkbox.PluginValuePotion.trackEvent(eventName, eventValue);  sdkbox.PluginValuePotion.trackEvent(category, eventName, label, eventValue);  sdkbox.PluginValuePotion.trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId);   track purchase event   sdkbox.PluginValuePotion.trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId);  sdkbox.PluginValuePotion.trackPurchaseEvent(category,\n                                             eventName,\n                                             label,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId);  sdkbox.PluginValuePotion.userinfo(attribute, value);   set user info   Listeners  onCacheInterstitial(placement);  onFailToCacheInterstitial(placement, errorMessage);  onOpenInterstitial(placement);  onFailToOpenInterstitial(placement, errorMessage);  onCloseInterstitial(placement);  onRequestOpenURL(placement, URL);  onRequestPurchase(placement, name, productId, quantity, campaignId, contentId);  onRequestRewards(placement, rewards);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  ValuePotion  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginValuePotion.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  Foundation.framework  CoreGraphics.framework  SystemConfiguration.framework  CoreTelephony.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   valuepotion.jar  PluginValuePotion.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE  /   There are also a few necessary tags that also need to be added:  application \n\n...... meta-data android:name= com.google.android.gms.version \n            android:value= @integer/google_play_services_version  /  !-- Valuepotion Components --  !-- for interstital ad interface --  activity\n        android:name= com.valuepotion.sdk.VPInterstitialActivity \n        android:theme= @android:style/Theme.Translucent    /activity  !-- for CPI tracking --  receiver\n        android:name= com.valuepotion.sdk.VPInstallReceiver \n        android:exported= true   \n         intent-filter \n                 action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter  /receiver  !-- Valuepotion Components End -- \n\n..... /application   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/valuepotion/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/", 
            "text": "Valuepotion\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import valuepotion\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the ValuePotion configuration, you need to replace \nclient id\n and \nsecret key\n items with your specific \nValuepotion ID\n account information.\n\nsender id\n item valid on android, which is GCM(google cloud message) project number id\n\n\nValuePotion\n:{\n    \nclientId\n:\n9666f9668a4db516c8aaea439464da44\n,\n    \nsecretKey\n:\n1c110ebcdeeda25d\n,\n    \nsenderId\n:\n111111\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nValuepotion\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginValuePotionLua.hpp\n\n#include \nPluginValuePotionLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginValuePotionLua(L);\n  register_all_PluginValuePotionLua_helper(L);\n}\n\n\n\n\nInitialize Valuepotion\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginValuePotion:init()\n\n\n\n\nUsing Valuepotion\n\n\nAfter initialization you can begin to use the Valuepotion functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginValuePotion:init()\nsdkbox.PluginValuePotion:setTest(true)\nif not sdkbox.PluginValuePotion:hasCachedInterstitial(\ndefault\n) then\n    sdkbox.PluginValuePotion:cacheInterstitial(\ndefault\n)\nend\n\nsdkbox.PluginValuePotion:trackEvent(\ntest event\n)\nsdkbox.PluginValuePotion:trackEvent(\ntest event with value 23\n, 23)\nsdkbox.PluginValuePotion:trackEvent(\ncategory\n, \nevent name\n, \nlabel\n, 45)\n\nsdkbox.PluginValuePotion:trackPurchaseEvent(\ntest event\n, 56, \nRMB\n, \norder id\n, \nproduct id\n)\nsdkbox.PluginValuePotion:trackPurchaseEvent(\ntest event\n, 67, \nUSD\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n)\nsdkbox.PluginValuePotion:trackPurchaseEvent(\ncategroy\n, \nevent name\n, \nlabel\n, 78, \nILY\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n);\n\nsdkbox.PluginValuePotion:userinfo(\nid\n, \nuser id\n)\nsdkbox.PluginValuePotion:userinfo(\nserverid\n, \nserver id\n)\nsdkbox.PluginValuePotion:userinfo(\nbirth\n, \n19991111\n) -- YYYYMMDD\nsdkbox.PluginValuePotion:userinfo(\ngender\n, \nM\n)\nsdkbox.PluginValuePotion:userinfo(\nlevel\n, \n9\n)\nsdkbox.PluginValuePotion:userinfo(\nfirends\n, \n3\n)\nsdkbox.PluginValuePotion:userinfo(\naccounttype\n, \nfacebook\n)\n\n\n\n\nCatch Valuepotion events (optional)\n\n\nThis allows you to catch the \nValuepotion\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginValuePotion:init()\nsdkbox.PluginValuePotion:setListener(function(data)\n        local event = args.event\n        print(\nreceive event:\n, event)\n        dump(args, \nvalue potion listener info:\n)\n    end)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginValuePotion:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginValuePotion:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginValuePotion:setTest(isTest)\n\n\n\n\n\n\nfor intergation test\n\n\n\n\nsdkbox.PluginValuePotion:hasCachedInterstitial(placement)\n\n\n\n\n\n\ncheck if ad is cached\n\n\n\n\nsdkbox.PluginValuePotion:cacheInterstitial(placement)\n\n\n\n\n\n\ncached ad\n\n\n\n\nsdkbox.PluginValuePotion:openInterstitial(placement)\n\n\n\n\n\n\nshow ad\n\n\n\n\nsdkbox.PluginValuePotion:trackEvent(eventName)\n\n\n\n\n\n\ntrack game event\n\n\n\n\nsdkbox.PluginValuePotion:trackEvent(eventName, eventValue)\n\n\n\n\nsdkbox.PluginValuePotion:trackEvent(category, eventName, label, eventValue)\n\n\n\n\nsdkbox.PluginValuePotion:trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId)\n\n\n\n\n\n\ntrack purchase event\n\n\n\n\nsdkbox.PluginValuePotion:trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId)\n\n\n\n\nsdkbox.PluginValuePotion:trackPurchaseEvent(category,\n                                             eventName,\n                                             label,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId)\n\n\n\n\nsdkbox.PluginValuePotion:userinfo(attribute, value)\n\n\n\n\n\n\nset user info\n\n\n\n\nListeners\n\n\nonCacheInterstitial(placement)\n\n\n\n\nonFailToCacheInterstitial(placement, errorMessage)\n\n\n\n\nonOpenInterstitial(placement)\n\n\n\n\nonFailToOpenInterstitial(placement, errorMessage)\n\n\n\n\nonCloseInterstitial(placement)\n\n\n\n\nonRequestOpenURL(placement, URL)\n\n\n\n\nonRequestPurchase(placement, name, productId, quantity, campaignId, contentId)\n\n\n\n\nonRequestRewards(placement, rewards)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nValuePotion\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginValuePotion.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nSystemConfiguration.framework\n\n\nCoreTelephony.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nvaluepotion.jar\n\n\nPluginValuePotion.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\nAndroid command-line:\n\ncocos2d/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\ncocos2d/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nAndroid command-line:\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\nAndroid Studio:\n\nframeworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nAndroid command-line:\n\nproj.android/libs\n\n\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n /\n\n\n\n\n\nThere are also a few necessary tags that also need to be added:\n\n\napplication\n\n\n......\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n            android:value=\n@integer/google_play_services_version\n /\n\n\n\n!-- Valuepotion Components --\n\n\n!-- for interstital ad interface --\n\n\nactivity\n        android:name=\ncom.valuepotion.sdk.VPInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n \n\n\n/activity\n\n\n\n!-- for CPI tracking --\n\n\nreceiver\n        android:name=\ncom.valuepotion.sdk.VPInstallReceiver\n\n        android:exported=\ntrue\n \n\n        \nintent-filter\n\n                \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n\n/receiver\n\n\n!-- Valuepotion Components End --\n\n\n.....\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Valuepotion with Lua"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/#valuepotion", 
            "text": "", 
            "title": "Valuepotion"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import valuepotion", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the ValuePotion configuration, you need to replace  client id  and  secret key  items with your specific  Valuepotion ID  account information. sender id  item valid on android, which is GCM(google cloud message) project number id  ValuePotion :{\n     clientId : 9666f9668a4db516c8aaea439464da44 ,\n     secretKey : 1c110ebcdeeda25d ,\n     senderId : 111111 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Valuepotion  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginValuePotionLua.hpp \n#include  PluginValuePotionLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginValuePotionLua(L);\n  register_all_PluginValuePotionLua_helper(L);\n}  Initialize Valuepotion  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginValuePotion:init()  Using Valuepotion  After initialization you can begin to use the Valuepotion functionality. Use  check  wherever you want from your code:  sdkbox.PluginValuePotion:init()\nsdkbox.PluginValuePotion:setTest(true)\nif not sdkbox.PluginValuePotion:hasCachedInterstitial( default ) then\n    sdkbox.PluginValuePotion:cacheInterstitial( default )\nend\n\nsdkbox.PluginValuePotion:trackEvent( test event )\nsdkbox.PluginValuePotion:trackEvent( test event with value 23 , 23)\nsdkbox.PluginValuePotion:trackEvent( category ,  event name ,  label , 45)\n\nsdkbox.PluginValuePotion:trackPurchaseEvent( test event , 56,  RMB ,  order id ,  product id )\nsdkbox.PluginValuePotion:trackPurchaseEvent( test event , 67,  USD ,  order id ,  product id ,  campaign id ,  content id )\nsdkbox.PluginValuePotion:trackPurchaseEvent( categroy ,  event name ,  label , 78,  ILY ,  order id ,  product id ,  campaign id ,  content id );\n\nsdkbox.PluginValuePotion:userinfo( id ,  user id )\nsdkbox.PluginValuePotion:userinfo( serverid ,  server id )\nsdkbox.PluginValuePotion:userinfo( birth ,  19991111 ) -- YYYYMMDD\nsdkbox.PluginValuePotion:userinfo( gender ,  M )\nsdkbox.PluginValuePotion:userinfo( level ,  9 )\nsdkbox.PluginValuePotion:userinfo( firends ,  3 )\nsdkbox.PluginValuePotion:userinfo( accounttype ,  facebook )  Catch Valuepotion events (optional)  This allows you to catch the  Valuepotion  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginValuePotion:init()\nsdkbox.PluginValuePotion:setListener(function(data)\n        local event = args.event\n        print( receive event: , event)\n        dump(args,  value potion listener info: )\n    end)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginValuePotion:init()   initialize the plugin instance.   sdkbox.PluginValuePotion:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginValuePotion:setTest(isTest)   for intergation test   sdkbox.PluginValuePotion:hasCachedInterstitial(placement)   check if ad is cached   sdkbox.PluginValuePotion:cacheInterstitial(placement)   cached ad   sdkbox.PluginValuePotion:openInterstitial(placement)   show ad   sdkbox.PluginValuePotion:trackEvent(eventName)   track game event   sdkbox.PluginValuePotion:trackEvent(eventName, eventValue)  sdkbox.PluginValuePotion:trackEvent(category, eventName, label, eventValue)  sdkbox.PluginValuePotion:trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId)   track purchase event   sdkbox.PluginValuePotion:trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId)  sdkbox.PluginValuePotion:trackPurchaseEvent(category,\n                                             eventName,\n                                             label,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId)  sdkbox.PluginValuePotion:userinfo(attribute, value)   set user info   Listeners  onCacheInterstitial(placement)  onFailToCacheInterstitial(placement, errorMessage)  onOpenInterstitial(placement)  onFailToOpenInterstitial(placement, errorMessage)  onCloseInterstitial(placement)  onRequestOpenURL(placement, URL)  onRequestPurchase(placement, name, productId, quantity, campaignId, contentId)  onRequestRewards(placement, rewards)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  ValuePotion  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginValuePotion.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  Foundation.framework  CoreGraphics.framework  SystemConfiguration.framework  CoreTelephony.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   valuepotion.jar  PluginValuePotion.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  Android command-line: cocos2d/cocos/platform/android/java/libs  Android Studio: cocos2d/cocos/platform/android/libcocos2dx/libs    If you're using cocos2d-js or lua copy the  jar  files to:  Android command-line: frameworks/cocos2d-x/cocos/platform/android/java/libs  Android Studio: frameworks/cocos2d-x/cocos/platform/android/libcocos2dx/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  Android command-line: proj.android/libs    Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE  /   There are also a few necessary tags that also need to be added:  application \n\n...... meta-data android:name= com.google.android.gms.version \n            android:value= @integer/google_play_services_version  /  !-- Valuepotion Components --  !-- for interstital ad interface --  activity\n        android:name= com.valuepotion.sdk.VPInterstitialActivity \n        android:theme= @android:style/Theme.Translucent    /activity  !-- for CPI tracking --  receiver\n        android:name= com.valuepotion.sdk.VPInstallReceiver \n        android:exported= true   \n         intent-filter \n                 action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter  /receiver  !-- Valuepotion Components End -- \n\n..... /application   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/valuepotion/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/", 
            "text": "Valuepotion\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import valuepotion\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the ValuePotion configuration, you need to replace \nclient id\n and \nsecret key\n items with your specific \nValuepotion ID\n account information.\n\nsender id\n item valid on android, which is GCM(google cloud message) project number id\n\n\nValuePotion\n:{\n    \nclientId\n:\n9666f9668a4db516c8aaea439464da44\n,\n    \nsecretKey\n:\n1c110ebcdeeda25d\n,\n    \nsenderId\n:\n111111\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nInitialize Valuepotion\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginValuePotion/PluginValuePotion.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginValuePotion::init();\n}\n\n\n\n\nUsing Valuepotion\n\n\nAfter initialization you can begin to use the Valuepotion functionality.\n\n\nsdkbox::PluginValuePotion::setTest(true);\nsdkbox::PluginValuePotion::hasCachedInterstitial(\ndefault\n);\n\nsdkbox::PluginValuePotion::trackEvent(\ntest event\n);\nsdkbox::PluginValuePotion::trackEvent(\ntest event with value 23\n, 23);\nsdkbox::PluginValuePotion::trackEvent(\ncategory\n, \nevent name\n, \nlabel\n, 45);\n\nsdkbox::PluginValuePotion::trackPurchaseEvent(\ntest event\n, 56, \nRMB\n, \norder id\n, \nproduct id\n);\nsdkbox::PluginValuePotion::trackPurchaseEvent(\ntest event\n, 67, \nUSD\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n);\nsdkbox::PluginValuePotion::trackPurchaseEvent(\ncategroy\n, \nevent name\n, \nlabel\n, 78, \nILY\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n);\n\nsdkbox::PluginValuePotion::userinfo(\nid\n, \nuser id\n);\nsdkbox::PluginValuePotion::userinfo(\nserverid\n, \nserver id\n);\nsdkbox::PluginValuePotion::userinfo(\nbirth\n, \n19991111\n); //YYYYMMDD\nsdkbox::PluginValuePotion::userinfo(\ngender\n, \nM\n);\nsdkbox::PluginValuePotion::userinfo(\nlevel\n, \n9\n);\nsdkbox::PluginValuePotion::userinfo(\nfriends\n, \n3\n);\nsdkbox::PluginValuePotion::userinfo(\naccounttype\n, \nfacebook\n);\n\n\n\n\nCatch Valuepotion events (optional)\n\n\nThis allows you to catch the \nValuepotion\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::ValuePotionListener\n\n\n\n\n#include \nPluginValuePotion/PluginValuePotion.h\n\nclass MyClass : public sdkbox::ValuePotionListener\n{\nprivate:\n    virtual void onCacheInterstitial(const char *placement);\n\n    virtual void onFailToCacheInterstitial(const char *placement, const char *errorMessage);\n\n    virtual void onOpenInterstitial(const char *placement);\n\n    virtual void onFailToOpenInterstitial(const char *placement, const char *errorMessage);\n\n    virtual void onCloseInterstitial(const char *placement);\n\n    virtual void onRequestOpenURL(const char *placement, const char *URL);\n\n    virtual void onRequestPurchase(const char *placement, const char *name, const char *productId, int quantity, const char *campaignId, const char *contentId);\n\n    virtual void onRequestRewards(const char *placement, std::vector\nsdkbox::ValuePotionReward\n rewards);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginValuePotion::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( ValuePotionListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic ValuePotionListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void setTest ( bool isTest ) ;\n\n\n\n\n\n\nfor intergation test\n\n\n\n\nstatic bool hasCachedInterstitial ( const char * placement ) ;\n\n\n\n\n\n\ncheck if ad is cached\n\n\n\n\nstatic void cacheInterstitial ( const char * placement ) ;\n\n\n\n\n\n\ncached ad\n\n\n\n\nstatic void openInterstitial ( const char * placement ) ;\n\n\n\n\n\n\nshow ad\n\n\n\n\nstatic void trackEvent ( const char * eventName ) ;\n\n\n\n\n\n\ntrack game event\n\n\n\n\nstatic void trackEvent ( const char * eventName , double eventValue ) ;\n\n\n\n\nstatic void trackEvent ( const char * category ,\n                         const char * eventName ,\n                         const char * label ,\n                         double eventValue ) ;\n\n\n\n\nstatic void trackPurchaseEvent ( const char * eventName ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ) ;\n\n\n\n\n\n\ntrack purchase event\n\n\n\n\nstatic void trackPurchaseEvent ( const char * eventName ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ,\n                                 const char * campaignId ,\n                                 const char * contentId ) ;\n\n\n\n\nstatic void trackPurchaseEvent ( const char * category ,\n                                 const char * eventName ,\n                                 const char * label ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ,\n                                 const char * campaignId ,\n                                 const char * contentId ) ;\n\n\n\n\nstatic void userinfo ( const char * attribute , const char * value ) ;\n\n\n\n\n\n\nset user info\n\n\n\n\nListeners\n\n\nvoid onCacheInterstitial ( const char * placement ) {\n\n\n\n\nvoid onFailToCacheInterstitial ( const char * placement ,\n                                 const char * errorMessage ) {\n\n\n\n\nvoid onOpenInterstitial ( const char * placement ) {\n\n\n\n\nvoid onFailToOpenInterstitial ( const char * placement ,\n                                const char * errorMessage ) {\n\n\n\n\nvoid onCloseInterstitial ( const char * placement ) {\n\n\n\n\nvoid onRequestOpenURL ( const char * placement , const char * URL ) {\n\n\n\n\nvoid onRequestPurchase ( const char * placement ,\n                         const char * name ,\n                         const char * productId ,\n                         int quantity ,\n                         const char * campaignId ,\n                         const char * contentId ) {\n\n\n\n\nvoid onRequestRewards ( const char * placement ,\n                        std::vector \nValuePotionReward\n rewards ) {\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nValuePotion\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginValuePotion.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nSystemConfiguration.framework\n\n\nCoreTelephony.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvaluepotion.jar\n\n\nPluginValuePotion.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n /\n\n\n\n\n\nThere are also a few necessary tags that also need to be added:\n\n\napplication\n\n\n......\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n            android:value=\n@integer/google_play_services_version\n /\n\n\n\n!-- Valuepotion Components --\n\n\n!-- for interstital ad interface --\n\n\nactivity\n        android:name=\ncom.valuepotion.sdk.VPInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n \n\n\n/activity\n\n\n\n!-- for CPI tracking --\n\n\nreceiver\n        android:name=\ncom.valuepotion.sdk.VPInstallReceiver\n\n        android:exported=\ntrue\n \n\n        \nintent-filter\n\n                \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n\n/receiver\n\n\n!-- Valuepotion Components End --\n\n\n.....\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Valuepotion with C++"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/#valuepotion", 
            "text": "", 
            "title": "Valuepotion"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import valuepotion", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the ValuePotion configuration, you need to replace  client id  and  secret key  items with your specific  Valuepotion ID  account information. sender id  item valid on android, which is GCM(google cloud message) project number id  ValuePotion :{\n     clientId : 9666f9668a4db516c8aaea439464da44 ,\n     secretKey : 1c110ebcdeeda25d ,\n     senderId : 111111 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/#usage", 
            "text": "Initialize Valuepotion  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginValuePotion/PluginValuePotion.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginValuePotion::init();\n}  Using Valuepotion  After initialization you can begin to use the Valuepotion functionality.  sdkbox::PluginValuePotion::setTest(true);\nsdkbox::PluginValuePotion::hasCachedInterstitial( default );\n\nsdkbox::PluginValuePotion::trackEvent( test event );\nsdkbox::PluginValuePotion::trackEvent( test event with value 23 , 23);\nsdkbox::PluginValuePotion::trackEvent( category ,  event name ,  label , 45);\n\nsdkbox::PluginValuePotion::trackPurchaseEvent( test event , 56,  RMB ,  order id ,  product id );\nsdkbox::PluginValuePotion::trackPurchaseEvent( test event , 67,  USD ,  order id ,  product id ,  campaign id ,  content id );\nsdkbox::PluginValuePotion::trackPurchaseEvent( categroy ,  event name ,  label , 78,  ILY ,  order id ,  product id ,  campaign id ,  content id );\n\nsdkbox::PluginValuePotion::userinfo( id ,  user id );\nsdkbox::PluginValuePotion::userinfo( serverid ,  server id );\nsdkbox::PluginValuePotion::userinfo( birth ,  19991111 ); //YYYYMMDD\nsdkbox::PluginValuePotion::userinfo( gender ,  M );\nsdkbox::PluginValuePotion::userinfo( level ,  9 );\nsdkbox::PluginValuePotion::userinfo( friends ,  3 );\nsdkbox::PluginValuePotion::userinfo( accounttype ,  facebook );  Catch Valuepotion events (optional)  This allows you to catch the  Valuepotion  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::ValuePotionListener   #include  PluginValuePotion/PluginValuePotion.h \nclass MyClass : public sdkbox::ValuePotionListener\n{\nprivate:\n    virtual void onCacheInterstitial(const char *placement);\n\n    virtual void onFailToCacheInterstitial(const char *placement, const char *errorMessage);\n\n    virtual void onOpenInterstitial(const char *placement);\n\n    virtual void onFailToOpenInterstitial(const char *placement, const char *errorMessage);\n\n    virtual void onCloseInterstitial(const char *placement);\n\n    virtual void onRequestOpenURL(const char *placement, const char *URL);\n\n    virtual void onRequestPurchase(const char *placement, const char *name, const char *productId, int quantity, const char *campaignId, const char *contentId);\n\n    virtual void onRequestRewards(const char *placement, std::vector sdkbox::ValuePotionReward  rewards);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginValuePotion::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( ValuePotionListener * listener ) ;   Set listener to listen for adcolony events   static ValuePotionListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void setTest ( bool isTest ) ;   for intergation test   static bool hasCachedInterstitial ( const char * placement ) ;   check if ad is cached   static void cacheInterstitial ( const char * placement ) ;   cached ad   static void openInterstitial ( const char * placement ) ;   show ad   static void trackEvent ( const char * eventName ) ;   track game event   static void trackEvent ( const char * eventName , double eventValue ) ;  static void trackEvent ( const char * category ,\n                         const char * eventName ,\n                         const char * label ,\n                         double eventValue ) ;  static void trackPurchaseEvent ( const char * eventName ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ) ;   track purchase event   static void trackPurchaseEvent ( const char * eventName ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ,\n                                 const char * campaignId ,\n                                 const char * contentId ) ;  static void trackPurchaseEvent ( const char * category ,\n                                 const char * eventName ,\n                                 const char * label ,\n                                 double revenueAmount ,\n                                 const char * currency ,\n                                 const char * orderId ,\n                                 const char * productId ,\n                                 const char * campaignId ,\n                                 const char * contentId ) ;  static void userinfo ( const char * attribute , const char * value ) ;   set user info   Listeners  void onCacheInterstitial ( const char * placement ) {  void onFailToCacheInterstitial ( const char * placement ,\n                                 const char * errorMessage ) {  void onOpenInterstitial ( const char * placement ) {  void onFailToOpenInterstitial ( const char * placement ,\n                                const char * errorMessage ) {  void onCloseInterstitial ( const char * placement ) {  void onRequestOpenURL ( const char * placement , const char * URL ) {  void onRequestPurchase ( const char * placement ,\n                         const char * name ,\n                         const char * productId ,\n                         int quantity ,\n                         const char * campaignId ,\n                         const char * contentId ) {  void onRequestRewards ( const char * placement ,\n                        std::vector  ValuePotionReward  rewards ) {", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  ValuePotion  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginValuePotion.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  Foundation.framework  CoreGraphics.framework  SystemConfiguration.framework  CoreTelephony.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   valuepotion.jar  PluginValuePotion.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE  /   There are also a few necessary tags that also need to be added:  application \n\n...... meta-data android:name= com.google.android.gms.version \n            android:value= @integer/google_play_services_version  /  !-- Valuepotion Components --  !-- for interstital ad interface --  activity\n        android:name= com.valuepotion.sdk.VPInterstitialActivity \n        android:theme= @android:style/Theme.Translucent    /activity  !-- for CPI tracking --  receiver\n        android:name= com.valuepotion.sdk.VPInstallReceiver \n        android:exported= true   \n         intent-filter \n                 action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter  /receiver  !-- Valuepotion Components End -- \n\n..... /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/valuepotion/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/", 
            "text": "Valuepotion\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import valuepotion\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the ValuePotion configuration, you need to replace \nclient id\n and \nsecret key\n items with your specific \nValuepotion ID\n account information.\n\nsender id\n item valid on android, which is GCM(google cloud message) project number id\n\n\nValuePotion\n:{\n    \nclientId\n:\n9666f9668a4db516c8aaea439464da44\n,\n    \nsecretKey\n:\n1c110ebcdeeda25d\n,\n    \nsenderId\n:\n111111\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Valuepotion JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginValuePotionJS.hpp\n\n#include \nPluginValuePotionJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginValuePotionJS);\nsc-\naddRegisterCallback(register_all_PluginValuePotionJS_helper);\n\n\n\n\nInitialize Valuepotion\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginValuePotion.init();\n\n\n\n\nUsing Valuepotion\n\n\nAfter initialization you can begin to use the Valuepotion functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginValuePotion.setTest(true)\nif (!sdkbox.PluginValuePotion.hasCachedInterstitial(\ndefault\n)) {\n    sdkbox.PluginValuePotion.cacheInterstitial(\ndefault\n)\n}\n\nsdkbox.PluginValuePotion.trackEvent(\ntest event\n)\nsdkbox.PluginValuePotion.trackEvent(\ntest event with value 23\n, 23)\nsdkbox.PluginValuePotion.trackEvent(\ncategory\n, \nevent name\n, \nlabel\n, 45)\n\nsdkbox.PluginValuePotion.trackPurchaseEvent(\ntest event\n, 56, \nRMB\n, \norder id\n, \nproduct id\n)\nsdkbox.PluginValuePotion.trackPurchaseEvent(\ntest event\n, 67, \nUSD\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n)\nsdkbox.PluginValuePotion.trackPurchaseEvent(\ncategroy\n, \nevent name\n, \nlabel\n, 78, \nILY\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n);\n\nsdkbox.PluginValuePotion.userinfo(\nid\n, \nuser id\n)\nsdkbox.PluginValuePotion.userinfo(\nserverid\n, \nserver id\n)\nsdkbox.PluginValuePotion.userinfo(\nbirth\n, \nbirther day\n)\nsdkbox.PluginValuePotion.userinfo(\ngender\n, \nM\n)\nsdkbox.PluginValuePotion.userinfo(\nlevel\n, \n9\n)\nsdkbox.PluginValuePotion.userinfo(\nfirends\n, \n3\n)\nsdkbox.PluginValuePotion.userinfo(\naccounttype\n, \nfacebook\n)\n\n\n\n\nCatch Valuepotion events (optional)\n\n\nThis allows you to catch the \nValuepotion\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginValuePotion.init();\nsdkbox.PluginValuePotion.setListener({\n    onCacheInterstitial: function(placement) { cc.log(\nonCacheInterstitial \n) },\n    onFailToCacheInterstitial: function(placement, errorMessage) { cc.log(\nonFailToCacheInterstitial \n) },\n    onOpenInterstitial: function(placement) { cc.log(\nonOpenInterstitial \n) },\n    onFailToOpenInterstitial: function(placement, errorMessage) { cc.log(\nonFailToOpenInterstitial \n) },\n    onCloseInterstitial: function(placement) { cc.log(\nonCloseInterstitial \n) },\n    onRequestOpenURL: function(placement, URL) { cc.log(\nonRequestOpenURL \n) },\n    onRequestPurchase: function(placement, name, productId, quantity, campaignId, contentId) {\n        cc.log(\nonRequestPurchase \n);\n    },\n    onRequestRewards: function(placement, rewards) {\n        cc.log(\nonRequestRewards \n);\n        for (var i = rewards.length - 1; i \n= 0; i--) {\n            var r = rewards[i]\n            cc.log(\n%d name:%s, q:%d\n, i, r.name, r.quantity)\n        };\n\n    }\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginValuePotion.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginValuePotion.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginValuePotion.setTest(isTest);\n\n\n\n\n\n\nfor intergation test\n\n\n\n\nsdkbox.PluginValuePotion.hasCachedInterstitial(placement);\n\n\n\n\n\n\ncheck if ad is cached\n\n\n\n\nsdkbox.PluginValuePotion.cacheInterstitial(placement);\n\n\n\n\n\n\ncached ad\n\n\n\n\nsdkbox.PluginValuePotion.openInterstitial(placement);\n\n\n\n\n\n\nshow ad\n\n\n\n\nsdkbox.PluginValuePotion.trackEvent(eventName);\n\n\n\n\n\n\ntrack game event\n\n\n\n\nsdkbox.PluginValuePotion.trackEvent(eventName, eventValue);\n\n\n\n\nsdkbox.PluginValuePotion.trackEvent(category, eventName, label, eventValue);\n\n\n\n\nsdkbox.PluginValuePotion.trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId);\n\n\n\n\n\n\ntrack purchase event\n\n\n\n\nsdkbox.PluginValuePotion.trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId);\n\n\n\n\nsdkbox.PluginValuePotion.trackPurchaseEvent(category,\n                                             eventName,\n                                             label,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId);\n\n\n\n\nsdkbox.PluginValuePotion.userinfo(attribute, value);\n\n\n\n\n\n\nset user info\n\n\n\n\nListeners\n\n\nonCacheInterstitial(placement);\n\n\n\n\nonFailToCacheInterstitial(placement, errorMessage);\n\n\n\n\nonOpenInterstitial(placement);\n\n\n\n\nonFailToOpenInterstitial(placement, errorMessage);\n\n\n\n\nonCloseInterstitial(placement);\n\n\n\n\nonRequestOpenURL(placement, URL);\n\n\n\n\nonRequestPurchase(placement, name, productId, quantity, campaignId, contentId);\n\n\n\n\nonRequestRewards(placement, rewards);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nValuePotion\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginValuePotion.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nSystemConfiguration.framework\n\n\nCoreTelephony.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvaluepotion.jar\n\n\nPluginValuePotion.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n /\n\n\n\n\n\nThere are also a few necessary tags that also need to be added:\n\n\napplication\n\n\n......\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n            android:value=\n@integer/google_play_services_version\n /\n\n\n\n!-- Valuepotion Components --\n\n\n!-- for interstital ad interface --\n\n\nactivity\n        android:name=\ncom.valuepotion.sdk.VPInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n \n\n\n/activity\n\n\n\n!-- for CPI tracking --\n\n\nreceiver\n        android:name=\ncom.valuepotion.sdk.VPInstallReceiver\n\n        android:exported=\ntrue\n \n\n        \nintent-filter\n\n                \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n\n/receiver\n\n\n!-- Valuepotion Components End --\n\n\n.....\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Valuepotion with Javascript"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/#valuepotion", 
            "text": "", 
            "title": "Valuepotion"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import valuepotion", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the ValuePotion configuration, you need to replace  client id  and  secret key  items with your specific  Valuepotion ID  account information. sender id  item valid on android, which is GCM(google cloud message) project number id  ValuePotion :{\n     clientId : 9666f9668a4db516c8aaea439464da44 ,\n     secretKey : 1c110ebcdeeda25d ,\n     senderId : 111111 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Valuepotion JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginValuePotionJS.hpp \n#include  PluginValuePotionJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginValuePotionJS);\nsc- addRegisterCallback(register_all_PluginValuePotionJS_helper);  Initialize Valuepotion  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginValuePotion.init();  Using Valuepotion  After initialization you can begin to use the Valuepotion functionality. Use  check  wherever you want from your code:  sdkbox.PluginValuePotion.setTest(true)\nif (!sdkbox.PluginValuePotion.hasCachedInterstitial( default )) {\n    sdkbox.PluginValuePotion.cacheInterstitial( default )\n}\n\nsdkbox.PluginValuePotion.trackEvent( test event )\nsdkbox.PluginValuePotion.trackEvent( test event with value 23 , 23)\nsdkbox.PluginValuePotion.trackEvent( category ,  event name ,  label , 45)\n\nsdkbox.PluginValuePotion.trackPurchaseEvent( test event , 56,  RMB ,  order id ,  product id )\nsdkbox.PluginValuePotion.trackPurchaseEvent( test event , 67,  USD ,  order id ,  product id ,  campaign id ,  content id )\nsdkbox.PluginValuePotion.trackPurchaseEvent( categroy ,  event name ,  label , 78,  ILY ,  order id ,  product id ,  campaign id ,  content id );\n\nsdkbox.PluginValuePotion.userinfo( id ,  user id )\nsdkbox.PluginValuePotion.userinfo( serverid ,  server id )\nsdkbox.PluginValuePotion.userinfo( birth ,  birther day )\nsdkbox.PluginValuePotion.userinfo( gender ,  M )\nsdkbox.PluginValuePotion.userinfo( level ,  9 )\nsdkbox.PluginValuePotion.userinfo( firends ,  3 )\nsdkbox.PluginValuePotion.userinfo( accounttype ,  facebook )  Catch Valuepotion events (optional)  This allows you to catch the  Valuepotion  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginValuePotion.init();\nsdkbox.PluginValuePotion.setListener({\n    onCacheInterstitial: function(placement) { cc.log( onCacheInterstitial  ) },\n    onFailToCacheInterstitial: function(placement, errorMessage) { cc.log( onFailToCacheInterstitial  ) },\n    onOpenInterstitial: function(placement) { cc.log( onOpenInterstitial  ) },\n    onFailToOpenInterstitial: function(placement, errorMessage) { cc.log( onFailToOpenInterstitial  ) },\n    onCloseInterstitial: function(placement) { cc.log( onCloseInterstitial  ) },\n    onRequestOpenURL: function(placement, URL) { cc.log( onRequestOpenURL  ) },\n    onRequestPurchase: function(placement, name, productId, quantity, campaignId, contentId) {\n        cc.log( onRequestPurchase  );\n    },\n    onRequestRewards: function(placement, rewards) {\n        cc.log( onRequestRewards  );\n        for (var i = rewards.length - 1; i  = 0; i--) {\n            var r = rewards[i]\n            cc.log( %d name:%s, q:%d , i, r.name, r.quantity)\n        };\n\n    }\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginValuePotion.init();   initialize the plugin instance.   sdkbox.PluginValuePotion.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginValuePotion.setTest(isTest);   for intergation test   sdkbox.PluginValuePotion.hasCachedInterstitial(placement);   check if ad is cached   sdkbox.PluginValuePotion.cacheInterstitial(placement);   cached ad   sdkbox.PluginValuePotion.openInterstitial(placement);   show ad   sdkbox.PluginValuePotion.trackEvent(eventName);   track game event   sdkbox.PluginValuePotion.trackEvent(eventName, eventValue);  sdkbox.PluginValuePotion.trackEvent(category, eventName, label, eventValue);  sdkbox.PluginValuePotion.trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId);   track purchase event   sdkbox.PluginValuePotion.trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId);  sdkbox.PluginValuePotion.trackPurchaseEvent(category,\n                                             eventName,\n                                             label,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId);  sdkbox.PluginValuePotion.userinfo(attribute, value);   set user info   Listeners  onCacheInterstitial(placement);  onFailToCacheInterstitial(placement, errorMessage);  onOpenInterstitial(placement);  onFailToOpenInterstitial(placement, errorMessage);  onCloseInterstitial(placement);  onRequestOpenURL(placement, URL);  onRequestPurchase(placement, name, productId, quantity, campaignId, contentId);  onRequestRewards(placement, rewards);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  ValuePotion  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginValuePotion.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  Foundation.framework  CoreGraphics.framework  SystemConfiguration.framework  CoreTelephony.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   valuepotion.jar  PluginValuePotion.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE  /   There are also a few necessary tags that also need to be added:  application \n\n...... meta-data android:name= com.google.android.gms.version \n            android:value= @integer/google_play_services_version  /  !-- Valuepotion Components --  !-- for interstital ad interface --  activity\n        android:name= com.valuepotion.sdk.VPInterstitialActivity \n        android:theme= @android:style/Theme.Translucent    /activity  !-- for CPI tracking --  receiver\n        android:name= com.valuepotion.sdk.VPInstallReceiver \n        android:exported= true   \n         intent-filter \n                 action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter  /receiver  !-- Valuepotion Components End -- \n\n..... /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/valuepotion/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/", 
            "text": "Valuepotion\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import valuepotion\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the ValuePotion configuration, you need to replace \nclient id\n and \nsecret key\n items with your specific \nValuepotion ID\n account information.\n\nsender id\n item valid on android, which is GCM(google cloud message) project number id\n\n\nValuePotion\n:{\n    \nclientId\n:\n9666f9668a4db516c8aaea439464da44\n,\n    \nsecretKey\n:\n1c110ebcdeeda25d\n,\n    \nsenderId\n:\n111111\n\n}\n\n\n\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nValuepotion\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginValuePotionLua.hpp\n\n#include \nPluginValuePotionLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginValuePotionLua(L);\n  register_all_PluginValuePotionLua_helper(L);\n}\n\n\n\n\nInitialize Valuepotion\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginValuePotion:init()\n\n\n\n\nUsing Valuepotion\n\n\nAfter initialization you can begin to use the Valuepotion functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginValuePotion:init()\nsdkbox.PluginValuePotion:setTest(true)\nif not sdkbox.PluginValuePotion:hasCachedInterstitial(\ndefault\n) then\n    sdkbox.PluginValuePotion:cacheInterstitial(\ndefault\n)\nend\n\nsdkbox.PluginValuePotion:trackEvent(\ntest event\n)\nsdkbox.PluginValuePotion:trackEvent(\ntest event with value 23\n, 23)\nsdkbox.PluginValuePotion:trackEvent(\ncategory\n, \nevent name\n, \nlabel\n, 45)\n\nsdkbox.PluginValuePotion:trackPurchaseEvent(\ntest event\n, 56, \nRMB\n, \norder id\n, \nproduct id\n)\nsdkbox.PluginValuePotion:trackPurchaseEvent(\ntest event\n, 67, \nUSD\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n)\nsdkbox.PluginValuePotion:trackPurchaseEvent(\ncategroy\n, \nevent name\n, \nlabel\n, 78, \nILY\n, \norder id\n, \nproduct id\n, \ncampaign id\n, \ncontent id\n);\n\nsdkbox.PluginValuePotion:userinfo(\nid\n, \nuser id\n)\nsdkbox.PluginValuePotion:userinfo(\nserverid\n, \nserver id\n)\nsdkbox.PluginValuePotion:userinfo(\nbirth\n, \n19991111\n) -- YYYYMMDD\nsdkbox.PluginValuePotion:userinfo(\ngender\n, \nM\n)\nsdkbox.PluginValuePotion:userinfo(\nlevel\n, \n9\n)\nsdkbox.PluginValuePotion:userinfo(\nfirends\n, \n3\n)\nsdkbox.PluginValuePotion:userinfo(\naccounttype\n, \nfacebook\n)\n\n\n\n\nCatch Valuepotion events (optional)\n\n\nThis allows you to catch the \nValuepotion\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginValuePotion:init()\nsdkbox.PluginValuePotion:setListener(function(data)\n        local event = args.event\n        print(\nreceive event:\n, event)\n        dump(args, \nvalue potion listener info:\n)\n    end)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginValuePotion:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginValuePotion:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginValuePotion:setTest(isTest)\n\n\n\n\n\n\nfor intergation test\n\n\n\n\nsdkbox.PluginValuePotion:hasCachedInterstitial(placement)\n\n\n\n\n\n\ncheck if ad is cached\n\n\n\n\nsdkbox.PluginValuePotion:cacheInterstitial(placement)\n\n\n\n\n\n\ncached ad\n\n\n\n\nsdkbox.PluginValuePotion:openInterstitial(placement)\n\n\n\n\n\n\nshow ad\n\n\n\n\nsdkbox.PluginValuePotion:trackEvent(eventName)\n\n\n\n\n\n\ntrack game event\n\n\n\n\nsdkbox.PluginValuePotion:trackEvent(eventName, eventValue)\n\n\n\n\nsdkbox.PluginValuePotion:trackEvent(category, eventName, label, eventValue)\n\n\n\n\nsdkbox.PluginValuePotion:trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId)\n\n\n\n\n\n\ntrack purchase event\n\n\n\n\nsdkbox.PluginValuePotion:trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId)\n\n\n\n\nsdkbox.PluginValuePotion:trackPurchaseEvent(category,\n                                             eventName,\n                                             label,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId)\n\n\n\n\nsdkbox.PluginValuePotion:userinfo(attribute, value)\n\n\n\n\n\n\nset user info\n\n\n\n\nListeners\n\n\nonCacheInterstitial(placement)\n\n\n\n\nonFailToCacheInterstitial(placement, errorMessage)\n\n\n\n\nonOpenInterstitial(placement)\n\n\n\n\nonFailToOpenInterstitial(placement, errorMessage)\n\n\n\n\nonCloseInterstitial(placement)\n\n\n\n\nonRequestOpenURL(placement, URL)\n\n\n\n\nonRequestPurchase(placement, name, productId, quantity, campaignId, contentId)\n\n\n\n\nonRequestRewards(placement, rewards)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nValuePotion\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginValuePotion.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nSystemConfiguration.framework\n\n\nCoreTelephony.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvaluepotion.jar\n\n\nPluginValuePotion.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_EXTERNAL_STORAGE\n /\n\n\n\n\n\nThere are also a few necessary tags that also need to be added:\n\n\napplication\n\n\n......\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n            android:value=\n@integer/google_play_services_version\n /\n\n\n\n!-- Valuepotion Components --\n\n\n!-- for interstital ad interface --\n\n\nactivity\n        android:name=\ncom.valuepotion.sdk.VPInterstitialActivity\n\n        android:theme=\n@android:style/Theme.Translucent\n \n\n\n/activity\n\n\n\n!-- for CPI tracking --\n\n\nreceiver\n        android:name=\ncom.valuepotion.sdk.VPInstallReceiver\n\n        android:exported=\ntrue\n \n\n        \nintent-filter\n\n                \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n\n/receiver\n\n\n!-- Valuepotion Components End --\n\n\n.....\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Valuepotion with Lua"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/#valuepotion", 
            "text": "", 
            "title": "Valuepotion"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Valuepotion plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import valuepotion", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the ValuePotion configuration, you need to replace  client id  and  secret key  items with your specific  Valuepotion ID  account information. sender id  item valid on android, which is GCM(google cloud message) project number id  ValuePotion :{\n     clientId : 9666f9668a4db516c8aaea439464da44 ,\n     secretKey : 1c110ebcdeeda25d ,\n     senderId : 111111 \n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Valuepotion  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginValuePotionLua.hpp \n#include  PluginValuePotionLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginValuePotionLua(L);\n  register_all_PluginValuePotionLua_helper(L);\n}  Initialize Valuepotion  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginValuePotion:init()  Using Valuepotion  After initialization you can begin to use the Valuepotion functionality. Use  check  wherever you want from your code:  sdkbox.PluginValuePotion:init()\nsdkbox.PluginValuePotion:setTest(true)\nif not sdkbox.PluginValuePotion:hasCachedInterstitial( default ) then\n    sdkbox.PluginValuePotion:cacheInterstitial( default )\nend\n\nsdkbox.PluginValuePotion:trackEvent( test event )\nsdkbox.PluginValuePotion:trackEvent( test event with value 23 , 23)\nsdkbox.PluginValuePotion:trackEvent( category ,  event name ,  label , 45)\n\nsdkbox.PluginValuePotion:trackPurchaseEvent( test event , 56,  RMB ,  order id ,  product id )\nsdkbox.PluginValuePotion:trackPurchaseEvent( test event , 67,  USD ,  order id ,  product id ,  campaign id ,  content id )\nsdkbox.PluginValuePotion:trackPurchaseEvent( categroy ,  event name ,  label , 78,  ILY ,  order id ,  product id ,  campaign id ,  content id );\n\nsdkbox.PluginValuePotion:userinfo( id ,  user id )\nsdkbox.PluginValuePotion:userinfo( serverid ,  server id )\nsdkbox.PluginValuePotion:userinfo( birth ,  19991111 ) -- YYYYMMDD\nsdkbox.PluginValuePotion:userinfo( gender ,  M )\nsdkbox.PluginValuePotion:userinfo( level ,  9 )\nsdkbox.PluginValuePotion:userinfo( firends ,  3 )\nsdkbox.PluginValuePotion:userinfo( accounttype ,  facebook )  Catch Valuepotion events (optional)  This allows you to catch the  Valuepotion  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginValuePotion:init()\nsdkbox.PluginValuePotion:setListener(function(data)\n        local event = args.event\n        print( receive event: , event)\n        dump(args,  value potion listener info: )\n    end)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginValuePotion:init()   initialize the plugin instance.   sdkbox.PluginValuePotion:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginValuePotion:setTest(isTest)   for intergation test   sdkbox.PluginValuePotion:hasCachedInterstitial(placement)   check if ad is cached   sdkbox.PluginValuePotion:cacheInterstitial(placement)   cached ad   sdkbox.PluginValuePotion:openInterstitial(placement)   show ad   sdkbox.PluginValuePotion:trackEvent(eventName)   track game event   sdkbox.PluginValuePotion:trackEvent(eventName, eventValue)  sdkbox.PluginValuePotion:trackEvent(category, eventName, label, eventValue)  sdkbox.PluginValuePotion:trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId)   track purchase event   sdkbox.PluginValuePotion:trackPurchaseEvent(eventName,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId)  sdkbox.PluginValuePotion:trackPurchaseEvent(category,\n                                             eventName,\n                                             label,\n                                             revenueAmount,\n                                             currency,\n                                             orderId,\n                                             productId,\n                                             campaignId,\n                                             contentId)  sdkbox.PluginValuePotion:userinfo(attribute, value)   set user info   Listeners  onCacheInterstitial(placement)  onFailToCacheInterstitial(placement, errorMessage)  onOpenInterstitial(placement)  onFailToOpenInterstitial(placement, errorMessage)  onCloseInterstitial(placement)  onRequestOpenURL(placement, URL)  onRequestPurchase(placement, name, productId, quantity, campaignId, contentId)  onRequestRewards(placement, rewards)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  ValuePotion  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginValuePotion.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  Foundation.framework  CoreGraphics.framework  SystemConfiguration.framework  CoreTelephony.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   valuepotion.jar  PluginValuePotion.jar  sdkbox.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.READ_EXTERNAL_STORAGE  /   There are also a few necessary tags that also need to be added:  application \n\n...... meta-data android:name= com.google.android.gms.version \n            android:value= @integer/google_play_services_version  /  !-- Valuepotion Components --  !-- for interstital ad interface --  activity\n        android:name= com.valuepotion.sdk.VPInterstitialActivity \n        android:theme= @android:style/Theme.Translucent    /activity  !-- for CPI tracking --  receiver\n        android:name= com.valuepotion.sdk.VPInstallReceiver \n        android:exported= true   \n         intent-filter \n                 action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter  /receiver  !-- Valuepotion Components End -- \n\n..... /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginValuePotion\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvaluepotion)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/valuepotion/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep public class com.valuepotion.** { *; }\n-dontwarn com.valuepotion.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. Example:\n\n\n#include \nPluginVungle/PluginVungle.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox::PluginVungle::show(\nvideo\n);\nsdkbox::PluginVungle::show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can pause or resume\nyour game.\n\n\n\n\nAllow your class to extend \nsdkbox::VungleListener\n\n\n\n\n#include \nPluginVungle/PluginVungle.h\n\nclass MyClass : public sdkbox::VungleListener, public Ref\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleAdViewed(bool isComplete);\n  void onVungleAdReward(const std::string\n name) {\n        cocos2d::Director::getInstance()-\ngetScheduler()-\nperformFunctionInCocosThread([=](){\n            //change ui\n        })\n    }\n}\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\n\n\nCreate a \nlistener\n that handles callbacks (optional):\n\n\n\n\nsdkbox::PluginVungle::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nstatic void setListener ( VungleListener * listener ) ;\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nstatic VungleListener * getListener ( ) ;\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nstatic void setDebug ( bool enable ) ;\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nstatic bool isCacheAvailable ( ) ;\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nvoid onVungleCacheAvailable ( );\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nvoid onVungleStarted ( );\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nvoid onVungleFinished ( );\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nvoid onVungleAdViewed ( bool isComplete );\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nvoid onVungleAdReward( std::string adName );\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproject_root\n/libs\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Vungle with C++"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}   Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#usage", 
            "text": "Initialize Vungle  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers. Example:  #include  PluginVungle/PluginVungle.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox::PluginVungle::show( video );\nsdkbox::PluginVungle::show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can pause or resume\nyour game.   Allow your class to extend  sdkbox::VungleListener   #include  PluginVungle/PluginVungle.h \nclass MyClass : public sdkbox::VungleListener, public Ref\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleAdViewed(bool isComplete);\n  void onVungleAdReward(const std::string  name) {\n        cocos2d::Director::getInstance()- getScheduler()- performFunctionInCocosThread([=](){\n            //change ui\n        })\n    }\n}  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.   Create a  listener  that handles callbacks (optional):   sdkbox::PluginVungle::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   show ad with a provided name.   static void setListener ( VungleListener * listener ) ;   set provided listener.   static VungleListener * getListener ( ) ;   get provided listener.   static void removeListener ( ) ;   remove listeners.   static void setDebug ( bool enable ) ;   enable or disable debug mode.   static bool isCacheAvailable ( ) ;   is there a cached video available.   static void setUserID ( const std::string   userID ) ;   sets the userID for rewarded ads.   Listeners  void onVungleCacheAvailable ( );   ad cache is available.   void onVungleStarted ( );   Vungle is running and available.   void onVungleFinished ( );   Vungle is not running/has stopped.   void onVungleAdViewed ( bool isComplete );   Vungle ad has been viewed.   void onVungleAdReward( std::string adName );   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   project_root /libs  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v3-js/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Vungle JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginVungleJS.hpp\n\n#include \nPluginVungleJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginVungleJS);\nsc-\naddRegisterCallback(register_all_PluginVungleJS_helper);\n\n\n\n\nInitialize Vungle\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle.show(\nvideo\n);\nsdkbox.PluginVungle.show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log(\nonVungleCacheAvailable\n) },\n    onVungleStarted : function() { cc.log(\nonVungleStarted\n) },\n    onVungleFinished : function() { cc.log(\nonVungleFinished\n) },\n    onVungleAdViewed : function(isComplete) { cc.log(\nonVungleAdViewed\n + isComplete) },\n    onVungleAdReward : function(name) { cc.log(\nreward received:\n + name) }\n})\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle.show(name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle.setDebug(enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle.isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle.setUserID(userID);\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable();\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted();\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished();\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed(isComplete);\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nonVungleAdReward(adName);\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproject_root\n/libs\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Vungle with Javascript"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}   Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Vungle JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginVungleJS.hpp \n#include  PluginVungleJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginVungleJS);\nsc- addRegisterCallback(register_all_PluginVungleJS_helper);  Initialize Vungle  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginVungle.init();  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle.show( video );\nsdkbox.PluginVungle.show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log( onVungleCacheAvailable ) },\n    onVungleStarted : function() { cc.log( onVungleStarted ) },\n    onVungleFinished : function() { cc.log( onVungleFinished ) },\n    onVungleAdViewed : function(isComplete) { cc.log( onVungleAdViewed  + isComplete) },\n    onVungleAdReward : function(name) { cc.log( reward received:  + name) }\n})  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle.init();   initialize the plugin instance.   sdkbox.PluginVungle.show(name);   show ad with a provided name.   sdkbox.PluginVungle.setDebug(enable);   enable or disable debug mode.   sdkbox.PluginVungle.isCacheAvailable();   is there a cached video available.   sdkbox.PluginVungle.setUserID(userID);   sets the userID for rewarded ads.   Listeners  onVungleCacheAvailable();   ad cache is available.   onVungleStarted();   Vungle is running and available.   onVungleFinished();   Vungle is not running/has stopped.   onVungleAdViewed(isComplete);   Vungle ad has been viewed.   onVungleAdReward(adName);   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   project_root /libs  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginVungle:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle:show(\nvideo\n)\nsdkbox.PluginVungle:show(\nreward\n)\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle:setListener(function(name, args)\n    if \nonVungleCacheAvailable\n == name then\n        print(\nonVungleCacheAvailable\n)\n    elseif \nonVungleStarted\n ==  name then\n        print(\nonVungleStarted\n)\n    elseif \nonVungleFinished\n ==  name then\n        print(\nonVungleFinished\n)\n    elseif \nonVungleAdViewed\n ==  name then\n        print(\nonVungleAdViewed:\n, args)\n    elseif \nonVungleAdReward\n ==  name then\n        print(\nonVungleAdReward:\n, args)\n    end\nend)\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle:show(name)\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle:setDebug(enable)\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle:isCacheAvailable()\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle:setUserID(userID)\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable()\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted()\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished()\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed(isComplete)\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nonVungleAdReward(adName);\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproject_root\n/libs\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Vungle with Lua"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}   Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#usage", 
            "text": "Initialize Vungle   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginVungle:init()  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle:show( video )\nsdkbox.PluginVungle:show( reward )  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle:setListener(function(name, args)\n    if  onVungleCacheAvailable  == name then\n        print( onVungleCacheAvailable )\n    elseif  onVungleStarted  ==  name then\n        print( onVungleStarted )\n    elseif  onVungleFinished  ==  name then\n        print( onVungleFinished )\n    elseif  onVungleAdViewed  ==  name then\n        print( onVungleAdViewed: , args)\n    elseif  onVungleAdReward  ==  name then\n        print( onVungleAdReward: , args)\n    end\nend)  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle:init()   initialize the plugin instance.   sdkbox.PluginVungle:show(name)   show ad with a provided name.   sdkbox.PluginVungle:setDebug(enable)   enable or disable debug mode.   sdkbox.PluginVungle:isCacheAvailable()   is there a cached video available.   sdkbox.PluginVungle:setUserID(userID)   sets the userID for rewarded ads.   Listeners  onVungleCacheAvailable()   ad cache is available.   onVungleStarted()   Vungle is running and available.   onVungleFinished()   Vungle is not running/has stopped.   onVungleAdViewed(isComplete)   Vungle ad has been viewed.   onVungleAdReward(adName);   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   project_root /libs  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. Example:\n\n\n#include \nPluginVungle/PluginVungle.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox::PluginVungle::show(\nvideo\n);\nsdkbox::PluginVungle::show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can pause or resume\nyour game.\n\n\n\n\nAllow your class to extend \nsdkbox::VungleListener\n\n\n\n\n#include \nPluginVungle/PluginVungle.h\n\nclass MyClass : public sdkbox::VungleListener, public Ref\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleAdViewed(bool isComplete);\n  void onVungleAdReward(const std::string\n name) {\n        cocos2d::Director::getInstance()-\ngetScheduler()-\nperformFunctionInCocosThread([=](){\n            //change ui\n        })\n    }\n}\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\n\n\nCreate a \nlistener\n that handles callbacks (optional):\n\n\n\n\nsdkbox::PluginVungle::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nstatic void setListener ( VungleListener * listener ) ;\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nstatic VungleListener * getListener ( ) ;\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nstatic void setDebug ( bool enable ) ;\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nstatic bool isCacheAvailable ( ) ;\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nvoid onVungleCacheAvailable ( );\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nvoid onVungleStarted ( );\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nvoid onVungleFinished ( );\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nvoid onVungleAdViewed ( bool isComplete );\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nvoid onVungleAdReward( std::string adName );\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Vungle with C++"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}   Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#usage", 
            "text": "Initialize Vungle  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers. Example:  #include  PluginVungle/PluginVungle.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox::PluginVungle::show( video );\nsdkbox::PluginVungle::show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can pause or resume\nyour game.   Allow your class to extend  sdkbox::VungleListener   #include  PluginVungle/PluginVungle.h \nclass MyClass : public sdkbox::VungleListener, public Ref\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleAdViewed(bool isComplete);\n  void onVungleAdReward(const std::string  name) {\n        cocos2d::Director::getInstance()- getScheduler()- performFunctionInCocosThread([=](){\n            //change ui\n        })\n    }\n}  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.   Create a  listener  that handles callbacks (optional):   sdkbox::PluginVungle::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   show ad with a provided name.   static void setListener ( VungleListener * listener ) ;   set provided listener.   static VungleListener * getListener ( ) ;   get provided listener.   static void removeListener ( ) ;   remove listeners.   static void setDebug ( bool enable ) ;   enable or disable debug mode.   static bool isCacheAvailable ( ) ;   is there a cached video available.   static void setUserID ( const std::string   userID ) ;   sets the userID for rewarded ads.   Listeners  void onVungleCacheAvailable ( );   ad cache is available.   void onVungleStarted ( );   Vungle is running and available.   void onVungleFinished ( );   Vungle is not running/has stopped.   void onVungleAdViewed ( bool isComplete );   Vungle ad has been viewed.   void onVungleAdReward( std::string adName );   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v2-js/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Vungle JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginVungleJS.hpp\n\n#include \nPluginVungleJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginVungleJS);\nsc-\naddRegisterCallback(register_all_PluginVungleJS_helper);\n\n\n\n\nInitialize Vungle\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle.show(\nvideo\n);\nsdkbox.PluginVungle.show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log(\nonVungleCacheAvailable\n) },\n    onVungleStarted : function() { cc.log(\nonVungleStarted\n) },\n    onVungleFinished : function() { cc.log(\nonVungleFinished\n) },\n    onVungleAdViewed : function(isComplete) { cc.log(\nonVungleAdViewed\n + isComplete) },\n    onVungleAdReward : function(name) { cc.log(\nreward received:\n + name) }\n})\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle.show(name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle.setDebug(enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle.isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle.setUserID(userID);\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable();\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted();\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished();\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed(isComplete);\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nonVungleAdReward(adName);\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Vungle with Javascript"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}   Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Vungle JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginVungleJS.hpp \n#include  PluginVungleJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginVungleJS);\nsc- addRegisterCallback(register_all_PluginVungleJS_helper);  Initialize Vungle  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginVungle.init();  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle.show( video );\nsdkbox.PluginVungle.show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log( onVungleCacheAvailable ) },\n    onVungleStarted : function() { cc.log( onVungleStarted ) },\n    onVungleFinished : function() { cc.log( onVungleFinished ) },\n    onVungleAdViewed : function(isComplete) { cc.log( onVungleAdViewed  + isComplete) },\n    onVungleAdReward : function(name) { cc.log( reward received:  + name) }\n})  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle.init();   initialize the plugin instance.   sdkbox.PluginVungle.show(name);   show ad with a provided name.   sdkbox.PluginVungle.setDebug(enable);   enable or disable debug mode.   sdkbox.PluginVungle.isCacheAvailable();   is there a cached video available.   sdkbox.PluginVungle.setUserID(userID);   sets the userID for rewarded ads.   Listeners  onVungleCacheAvailable();   ad cache is available.   onVungleStarted();   Vungle is running and available.   onVungleFinished();   Vungle is not running/has stopped.   onVungleAdViewed(isComplete);   Vungle ad has been viewed.   onVungleAdReward(adName);   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginVungle:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle:show(\nvideo\n)\nsdkbox.PluginVungle:show(\nreward\n)\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle:setListener(function(name, args)\n    if \nonVungleCacheAvailable\n == name then\n        print(\nonVungleCacheAvailable\n)\n    elseif \nonVungleStarted\n ==  name then\n        print(\nonVungleStarted\n)\n    elseif \nonVungleFinished\n ==  name then\n        print(\nonVungleFinished\n)\n    elseif \nonVungleAdViewed\n ==  name then\n        print(\nonVungleAdViewed:\n, args)\n    elseif \nonVungleAdReward\n ==  name then\n        print(\nonVungleAdReward:\n, args)\n    end\nend)\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle:show(name)\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle:setDebug(enable)\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle:isCacheAvailable()\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle:setUserID(userID)\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable()\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted()\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished()\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed(isComplete)\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nonVungleAdReward(adName);\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Vungle with Lua"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup the SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}   Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#usage", 
            "text": "Initialize Vungle   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginVungle:init()  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle:show( video )\nsdkbox.PluginVungle:show( reward )  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle:setListener(function(name, args)\n    if  onVungleCacheAvailable  == name then\n        print( onVungleCacheAvailable )\n    elseif  onVungleStarted  ==  name then\n        print( onVungleStarted )\n    elseif  onVungleFinished  ==  name then\n        print( onVungleFinished )\n    elseif  onVungleAdViewed  ==  name then\n        print( onVungleAdViewed: , args)\n    elseif  onVungleAdReward  ==  name then\n        print( onVungleAdReward: , args)\n    end\nend)  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle:init()   initialize the plugin instance.   sdkbox.PluginVungle:show(name)   show ad with a provided name.   sdkbox.PluginVungle:setDebug(enable)   enable or disable debug mode.   sdkbox.PluginVungle:isCacheAvailable()   is there a cached video available.   sdkbox.PluginVungle:setUserID(userID)   sets the userID for rewarded ads.   Listeners  onVungleCacheAvailable()   ad cache is available.   onVungleStarted()   Vungle is running and available.   onVungleFinished()   Vungle is not running/has stopped.   onVungleAdViewed(isComplete)   Vungle ad has been viewed.   onVungleAdReward(adName);   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar   Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n# vungle\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n-keepattributes *Annotation*\n-keepattributes Signature\n-keep class dagger.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/", 
            "text": "Youtube\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Youtube plugin.\n\n\n$ sdkbox import youtube\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nIf you want to display youtube vidoe in your app, you have to register a new youtube API key \nhere\n and put in \ndeveloper_key\n section of the \nsdkbox_config.json\n\n\n{\n    \nios\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    },\n    \nandroid\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Youtube\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. Example:\n\n\n#include \nPluginYoutube/PluginYoutube.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginYoutube::init();\n}\n\n\n\n\nPlay Video\n\n\nPlay a youtube video with a youtube video id\n\n\nFor example\n\n\nsdkbox::PluginYoutube::playVideo(\ncdgQpa1pUUE\n, 0, true, true);\n\n\n\n\nWill play the following youtube video \nhttps://www.youtube.com/watch?v=cdgQpa1pUUE\n\n\nPlay multiple videos\n\n\nThere are two methods you can use if you want to play multiple videos\n\n\nYou can either play a youtube playlist\n\n\nsdkbox::PluginYoutube::playPlayList(\n7E952A67F31C58A3\n, 0, 0, true, true);\n\n\n\n\nor you can put a group of videos together and play them\n\n\nstd::vector\nstd::string\n v;\nv.push_back( \ncdgQpa1pUUE\n );\nv.push_back( \n8aCYZ3gXfy8\n );\nv.push_back( \ncdgQpa1pUUE\n );\n\nsdkbox::PluginYoutube::playVideoList(v, 0, 0, true, true);\n\n\n\n\nImplement YoutubeListner\n\n\n\n\nYou can implement YoutubeListener if you want to receive callbacks like video finish playing.\n\n\n\n\n#include \nPluginYoutube/PluginYoutube.h\n\nclass MyClass : public sdkbox::YoutubeListener\n{\nprivate:\n  void onPlayEnds( bool played_ok );\n}\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( YoutubeListener * listener ) ;\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nstatic YoutubeListener * getListener ( ) ;\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nstatic void playVideo ( const std::string \n video_id ,\n                        int startMillis ,\n                        bool autoplay ,\n                        bool lightbox ) ;\n\n\n\n\n\n\nPlay youtube video with video id\nyou can find video id as the last part of the youtube video's url\n\n\n\n\nstatic void playPlayList ( const std::string \n playlist_id ,\n                           int playListStartIndex ,\n                           int startMillis ,\n                           bool autoplay ,\n                           bool lightbox ) ;\n\n\n\n\n\n\nPlay a youtube playlist\n\n\n\n\nstatic void playVideoList ( const std::vector \nstd::string\n \n video_ids ,\n                            int playListStartIndex ,\n                            int startMillis ,\n                            bool autoplay ,\n                            bool lightbox ) ;\n\n\n\n\n\n\nPlay a group of youtube videos\n\n\n\n\nstatic void close ( ) ;\n\n\n\n\n\n\nClose youtube player\n\n\n\n\nListeners\n\n\nvoid onPlayEnds ( bool played_ok );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginYoutube.framework\n\n\n\n\nYou also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nAdd \"Assets\" folder\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n/plugin_youtube_res_bundle folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n and \nCreate folder references\n when\n\n\n\n\nAssets\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the everything from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproject_root\n/libs\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \"Assets\" folder\n\n\nEdit \nproj.android/build-cfg.json\n\n\n    \ncopy_resources\n: [\n        {\n            \nfrom\n: \n../Resources\n,\n            \nto\n: \n\n        },\n        {\n            \nfrom\n: \nplugin_youtube_res_project/Assets\n,\n            \nto\n: \n\n        }\n    ]\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Youtube with C++"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/#youtube", 
            "text": "", 
            "title": "Youtube"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Youtube plugin.  $ sdkbox import youtube", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  If you want to display youtube vidoe in your app, you have to register a new youtube API key  here  and put in  developer_key  section of the  sdkbox_config.json  {\n     ios  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    },\n     android  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/#usage", 
            "text": "Initialize Youtube  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers. Example:  #include  PluginYoutube/PluginYoutube.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginYoutube::init();\n}  Play Video  Play a youtube video with a youtube video id  For example  sdkbox::PluginYoutube::playVideo( cdgQpa1pUUE , 0, true, true);  Will play the following youtube video \nhttps://www.youtube.com/watch?v=cdgQpa1pUUE  Play multiple videos  There are two methods you can use if you want to play multiple videos  You can either play a youtube playlist  sdkbox::PluginYoutube::playPlayList( 7E952A67F31C58A3 , 0, 0, true, true);  or you can put a group of videos together and play them  std::vector std::string  v;\nv.push_back(  cdgQpa1pUUE  );\nv.push_back(  8aCYZ3gXfy8  );\nv.push_back(  cdgQpa1pUUE  );\n\nsdkbox::PluginYoutube::playVideoList(v, 0, 0, true, true);  Implement YoutubeListner   You can implement YoutubeListener if you want to receive callbacks like video finish playing.   #include  PluginYoutube/PluginYoutube.h \nclass MyClass : public sdkbox::YoutubeListener\n{\nprivate:\n  void onPlayEnds( bool played_ok );\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( YoutubeListener * listener ) ;   set provided listener.   static YoutubeListener * getListener ( ) ;   get provided listener.   static void removeListener ( ) ;   remove listeners.   static void playVideo ( const std::string   video_id ,\n                        int startMillis ,\n                        bool autoplay ,\n                        bool lightbox ) ;   Play youtube video with video id\nyou can find video id as the last part of the youtube video's url   static void playPlayList ( const std::string   playlist_id ,\n                           int playListStartIndex ,\n                           int startMillis ,\n                           bool autoplay ,\n                           bool lightbox ) ;   Play a youtube playlist   static void playVideoList ( const std::vector  std::string    video_ids ,\n                            int playListStartIndex ,\n                            int startMillis ,\n                            bool autoplay ,\n                            bool lightbox ) ;   Play a group of youtube videos   static void close ( ) ;   Close youtube player   Listeners  void onPlayEnds ( bool played_ok );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginYoutube.framework   You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  WebKit.framework  SystemConfiguration.framework   Add \"Assets\" folder  Drag and drop the following frameworks from the  plugins/ios /plugin_youtube_res_bundle folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  and  Create folder references  when   Assets", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the everything from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   project_root /libs  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add \"Assets\" folder  Edit  proj.android/build-cfg.json       copy_resources : [\n        {\n             from :  ../Resources ,\n             to :  \n        },\n        {\n             from :  plugin_youtube_res_project/Assets ,\n             to :  \n        }\n    ]  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/youtube/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/youtube/v3-js/", 
            "text": "Youtube\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Youtube plugin.\n\n\n$ sdkbox import youtube\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nIf you want to display youtube vidoe in your app, you have to register a new youtube API key \nhere\n and put in \ndeveloper_key\n section of the \nsdkbox_config.json\n\n\n{\n    \nios\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    },\n    \nandroid\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Youtube JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginYoutubeJS.hpp\n\n#include \nPluginYoutubeJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginYoutubeJS);\nsc-\naddRegisterCallback(register_all_PluginYoutubeJS_helper);\n\n\n\n\nInitialize Youtube\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginYoutube.init();\n\n\n\n\nPlay Video\n\n\nPlay a youtube video with a youtube video id\n\n\nFor example\n\n\nsdkbox.PluginYoutube.playVideo(\ncdgQpa1pUUE\n, 0, true, true);\n\n\n\n\nPlay multiple videos\n\n\nThere are two methods you can use if you want to play multiple videos\n\n\nYou can either play a youtube playlist\n\n\nsdkbox.PluginYoutube.playPlayList(\n7E952A67F31C58A3\n, 0, 0, true, true);\n\n\n\n\nor you can put a group of videos together and play them\n\n\nvar v = [\ncdgQpa1pUUE\n,\n8aCYZ3gXfy8\n];\n\nsdkbox.PluginYoutube.playVideoList(v, 0, 0, true, true);\n\n\n\n\nImplement YoutubeListner\n\n\n\n\nYou can implement YoutubeListener if you want to receive callbacks like video finish playing.\n\n\n\n\n\nsdkbox.PluginYoutube.setListener({\n    onPlayEnds : function() { cc.log(\nVideo finished playing\n);}\n})\n\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginYoutube.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginYoutube.setListener(listener);\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nsdkbox.PluginYoutube.getListener();\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nsdkbox.PluginYoutube.removeListener();\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nsdkbox.PluginYoutube.playVideo(video_id, startMillis, autoplay, lightbox);\n\n\n\n\n\n\nPlay youtube video with video id\nyou can find video id as the last part of the youtube video's url\n\n\n\n\nsdkbox.PluginYoutube.playPlayList(playlist_id,\n                                   playListStartIndex,\n                                   startMillis,\n                                   autoplay,\n                                   lightbox);\n\n\n\n\n\n\nPlay a youtube playlist\n\n\n\n\nsdkbox.PluginYoutube.playVideoList(video_ids,\n                                    playListStartIndex,\n                                    startMillis,\n                                    autoplay,\n                                    lightbox);\n\n\n\n\n\n\nPlay a group of youtube videos\n\n\n\n\nsdkbox.PluginYoutube.close();\n\n\n\n\n\n\nClose youtube player\n\n\n\n\nListeners\n\n\nonPlayEnds(played_ok);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginYoutube.framework\n\n\n\n\nYou also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nAdd \"Assets\" folder\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n/plugin_youtube_res_bundle folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n and \nCreate folder references\n when\n\n\n\n\nAssets\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the everything from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproject_root\n/libs\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \"Assets\" folder\n\n\nEdit \nproj.android/build-cfg.json\n\n\n    \ncopy_resources\n: [\n        {\n            \nfrom\n: \n../Resources\n,\n            \nto\n: \n\n        },\n        {\n            \nfrom\n: \nplugin_youtube_res_project/Assets\n,\n            \nto\n: \n\n        }\n    ]\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Youtube with Javascript"
        }, 
        {
            "location": "/plugins/youtube/v3-js/#youtube", 
            "text": "", 
            "title": "Youtube"
        }, 
        {
            "location": "/plugins/youtube/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Youtube plugin.  $ sdkbox import youtube", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/youtube/v3-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  If you want to display youtube vidoe in your app, you have to register a new youtube API key  here  and put in  developer_key  section of the  sdkbox_config.json  {\n     ios  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    },\n     android  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/youtube/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Youtube JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginYoutubeJS.hpp \n#include  PluginYoutubeJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginYoutubeJS);\nsc- addRegisterCallback(register_all_PluginYoutubeJS_helper);  Initialize Youtube  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginYoutube.init();  Play Video  Play a youtube video with a youtube video id  For example  sdkbox.PluginYoutube.playVideo( cdgQpa1pUUE , 0, true, true);  Play multiple videos  There are two methods you can use if you want to play multiple videos  You can either play a youtube playlist  sdkbox.PluginYoutube.playPlayList( 7E952A67F31C58A3 , 0, 0, true, true);  or you can put a group of videos together and play them  var v = [ cdgQpa1pUUE , 8aCYZ3gXfy8 ];\n\nsdkbox.PluginYoutube.playVideoList(v, 0, 0, true, true);  Implement YoutubeListner   You can implement YoutubeListener if you want to receive callbacks like video finish playing.   \nsdkbox.PluginYoutube.setListener({\n    onPlayEnds : function() { cc.log( Video finished playing );}\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/youtube/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginYoutube.init();   initialize the plugin instance.   sdkbox.PluginYoutube.setListener(listener);   set provided listener.   sdkbox.PluginYoutube.getListener();   get provided listener.   sdkbox.PluginYoutube.removeListener();   remove listeners.   sdkbox.PluginYoutube.playVideo(video_id, startMillis, autoplay, lightbox);   Play youtube video with video id\nyou can find video id as the last part of the youtube video's url   sdkbox.PluginYoutube.playPlayList(playlist_id,\n                                   playListStartIndex,\n                                   startMillis,\n                                   autoplay,\n                                   lightbox);   Play a youtube playlist   sdkbox.PluginYoutube.playVideoList(video_ids,\n                                    playListStartIndex,\n                                    startMillis,\n                                    autoplay,\n                                    lightbox);   Play a group of youtube videos   sdkbox.PluginYoutube.close();   Close youtube player   Listeners  onPlayEnds(played_ok);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/youtube/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/youtube/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginYoutube.framework   You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  WebKit.framework  SystemConfiguration.framework   Add \"Assets\" folder  Drag and drop the following frameworks from the  plugins/ios /plugin_youtube_res_bundle folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  and  Create folder references  when   Assets   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/youtube/v3-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the everything from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   project_root /libs  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add \"Assets\" folder  Edit  proj.android/build-cfg.json       copy_resources : [\n        {\n             from :  ../Resources ,\n             to :  \n        },\n        {\n             from :  plugin_youtube_res_project/Assets ,\n             to :  \n        }\n    ]  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/youtube/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/", 
            "text": "Youtube\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Youtube plugin.\n\n\n$ sdkbox import youtube\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nIf you want to display youtube vidoe in your app, you have to register a new youtube API key \nhere\n and put in \ndeveloper_key\n section of the \nsdkbox_config.json\n\n\n{\n    \nios\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    },\n    \nandroid\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Youtube\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginYoutube:init()\n\n\n\n\nPlay Video\n\n\nPlay a youtube video with a youtube video id\n\n\nFor example\n\n\nsdkbox.PluginYoutube:playVideo(\ncdgQpa1pUUE\n, 0, true, true);\n\n\n\n\nPlay multiple videos\n\n\nThere are two methods you can use if you want to play multiple videos\n\n\nYou can either play a youtube playlist\n\n\nsdkbox.PluginYoutube:playVideo(\ncdgQpa1pUUE\n, 0, true, true);\n\n\n\n\nor you can put a group of videos together and play them\n\n\nv = {\ncdgQpa1pUUE\n,\n8aCYZ3gXfy8\n};\n\nsdkbox.PluginYoutube.playVideoList(v, 0, 0, true, true);\n\n\n\n\nImplement YoutubeListner\n\n\n\n\nYou can implement YoutubeListener if you want to receive callbacks like video finish playing.\n\n\n\n\n\nsdkbox.PluginYoutube.setListener(function(name, args)\n    if \nonPlayEnds\n == name then\n      print(\nVideo Finished\n)\n    end\nend)\n\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginYoutube:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginYoutube:setListener(listener)\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nsdkbox.PluginYoutube:getListener()\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nsdkbox.PluginYoutube:removeListener()\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nsdkbox.PluginYoutube:playVideo(video_id, startMillis, autoplay, lightbox)\n\n\n\n\n\n\nPlay youtube video with video id\nyou can find video id as the last part of the youtube video's url\n\n\n\n\nsdkbox.PluginYoutube:playPlayList(playlist_id,\n                                   playListStartIndex,\n                                   startMillis,\n                                   autoplay,\n                                   lightbox)\n\n\n\n\n\n\nPlay a youtube playlist\n\n\n\n\nsdkbox.PluginYoutube:playVideoList(video_ids,\n                                    playListStartIndex,\n                                    startMillis,\n                                    autoplay,\n                                    lightbox)\n\n\n\n\n\n\nPlay a group of youtube videos\n\n\n\n\nsdkbox.PluginYoutube:close()\n\n\n\n\n\n\nClose youtube player\n\n\n\n\nListeners\n\n\nonPlayEnds(played_ok)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginYoutube.framework\n\n\n\n\nYou also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nAdd \"Assets\" folder\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n/plugin_youtube_res_bundle folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n and \nCreate folder references\n when\n\n\n\n\nAssets\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the everything from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \n/libs\n folder.\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproject_root\n/libs\n\n\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproject_root\n/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproject_root\n/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \"Assets\" folder\n\n\nEdit \nproj.android/build-cfg.json\n\n\n    \ncopy_resources\n: [\n        {\n            \nfrom\n: \n../Resources\n,\n            \nto\n: \n\n        },\n        {\n            \nfrom\n: \nplugin_youtube_res_project/Assets\n,\n            \nto\n: \n\n        }\n    ]\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Youtube with Lua"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/#youtube", 
            "text": "", 
            "title": "Youtube"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Youtube plugin.  $ sdkbox import youtube", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  If you want to display youtube vidoe in your app, you have to register a new youtube API key  here  and put in  developer_key  section of the  sdkbox_config.json  {\n     ios  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    },\n     android  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/#usage", 
            "text": "Initialize Youtube   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginYoutube:init()  Play Video  Play a youtube video with a youtube video id  For example  sdkbox.PluginYoutube:playVideo( cdgQpa1pUUE , 0, true, true);  Play multiple videos  There are two methods you can use if you want to play multiple videos  You can either play a youtube playlist  sdkbox.PluginYoutube:playVideo( cdgQpa1pUUE , 0, true, true);  or you can put a group of videos together and play them  v = { cdgQpa1pUUE , 8aCYZ3gXfy8 };\n\nsdkbox.PluginYoutube.playVideoList(v, 0, 0, true, true);  Implement YoutubeListner   You can implement YoutubeListener if you want to receive callbacks like video finish playing.   \nsdkbox.PluginYoutube.setListener(function(name, args)\n    if  onPlayEnds  == name then\n      print( Video Finished )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginYoutube:init()   initialize the plugin instance.   sdkbox.PluginYoutube:setListener(listener)   set provided listener.   sdkbox.PluginYoutube:getListener()   get provided listener.   sdkbox.PluginYoutube:removeListener()   remove listeners.   sdkbox.PluginYoutube:playVideo(video_id, startMillis, autoplay, lightbox)   Play youtube video with video id\nyou can find video id as the last part of the youtube video's url   sdkbox.PluginYoutube:playPlayList(playlist_id,\n                                   playListStartIndex,\n                                   startMillis,\n                                   autoplay,\n                                   lightbox)   Play a youtube playlist   sdkbox.PluginYoutube:playVideoList(video_ids,\n                                    playListStartIndex,\n                                    startMillis,\n                                    autoplay,\n                                    lightbox)   Play a group of youtube videos   sdkbox.PluginYoutube:close()   Close youtube player   Listeners  onPlayEnds(played_ok)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginYoutube.framework   You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  WebKit.framework  SystemConfiguration.framework   Add \"Assets\" folder  Drag and drop the following frameworks from the  plugins/ios /plugin_youtube_res_bundle folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  and  Create folder references  when   Assets   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the everything from  plugin/android/libs  folder of this\nbundle into your project\u2019s  /libs  folder.   If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   project_root /libs  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   Edit  Android.mk  Edit  project_root /jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  project_root /jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add \"Assets\" folder  Edit  proj.android/build-cfg.json       copy_resources : [\n        {\n             from :  ../Resources ,\n             to :  \n        },\n        {\n             from :  plugin_youtube_res_project/Assets ,\n             to :  \n        }\n    ]  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/youtube/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/", 
            "text": "Youtube\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Youtube plugin.\n\n\n$ sdkbox import youtube\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nIf you want to display youtube vidoe in your app, you have to register a new youtube API key \nhere\n and put in \ndeveloper_key\n section of the \nsdkbox_config.json\n\n\n{\n    \nios\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    },\n    \nandroid\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Youtube\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. Example:\n\n\n#include \nPluginYoutube/PluginYoutube.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginYoutube::init();\n}\n\n\n\n\nPlay Video\n\n\nPlay a youtube video with a youtube video id\n\n\nFor example\n\n\nsdkbox::PluginYoutube::playVideo(\ncdgQpa1pUUE\n, 0, true, true);\n\n\n\n\nWill play the following youtube video \nhttps://www.youtube.com/watch?v=cdgQpa1pUUE\n\n\nPlay multiple videos\n\n\nThere are two methods you can use if you want to play multiple videos\n\n\nYou can either play a youtube playlist\n\n\nsdkbox::PluginYoutube::playPlayList(\n7E952A67F31C58A3\n, 0, 0, true, true);\n\n\n\n\nor you can put a group of videos together and play them\n\n\nstd::vector\nstd::string\n v;\nv.push_back( \ncdgQpa1pUUE\n );\nv.push_back( \n8aCYZ3gXfy8\n );\nv.push_back( \ncdgQpa1pUUE\n );\n\nsdkbox::PluginYoutube::playVideoList(v, 0, 0, true, true);\n\n\n\n\nImplement YoutubeListner\n\n\n\n\nYou can implement YoutubeListener if you want to receive callbacks like video finish playing.\n\n\n\n\n#include \nPluginYoutube/PluginYoutube.h\n\nclass MyClass : public sdkbox::YoutubeListener\n{\nprivate:\n  void onPlayEnds( bool played_ok );\n}\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( YoutubeListener * listener ) ;\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nstatic YoutubeListener * getListener ( ) ;\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nstatic void playVideo ( const std::string \n video_id ,\n                        int startMillis ,\n                        bool autoplay ,\n                        bool lightbox ) ;\n\n\n\n\n\n\nPlay youtube video with video id\nyou can find video id as the last part of the youtube video's url\n\n\n\n\nstatic void playPlayList ( const std::string \n playlist_id ,\n                           int playListStartIndex ,\n                           int startMillis ,\n                           bool autoplay ,\n                           bool lightbox ) ;\n\n\n\n\n\n\nPlay a youtube playlist\n\n\n\n\nstatic void playVideoList ( const std::vector \nstd::string\n \n video_ids ,\n                            int playListStartIndex ,\n                            int startMillis ,\n                            bool autoplay ,\n                            bool lightbox ) ;\n\n\n\n\n\n\nPlay a group of youtube videos\n\n\n\n\nstatic void close ( ) ;\n\n\n\n\n\n\nClose youtube player\n\n\n\n\nListeners\n\n\nvoid onPlayEnds ( bool played_ok );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginYoutube.framework\n\n\n\n\nYou also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nAdd \"Assets\" folder\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n/plugin_youtube_res_bundle folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n and \nCreate folder references\n when\n\n\n\n\nAssets\n\n\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the everything from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nAdd \"Assets\" folder\n\n\nEdit \nproj.android/build-cfg.json\n\n\n    \ncopy_resources\n: [\n        {\n            \nfrom\n: \n../Resources\n,\n            \nto\n: \n\n        },\n        {\n            \nfrom\n: \nplugin_youtube_res_project/Assets\n,\n            \nto\n: \n\n        }\n    ]\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Youtube with C++"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/#youtube", 
            "text": "", 
            "title": "Youtube"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Youtube plugin.  $ sdkbox import youtube", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  If you want to display youtube vidoe in your app, you have to register a new youtube API key  here  and put in  developer_key  section of the  sdkbox_config.json  {\n     ios  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    },\n     android  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/#usage", 
            "text": "Initialize Youtube  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers. Example:  #include  PluginYoutube/PluginYoutube.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginYoutube::init();\n}  Play Video  Play a youtube video with a youtube video id  For example  sdkbox::PluginYoutube::playVideo( cdgQpa1pUUE , 0, true, true);  Will play the following youtube video \nhttps://www.youtube.com/watch?v=cdgQpa1pUUE  Play multiple videos  There are two methods you can use if you want to play multiple videos  You can either play a youtube playlist  sdkbox::PluginYoutube::playPlayList( 7E952A67F31C58A3 , 0, 0, true, true);  or you can put a group of videos together and play them  std::vector std::string  v;\nv.push_back(  cdgQpa1pUUE  );\nv.push_back(  8aCYZ3gXfy8  );\nv.push_back(  cdgQpa1pUUE  );\n\nsdkbox::PluginYoutube::playVideoList(v, 0, 0, true, true);  Implement YoutubeListner   You can implement YoutubeListener if you want to receive callbacks like video finish playing.   #include  PluginYoutube/PluginYoutube.h \nclass MyClass : public sdkbox::YoutubeListener\n{\nprivate:\n  void onPlayEnds( bool played_ok );\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( YoutubeListener * listener ) ;   set provided listener.   static YoutubeListener * getListener ( ) ;   get provided listener.   static void removeListener ( ) ;   remove listeners.   static void playVideo ( const std::string   video_id ,\n                        int startMillis ,\n                        bool autoplay ,\n                        bool lightbox ) ;   Play youtube video with video id\nyou can find video id as the last part of the youtube video's url   static void playPlayList ( const std::string   playlist_id ,\n                           int playListStartIndex ,\n                           int startMillis ,\n                           bool autoplay ,\n                           bool lightbox ) ;   Play a youtube playlist   static void playVideoList ( const std::vector  std::string    video_ids ,\n                            int playListStartIndex ,\n                            int startMillis ,\n                            bool autoplay ,\n                            bool lightbox ) ;   Play a group of youtube videos   static void close ( ) ;   Close youtube player   Listeners  void onPlayEnds ( bool played_ok );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginYoutube.framework   You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  WebKit.framework  SystemConfiguration.framework   Add \"Assets\" folder  Drag and drop the following frameworks from the  plugins/ios /plugin_youtube_res_bundle folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  and  Create folder references  when   Assets", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the everything from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Add \"Assets\" folder  Edit  proj.android/build-cfg.json       copy_resources : [\n        {\n             from :  ../Resources ,\n             to :  \n        },\n        {\n             from :  plugin_youtube_res_project/Assets ,\n             to :  \n        }\n    ]  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/youtube/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/youtube/v2-js/", 
            "text": "Youtube\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Youtube plugin.\n\n\n$ sdkbox import youtube\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nIf you want to display youtube vidoe in your app, you have to register a new youtube API key \nhere\n and put in \ndeveloper_key\n section of the \nsdkbox_config.json\n\n\n{\n    \nios\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    },\n    \nandroid\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Youtube JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginYoutubeJS.hpp\n\n#include \nPluginYoutubeJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginYoutubeJS);\nsc-\naddRegisterCallback(register_all_PluginYoutubeJS_helper);\n\n\n\n\nInitialize Youtube\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginYoutube.init();\n\n\n\n\nPlay Video\n\n\nPlay a youtube video with a youtube video id\n\n\nFor example\n\n\nsdkbox.PluginYoutube.playVideo(\ncdgQpa1pUUE\n, 0, true, true);\n\n\n\n\nPlay multiple videos\n\n\nThere are two methods you can use if you want to play multiple videos\n\n\nYou can either play a youtube playlist\n\n\nsdkbox.PluginYoutube.playPlayList(\n7E952A67F31C58A3\n, 0, 0, true, true);\n\n\n\n\nor you can put a group of videos together and play them\n\n\nvar v = [\ncdgQpa1pUUE\n,\n8aCYZ3gXfy8\n];\n\nsdkbox.PluginYoutube.playVideoList(v, 0, 0, true, true);\n\n\n\n\nImplement YoutubeListner\n\n\n\n\nYou can implement YoutubeListener if you want to receive callbacks like video finish playing.\n\n\n\n\n\nsdkbox.PluginYoutube.setListener({\n    onPlayEnds : function() { cc.log(\nVideo finished playing\n);}\n})\n\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginYoutube.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginYoutube.setListener(listener);\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nsdkbox.PluginYoutube.getListener();\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nsdkbox.PluginYoutube.removeListener();\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nsdkbox.PluginYoutube.playVideo(video_id, startMillis, autoplay, lightbox);\n\n\n\n\n\n\nPlay youtube video with video id\nyou can find video id as the last part of the youtube video's url\n\n\n\n\nsdkbox.PluginYoutube.playPlayList(playlist_id,\n                                   playListStartIndex,\n                                   startMillis,\n                                   autoplay,\n                                   lightbox);\n\n\n\n\n\n\nPlay a youtube playlist\n\n\n\n\nsdkbox.PluginYoutube.playVideoList(video_ids,\n                                    playListStartIndex,\n                                    startMillis,\n                                    autoplay,\n                                    lightbox);\n\n\n\n\n\n\nPlay a group of youtube videos\n\n\n\n\nsdkbox.PluginYoutube.close();\n\n\n\n\n\n\nClose youtube player\n\n\n\n\nListeners\n\n\nonPlayEnds(played_ok);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginYoutube.framework\n\n\n\n\nYou also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nAdd \"Assets\" folder\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n/plugin_youtube_res_bundle folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n and \nCreate folder references\n when\n\n\n\n\nAssets\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the everything from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nAdd \"Assets\" folder\n\n\nEdit \nproj.android/build-cfg.json\n\n\n    \ncopy_resources\n: [\n        {\n            \nfrom\n: \n../Resources\n,\n            \nto\n: \n\n        },\n        {\n            \nfrom\n: \nplugin_youtube_res_project/Assets\n,\n            \nto\n: \n\n        }\n    ]\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Youtube with Javascript"
        }, 
        {
            "location": "/plugins/youtube/v2-js/#youtube", 
            "text": "", 
            "title": "Youtube"
        }, 
        {
            "location": "/plugins/youtube/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Youtube plugin.  $ sdkbox import youtube", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/youtube/v2-js/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  If you want to display youtube vidoe in your app, you have to register a new youtube API key  here  and put in  developer_key  section of the  sdkbox_config.json  {\n     ios  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    },\n     android  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/youtube/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Youtube JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginYoutubeJS.hpp \n#include  PluginYoutubeJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginYoutubeJS);\nsc- addRegisterCallback(register_all_PluginYoutubeJS_helper);  Initialize Youtube  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginYoutube.init();  Play Video  Play a youtube video with a youtube video id  For example  sdkbox.PluginYoutube.playVideo( cdgQpa1pUUE , 0, true, true);  Play multiple videos  There are two methods you can use if you want to play multiple videos  You can either play a youtube playlist  sdkbox.PluginYoutube.playPlayList( 7E952A67F31C58A3 , 0, 0, true, true);  or you can put a group of videos together and play them  var v = [ cdgQpa1pUUE , 8aCYZ3gXfy8 ];\n\nsdkbox.PluginYoutube.playVideoList(v, 0, 0, true, true);  Implement YoutubeListner   You can implement YoutubeListener if you want to receive callbacks like video finish playing.   \nsdkbox.PluginYoutube.setListener({\n    onPlayEnds : function() { cc.log( Video finished playing );}\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/youtube/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginYoutube.init();   initialize the plugin instance.   sdkbox.PluginYoutube.setListener(listener);   set provided listener.   sdkbox.PluginYoutube.getListener();   get provided listener.   sdkbox.PluginYoutube.removeListener();   remove listeners.   sdkbox.PluginYoutube.playVideo(video_id, startMillis, autoplay, lightbox);   Play youtube video with video id\nyou can find video id as the last part of the youtube video's url   sdkbox.PluginYoutube.playPlayList(playlist_id,\n                                   playListStartIndex,\n                                   startMillis,\n                                   autoplay,\n                                   lightbox);   Play a youtube playlist   sdkbox.PluginYoutube.playVideoList(video_ids,\n                                    playListStartIndex,\n                                    startMillis,\n                                    autoplay,\n                                    lightbox);   Play a group of youtube videos   sdkbox.PluginYoutube.close();   Close youtube player   Listeners  onPlayEnds(played_ok);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/youtube/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/youtube/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginYoutube.framework   You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  WebKit.framework  SystemConfiguration.framework   Add \"Assets\" folder  Drag and drop the following frameworks from the  plugins/ios /plugin_youtube_res_bundle folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  and  Create folder references  when   Assets   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/youtube/v2-js/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the everything from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Add \"Assets\" folder  Edit  proj.android/build-cfg.json       copy_resources : [\n        {\n             from :  ../Resources ,\n             to :  \n        },\n        {\n             from :  plugin_youtube_res_project/Assets ,\n             to :  \n        }\n    ]  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/youtube/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/", 
            "text": "Youtube\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Youtube plugin.\n\n\n$ sdkbox import youtube\n\n\n\n\nImportant Notice\n\n\nIf you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.\n\n\nDisable App Transport Security\n\n\nAdding the following entry to the plist:\n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nDisable Bitcode support\n\n\nYou have to turn off \nBitcode\n support. If you don't cocos2d-x will fail to build.\n\n\nSet your game requires full screen\n\n\nIf your game doesn't support all screen orientations you will need to check \nRequires full screen\n in Xcode. If you do not, your app will fail Apple's submission process.\n\n\nWhitelist canOpenURL function\n\n\nThis depends on what plugins are in your project. You may need to add the required entry to the \ninfo.plist\n, under \nLSApplicationQueriesSchemes\n.\n\n\n\n\n\nJSON Configuration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nIf you want to display youtube vidoe in your app, you have to register a new youtube API key \nhere\n and put in \ndeveloper_key\n section of the \nsdkbox_config.json\n\n\n{\n    \nios\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    },\n    \nandroid\n :\n    {\n        \nYoutube\n:\n        {\n            \ndeveloper_key\n:\nAIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Youtube\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginYoutube:init()\n\n\n\n\nPlay Video\n\n\nPlay a youtube video with a youtube video id\n\n\nFor example\n\n\nsdkbox.PluginYoutube:playVideo(\ncdgQpa1pUUE\n, 0, true, true);\n\n\n\n\nPlay multiple videos\n\n\nThere are two methods you can use if you want to play multiple videos\n\n\nYou can either play a youtube playlist\n\n\nsdkbox.PluginYoutube:playVideo(\ncdgQpa1pUUE\n, 0, true, true);\n\n\n\n\nor you can put a group of videos together and play them\n\n\nv = {\ncdgQpa1pUUE\n,\n8aCYZ3gXfy8\n};\n\nsdkbox.PluginYoutube.playVideoList(v, 0, 0, true, true);\n\n\n\n\nImplement YoutubeListner\n\n\n\n\nYou can implement YoutubeListener if you want to receive callbacks like video finish playing.\n\n\n\n\n\nsdkbox.PluginYoutube.setListener(function(name, args)\n    if \nonPlayEnds\n == name then\n      print(\nVideo Finished\n)\n    end\nend)\n\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginYoutube:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginYoutube:setListener(listener)\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nsdkbox.PluginYoutube:getListener()\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nsdkbox.PluginYoutube:removeListener()\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nsdkbox.PluginYoutube:playVideo(video_id, startMillis, autoplay, lightbox)\n\n\n\n\n\n\nPlay youtube video with video id\nyou can find video id as the last part of the youtube video's url\n\n\n\n\nsdkbox.PluginYoutube:playPlayList(playlist_id,\n                                   playListStartIndex,\n                                   startMillis,\n                                   autoplay,\n                                   lightbox)\n\n\n\n\n\n\nPlay a youtube playlist\n\n\n\n\nsdkbox.PluginYoutube:playVideoList(video_ids,\n                                    playListStartIndex,\n                                    startMillis,\n                                    autoplay,\n                                    lightbox)\n\n\n\n\n\n\nPlay a group of youtube videos\n\n\n\n\nsdkbox.PluginYoutube:close()\n\n\n\n\n\n\nClose youtube player\n\n\n\n\nListeners\n\n\nonPlayEnds(played_ok)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginYoutube.framework\n\n\n\n\nYou also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nUIKit.framework\n\n\nWebKit.framework\n\n\nSystemConfiguration.framework\n\n\n\n\nAdd \"Assets\" folder\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n/plugin_youtube_res_bundle folder of the \nYoutube\n bundle into your Xcode project, check \nCopy items if needed\n and \nCreate folder references\n when\n\n\n\n\nAssets\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android\n\n\nSDKBOX supports three different kinds of \nAndroid\n projects \ncommand-line\n, \neclipse\n and \nAndroid Studio\n. \n\n\n\n\nproj.android\n will be used as our \nproject_root\n for \ncommand-line\n and \neclipse\n project\n\n\nproj.android-studio\n will be used as our \nproject_root\n for \nAndroid Studio\n project.\n\n\n\n\nCopy Files\n\n\nCopy the everything from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\nCopy jni libs\n\n\nCopy and overwrite all the folders from \nplugin/android/jni\n\nto your \nproject_root\n/jni/\n directory.\n\n\n\n\nNote: sdkbox link with \ngnustl\n by default, if your project link with \nc++static\n please replace the files in \nproject_root\n/jni/\nplugin_name\n/libs\n with files in \nproject_root\n/jni/\nplugin_name\n/libs_c++_static\n folder\n\n\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nAdd \"Assets\" folder\n\n\nEdit \nproj.android/build-cfg.json\n\n\n    \ncopy_resources\n: [\n        {\n            \nfrom\n: \n../Resources\n,\n            \nto\n: \n\n        },\n        {\n            \nfrom\n: \nplugin_youtube_res_project/Assets\n,\n            \nto\n: \n\n        }\n    ]\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**\n\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "Youtube with Lua"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/#youtube", 
            "text": "", 
            "title": "Youtube"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Youtube plugin.  $ sdkbox import youtube", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/#important-notice", 
            "text": "If you upgraded to Xcode7 you need to perform the following steps to your project for plugin to function correctly.  Disable App Transport Security  Adding the following entry to the plist:  key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Disable Bitcode support  You have to turn off  Bitcode  support. If you don't cocos2d-x will fail to build.  Set your game requires full screen  If your game doesn't support all screen orientations you will need to check  Requires full screen  in Xcode. If you do not, your app will fail Apple's submission process.  Whitelist canOpenURL function  This depends on what plugins are in your project. You may need to add the required entry to the  info.plist , under  LSApplicationQueriesSchemes .   JSON Configuration  SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  If you want to display youtube vidoe in your app, you have to register a new youtube API key  here  and put in  developer_key  section of the  sdkbox_config.json  {\n     ios  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    },\n     android  :\n    {\n         Youtube :\n        {\n             developer_key : AIzaSyDMuDjrVSL3uj_QvlI3bbjKn5I4nNB1XZk \n        }\n    }\n}", 
            "title": "Important Notice"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/#usage", 
            "text": "Initialize Youtube   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginYoutube:init()  Play Video  Play a youtube video with a youtube video id  For example  sdkbox.PluginYoutube:playVideo( cdgQpa1pUUE , 0, true, true);  Play multiple videos  There are two methods you can use if you want to play multiple videos  You can either play a youtube playlist  sdkbox.PluginYoutube:playVideo( cdgQpa1pUUE , 0, true, true);  or you can put a group of videos together and play them  v = { cdgQpa1pUUE , 8aCYZ3gXfy8 };\n\nsdkbox.PluginYoutube.playVideoList(v, 0, 0, true, true);  Implement YoutubeListner   You can implement YoutubeListener if you want to receive callbacks like video finish playing.   \nsdkbox.PluginYoutube.setListener(function(name, args)\n    if  onPlayEnds  == name then\n      print( Video Finished )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginYoutube:init()   initialize the plugin instance.   sdkbox.PluginYoutube:setListener(listener)   set provided listener.   sdkbox.PluginYoutube:getListener()   get provided listener.   sdkbox.PluginYoutube:removeListener()   remove listeners.   sdkbox.PluginYoutube:playVideo(video_id, startMillis, autoplay, lightbox)   Play youtube video with video id\nyou can find video id as the last part of the youtube video's url   sdkbox.PluginYoutube:playPlayList(playlist_id,\n                                   playListStartIndex,\n                                   startMillis,\n                                   autoplay,\n                                   lightbox)   Play a youtube playlist   sdkbox.PluginYoutube:playVideoList(video_ids,\n                                    playListStartIndex,\n                                    startMillis,\n                                    autoplay,\n                                    lightbox)   Play a group of youtube videos   sdkbox.PluginYoutube:close()   Close youtube player   Listeners  onPlayEnds(played_ok)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginYoutube.framework   You also need to add the following system frameworks, if you don't already have them:   UIKit.framework  WebKit.framework  SystemConfiguration.framework   Add \"Assets\" folder  Drag and drop the following frameworks from the  plugins/ios /plugin_youtube_res_bundle folder of the  Youtube  bundle into your Xcode project, check  Copy items if needed  and  Create folder references  when   Assets   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/#manual-integration-for-android", 
            "text": "SDKBOX supports three different kinds of  Android  projects  command-line ,  eclipse  and  Android Studio .    proj.android  will be used as our  project_root  for  command-line  and  eclipse  project  proj.android-studio  will be used as our  project_root  for  Android Studio  project.   Copy Files  Copy the everything from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.  Copy jni libs  Copy and overwrite all the folders from  plugin/android/jni \nto your  project_root /jni/  directory.   Note: sdkbox link with  gnustl  by default, if your project link with  c++static  please replace the files in  project_root /jni/ plugin_name /libs  with files in  project_root /jni/ plugin_name /libs_c++_static  folder   Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginYoutube\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginyoutube)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Add \"Assets\" folder  Edit  proj.android/build-cfg.json       copy_resources : [\n        {\n             from :  ../Resources ,\n             to :  \n        },\n        {\n             from :  plugin_youtube_res_project/Assets ,\n             to :  \n        }\n    ]  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android"
        }, 
        {
            "location": "/plugins/youtube/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# cocos2d-x\n-keep public class org.cocos2dx.** { *; }\n-dontwarn org.cocos2dx.**\n-keep public class com.chukong.** { *; }\n-dontwarn com.chukong.**\n\n# google play service\n-keep public class com.google.android.gms.** { public *; }\n-dontwarn com.google.android.gms.**\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n#sdkbox\n-keep public class com.sdkbox.** { *; }\n-dontwarn com.sdkbox.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/release-note/", 
            "text": "Release Notes\n\n\n\n\n1.5 Release Notes\n\n\nHighlight\n\n\n\n\nScientificRevenue Plugin\n\n\nYoutube Plugin\n\n\nSDKBOX Installer now support switching different android app stores with \nsdkbox set store\n\n\nSDKBOX Installer now supports dependencies between plugins\n\n\nCreated automatic installation script for installer\n\n\nc++static lib support\n\n\nAdd SDKBOX_ENABLED flag to support projects in other platforms (win, osx, linux)\n\n\n\n\nBugfix\n\n\n\n\nInstaller download update to the wrong folder\n\n\nremove dependency to ANDROID_SDK_ROOT, installer will find android SDK automatically\n\n\nremove dependency to COCOS_CONSOLE_ROOT\n\n\n\n\n1.4.1 Release Notes\n\n\nHighlight\n\n\n\n\nAutomatic installation script help you setup sdkbox in a flash\n\n\nUpdate vungle android SDK to 3.3.3\n\n\nUpdate appodeal to support rewarded video\n\n\nUpdate tune SDK\n\n\n\n\nBugfix\n\n\n\n\nFix facebook invite app link documentation\n\n\nInstaller will no longer modify osx projects\n\n\nFix chartboost isAvailable functions\n\n\nFix proguard setttings\n\n\n\n\n1.4 Release Notes\n\n\nHighlight\n\n\n\n\nSDKBOX Playphone plugin\n\n\nSDKBOX Valuepotion plugin\n\n\nSDKBOX Appodeal plugin\n\n\n\n\n1.3 Release Notes\n\n\nHighlight\n\n\n\n\nNew \nupdate\n command in sdkbox installer, which will automatically update your SDKBOX integration to the latest version\n\n\nSDKBOX Fyber plugin\n\n\nSDKBOX Bee7 plugin\n\n\nSDKBOX SOOMLA Grow plugin\n\n\nSDKBOX Ratings and Review plugin\n\n\n\n\nBugfix\n\n\n\n\nFix facebook plugin requires login after app restart\n\n\nFix SDKBOX using absolute path for resources\n\n\nFix SDKBOX iap not handling network connection issue\n\n\n\n\n1.2.5 Release Notes\n\n\nHighlight\n\n\n\n\nwe created Review\nRating plugin that developer can use to prompt user to rate their app\n\n\n\n\nBugfix\n\n\n\n\nFix Android-Studio integration\n\n\nFix vungle isCacheAvailable function\n\n\nFix AdColony failed to get reward\n\n\nPlugins can't work together\n\n\n\n\n1.2.4 Release Notes\n\n\nFix installer failed to find ANDROID_LIB directory issue\n\n\n1.2.3 Release Notes\n\n\nHighlight\n\n\n\n\n1.2.3 Fixes some major bugs for the plugins, we strongly recommend updating older versions to 1.2.3\n\n\n\n\nBugfix\n\n\nSometimes using callbacks will result in sprites show up as black, this is due to invoking cocos2d-x from a different thread\n\nIAP: item description can't contain newline\n\n\nFacebook: missing api function for js/lua binding\n\n\nInstaller: fix COCOS_CONSOLE_ROOT invalid error\n\n\nAdColony\n\n\nChangelog\n\n\n\n\nUpdate AdColony iOS SDK to 2.5.3\n\n\nregister_PluginAdColonyLua_helper\n -\n \nregister_all_PluginAdColonyLua_helper\n\n\n#include \"PluginAdColonyLuaHelper.hpp\"\n -\n \n#include \"PluginAdColonyLuaHelper.h\"\n\n\n#include \"PluginAdColonyJSHelper.hpp\"\n -\n \n#include \"PluginAdColonyJSHelper.h\"\n\n\n\n\nAgeCheq\n\n\nChangelog\n\n\n\n\nregister_PluginAgeCheqLua_helper\n -\n \nregister_all_PluginAgeCheqLua_helper\n\n\n#include \"PluginAgeCheqLuaHelper.hpp\"\n -\n \n#include \"PluginAgeCheqLuaHelper.h\"\n\n\n#include \"PluginAgeCheqJSHelper.hpp\"\n -\n \n#include \"PluginAgeCheqJSHelper.h\"\n\n\n\n\nChartboost\n\n\nChangelog\n\n\n\n\nregister_PluginChartboostJS_helper\n -\n \nregister_all_PluginChartboostJS_helper\n\n\nregister_PluginChartboostLua_helper\n -\n \nregister_all_PluginChartboostLua_helper\n\n\nUpdate Chartboost iOS SDK to 5.5.3\n\n\nUpdate Chartboost Android SDK to 5.5.3\n\n\n#include \"PluginChartboostLuaHelper.hpp\"\n -\n \n#include \"PluginChartboostLuaHelper.h\"\n\n\n\n\nFacebook\n\n\nChangelog\n\n\n\n\nregister_PluginFacebookJS_helper\n -\n \nregister_all_PluginFacebookJS_helper\n\n\nregister_PluginFacebookLua_helper\n -\n \nregister_all_PluginFacebookLua_helper\n\n\nUpdate Facebook iOS SDK to 4.5.1\n\n\nUpdate Facebook Android SDK to 4.5.1\n\n\n#include \"PluginFacebookLuaHelper.hpp\"\n -\n \n#include \"PluginFacebookLuaHelper.h\"\n\n\n\n\nFlurry Analytics\n\n\nChangelog\n\n\n\n\nregister_PluginFlurryAnalyticsJS_helper\n -\n \nregister_all_PluginFlurryAnalyticsJS_helper\n\n\nregister_PluginFlurryAnalyticsLua_helper\n -\n \nregister_all_PluginFlurryAnalyticsLua_helper\n\n\nUpdate Flurry iOS SDK to 6.7.0\n\n\nUpdate Flurry Android SDK to 5.6.0\n\n\n#include \"PluginFlurryAnalyticsLuaHelper.hpp\"\n -\n \n#include \"PluginFlurryAnalyticsLuaHelper.h\"\n\n\n\n\nGoogle Analytics\n\n\nChangelog\n\n\n\n\n#include \"PluginGoogleAnalyticsLuaHelper.hpp\"\n -\n \n#include \"PluginGoogleAnalyticsLuaHelper.h\"\n\n\n\n\nIAP\n\n\nChangelog\n\n\n\n\nregister_PluginIAPLua_helper\n -\n \nregister_all_PluginIAPLua_helper\n\n\n#include \"PluginIAPLuaHelper.hpp\"\n -\n \n#include \"PluginIAPLuaHelper.h\"\n\n\n#include \"PluginIAPJSHelper.hpp\"\n -\n \n#include \"PluginIAPJSHelper.h\"\n\n\n\n\nTune\n\n\n\n\nregister_PluginTuneJS_helper\n -\n \nregister_all_PluginTuneJS_helper\n\n\nregister_PluginTuneLua_helper\n -\n \nregister_all_PluginTuneLua_helper\n\n\nUpdate MobileAppTracker Android SDK to 3.10.1\n\n\n#include \"PluginTuneLuaHelper.hpp\"\n -\n \n#include \"PluginTuneLuaHelper.h\"\n\n\n\n\nVungle\n\n\nChangelog\n\n\n\n\nregister_PluginVungleJS_helper\n -\n \nregister_all_PluginVungleJS_helper\n\n\nregister_PluginVungleLua_helper\n -\n \nregister_all_PluginVungleLua_helper\n\n\n#include \"PluginVungleLuaHelper.hpp\"\n -\n \n#include \"PluginVungleLuaHelper.h\"\n\n\n\n\n1.2.2 Release Notes\n\n\nHighlight\n\n\n\n\nInstaller will automatically modify \nCocos2dxActivity.java\n for you\n\n\nFacebook Plugin supports \ngetFriends()\n function\n\n\nIAP supports \nonRestoreComplete()\n callback\n\n\nIAP will auto consume items if\n\n\n\n\nBugfix\n\n\nIAP: Item already owned\n\n[Facebook: FB_PHOTO is not defined] (http://discuss.cocos2d-x.org/t/facebook-fb-photo-is-not-defined/23064)\n\nFacebook: Facebook plugin failed to work with Cocos2d-js 3.0\n\n\nChartboost: too much recursion\n\n\n1.2.1 Release Notes\n\n\nHighlight\n\n\nFacebook plugin\n is here.\n\n\nBugfix\n\n\nIAP JS crash\n\n\nIAP crash on devices don't have google play\n\n\n1.2.0\n\n\nRelease AgeCheq Plugin.\nSDKBOX IAP Supports non-consumable\nChinese version of documentation relased\nBug fixes\n\n\n1.1.6\n\n\nSDKBOX now supports install plugin online\nSDKBOX online documentation\nUpgrade Vugnle SDK to new version\n * iOS: 3.1.2\n * Android: 3.3.1\n\n\n1.1.5\n\n\nFix SDKBOX conflicts with Plugin-x\n\n\n1.1.4\n\n\nFix SDKBOX IAP plugin return invalid pricing data", 
            "title": "About"
        }, 
        {
            "location": "/release-note/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-note/#15-release-notes", 
            "text": "", 
            "title": "1.5 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight", 
            "text": "ScientificRevenue Plugin  Youtube Plugin  SDKBOX Installer now support switching different android app stores with  sdkbox set store  SDKBOX Installer now supports dependencies between plugins  Created automatic installation script for installer  c++static lib support  Add SDKBOX_ENABLED flag to support projects in other platforms (win, osx, linux)", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix", 
            "text": "Installer download update to the wrong folder  remove dependency to ANDROID_SDK_ROOT, installer will find android SDK automatically  remove dependency to COCOS_CONSOLE_ROOT", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#141-release-notes", 
            "text": "", 
            "title": "1.4.1 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_1", 
            "text": "Automatic installation script help you setup sdkbox in a flash  Update vungle android SDK to 3.3.3  Update appodeal to support rewarded video  Update tune SDK", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix_1", 
            "text": "Fix facebook invite app link documentation  Installer will no longer modify osx projects  Fix chartboost isAvailable functions  Fix proguard setttings", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#14-release-notes", 
            "text": "", 
            "title": "1.4 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_2", 
            "text": "SDKBOX Playphone plugin  SDKBOX Valuepotion plugin  SDKBOX Appodeal plugin", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#13-release-notes", 
            "text": "", 
            "title": "1.3 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_3", 
            "text": "New  update  command in sdkbox installer, which will automatically update your SDKBOX integration to the latest version  SDKBOX Fyber plugin  SDKBOX Bee7 plugin  SDKBOX SOOMLA Grow plugin  SDKBOX Ratings and Review plugin", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix_2", 
            "text": "Fix facebook plugin requires login after app restart  Fix SDKBOX using absolute path for resources  Fix SDKBOX iap not handling network connection issue", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#125-release-notes", 
            "text": "", 
            "title": "1.2.5 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_4", 
            "text": "we created Review Rating plugin that developer can use to prompt user to rate their app", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix_3", 
            "text": "Fix Android-Studio integration  Fix vungle isCacheAvailable function  Fix AdColony failed to get reward  Plugins can't work together", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#124-release-notes", 
            "text": "Fix installer failed to find ANDROID_LIB directory issue", 
            "title": "1.2.4 Release Notes"
        }, 
        {
            "location": "/release-note/#123-release-notes", 
            "text": "", 
            "title": "1.2.3 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_5", 
            "text": "1.2.3 Fixes some major bugs for the plugins, we strongly recommend updating older versions to 1.2.3", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix_4", 
            "text": "Sometimes using callbacks will result in sprites show up as black, this is due to invoking cocos2d-x from a different thread IAP: item description can't contain newline  Facebook: missing api function for js/lua binding  Installer: fix COCOS_CONSOLE_ROOT invalid error", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/release-note/#changelog", 
            "text": "Update AdColony iOS SDK to 2.5.3  register_PluginAdColonyLua_helper  -   register_all_PluginAdColonyLua_helper  #include \"PluginAdColonyLuaHelper.hpp\"  -   #include \"PluginAdColonyLuaHelper.h\"  #include \"PluginAdColonyJSHelper.hpp\"  -   #include \"PluginAdColonyJSHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/release-note/#changelog_1", 
            "text": "register_PluginAgeCheqLua_helper  -   register_all_PluginAgeCheqLua_helper  #include \"PluginAgeCheqLuaHelper.hpp\"  -   #include \"PluginAgeCheqLuaHelper.h\"  #include \"PluginAgeCheqJSHelper.hpp\"  -   #include \"PluginAgeCheqJSHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/release-note/#changelog_2", 
            "text": "register_PluginChartboostJS_helper  -   register_all_PluginChartboostJS_helper  register_PluginChartboostLua_helper  -   register_all_PluginChartboostLua_helper  Update Chartboost iOS SDK to 5.5.3  Update Chartboost Android SDK to 5.5.3  #include \"PluginChartboostLuaHelper.hpp\"  -   #include \"PluginChartboostLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/release-note/#changelog_3", 
            "text": "register_PluginFacebookJS_helper  -   register_all_PluginFacebookJS_helper  register_PluginFacebookLua_helper  -   register_all_PluginFacebookLua_helper  Update Facebook iOS SDK to 4.5.1  Update Facebook Android SDK to 4.5.1  #include \"PluginFacebookLuaHelper.hpp\"  -   #include \"PluginFacebookLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/release-note/#changelog_4", 
            "text": "register_PluginFlurryAnalyticsJS_helper  -   register_all_PluginFlurryAnalyticsJS_helper  register_PluginFlurryAnalyticsLua_helper  -   register_all_PluginFlurryAnalyticsLua_helper  Update Flurry iOS SDK to 6.7.0  Update Flurry Android SDK to 5.6.0  #include \"PluginFlurryAnalyticsLuaHelper.hpp\"  -   #include \"PluginFlurryAnalyticsLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/release-note/#changelog_5", 
            "text": "#include \"PluginGoogleAnalyticsLuaHelper.hpp\"  -   #include \"PluginGoogleAnalyticsLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#iap", 
            "text": "", 
            "title": "IAP"
        }, 
        {
            "location": "/release-note/#changelog_6", 
            "text": "register_PluginIAPLua_helper  -   register_all_PluginIAPLua_helper  #include \"PluginIAPLuaHelper.hpp\"  -   #include \"PluginIAPLuaHelper.h\"  #include \"PluginIAPJSHelper.hpp\"  -   #include \"PluginIAPJSHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#tune", 
            "text": "register_PluginTuneJS_helper  -   register_all_PluginTuneJS_helper  register_PluginTuneLua_helper  -   register_all_PluginTuneLua_helper  Update MobileAppTracker Android SDK to 3.10.1  #include \"PluginTuneLuaHelper.hpp\"  -   #include \"PluginTuneLuaHelper.h\"", 
            "title": "Tune"
        }, 
        {
            "location": "/release-note/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/release-note/#changelog_7", 
            "text": "register_PluginVungleJS_helper  -   register_all_PluginVungleJS_helper  register_PluginVungleLua_helper  -   register_all_PluginVungleLua_helper  #include \"PluginVungleLuaHelper.hpp\"  -   #include \"PluginVungleLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#122-release-notes", 
            "text": "", 
            "title": "1.2.2 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_6", 
            "text": "Installer will automatically modify  Cocos2dxActivity.java  for you  Facebook Plugin supports  getFriends()  function  IAP supports  onRestoreComplete()  callback  IAP will auto consume items if", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix_5", 
            "text": "IAP: Item already owned \n[Facebook: FB_PHOTO is not defined] (http://discuss.cocos2d-x.org/t/facebook-fb-photo-is-not-defined/23064) Facebook: Facebook plugin failed to work with Cocos2d-js 3.0  Chartboost: too much recursion", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#121-release-notes", 
            "text": "", 
            "title": "1.2.1 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_7", 
            "text": "Facebook plugin  is here.", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix_6", 
            "text": "IAP JS crash  IAP crash on devices don't have google play", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#120", 
            "text": "Release AgeCheq Plugin.\nSDKBOX IAP Supports non-consumable\nChinese version of documentation relased\nBug fixes", 
            "title": "1.2.0"
        }, 
        {
            "location": "/release-note/#116", 
            "text": "SDKBOX now supports install plugin online\nSDKBOX online documentation\nUpgrade Vugnle SDK to new version\n * iOS: 3.1.2\n * Android: 3.3.1", 
            "title": "1.1.6"
        }, 
        {
            "location": "/release-note/#115", 
            "text": "Fix SDKBOX conflicts with Plugin-x", 
            "title": "1.1.5"
        }, 
        {
            "location": "/release-note/#114", 
            "text": "Fix SDKBOX IAP plugin return invalid pricing data", 
            "title": "1.1.4"
        }
    ]
}