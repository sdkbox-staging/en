{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\n\n\nSDKBOX makes it super EASY and FREE for Cocos2d-x developers to integrate 3rd party SDKs into their games. We do all the hard, tedious and tricky work so that developers won\u2019t have to. All services are tested and certified. No matter which version of the game engine you are using, C++ or Javascript or Lua, SDKBOX will reduce your integration time from a typical 1~2 weeks down to less than a day. No hassle, no friction.\n\n\nSDKBOX Installer\n is a command line tool. It lets your integrate a service with a single line of command. Example:\n\n\nsdkbox import iap\n\n\n\n\nSDKBOX plugins\n are certified wrapper libraries for supported 3rd party libraries like: Tune, AdColony, AgeCheq, Chartboost, Facebook, Flurry Analytics, Fyber, Google Analytics, IAP, Kochava, Review, Soomla, and Vungle.\n\n\nCheck out more information at: \nhttp://sdkbox.com", 
            "title": "Overview"
        }, 
        {
            "location": "/#overview", 
            "text": "SDKBOX makes it super EASY and FREE for Cocos2d-x developers to integrate 3rd party SDKs into their games. We do all the hard, tedious and tricky work so that developers won\u2019t have to. All services are tested and certified. No matter which version of the game engine you are using, C++ or Javascript or Lua, SDKBOX will reduce your integration time from a typical 1~2 weeks down to less than a day. No hassle, no friction.  SDKBOX Installer  is a command line tool. It lets your integrate a service with a single line of command. Example:  sdkbox import iap  SDKBOX plugins  are certified wrapper libraries for supported 3rd party libraries like: Tune, AdColony, AgeCheq, Chartboost, Facebook, Flurry Analytics, Fyber, Google Analytics, IAP, Kochava, Review, Soomla, and Vungle.  Check out more information at:  http://sdkbox.com", 
            "title": "Overview"
        }, 
        {
            "location": "/installer/", 
            "text": "SDKBOX: Installing SDKBOX Plugins using the Installer\n\n\nPreparing to run the SDKBOX Installer\n\n\nBefore you can run the SDKBOX installer you need to do a few things.\n* make sure you know the path to where you downloaded the SDKBOX installer. (you can always put it in \n/usr/local/bin\n)\n\n\nInstalling a Plugin using the SDKBOX Installer\n\n\nNow we are ready to install a plugin! There isn't much to it. Ready?\n\n\nInstalling for OS X\n\n\n\n\nFrom a command-line, \ncd\n to your applications root directory. Example:\n\n\n\n\n$ cd ~/MyGame\n\n\n\n\n\n\nNow, you can install your plugin using the SDKBOX installer. Example:\n\n\n\n\n$ sdkbox import iap\n\n\n\n\nWhat Next?\n\n\nThe SDKBOX installer takes care of most of what you need. However, there are still a few manual steps that you must complete. After the installer runs it outputs a list of the remaining steps that you need to perform, referring to the plugin bundle PDF. Example output from running the above command:\n\n\n$ sdkbox import iap\n_______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6.9\nusage: sdkbox [-h] [-v] [-p [PROJECT]] [-s] [-b [PLUGIN]] [-D SYMBOL]\n              [--china] [--dryrun] [--nohelp] [--forcedownload]\n              {import,list,restore,symbols,update}\n\nPlease reference the online documentation to finish the integration:\nhttp://sdkbox-doc.github.io/en/plugins/iap/v3-cpp/\nInstallation Successful :)\n\n\n\n\nOther Installer switches.\n\n\nThe SDKBOX Installer has several switches that you can use. You can always see these by running \nsdkbox\n by itself or using the \n-h\n help switch:\n\n\n$ \npath\n/sdkbox\n_______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6.9\nusage: sdkbox [-h] [-v] [-p [PROJECT]] [-s] [-b [PLUGIN]] [-D SYMBOL]\n              [--china] [--dryrun] [--nohelp] [--forcedownload]\n              {import,list,restore,symbols,update}\n\n\n\n\n\n\n\n\n\n\nswitch\n\n\nalternate switch\n\n\nwhat it does\n\n\n\n\n\n\n\n\n\n\n-h\n\n\n--help\n\n\nshow this help message and exit\n\n\n\n\n\n\n-v\n\n\n--verbose\n\n\nspecify verbosity level\n\n\n\n\n\n\n-p PROJECT\n\n\n--project PROJECT\n\n\npath to project root (defaults to .)\n\n\n\n\n\n\n-b PLUGIN\n\n\n--plugin PLUGIN\n\n\nspecify path to plugin (defaults to .)\n\n\n\n\n\n\n-q\n\n\n--nohelp\n\n\ndon't open online documentation after installation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--forcedownload\n\n\nforce download of package even if it is already downloaded.\n\n\n\n\n\n\n\n\n\n\n\n\n--china\n\n\nuse China based server instead of US\n\n\n\n\n\n\n\n\nExamples:\n\n\n# Add 'In App Purchase' plugin to your game\n$ sdkbox import -b iap -p /path/to/your/cocos2dx/game/\n\n\n\n\n# The -b option may be omitted and -p too if you are in your project directory\n$ sdkbox import iap\n\n\n\n\n# List all available modules\n$ sdkbox list\n\n\n\n\nStaying Up-to-date\n\n\nThe SDKBOX installer automatically checks for updates to itself. It will ask for your permission before updating. This will allow you to stay current and also automatically pull updates to your plugin bundles when they become available.\n\n\n_______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6.9\n\nA newer version of SDKBOX is available, would you like to update to v0.5.11?\nPlease type Yes, No or Quit Yes\nupdated SDKBOX v0.5.9 to v0.5.11 at sdkbox", 
            "title": "Installer"
        }, 
        {
            "location": "/installer/#sdkbox-installing-sdkbox-plugins-using-the-installer", 
            "text": "", 
            "title": "SDKBOX: Installing SDKBOX Plugins using the Installer"
        }, 
        {
            "location": "/installer/#preparing-to-run-the-sdkbox-installer", 
            "text": "Before you can run the SDKBOX installer you need to do a few things.\n* make sure you know the path to where you downloaded the SDKBOX installer. (you can always put it in  /usr/local/bin )", 
            "title": "Preparing to run the SDKBOX Installer"
        }, 
        {
            "location": "/installer/#installing-a-plugin-using-the-sdkbox-installer", 
            "text": "Now we are ready to install a plugin! There isn't much to it. Ready?  Installing for OS X   From a command-line,  cd  to your applications root directory. Example:   $ cd ~/MyGame   Now, you can install your plugin using the SDKBOX installer. Example:   $ sdkbox import iap  What Next?  The SDKBOX installer takes care of most of what you need. However, there are still a few manual steps that you must complete. After the installer runs it outputs a list of the remaining steps that you need to perform, referring to the plugin bundle PDF. Example output from running the above command:  $ sdkbox import iap\n_______ ______  _     _ ______   _____  _     _\n |______ |     \\ |____/  |_____] |     |  \\___/\n ______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6.9\nusage: sdkbox [-h] [-v] [-p [PROJECT]] [-s] [-b [PLUGIN]] [-D SYMBOL]\n              [--china] [--dryrun] [--nohelp] [--forcedownload]\n              {import,list,restore,symbols,update}\n\nPlease reference the online documentation to finish the integration:\nhttp://sdkbox-doc.github.io/en/plugins/iap/v3-cpp/\nInstallation Successful :)  Other Installer switches.  The SDKBOX Installer has several switches that you can use. You can always see these by running  sdkbox  by itself or using the  -h  help switch:  $  path /sdkbox\n_______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6.9\nusage: sdkbox [-h] [-v] [-p [PROJECT]] [-s] [-b [PLUGIN]] [-D SYMBOL]\n              [--china] [--dryrun] [--nohelp] [--forcedownload]\n              {import,list,restore,symbols,update}     switch  alternate switch  what it does      -h  --help  show this help message and exit    -v  --verbose  specify verbosity level    -p PROJECT  --project PROJECT  path to project root (defaults to .)    -b PLUGIN  --plugin PLUGIN  specify path to plugin (defaults to .)    -q  --nohelp  don't open online documentation after installation.         --forcedownload  force download of package even if it is already downloaded.       --china  use China based server instead of US     Examples:  # Add 'In App Purchase' plugin to your game\n$ sdkbox import -b iap -p /path/to/your/cocos2dx/game/  # The -b option may be omitted and -p too if you are in your project directory\n$ sdkbox import iap  # List all available modules\n$ sdkbox list  Staying Up-to-date  The SDKBOX installer automatically checks for updates to itself. It will ask for your permission before updating. This will allow you to stay current and also automatically pull updates to your plugin bundles when they become available.  _______ ______  _     _ ______   _____  _     _\n|______ |     \\ |____/  |_____] |     |  \\___/\n______| |_____/ |    \\_ |_____] |_____| _/   \\_\nCopyright (c) 2015 Chukong Technologies Inc. v0.5.6.9\n\nA newer version of SDKBOX is available, would you like to update to v0.5.11?\nPlease type Yes, No or Quit Yes\nupdated SDKBOX v0.5.9 to v0.5.11 at sdkbox", 
            "title": "Installing a Plugin using the SDKBOX Installer"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/", 
            "text": "AdColony\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox::PluginAdColony::show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox::PluginAdColony::show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::AdColonyListener\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo\n info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo\n info,\n        const std::string\n currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo\n info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo\n info);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAdColony::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nstatic void setListener ( AdColonyListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic AdColonyListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic int zoneStatusForZone ( const std::string \n zoneID ) ;\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nstatic AdColonyAdStatus getStatus ( const std::string \n name ) ;\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nstatic void setCustomID ( const std::string \n customID ) ;\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nstatic std::string getCustomID ( ) ;\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nstatic std::string getUniqueDeviceID ( ) ;\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nstatic std::string getAdvertisingIdentifier ( ) ;\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nstatic std::string getVendorIdentifier ( ) ;\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nstatic int getVideosPerReward ( const std::string \n currencyName ) ;\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nstatic int getVideoCreditBalance ( const std::string \n currencyName ) ;\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nstatic void cancelAd ( ) ;\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nstatic bool videoAdCurrentlyRunning ( ) ;\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nstatic void turnAllAdsOff ( ) ;\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nstatic void setUserMetadata ( const std::string \n metadataType ,\n                              const std::string \n value ) ;\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nstatic void userInterestedIn ( const std::string \n topic ) ;\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nstatic void notifyIAPComplete ( const std::string \n transactionID ,\n                                const std::string \n productID ,\n                                int quantity ,\n                                float price ,\n                                const std::string \n currencyCode ) ;\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nvoid onAdColonyChange ( const AdColonyAdInfo \n info , bool available );\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nvoid onAdColonyReward ( const AdColonyAdInfo \n info ,\n                        const std::string \n currencyName ,\n                        int amount ,\n                        bool success );\n\n\n\n\n\n\nreward was received.\n\n\n\n\nvoid onAdColonyStarted ( const AdColonyAdInfo \n info );\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nvoid onAdColonyFinished ( const AdColonyAdInfo \n info );\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nproj.android/libs\n\n\n\n\n\n\nCopy the \npluginadcolony\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#usage", 
            "text": "Initialize AdColony   Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:   #include  PluginAdColony/PluginAdColony.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox::PluginAdColony::show( video );  or:  sdkbox::PluginAdColony::show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::AdColonyListener   #include  PluginAdColony/PluginAdColony.h \nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo  info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo  info,\n        const std::string  currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo  info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo  info);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAdColony::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   play video ad using provided name that was specified in sdkbox_config.json   static void setListener ( AdColonyListener * listener ) ;   Set listener to listen for adcolony events   static AdColonyListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static int zoneStatusForZone ( const std::string   zoneID ) ;   Returns the zone status for the specified zone.   static AdColonyAdStatus getStatus ( const std::string   name ) ;   Check the availability of the adcolony ads by name   static void setCustomID ( const std::string   customID ) ;   Assigns your own custom identifier to the current app user.   static std::string getCustomID ( ) ;   Returns the device's current custom identifier.   static std::string getUniqueDeviceID ( ) ;   Returns an AdColony-defined device identifier.   static std::string getAdvertisingIdentifier ( ) ;   Returns the device's advertising identifier.   static std::string getVendorIdentifier ( ) ;   Returns the device's vendor identifier.   static int getVideosPerReward ( const std::string   currencyName ) ;   Returns the number of ads that the user must play to earn the designated reward.   static int getVideoCreditBalance ( const std::string   currencyName ) ;   Returns the number of ads that the user has seen towards their next reward.   static void cancelAd ( ) ;   Cancels any full-screen ad that is currently playing and returns control to the app.   static bool videoAdCurrentlyRunning ( ) ;   Whether a full-screen AdColony ad is currently being played.   static void turnAllAdsOff ( ) ;   This method permanently turns off all AdColony ads for this app on the current device.   static void setUserMetadata ( const std::string   metadataType ,\n                              const std::string   value ) ;   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   static void userInterestedIn ( const std::string   topic ) ;   Provide AdColony with real-time feedback about what a user is interested in.   static void notifyIAPComplete ( const std::string   transactionID ,\n                                const std::string   productID ,\n                                int quantity ,\n                                float price ,\n                                const std::string   currencyCode ) ;   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  void onAdColonyChange ( const AdColonyAdInfo   info , bool available );   called when AdColony is finished loading.   void onAdColonyReward ( const AdColonyAdInfo   info ,\n                        const std::string   currencyName ,\n                        int amount ,\n                        bool success );   reward was received.   void onAdColonyStarted ( const AdColonyAdInfo   info );   showing an ad has started.   void onAdColonyFinished ( const AdColonyAdInfo   info );   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  cocos2d/cocos/platform/android/java/libs    If you're using cocos2d-js or lua copy the  jar  files to:  frameworks/cocos2d-x/cocos/platform/android/java/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  proj.android/libs    Copy the  pluginadcolony  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/adcolony/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/", 
            "text": "AdColony\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Adcolony JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAdColonyJS.hpp\n\n#include \nPluginAdColonyJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS);\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS_helper);\n\n\n\n\nInitialize AdColony\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony.show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony.show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony.show(name);\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nsdkbox.PluginAdColony.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAdColony.zoneStatusForZone(zoneID);\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nsdkbox.PluginAdColony.getStatus(name);\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nsdkbox.PluginAdColony.setCustomID(customID);\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nsdkbox.PluginAdColony.getCustomID();\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nsdkbox.PluginAdColony.getUniqueDeviceID();\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nsdkbox.PluginAdColony.getAdvertisingIdentifier();\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nsdkbox.PluginAdColony.getVendorIdentifier();\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nsdkbox.PluginAdColony.getVideosPerReward(currencyName);\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nsdkbox.PluginAdColony.getVideoCreditBalance(currencyName);\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nsdkbox.PluginAdColony.cancelAd();\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nsdkbox.PluginAdColony.videoAdCurrentlyRunning();\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nsdkbox.PluginAdColony.turnAllAdsOff();\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nsdkbox.PluginAdColony.setUserMetadata(metadataType, value);\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nsdkbox.PluginAdColony.userInterestedIn(topic);\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nsdkbox.PluginAdColony.notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode);\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nonAdColonyChange(info, available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(info, currencyName, amount, success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(info);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(info);\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nproj.android/libs\n\n\n\n\n\n\nCopy the \npluginadcolony\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Adcolony JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAdColonyJS.hpp \n#include  PluginAdColonyJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAdColonyJS);\nsc- addRegisterCallback(register_all_PluginAdColonyJS_helper);  Initialize AdColony  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAdColony.init();  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony.show( video );  or:  sdkbox.PluginAdColony.show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony.init();   initialize the plugin instance.   sdkbox.PluginAdColony.show(name);   play video ad using provided name that was specified in sdkbox_config.json   sdkbox.PluginAdColony.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginAdColony.zoneStatusForZone(zoneID);   Returns the zone status for the specified zone.   sdkbox.PluginAdColony.getStatus(name);   Check the availability of the adcolony ads by name   sdkbox.PluginAdColony.setCustomID(customID);   Assigns your own custom identifier to the current app user.   sdkbox.PluginAdColony.getCustomID();   Returns the device's current custom identifier.   sdkbox.PluginAdColony.getUniqueDeviceID();   Returns an AdColony-defined device identifier.   sdkbox.PluginAdColony.getAdvertisingIdentifier();   Returns the device's advertising identifier.   sdkbox.PluginAdColony.getVendorIdentifier();   Returns the device's vendor identifier.   sdkbox.PluginAdColony.getVideosPerReward(currencyName);   Returns the number of ads that the user must play to earn the designated reward.   sdkbox.PluginAdColony.getVideoCreditBalance(currencyName);   Returns the number of ads that the user has seen towards their next reward.   sdkbox.PluginAdColony.cancelAd();   Cancels any full-screen ad that is currently playing and returns control to the app.   sdkbox.PluginAdColony.videoAdCurrentlyRunning();   Whether a full-screen AdColony ad is currently being played.   sdkbox.PluginAdColony.turnAllAdsOff();   This method permanently turns off all AdColony ads for this app on the current device.   sdkbox.PluginAdColony.setUserMetadata(metadataType, value);   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   sdkbox.PluginAdColony.userInterestedIn(topic);   Provide AdColony with real-time feedback about what a user is interested in.   sdkbox.PluginAdColony.notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode);   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  onAdColonyChange(info, available);   called when AdColony is finished loading.   onAdColonyReward(info, currencyName, amount, success);   reward was received.   onAdColonyStarted(info);   showing an ad has started.   onAdColonyFinished(info);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  cocos2d/cocos/platform/android/java/libs    If you're using cocos2d-js or lua copy the  jar  files to:  frameworks/cocos2d-x/cocos/platform/android/java/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  proj.android/libs    Copy the  pluginadcolony  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/adcolony/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/", 
            "text": "AdColony\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nAdColony\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginAdColonyLua.hpp\n\n#include \nPluginAdColonyLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginAdColonyLua(L);\n  register_all_PluginAdColonyLua_helper(L);\n}\n\n\n\n\nInitialize AdColony\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAdColony:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony:show(\nvideo\n)\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony:show(\nv4vc\n)\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginAdColony:setListener(function(args)\n    if \nonAdColonyChange\n == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info, \nonAdColonyChange:\n)\n        print(\navailable:\n, available)\n    elseif \nonAdColonyReward\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info, \nonAdColonyReward:\n)\n        print(\ncurrencyName:\n, currencyName)\n        print(\namount:\n, amount)\n        print(\nsuccess:\n, success)\n    elseif \nonAdColonyStarted\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyStarted:\n)\n    elseif \nonAdColonyFinished\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyFinished:\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony:show(name)\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nsdkbox.PluginAdColony:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAdColony:zoneStatusForZone(zoneID)\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nsdkbox.PluginAdColony:getStatus(name)\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nsdkbox.PluginAdColony:setCustomID(customID)\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nsdkbox.PluginAdColony:getCustomID()\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nsdkbox.PluginAdColony:getUniqueDeviceID()\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nsdkbox.PluginAdColony:getAdvertisingIdentifier()\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nsdkbox.PluginAdColony:getVendorIdentifier()\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nsdkbox.PluginAdColony:getVideosPerReward(currencyName)\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nsdkbox.PluginAdColony:getVideoCreditBalance(currencyName)\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nsdkbox.PluginAdColony:cancelAd()\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nsdkbox.PluginAdColony:videoAdCurrentlyRunning()\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nsdkbox.PluginAdColony:turnAllAdsOff()\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nsdkbox.PluginAdColony:setUserMetadata(metadataType, value)\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nsdkbox.PluginAdColony:userInterestedIn(topic)\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nsdkbox.PluginAdColony:notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode)\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nonAdColonyChange(info, available)\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(info, currencyName, amount, success)\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(info)\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(info)\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nproj.android/libs\n\n\n\n\n\n\nCopy the \npluginadcolony\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  AdColony  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginAdColonyLua.hpp \n#include  PluginAdColonyLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginAdColonyLua(L);\n  register_all_PluginAdColonyLua_helper(L);\n}  Initialize AdColony  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAdColony:init()  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony:show( video )  or:  sdkbox.PluginAdColony:show( v4vc )  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginAdColony:setListener(function(args)\n    if  onAdColonyChange  == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info,  onAdColonyChange: )\n        print( available: , available)\n    elseif  onAdColonyReward  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info,  onAdColonyReward: )\n        print( currencyName: , currencyName)\n        print( amount: , amount)\n        print( success: , success)\n    elseif  onAdColonyStarted  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyStarted: )\n    elseif  onAdColonyFinished  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyFinished: )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony:init()   initialize the plugin instance.   sdkbox.PluginAdColony:show(name)   play video ad using provided name that was specified in sdkbox_config.json   sdkbox.PluginAdColony:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginAdColony:zoneStatusForZone(zoneID)   Returns the zone status for the specified zone.   sdkbox.PluginAdColony:getStatus(name)   Check the availability of the adcolony ads by name   sdkbox.PluginAdColony:setCustomID(customID)   Assigns your own custom identifier to the current app user.   sdkbox.PluginAdColony:getCustomID()   Returns the device's current custom identifier.   sdkbox.PluginAdColony:getUniqueDeviceID()   Returns an AdColony-defined device identifier.   sdkbox.PluginAdColony:getAdvertisingIdentifier()   Returns the device's advertising identifier.   sdkbox.PluginAdColony:getVendorIdentifier()   Returns the device's vendor identifier.   sdkbox.PluginAdColony:getVideosPerReward(currencyName)   Returns the number of ads that the user must play to earn the designated reward.   sdkbox.PluginAdColony:getVideoCreditBalance(currencyName)   Returns the number of ads that the user has seen towards their next reward.   sdkbox.PluginAdColony:cancelAd()   Cancels any full-screen ad that is currently playing and returns control to the app.   sdkbox.PluginAdColony:videoAdCurrentlyRunning()   Whether a full-screen AdColony ad is currently being played.   sdkbox.PluginAdColony:turnAllAdsOff()   This method permanently turns off all AdColony ads for this app on the current device.   sdkbox.PluginAdColony:setUserMetadata(metadataType, value)   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   sdkbox.PluginAdColony:userInterestedIn(topic)   Provide AdColony with real-time feedback about what a user is interested in.   sdkbox.PluginAdColony:notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode)   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  onAdColonyChange(info, available)   called when AdColony is finished loading.   onAdColonyReward(info, currencyName, amount, success)   reward was received.   onAdColonyStarted(info)   showing an ad has started.   onAdColonyFinished(info)   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  cocos2d/cocos/platform/android/java/libs    If you're using cocos2d-js or lua copy the  jar  files to:  frameworks/cocos2d-x/cocos/platform/android/java/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  proj.android/libs    Copy the  pluginadcolony  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/adcolony/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/", 
            "text": "AdColony\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize AdColony\n\n\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox::PluginAdColony::show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox::PluginAdColony::show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::AdColonyListener\n\n\n\n\n#include \nPluginAdColony/PluginAdColony.h\n\nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo\n info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo\n info,\n        const std::string\n currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo\n info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo\n info);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAdColony::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nstatic void setListener ( AdColonyListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic AdColonyListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic int zoneStatusForZone ( const std::string \n zoneID ) ;\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nstatic AdColonyAdStatus getStatus ( const std::string \n name ) ;\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nstatic void setCustomID ( const std::string \n customID ) ;\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nstatic std::string getCustomID ( ) ;\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nstatic std::string getUniqueDeviceID ( ) ;\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nstatic std::string getAdvertisingIdentifier ( ) ;\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nstatic std::string getVendorIdentifier ( ) ;\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nstatic int getVideosPerReward ( const std::string \n currencyName ) ;\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nstatic int getVideoCreditBalance ( const std::string \n currencyName ) ;\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nstatic void cancelAd ( ) ;\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nstatic bool videoAdCurrentlyRunning ( ) ;\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nstatic void turnAllAdsOff ( ) ;\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nstatic void setUserMetadata ( const std::string \n metadataType ,\n                              const std::string \n value ) ;\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nstatic void userInterestedIn ( const std::string \n topic ) ;\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nstatic void notifyIAPComplete ( const std::string \n transactionID ,\n                                const std::string \n productID ,\n                                int quantity ,\n                                float price ,\n                                const std::string \n currencyCode ) ;\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nvoid onAdColonyChange ( const AdColonyAdInfo \n info , bool available );\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nvoid onAdColonyReward ( const AdColonyAdInfo \n info ,\n                        const std::string \n currencyName ,\n                        int amount ,\n                        bool success );\n\n\n\n\n\n\nreward was received.\n\n\n\n\nvoid onAdColonyStarted ( const AdColonyAdInfo \n info );\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nvoid onAdColonyFinished ( const AdColonyAdInfo \n info );\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginadcolony\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#usage", 
            "text": "Initialize AdColony   Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:   #include  PluginAdColony/PluginAdColony.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAdColony::init();\n}  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox::PluginAdColony::show( video );  or:  sdkbox::PluginAdColony::show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::AdColonyListener   #include  PluginAdColony/PluginAdColony.h \nclass MyClass : public sdkbox::AdColonyListener\n{\nprivate:\n  void onAdColonyChange(const sdkbox::AdColonyAdInfo  info, bool available);\n  void onAdColonyReward(const sdkbox::AdColonyAdInfo  info,\n        const std::string  currencyName, int amount, bool success);\n  void onAdColonyStarted(const sdkbox::AdColonyAdInfo  info);\n  void onAdColonyFinished(const sdkbox::AdColonyAdInfo  info);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAdColony::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   play video ad using provided name that was specified in sdkbox_config.json   static void setListener ( AdColonyListener * listener ) ;   Set listener to listen for adcolony events   static AdColonyListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static int zoneStatusForZone ( const std::string   zoneID ) ;   Returns the zone status for the specified zone.   static AdColonyAdStatus getStatus ( const std::string   name ) ;   Check the availability of the adcolony ads by name   static void setCustomID ( const std::string   customID ) ;   Assigns your own custom identifier to the current app user.   static std::string getCustomID ( ) ;   Returns the device's current custom identifier.   static std::string getUniqueDeviceID ( ) ;   Returns an AdColony-defined device identifier.   static std::string getAdvertisingIdentifier ( ) ;   Returns the device's advertising identifier.   static std::string getVendorIdentifier ( ) ;   Returns the device's vendor identifier.   static int getVideosPerReward ( const std::string   currencyName ) ;   Returns the number of ads that the user must play to earn the designated reward.   static int getVideoCreditBalance ( const std::string   currencyName ) ;   Returns the number of ads that the user has seen towards their next reward.   static void cancelAd ( ) ;   Cancels any full-screen ad that is currently playing and returns control to the app.   static bool videoAdCurrentlyRunning ( ) ;   Whether a full-screen AdColony ad is currently being played.   static void turnAllAdsOff ( ) ;   This method permanently turns off all AdColony ads for this app on the current device.   static void setUserMetadata ( const std::string   metadataType ,\n                              const std::string   value ) ;   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   static void userInterestedIn ( const std::string   topic ) ;   Provide AdColony with real-time feedback about what a user is interested in.   static void notifyIAPComplete ( const std::string   transactionID ,\n                                const std::string   productID ,\n                                int quantity ,\n                                float price ,\n                                const std::string   currencyCode ) ;   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  void onAdColonyChange ( const AdColonyAdInfo   info , bool available );   called when AdColony is finished loading.   void onAdColonyReward ( const AdColonyAdInfo   info ,\n                        const std::string   currencyName ,\n                        int amount ,\n                        bool success );   reward was received.   void onAdColonyStarted ( const AdColonyAdInfo   info );   showing an ad has started.   void onAdColonyFinished ( const AdColonyAdInfo   info );   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar   Copy the  pluginadcolony  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/adcolony/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/", 
            "text": "AdColony\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Adcolony JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAdColonyJS.hpp\n\n#include \nPluginAdColonyJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS);\nsc-\naddRegisterCallback(register_all_PluginAdColonyJS_helper);\n\n\n\n\nInitialize AdColony\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony.show(\nvideo\n);\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony.show(\nv4vc\n);\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\n/**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony.show(name);\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nsdkbox.PluginAdColony.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAdColony.zoneStatusForZone(zoneID);\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nsdkbox.PluginAdColony.getStatus(name);\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nsdkbox.PluginAdColony.setCustomID(customID);\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nsdkbox.PluginAdColony.getCustomID();\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nsdkbox.PluginAdColony.getUniqueDeviceID();\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nsdkbox.PluginAdColony.getAdvertisingIdentifier();\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nsdkbox.PluginAdColony.getVendorIdentifier();\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nsdkbox.PluginAdColony.getVideosPerReward(currencyName);\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nsdkbox.PluginAdColony.getVideoCreditBalance(currencyName);\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nsdkbox.PluginAdColony.cancelAd();\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nsdkbox.PluginAdColony.videoAdCurrentlyRunning();\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nsdkbox.PluginAdColony.turnAllAdsOff();\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nsdkbox.PluginAdColony.setUserMetadata(metadataType, value);\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nsdkbox.PluginAdColony.userInterestedIn(topic);\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nsdkbox.PluginAdColony.notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode);\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nonAdColonyChange(info, available);\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(info, currencyName, amount, success);\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(info);\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(info);\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginadcolony\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Adcolony JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAdColonyJS.hpp \n#include  PluginAdColonyJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAdColonyJS);\nsc- addRegisterCallback(register_all_PluginAdColonyJS_helper);  Initialize AdColony  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAdColony.init();  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony.show( video );  or:  sdkbox.PluginAdColony.show( v4vc );  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   /**\n * The structure of data\n * data.name : name of the ad (in sdkbox_config.json)\n * data.zoneID : the zoneID of the ad\n * data.shown : indicates wether the ad gets shown or closed by user\n * data.iapEnabled : indicating whether or not the associated ad is an IAP\n * data.iapProductID : product identifier for the associated ad's IAP\n * data.iapQuantity : he number of items the user wishes to purchase\n * data.iapEngagementType : indicating the IAP engagement mechanism\n */\n\nsdkbox.PluginAdColony.setListener({\n        onAdColonyChange : function (data, available) {\n                // Called when AdColony finish loading\n        },\n        onAdColonyReward : function (data, currencyName, amount, success) {\n                // Called when AdColony v4vc ad finish playing\n        },\n        onAdColonyStarted : function (data) {\n                // Called when ad starts playing\n        },\n        onAdColonyFinished : function (data) {\n                // Called when an ad finish displaying\n        }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony.init();   initialize the plugin instance.   sdkbox.PluginAdColony.show(name);   play video ad using provided name that was specified in sdkbox_config.json   sdkbox.PluginAdColony.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginAdColony.zoneStatusForZone(zoneID);   Returns the zone status for the specified zone.   sdkbox.PluginAdColony.getStatus(name);   Check the availability of the adcolony ads by name   sdkbox.PluginAdColony.setCustomID(customID);   Assigns your own custom identifier to the current app user.   sdkbox.PluginAdColony.getCustomID();   Returns the device's current custom identifier.   sdkbox.PluginAdColony.getUniqueDeviceID();   Returns an AdColony-defined device identifier.   sdkbox.PluginAdColony.getAdvertisingIdentifier();   Returns the device's advertising identifier.   sdkbox.PluginAdColony.getVendorIdentifier();   Returns the device's vendor identifier.   sdkbox.PluginAdColony.getVideosPerReward(currencyName);   Returns the number of ads that the user must play to earn the designated reward.   sdkbox.PluginAdColony.getVideoCreditBalance(currencyName);   Returns the number of ads that the user has seen towards their next reward.   sdkbox.PluginAdColony.cancelAd();   Cancels any full-screen ad that is currently playing and returns control to the app.   sdkbox.PluginAdColony.videoAdCurrentlyRunning();   Whether a full-screen AdColony ad is currently being played.   sdkbox.PluginAdColony.turnAllAdsOff();   This method permanently turns off all AdColony ads for this app on the current device.   sdkbox.PluginAdColony.setUserMetadata(metadataType, value);   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   sdkbox.PluginAdColony.userInterestedIn(topic);   Provide AdColony with real-time feedback about what a user is interested in.   sdkbox.PluginAdColony.notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode);   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  onAdColonyChange(info, available);   called when AdColony is finished loading.   onAdColonyReward(info, currencyName, amount, success);   reward was received.   onAdColonyStarted(info);   showing an ad has started.   onAdColonyFinished(info);   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar   Copy the  pluginadcolony  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/adcolony/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/", 
            "text": "AdColony\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import adcolony\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AdColony configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAdColony\n account information.\n\n\nAdColony\n:{\n    \nid\n:\napp id\n,\n    \ndebug\n:true,\n    \nads\n:{\n        \nvideo\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: false\n        },\n        \nv4vc\n:{\n            \nzone\n: \nzone id\n,\n            \nv4vc\n: true,\n            \npre_popup\n : true,\n            \npost_popup\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginAdColonyLua.hpp\n\n#include \nPluginAdColonyLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginAdColonyLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginAdColonyLua.hpp\n\n#include \nPluginAdColonyLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginAdColonyLua(tolua_s);\n    register_all_PluginAdColonyLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize AdColony\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAdColony:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad wherever you want from your code, by specifying ad type:\n\n\nsdkbox.PluginAdColony:show(\nvideo\n)\n\n\n\n\nor:\n\n\nsdkbox.PluginAdColony:show(\nv4vc\n)\n\n\n\n\nCatch AdColony events (optional)\n\n\nThis allows you to catch the \nAdColony\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginAdColony:setListener(function(args)\n    if \nonAdColonyChange\n == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info, \nonAdColonyChange:\n)\n        print(\navailable:\n, available)\n    elseif \nonAdColonyReward\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info, \nonAdColonyReward:\n)\n        print(\ncurrencyName:\n, currencyName)\n        print(\namount:\n, amount)\n        print(\nsuccess:\n, success)\n    elseif \nonAdColonyStarted\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyStarted:\n)\n    elseif \nonAdColonyFinished\n ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info, \nonAdColonyFinished:\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAdColony:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAdColony:show(name)\n\n\n\n\n\n\nplay video ad using provided name that was specified in sdkbox_config.json\n\n\n\n\nsdkbox.PluginAdColony:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAdColony:zoneStatusForZone(zoneID)\n\n\n\n\n\n\nReturns the zone status for the specified zone.\n\n\n\n\nsdkbox.PluginAdColony:getStatus(name)\n\n\n\n\n\n\nCheck the availability of the adcolony ads by name\n\n\n\n\nsdkbox.PluginAdColony:setCustomID(customID)\n\n\n\n\n\n\nAssigns your own custom identifier to the current app user.\n\n\n\n\nsdkbox.PluginAdColony:getCustomID()\n\n\n\n\n\n\nReturns the device's current custom identifier.\n\n\n\n\nsdkbox.PluginAdColony:getUniqueDeviceID()\n\n\n\n\n\n\nReturns an AdColony-defined device identifier.\n\n\n\n\nsdkbox.PluginAdColony:getAdvertisingIdentifier()\n\n\n\n\n\n\nReturns the device's advertising identifier.\n\n\n\n\nsdkbox.PluginAdColony:getVendorIdentifier()\n\n\n\n\n\n\nReturns the device's vendor identifier.\n\n\n\n\nsdkbox.PluginAdColony:getVideosPerReward(currencyName)\n\n\n\n\n\n\nReturns the number of ads that the user must play to earn the designated reward.\n\n\n\n\nsdkbox.PluginAdColony:getVideoCreditBalance(currencyName)\n\n\n\n\n\n\nReturns the number of ads that the user has seen towards their next reward.\n\n\n\n\nsdkbox.PluginAdColony:cancelAd()\n\n\n\n\n\n\nCancels any full-screen ad that is currently playing and returns control to the app.\n\n\n\n\nsdkbox.PluginAdColony:videoAdCurrentlyRunning()\n\n\n\n\n\n\nWhether a full-screen AdColony ad is currently being played.\n\n\n\n\nsdkbox.PluginAdColony:turnAllAdsOff()\n\n\n\n\n\n\nThis method permanently turns off all AdColony ads for this app on the current device.\n\n\n\n\nsdkbox.PluginAdColony:setUserMetadata(metadataType, value)\n\n\n\n\n\n\nProvide AdColony with per-user non personally-identifiable information for ad targeting purposes.\n\n\n\n\nsdkbox.PluginAdColony:userInterestedIn(topic)\n\n\n\n\n\n\nProvide AdColony with real-time feedback about what a user is interested in.\n\n\n\n\nsdkbox.PluginAdColony:notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode)\n\n\n\n\n\n\nCall this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.\n\n\n\n\nListeners\n\n\nonAdColonyChange(info, available)\n\n\n\n\n\n\ncalled when AdColony is finished loading.\n\n\n\n\nonAdColonyReward(info, currencyName, amount, success)\n\n\n\n\n\n\nreward was received.\n\n\n\n\nonAdColonyStarted(info)\n\n\n\n\n\n\nshowing an ad has started.\n\n\n\n\nonAdColonyFinished(info)\n\n\n\n\n\n\nshowing an ad has finished.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAdColony\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAdColony.framework\n\n\nAdColony.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nlibz.1.2.5.dylib\n\n\nAdSupport.framework (Set to Optional)\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nCoreTelephony.framework\n\n\nEventKit.framework\n\n\nEventKitUI.framework\n\n\nMediaPlayer.framework\n\n\nMessageUI.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nSocial.framework (Set to Optional)\n\n\nStoreKit.framework (Set to Optional)\n\n\nSystemConfiguration.framework\n\n\nWebKit.framework (Set to Optional)\n\n\n\n\nAdd two separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load AdColony.framework/AdColony\n\n\n-fobjc-arc (this allows AdColony to use ARC even if your project does not)\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nadcolony.jar\n\n\nPluginAdColony.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginadcolony\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.VIBRATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nCopy and paste the following three activity definitions just before the end of the \napplication tags\n, near the bottom.\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyOverlay\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Translucent.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyFullscreen\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\nactivity android:name=\ncom.jirbo.adcolony.AdColonyBrowser\n\n      android:configChanges=\nkeyboardHidden|orientation\n\n      android:theme=\n@android:style/Theme.Black.NoTitleBar.Fullscreen\n /\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove \nscreenSize\n from the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AdColony plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import adcolony", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AdColony configuration, you need to replace  app id  and  zone id  items with your specific  AdColony  account information.  AdColony :{\n     id : app id ,\n     debug :true,\n     ads :{\n         video :{\n             zone :  zone id ,\n             v4vc : false\n        },\n         v4vc :{\n             zone :  zone id ,\n             v4vc : true,\n             pre_popup  : true,\n             post_popup : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginAdColonyLua.hpp \n#include  PluginAdColonyLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginAdColonyLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginAdColonyLua.hpp \n#include  PluginAdColonyLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginAdColonyLua(tolua_s);\n    register_all_PluginAdColonyLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize AdColony  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAdColony:init()  Showing Ads  Display an ad wherever you want from your code, by specifying ad type:  sdkbox.PluginAdColony:show( video )  or:  sdkbox.PluginAdColony:show( v4vc )  Catch AdColony events (optional)  This allows you to catch the  AdColony  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginAdColony:setListener(function(args)\n    if  onAdColonyChange  == args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local available = args.available -- boolean\n                dump(info,  onAdColonyChange: )\n        print( available: , available)\n    elseif  onAdColonyReward  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n        local currencyName = args.currencyName -- string\n        local amount = args.amount -- int\n        local success = args.success -- boolean\n                dump(info,  onAdColonyReward: )\n        print( currencyName: , currencyName)\n        print( amount: , amount)\n        print( success: , success)\n    elseif  onAdColonyStarted  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyStarted: )\n    elseif  onAdColonyFinished  ==  args.name then\n        local info = args.info  -- sdkbox::AdColonyAdInfo\n                dump(info,  onAdColonyFinished: )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAdColony:init()   initialize the plugin instance.   sdkbox.PluginAdColony:show(name)   play video ad using provided name that was specified in sdkbox_config.json   sdkbox.PluginAdColony:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginAdColony:zoneStatusForZone(zoneID)   Returns the zone status for the specified zone.   sdkbox.PluginAdColony:getStatus(name)   Check the availability of the adcolony ads by name   sdkbox.PluginAdColony:setCustomID(customID)   Assigns your own custom identifier to the current app user.   sdkbox.PluginAdColony:getCustomID()   Returns the device's current custom identifier.   sdkbox.PluginAdColony:getUniqueDeviceID()   Returns an AdColony-defined device identifier.   sdkbox.PluginAdColony:getAdvertisingIdentifier()   Returns the device's advertising identifier.   sdkbox.PluginAdColony:getVendorIdentifier()   Returns the device's vendor identifier.   sdkbox.PluginAdColony:getVideosPerReward(currencyName)   Returns the number of ads that the user must play to earn the designated reward.   sdkbox.PluginAdColony:getVideoCreditBalance(currencyName)   Returns the number of ads that the user has seen towards their next reward.   sdkbox.PluginAdColony:cancelAd()   Cancels any full-screen ad that is currently playing and returns control to the app.   sdkbox.PluginAdColony:videoAdCurrentlyRunning()   Whether a full-screen AdColony ad is currently being played.   sdkbox.PluginAdColony:turnAllAdsOff()   This method permanently turns off all AdColony ads for this app on the current device.   sdkbox.PluginAdColony:setUserMetadata(metadataType, value)   Provide AdColony with per-user non personally-identifiable information for ad targeting purposes.   sdkbox.PluginAdColony:userInterestedIn(topic)   Provide AdColony with real-time feedback about what a user is interested in.   sdkbox.PluginAdColony:notifyIAPComplete(transactionID,\n                                         productID,\n                                         quantity,\n                                         price,\n                                         currencyCode)   Call this method to report IAPs within your application. Note that this API can be leveraged to report standard IAPs\nas well as those triggered by AdColony\u2019s IAP Promo (IAPP) advertisements and will improve overall ad targeting.   Listeners  onAdColonyChange(info, available)   called when AdColony is finished loading.   onAdColonyReward(info, currencyName, amount, success)   reward was received.   onAdColonyStarted(info)   showing an ad has started.   onAdColonyFinished(info)   showing an ad has finished.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AdColony  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAdColony.framework  AdColony.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   libz.1.2.5.dylib  AdSupport.framework (Set to Optional)  AudioToolbox.framework  AVFoundation.framework  CoreGraphics.framework  CoreMedia.framework  CoreTelephony.framework  EventKit.framework  EventKitUI.framework  MediaPlayer.framework  MessageUI.framework  QuartzCore.framework  Security.framework  Social.framework (Set to Optional)  StoreKit.framework (Set to Optional)  SystemConfiguration.framework  WebKit.framework (Set to Optional)   Add two separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load AdColony.framework/AdColony  -fobjc-arc (this allows AdColony to use ARC even if your project does not)   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   adcolony.jar  PluginAdColony.jar  sdkbox.jar   Copy the  pluginadcolony  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.VIBRATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Copy and paste the following three activity definitions just before the end of the  application tags , near the bottom.  activity android:name= com.jirbo.adcolony.AdColonyOverlay \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Translucent.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyFullscreen \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /  activity android:name= com.jirbo.adcolony.AdColonyBrowser \n      android:configChanges= keyboardHidden|orientation \n      android:theme= @android:style/Theme.Black.NoTitleBar.Fullscreen  /   Note:  if your application targets below  API 13 , you will likely need to remove  screenSize  from the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAdColony\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginadcolony)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/adcolony/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\nUsage\n\n\nInitialize AgeCheq\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginAgeCheq/PluginAgeCheq.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAgeCheq::init();\n}\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n or \nassociateDate()\n wherever you want from your code:\n\n\nsdkbox::PluginAgeCheq::check(\n1426\n);\nsdkbox::PluginAgeCheq::associateData(\n1426\n, \nikfill\n);\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::AgeCheqListener\n\n\n\n\n#include \nPluginAgeCheq/PluginAgeCheq.h\n\nclass MyClass : public sdkbox::AgeCheqListener\n{\nprivate:\n  void checkResponse(const std::string\n rtn, const std::string\n rtnmsg,\n          int apiversion, int checktype, bool appauthorized,\n          bool appblocked, int parentverified, bool under13,\n          bool under18, bool underdevage, int trials);\n\n  void associateDataResponse(const std::string\n rtn,\n          const std::string\n rtnmsg);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAgeCheq::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( AgeCheqListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic AgeCheqListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void check ( const std::string \n ACPin ) ;\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nstatic void associateData ( const std::string \n ACPin ,\n                            const std::string \n Data ) ;\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\nvoid checkResponse ( const std::string \n rtn ,\n                     const std::string \n rtnmsg ,\n                     int apiversion ,\n                     int checktype ,\n                     bool appauthorized ,\n                     bool appblocked ,\n                     int parentverified ,\n                     bool under13 ,\n                     bool under18 ,\n                     bool underdevage ,\n                     int trials );\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nvoid associateDataResponse ( const std::string \n rtn ,\n                             const std::string \n rtnmsg );\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginagecheq\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#usage", 
            "text": "Initialize AgeCheq  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginAgeCheq/PluginAgeCheq.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAgeCheq::init();\n}  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  or  associateDate()  wherever you want from your code:  sdkbox::PluginAgeCheq::check( 1426 );\nsdkbox::PluginAgeCheq::associateData( 1426 ,  ikfill );  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::AgeCheqListener   #include  PluginAgeCheq/PluginAgeCheq.h \nclass MyClass : public sdkbox::AgeCheqListener\n{\nprivate:\n  void checkResponse(const std::string  rtn, const std::string  rtnmsg,\n          int apiversion, int checktype, bool appauthorized,\n          bool appblocked, int parentverified, bool under13,\n          bool under18, bool underdevage, int trials);\n\n  void associateDataResponse(const std::string  rtn,\n          const std::string  rtnmsg);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAgeCheq::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( AgeCheqListener * listener ) ;   Set listener to listen for adcolony events   static AgeCheqListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void check ( const std::string   ACPin ) ;   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   static void associateData ( const std::string   ACPin ,\n                            const std::string   Data ) ;   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  void checkResponse ( const std::string   rtn ,\n                     const std::string   rtnmsg ,\n                     int apiversion ,\n                     int checktype ,\n                     bool appauthorized ,\n                     bool appblocked ,\n                     int parentverified ,\n                     bool under13 ,\n                     bool under18 ,\n                     bool underdevage ,\n                     int trials );   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   void associateDataResponse ( const std::string   rtn ,\n                             const std::string   rtnmsg );   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginagecheq  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/agecheq/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the AgeCheq JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAgeCheqJS.hpp\n\n#include \nPluginAgeCheqJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAgeCheqJS);\nsc-\naddRegisterCallback(register_all_PluginAgeCheqJS_helper);\n\n\n\n\nInitialize AgeCheq\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAgeCheq.init();\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginAgeCheq.check(\nagecheqPin\n);\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginAgeCheq.init();\nsdkbox.PluginAgeCheq.setListener({\n    checkResponse : function (rtn, rtnmsg, apiversion, checktype, appauthorized, appblocked, parentverified, under13, under18, underdevage, trials) {\n        cc.log(\ncheckResponse rtn:\n + rtn + \n rtnmsg:\n + rtnmsg\n            + \n apiversion:\n + apiversion + \n checktype:\n + checktype\n            + \n appauthorized:\n + appauthorized + \n appblocked:\n + appblocked\n            + \n parentverified:\n + parentverified + \n under13:\n + under13\n            + \n under18:\n + under18 + \n underdevage:\n + underdevage + \n trials:\n + trials);\n    },\n    associateDataResponse : function (rtn, rtnmsg) {\n        cc.log(\nassociateDataResponse rtn:\n + rtn + \n rtnmsg:\n + rtnmsg);\n    }\n})\nsdkbox.PluginAgeCheq.check(\nagecheqPin\n);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAgeCheq.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAgeCheq.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAgeCheq.check(ACPin);\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nsdkbox.PluginAgeCheq.associateData(ACPin, Data);\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\ncheckResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials);\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nassociateDataResponse(rtn, rtnmsg);\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginagecheq\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the AgeCheq JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAgeCheqJS.hpp \n#include  PluginAgeCheqJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAgeCheqJS);\nsc- addRegisterCallback(register_all_PluginAgeCheqJS_helper);  Initialize AgeCheq  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAgeCheq.init();  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  wherever you want from your code:  sdkbox.PluginAgeCheq.check( agecheqPin );  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginAgeCheq.init();\nsdkbox.PluginAgeCheq.setListener({\n    checkResponse : function (rtn, rtnmsg, apiversion, checktype, appauthorized, appblocked, parentverified, under13, under18, underdevage, trials) {\n        cc.log( checkResponse rtn:  + rtn +   rtnmsg:  + rtnmsg\n            +   apiversion:  + apiversion +   checktype:  + checktype\n            +   appauthorized:  + appauthorized +   appblocked:  + appblocked\n            +   parentverified:  + parentverified +   under13:  + under13\n            +   under18:  + under18 +   underdevage:  + underdevage +   trials:  + trials);\n    },\n    associateDataResponse : function (rtn, rtnmsg) {\n        cc.log( associateDataResponse rtn:  + rtn +   rtnmsg:  + rtnmsg);\n    }\n})\nsdkbox.PluginAgeCheq.check( agecheqPin );", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAgeCheq.init();   initialize the plugin instance.   sdkbox.PluginAgeCheq.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginAgeCheq.check(ACPin);   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   sdkbox.PluginAgeCheq.associateData(ACPin, Data);   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  checkResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials);   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   associateDataResponse(rtn, rtnmsg);   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginagecheq  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/agecheq/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nAgeCheq\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginAgeCheqLua.hpp\n\n#include \nPluginAgeCheqLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginAgeCheqLua(L);\n  register_all_PluginAgeCheqLua_helper(L);\n}\n\n\n\n\nInitialize AgeCheq\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAgeCheq:init()\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginAgeCheq:check(\nagecheqPin\n)\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginAgeCheq:init()\nsdkbox.PluginAgeCheq:setListener(function(data)\n        if \ncheckResponse\n == data.event then\n            dump(data)\n        elseif \nassociateDataResponse\n == data.event then\n            dump(data)\n        end\n    end)\nsdkbox.PluginAgeCheq:check(\nagecheqPin\n)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAgeCheq:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAgeCheq:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAgeCheq:check(ACPin)\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nsdkbox.PluginAgeCheq:associateData(ACPin, Data)\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\ncheckResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials)\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nassociateDataResponse(rtn, rtnmsg)\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginagecheq\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  AgeCheq  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginAgeCheqLua.hpp \n#include  PluginAgeCheqLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginAgeCheqLua(L);\n  register_all_PluginAgeCheqLua_helper(L);\n}  Initialize AgeCheq  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAgeCheq:init()  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  wherever you want from your code:  sdkbox.PluginAgeCheq:check( agecheqPin )  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginAgeCheq:init()\nsdkbox.PluginAgeCheq:setListener(function(data)\n        if  checkResponse  == data.event then\n            dump(data)\n        elseif  associateDataResponse  == data.event then\n            dump(data)\n        end\n    end)\nsdkbox.PluginAgeCheq:check( agecheqPin )", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAgeCheq:init()   initialize the plugin instance.   sdkbox.PluginAgeCheq:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginAgeCheq:check(ACPin)   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   sdkbox.PluginAgeCheq:associateData(ACPin, Data)   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  checkResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials)   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   associateDataResponse(rtn, rtnmsg)   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginagecheq  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/agecheq/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\nUsage\n\n\nInitialize AgeCheq\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginAgeCheq/PluginAgeCheq.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAgeCheq::init();\n}\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n or \nassociateDate()\n wherever you want from your code:\n\n\nsdkbox::PluginAgeCheq::check(\n1426\n);\nsdkbox::PluginAgeCheq::associateData(\n1426\n, \nikfill\n);\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::AgeCheqListener\n\n\n\n\n#include \nPluginAgeCheq/PluginAgeCheq.h\n\nclass MyClass : public sdkbox::AgeCheqListener\n{\nprivate:\n  void checkResponse(const std::string\n rtn, const std::string\n rtnmsg,\n          int apiversion, int checktype, bool appauthorized,\n          bool appblocked, int parentverified, bool under13,\n          bool under18, bool underdevage, int trials);\n\n  void associateDataResponse(const std::string\n rtn,\n          const std::string\n rtnmsg);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginAgeCheq::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( AgeCheqListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic AgeCheqListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void check ( const std::string \n ACPin ) ;\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nstatic void associateData ( const std::string \n ACPin ,\n                            const std::string \n Data ) ;\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\nvoid checkResponse ( const std::string \n rtn ,\n                     const std::string \n rtnmsg ,\n                     int apiversion ,\n                     int checktype ,\n                     bool appauthorized ,\n                     bool appblocked ,\n                     int parentverified ,\n                     bool under13 ,\n                     bool under18 ,\n                     bool underdevage ,\n                     int trials );\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nvoid associateDataResponse ( const std::string \n rtn ,\n                             const std::string \n rtnmsg );\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginagecheq\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#usage", 
            "text": "Initialize AgeCheq  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginAgeCheq/PluginAgeCheq.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginAgeCheq::init();\n}  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  or  associateDate()  wherever you want from your code:  sdkbox::PluginAgeCheq::check( 1426 );\nsdkbox::PluginAgeCheq::associateData( 1426 ,  ikfill );  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::AgeCheqListener   #include  PluginAgeCheq/PluginAgeCheq.h \nclass MyClass : public sdkbox::AgeCheqListener\n{\nprivate:\n  void checkResponse(const std::string  rtn, const std::string  rtnmsg,\n          int apiversion, int checktype, bool appauthorized,\n          bool appblocked, int parentverified, bool under13,\n          bool under18, bool underdevage, int trials);\n\n  void associateDataResponse(const std::string  rtn,\n          const std::string  rtnmsg);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginAgeCheq::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( AgeCheqListener * listener ) ;   Set listener to listen for adcolony events   static AgeCheqListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void check ( const std::string   ACPin ) ;   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   static void associateData ( const std::string   ACPin ,\n                            const std::string   Data ) ;   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  void checkResponse ( const std::string   rtn ,\n                     const std::string   rtnmsg ,\n                     int apiversion ,\n                     int checktype ,\n                     bool appauthorized ,\n                     bool appblocked ,\n                     int parentverified ,\n                     bool under13 ,\n                     bool under18 ,\n                     bool underdevage ,\n                     int trials );   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   void associateDataResponse ( const std::string   rtn ,\n                             const std::string   rtnmsg );   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar   Copy the  pluginagecheq  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/agecheq/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the AgeCheq JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginAgeCheqJS.hpp\n\n#include \nPluginAgeCheqJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginAgeCheqJS);\nsc-\naddRegisterCallback(register_all_PluginAgeCheqJS_helper);\n\n\n\n\nInitialize AgeCheq\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginAgeCheq.init();\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginAgeCheq.check(\nagecheqPin\n);\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginAgeCheq.init();\nsdkbox.PluginAgeCheq.setListener({\n    checkResponse : function (rtn, rtnmsg, apiversion, checktype, appauthorized, appblocked, parentverified, under13, under18, underdevage, trials) {\n        cc.log(\ncheckResponse rtn:\n + rtn + \n rtnmsg:\n + rtnmsg\n            + \n apiversion:\n + apiversion + \n checktype:\n + checktype\n            + \n appauthorized:\n + appauthorized + \n appblocked:\n + appblocked\n            + \n parentverified:\n + parentverified + \n under13:\n + under13\n            + \n under18:\n + under18 + \n underdevage:\n + underdevage + \n trials:\n + trials);\n    },\n    associateDataResponse : function (rtn, rtnmsg) {\n        cc.log(\nassociateDataResponse rtn:\n + rtn + \n rtnmsg:\n + rtnmsg);\n    }\n})\nsdkbox.PluginAgeCheq.check(\nagecheqPin\n);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAgeCheq.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAgeCheq.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAgeCheq.check(ACPin);\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nsdkbox.PluginAgeCheq.associateData(ACPin, Data);\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\ncheckResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials);\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nassociateDataResponse(rtn, rtnmsg);\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginagecheq\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the AgeCheq JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginAgeCheqJS.hpp \n#include  PluginAgeCheqJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginAgeCheqJS);\nsc- addRegisterCallback(register_all_PluginAgeCheqJS_helper);  Initialize AgeCheq  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginAgeCheq.init();  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  wherever you want from your code:  sdkbox.PluginAgeCheq.check( agecheqPin );  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginAgeCheq.init();\nsdkbox.PluginAgeCheq.setListener({\n    checkResponse : function (rtn, rtnmsg, apiversion, checktype, appauthorized, appblocked, parentverified, under13, under18, underdevage, trials) {\n        cc.log( checkResponse rtn:  + rtn +   rtnmsg:  + rtnmsg\n            +   apiversion:  + apiversion +   checktype:  + checktype\n            +   appauthorized:  + appauthorized +   appblocked:  + appblocked\n            +   parentverified:  + parentverified +   under13:  + under13\n            +   under18:  + under18 +   underdevage:  + underdevage +   trials:  + trials);\n    },\n    associateDataResponse : function (rtn, rtnmsg) {\n        cc.log( associateDataResponse rtn:  + rtn +   rtnmsg:  + rtnmsg);\n    }\n})\nsdkbox.PluginAgeCheq.check( agecheqPin );", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginAgeCheq.init();   initialize the plugin instance.   sdkbox.PluginAgeCheq.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginAgeCheq.check(ACPin);   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   sdkbox.PluginAgeCheq.associateData(ACPin, Data);   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  checkResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials);   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   associateDataResponse(rtn, rtnmsg);   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar   Copy the  pluginagecheq  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/agecheq/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/", 
            "text": "AgeCheq\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import agecheq\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the AgeCheq configuration, you need to replace \napp id\n and \nzone id\n items with your specific \nAgeCheq ID\n account information.\n\n\nAgeCheq\n:{\n            \nAppID\n:\nca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc\n,\n            \nDeveloperKey\n:\n9102be76-232b-49b1-9c4f-1c6806d3a975\n\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\n\n\nModify \nClasses/AppDelegate.cpp\nto include the following headers:\n\n\n\n\n#include \nPluginAgeCheqLua.hpp\n\n#include \nPluginAgeCheqLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginAgeCheqLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginAgeCheqLua.hpp\n\n#include \nPluginAgeCheqLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginAgeCheqLua(tolua_s);\n    register_all_PluginAgeCheqLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize AgeCheq\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginAgeCheq:init()\n\n\n\n\nUsing AgeCheq\n\n\nAfter initialization you can begin to use the AgeCheq functionality. Use \ncheck\n wherever you want from your code:\n\n\nsdkbox.PluginAgeCheq:check(\nagecheqPin\n)\n\n\n\n\nCatch AgeCheq events (optional)\n\n\nThis allows you to catch the \nAgeCheq\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginAgeCheq:init()\nsdkbox.PluginAgeCheq:setListener(function(data)\n        if \ncheckResponse\n == data.event then\n            dump(data)\n        elseif \nassociateDataResponse\n == data.event then\n            dump(data)\n        end\n    end)\nsdkbox.PluginAgeCheq:check(\nagecheqPin\n)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginAgeCheq:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginAgeCheq:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginAgeCheq:check(ACPin)\n\n\n\n\n\n\nThe AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.\n\n\n\n\nsdkbox.PluginAgeCheq:associateData(ACPin, Data)\n\n\n\n\n\n\nThe associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.\n\n\n\n\nListeners\n\n\ncheckResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials)\n\n\n\n\n\n\nThe delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.\n\n\n\n\nassociateDataResponse(rtn, rtnmsg)\n\n\n\n\n\n\nThe delegate named associateDataResponse is triggered once the associateData command executes.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nAgeCheq\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginAgeCheq.framework\n\n\n\n\nadd the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nAgeCheqLib.jar\n\n\nPluginAgeCheq.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginagecheq\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX AgeCheq plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import agecheq", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the AgeCheq configuration, you need to replace  app id  and  zone id  items with your specific  AgeCheq ID  account information.  AgeCheq :{\n             AppID : ca0e20a3-3bb8-42e1-a5ac-55af7f63dbfc ,\n             DeveloperKey : 9102be76-232b-49b1-9c4f-1c6806d3a975 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#usage", 
            "text": "Modify Lua Code   Modify  Classes/AppDelegate.cpp to include the following headers:   #include  PluginAgeCheqLua.hpp \n#include  PluginAgeCheqLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginAgeCheqLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginAgeCheqLua.hpp \n#include  PluginAgeCheqLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginAgeCheqLua(tolua_s);\n    register_all_PluginAgeCheqLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize AgeCheq  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginAgeCheq:init()  Using AgeCheq  After initialization you can begin to use the AgeCheq functionality. Use  check  wherever you want from your code:  sdkbox.PluginAgeCheq:check( agecheqPin )  Catch AgeCheq events (optional)  This allows you to catch the  AgeCheq  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginAgeCheq:init()\nsdkbox.PluginAgeCheq:setListener(function(data)\n        if  checkResponse  == data.event then\n            dump(data)\n        elseif  associateDataResponse  == data.event then\n            dump(data)\n        end\n    end)\nsdkbox.PluginAgeCheq:check( agecheqPin )", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginAgeCheq:init()   initialize the plugin instance.   sdkbox.PluginAgeCheq:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginAgeCheq:check(ACPin)   The AgeCheq check method is used to determine the status of a child\u2019s relationship with a particular\n online service. It requires the developer\u2019s unique identifier, the child\u2019s AgeCheq PIN as set up by\n their parent, and the unique identifier of the game or application.   sdkbox.PluginAgeCheq:associateData(ACPin, Data)   The associateData method allows you to save a string of information linking it to a particular\n AgeCheqPIN for a specific game or app. You\u2019ll want to use that data later if a parent should\n unauthorize your online service.   Listeners  checkResponse(rtn,\n               rtnmsg,\n               apiversion,\n               checktype,\n               appauthorized,\n               appblocked,\n               parentverified,\n               under13,\n               under18,\n               underdevage,\n               trials)   The delegate named checkResponse is triggered once the check command executes. It contains several\n status variables that you can check against.   associateDataResponse(rtn, rtnmsg)   The delegate named associateDataResponse is triggered once the associateData command executes.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  AgeCheq  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginAgeCheq.framework   add the following system frameworks, if you don't already have them:   AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   AgeCheqLib.jar  PluginAgeCheq.jar  sdkbox.jar   Copy the  pluginagecheq  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginAgeCheq\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginagecheq)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/agecheq/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::ChartboostListener\n\n\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n    void onChartboostCached(const std::string\n name);\n    bool onChartboostShouldDisplay(const std::string\n name);\n    void onChartboostDisplay(const std::string\n name);\n    void onChartboostDismiss(const std::string\n name);\n    void onChartboostClose(const std::string\n name);\n    void onChartboostClick(const std::string\n name);\n    void onChartboostReward(const std::string\n name, int reward);\n    void onChartboostFailedToLoad(const std::string\n name, sdkbox::CB_LoadError e);\n    void onChartboostFailToRecordClick(const std::string\n name, sdkbox::CB_ClickError e);\n    void onChartboostConfirmation();\n    void onChartboostCompleteStore();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginChartboost::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nstatic void setListener ( ChartboostListener * listener ) ;\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nstatic ChartboostListener * getListener ( ) ;\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nstatic bool isAnyViewVisible ( ) ;\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nstatic bool isAvailable ( const std::string \n name ) ;\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nstatic void cache ( const std::string \n name ) ;\n\n\n\n\nstatic void setAutoCacheAds ( bool shouldCache ) ;\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nstatic bool getAutoCacheAds ( ) ;\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nstatic void closeImpression ( ) ;\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nstatic void setStatusBarBehavior ( CB_StatusBarBehavior behavior ) ;\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nstatic void didPassAgeGate ( bool pass ) ;\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nstatic void setShouldPauseClickForConfirmation ( bool shouldPause ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nstatic bool handleOpenURL ( const std::string \n url ,\n                            const std::string \n sourceApp ) ;\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nstatic void setCustomID ( const std::string \n customID ) ;\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nstatic std::string getCustomID ( ) ;\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nstatic void setShouldRequestInterstitialsInFirstSession ( bool shouldRequest ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nstatic void setShouldDisplayLoadingViewForMoreApps ( bool shouldDisplay ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nstatic void setShouldPrefetchVideoContent ( bool shouldPrefetch ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nvoid onChartboostCached ( const std::string \n name );\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nbool onChartboostShouldDisplay ( const std::string \n name );\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nvoid onChartboostDisplay ( const std::string \n name );\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nvoid onChartboostDismiss ( const std::string \n name );\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nvoid onChartboostClose ( const std::string \n name );\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nvoid onChartboostClick ( const std::string \n name );\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nvoid onChartboostReward ( const std::string \n name , int reward );\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nvoid onChartboostFailedToLoad ( const std::string \n name , CB_LoadError e );\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nvoid onChartboostFailToRecordClick ( const std::string \n name ,\n                                     CB_ClickError e );\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nvoid onChartboostConfirmation ( );\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nvoid onChartboostCompleteStore ( );\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginachartboost\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#usage", 
            "text": "Initialize Chartboost  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginChartboost/PluginChartboost.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::ChartboostListener   #include  PluginChartboost/PluginChartboost.h \nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n    void onChartboostCached(const std::string  name);\n    bool onChartboostShouldDisplay(const std::string  name);\n    void onChartboostDisplay(const std::string  name);\n    void onChartboostDismiss(const std::string  name);\n    void onChartboostClose(const std::string  name);\n    void onChartboostClick(const std::string  name);\n    void onChartboostReward(const std::string  name, int reward);\n    void onChartboostFailedToLoad(const std::string  name, sdkbox::CB_LoadError e);\n    void onChartboostFailToRecordClick(const std::string  name, sdkbox::CB_ClickError e);\n    void onChartboostConfirmation();\n    void onChartboostCompleteStore();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginChartboost::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   show ad by specifying ad name.   static void setListener ( ChartboostListener * listener ) ;   creates the an optional listener.   static ChartboostListener * getListener ( ) ;  static void removeListener ( ) ;   removed the listener.   static bool isAnyViewVisible ( ) ;   check to see if any views are visible.   static bool isAvailable ( const std::string   name ) ;   is the specified ad available?   static void cache ( const std::string   name ) ;  static void setAutoCacheAds ( bool shouldCache ) ;   set to enable and disable the auto cache feature (Enabled by default).   static bool getAutoCacheAds ( ) ;   get the current auto cache behavior (Enabled by default).   static void closeImpression ( ) ;   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   static void setStatusBarBehavior ( CB_StatusBarBehavior behavior ) ;   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   static void didPassAgeGate ( bool pass ) ;   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   static void setShouldPauseClickForConfirmation ( bool shouldPause ) ;   decide if Chartboost SDK should block for an age gate.   static bool handleOpenURL ( const std::string   url ,\n                            const std::string   sourceApp ) ;   opens a \"deep link\" URL for a Chartboost Custom Scheme.   static void setCustomID ( const std::string   customID ) ;   set a custom identifier to send in the POST body for all Chartboost API server requests.   static std::string getCustomID ( ) ;   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   static void setShouldRequestInterstitialsInFirstSession ( bool shouldRequest ) ;   decide if Chartboost SDK should show interstitials in the first session.   static void setShouldDisplayLoadingViewForMoreApps ( bool shouldDisplay ) ;   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   static void setShouldPrefetchVideoContent ( bool shouldPrefetch ) ;   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  void onChartboostCached ( const std::string   name );   there is cached content   bool onChartboostShouldDisplay ( const std::string   name );   should Chartboost display   void onChartboostDisplay ( const std::string   name );   Charboost ad has displayed   void onChartboostDismiss ( const std::string   name );   Chartboost ad has been dismissed   void onChartboostClose ( const std::string   name );   Chartboost is not running   void onChartboostClick ( const std::string   name );   Chartboost ad was clicked on   void onChartboostReward ( const std::string   name , int reward );   Chartboost reward was given   void onChartboostFailedToLoad ( const std::string   name , CB_LoadError e );   Chartboost failed to load   void onChartboostFailToRecordClick ( const std::string   name ,\n                                     CB_ClickError e );   Chartboost failed to record click   void onChartboostConfirmation ( );   Chartboost confirmation   void onChartboostCompleteStore ( );   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginachartboost  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/chartboost/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Chartboost JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginChartboostJS.hpp\n\n#include \nPluginChartboostJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginChartboostJS);\nsc-\naddRegisterCallback(register_all_PluginChartboostJS_helper);\n\n\n\n\nInitialize Chartboost\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show(\nDefault\n);\n// To use customized location\nsdkbox.PluginChartboost.show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log(\nonChartboostCached \n + name) },\n    onChartboostShouldDisplay : function (name) { cc.log(\nonChartboostShouldDisplay \n + name) },\n    onChartboostDisplay : function (name) { cc.log(\nonChartboostDisplay \n + name) },\n    onChartboostDismiss : function (name) { cc.log(\nonChartboostDismiss \n + name) },\n    onChartboostClose : function (name) { cc.log(\nonChartboostClose \n + name) },\n    onChartboostClick : function (name) { cc.log(\nonChartboostClick \n + name) },\n    onChartboostReward : function (name, reward) { cc.log(\nonChartboostReward \n + name + \n reward \n + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log(\nonChartboostFailedToLoad \n + name + \n load error \n + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log(\nonChartboostFailToRecordClick \n + name + \n click error \n + e) },\n    onChartboostConfirmation : function () { cc.log(\nonChartboostConfirmation\n) },\n    onChartboostCompleteStore : function () { cc.log(\nonChartboostCompleteStore\n) },\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost.show(name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost.setListener(listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost.isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost.isAvailable(name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost.cache(name);\n\n\n\n\nsdkbox.PluginChartboost.setAutoCacheAds(shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost.setStatusBarBehavior(behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost.didPassAgeGate(pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost.handleOpenURL(url, sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost.setCustomID(customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost.getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nsdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nonChartboostCached(name);\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay(name);\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay(name);\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss(name);\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose(name);\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick(name);\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward(name, reward);\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad(name, e);\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick(name, e);\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation();\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore();\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginachartboost\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Chartboost JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginChartboostJS.hpp \n#include  PluginChartboostJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginChartboostJS);\nsc- addRegisterCallback(register_all_PluginChartboostJS_helper);  Initialize Chartboost  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginChartboost.init();  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show( Default );\n// To use customized location\nsdkbox.PluginChartboost.show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log( onChartboostCached   + name) },\n    onChartboostShouldDisplay : function (name) { cc.log( onChartboostShouldDisplay   + name) },\n    onChartboostDisplay : function (name) { cc.log( onChartboostDisplay   + name) },\n    onChartboostDismiss : function (name) { cc.log( onChartboostDismiss   + name) },\n    onChartboostClose : function (name) { cc.log( onChartboostClose   + name) },\n    onChartboostClick : function (name) { cc.log( onChartboostClick   + name) },\n    onChartboostReward : function (name, reward) { cc.log( onChartboostReward   + name +   reward   + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log( onChartboostFailedToLoad   + name +   load error   + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log( onChartboostFailToRecordClick   + name +   click error   + e) },\n    onChartboostConfirmation : function () { cc.log( onChartboostConfirmation ) },\n    onChartboostCompleteStore : function () { cc.log( onChartboostCompleteStore ) },\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost.init();   initialize the plugin instance.   sdkbox.PluginChartboost.show(name);   show ad by specifying ad name.   sdkbox.PluginChartboost.setListener(listener);   creates the an optional listener.   sdkbox.PluginChartboost.isAnyViewVisible();   check to see if any views are visible.   sdkbox.PluginChartboost.isAvailable(name);   is the specified ad available?   sdkbox.PluginChartboost.cache(name);  sdkbox.PluginChartboost.setAutoCacheAds(shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost.getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost.closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost.setStatusBarBehavior(behavior);   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost.didPassAgeGate(pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   sdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost.handleOpenURL(url, sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost.setCustomID(customID);   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost.getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   sdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   sdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  onChartboostCached(name);   there is cached content   onChartboostShouldDisplay(name);   should Chartboost display   onChartboostDisplay(name);   Charboost ad has displayed   onChartboostDismiss(name);   Chartboost ad has been dismissed   onChartboostClose(name);   Chartboost is not running   onChartboostClick(name);   Chartboost ad was clicked on   onChartboostReward(name, reward);   Chartboost reward was given   onChartboostFailedToLoad(name, e);   Chartboost failed to load   onChartboostFailToRecordClick(name, e);   Chartboost failed to record click   onChartboostConfirmation();   Chartboost confirmation   onChartboostCompleteStore();   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginachartboost  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/chartboost/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nChartboost\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginChartboostLua.hpp\n\n#include \nPluginChartboostLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginChartboostLua(L);\n  register_all_PluginChartboostLua_helper(L);\n}\n\n\n\n\nInitialize Chartboost\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginChartboost:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show(\nDefault\n)\n// To use customized location\nsdkbox.PluginChartboost:show(\nyour_ad_name\n)\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost:setListener(function(args)\n    if \nonChartboostCached\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCached\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostShouldDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostShouldDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDismiss\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDismiss\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClose\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClose\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClick\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClick\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostReward\n == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print(\nonChartboostReward\n)\n        print(\nname:\n, args.name)\n        print(\nreward:\n, reward)\n    elseif \nonChartboostFailedToLoad\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailedToLoad\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostFailToRecordClick\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailToRecordClick\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostConfirmation\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostConfirmation\n)\n    elseif \nonChartboostCompleteStore\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCompleteStore\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost:show(name)\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost:setListener(listener)\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost:isAnyViewVisible()\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost:isAvailable(name)\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost:cache(name)\n\n\n\n\nsdkbox.PluginChartboost:setAutoCacheAds(shouldCache)\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:getAutoCacheAds()\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:closeImpression()\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost:setStatusBarBehavior(behavior)\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost:didPassAgeGate(pass)\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause)\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost:handleOpenURL(url, sourceApp)\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost:setCustomID(customID)\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost:getCustomID()\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nsdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest)\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay)\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch)\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nonChartboostCached(name)\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay(name)\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay(name)\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss(name)\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose(name)\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick(name)\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward(name, reward)\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad(name, e)\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick(name, e)\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation()\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore()\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginachartboost\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Chartboost  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginChartboostLua.hpp \n#include  PluginChartboostLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginChartboostLua(L);\n  register_all_PluginChartboostLua_helper(L);\n}  Initialize Chartboost   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginChartboost:init()  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show( Default )\n// To use customized location\nsdkbox.PluginChartboost:show( your_ad_name )  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost:setListener(function(args)\n    if  onChartboostCached  == args.func then\n        local name = args.name -- string\n        print( onChartboostCached )\n        print( name: , args.name)\n    elseif  onChartboostShouldDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostShouldDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDismiss  == args.func then\n        local name = args.name -- string\n        print( onChartboostDismiss )\n        print( name: , args.name)\n    elseif  onChartboostClose  == args.func then\n        local name = args.name -- string\n        print( onChartboostClose )\n        print( name: , args.name)\n    elseif  onChartboostClick  == args.func then\n        local name = args.name -- string\n        print( onChartboostClick )\n        print( name: , args.name)\n    elseif  onChartboostReward  == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print( onChartboostReward )\n        print( name: , args.name)\n        print( reward: , reward)\n    elseif  onChartboostFailedToLoad  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailedToLoad )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostFailToRecordClick  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailToRecordClick )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostConfirmation  == args.func then\n        local name = args.name -- string\n        print( onChartboostConfirmation )\n    elseif  onChartboostCompleteStore  == args.func then\n        local name = args.name -- string\n        print( onChartboostCompleteStore )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost:init()   initialize the plugin instance.   sdkbox.PluginChartboost:show(name)   show ad by specifying ad name.   sdkbox.PluginChartboost:setListener(listener)   creates the an optional listener.   sdkbox.PluginChartboost:isAnyViewVisible()   check to see if any views are visible.   sdkbox.PluginChartboost:isAvailable(name)   is the specified ad available?   sdkbox.PluginChartboost:cache(name)  sdkbox.PluginChartboost:setAutoCacheAds(shouldCache)   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost:getAutoCacheAds()   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost:closeImpression()   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost:setStatusBarBehavior(behavior)   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost:didPassAgeGate(pass)   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   sdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause)   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost:handleOpenURL(url, sourceApp)   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost:setCustomID(customID)   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost:getCustomID()   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   sdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest)   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay)   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   sdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch)   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  onChartboostCached(name)   there is cached content   onChartboostShouldDisplay(name)   should Chartboost display   onChartboostDisplay(name)   Charboost ad has displayed   onChartboostDismiss(name)   Chartboost ad has been dismissed   onChartboostClose(name)   Chartboost is not running   onChartboostClick(name)   Chartboost ad was clicked on   onChartboostReward(name, reward)   Chartboost reward was given   onChartboostFailedToLoad(name, e)   Chartboost failed to load   onChartboostFailToRecordClick(name, e)   Chartboost failed to record click   onChartboostConfirmation()   Chartboost confirmation   onChartboostCompleteStore()   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginachartboost  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/chartboost/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Chartboost\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nAllow your class to extend \nsdkbox::ChartboostListener\n\n\n\n\n#include \nPluginChartboost/PluginChartboost.h\n\nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n    void onChartboostCached(const std::string\n name);\n    bool onChartboostShouldDisplay(const std::string\n name);\n    void onChartboostDisplay(const std::string\n name);\n    void onChartboostDismiss(const std::string\n name);\n    void onChartboostClose(const std::string\n name);\n    void onChartboostClick(const std::string\n name);\n    void onChartboostReward(const std::string\n name, int reward);\n    void onChartboostFailedToLoad(const std::string\n name, sdkbox::CB_LoadError e);\n    void onChartboostFailToRecordClick(const std::string\n name, sdkbox::CB_ClickError e);\n    void onChartboostConfirmation();\n    void onChartboostCompleteStore();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginChartboost::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nstatic void setListener ( ChartboostListener * listener ) ;\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nstatic ChartboostListener * getListener ( ) ;\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremoved the listener.\n\n\n\n\nstatic bool isAnyViewVisible ( ) ;\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nstatic bool isAvailable ( const std::string \n name ) ;\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nstatic void cache ( const std::string \n name ) ;\n\n\n\n\nstatic void setAutoCacheAds ( bool shouldCache ) ;\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nstatic bool getAutoCacheAds ( ) ;\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nstatic void closeImpression ( ) ;\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nstatic void setStatusBarBehavior ( CB_StatusBarBehavior behavior ) ;\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nstatic void didPassAgeGate ( bool pass ) ;\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nstatic void setShouldPauseClickForConfirmation ( bool shouldPause ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nstatic bool handleOpenURL ( const std::string \n url ,\n                            const std::string \n sourceApp ) ;\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nstatic void setCustomID ( const std::string \n customID ) ;\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nstatic std::string getCustomID ( ) ;\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nstatic void setShouldRequestInterstitialsInFirstSession ( bool shouldRequest ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nstatic void setShouldDisplayLoadingViewForMoreApps ( bool shouldDisplay ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nstatic void setShouldPrefetchVideoContent ( bool shouldPrefetch ) ;\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nvoid onChartboostCached ( const std::string \n name );\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nbool onChartboostShouldDisplay ( const std::string \n name );\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nvoid onChartboostDisplay ( const std::string \n name );\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nvoid onChartboostDismiss ( const std::string \n name );\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nvoid onChartboostClose ( const std::string \n name );\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nvoid onChartboostClick ( const std::string \n name );\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nvoid onChartboostReward ( const std::string \n name , int reward );\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nvoid onChartboostFailedToLoad ( const std::string \n name , CB_LoadError e );\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nvoid onChartboostFailToRecordClick ( const std::string \n name ,\n                                     CB_ClickError e );\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nvoid onChartboostConfirmation ( );\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nvoid onChartboostCompleteStore ( );\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginachartboost\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#usage", 
            "text": "Initialize Chartboost  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginChartboost/PluginChartboost.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginChartboost::init();\n}  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox::PluginChartboost::show(sdkbox::CB_Location_Default);\n// To use customized location\nsdkbox::PluginChartboost::show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for watching the video.   Allow your class to extend  sdkbox::ChartboostListener   #include  PluginChartboost/PluginChartboost.h \nclass MyClass : public sdkbox::ChartboostListener\n{\npublic:\n    void onChartboostCached(const std::string  name);\n    bool onChartboostShouldDisplay(const std::string  name);\n    void onChartboostDisplay(const std::string  name);\n    void onChartboostDismiss(const std::string  name);\n    void onChartboostClose(const std::string  name);\n    void onChartboostClick(const std::string  name);\n    void onChartboostReward(const std::string  name, int reward);\n    void onChartboostFailedToLoad(const std::string  name, sdkbox::CB_LoadError e);\n    void onChartboostFailToRecordClick(const std::string  name, sdkbox::CB_ClickError e);\n    void onChartboostConfirmation();\n    void onChartboostCompleteStore();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginChartboost::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   show ad by specifying ad name.   static void setListener ( ChartboostListener * listener ) ;   creates the an optional listener.   static ChartboostListener * getListener ( ) ;  static void removeListener ( ) ;   removed the listener.   static bool isAnyViewVisible ( ) ;   check to see if any views are visible.   static bool isAvailable ( const std::string   name ) ;   is the specified ad available?   static void cache ( const std::string   name ) ;  static void setAutoCacheAds ( bool shouldCache ) ;   set to enable and disable the auto cache feature (Enabled by default).   static bool getAutoCacheAds ( ) ;   get the current auto cache behavior (Enabled by default).   static void closeImpression ( ) ;   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   static void setStatusBarBehavior ( CB_StatusBarBehavior behavior ) ;   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   static void didPassAgeGate ( bool pass ) ;   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   static void setShouldPauseClickForConfirmation ( bool shouldPause ) ;   decide if Chartboost SDK should block for an age gate.   static bool handleOpenURL ( const std::string   url ,\n                            const std::string   sourceApp ) ;   opens a \"deep link\" URL for a Chartboost Custom Scheme.   static void setCustomID ( const std::string   customID ) ;   set a custom identifier to send in the POST body for all Chartboost API server requests.   static std::string getCustomID ( ) ;   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   static void setShouldRequestInterstitialsInFirstSession ( bool shouldRequest ) ;   decide if Chartboost SDK should show interstitials in the first session.   static void setShouldDisplayLoadingViewForMoreApps ( bool shouldDisplay ) ;   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   static void setShouldPrefetchVideoContent ( bool shouldPrefetch ) ;   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  void onChartboostCached ( const std::string   name );   there is cached content   bool onChartboostShouldDisplay ( const std::string   name );   should Chartboost display   void onChartboostDisplay ( const std::string   name );   Charboost ad has displayed   void onChartboostDismiss ( const std::string   name );   Chartboost ad has been dismissed   void onChartboostClose ( const std::string   name );   Chartboost is not running   void onChartboostClick ( const std::string   name );   Chartboost ad was clicked on   void onChartboostReward ( const std::string   name , int reward );   Chartboost reward was given   void onChartboostFailedToLoad ( const std::string   name , CB_LoadError e );   Chartboost failed to load   void onChartboostFailToRecordClick ( const std::string   name ,\n                                     CB_ClickError e );   Chartboost failed to record click   void onChartboostConfirmation ( );   Chartboost confirmation   void onChartboostCompleteStore ( );   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar   Copy the  pluginachartboost  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/chartboost/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Chartboost JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginChartboostJS.hpp\n\n#include \nPluginChartboostJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginChartboostJS);\nsc-\naddRegisterCallback(register_all_PluginChartboostJS_helper);\n\n\n\n\nInitialize Chartboost\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show(\nDefault\n);\n// To use customized location\nsdkbox.PluginChartboost.show(\nyour_ad_name\n);\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log(\nonChartboostCached \n + name) },\n    onChartboostShouldDisplay : function (name) { cc.log(\nonChartboostShouldDisplay \n + name) },\n    onChartboostDisplay : function (name) { cc.log(\nonChartboostDisplay \n + name) },\n    onChartboostDismiss : function (name) { cc.log(\nonChartboostDismiss \n + name) },\n    onChartboostClose : function (name) { cc.log(\nonChartboostClose \n + name) },\n    onChartboostClick : function (name) { cc.log(\nonChartboostClick \n + name) },\n    onChartboostReward : function (name, reward) { cc.log(\nonChartboostReward \n + name + \n reward \n + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log(\nonChartboostFailedToLoad \n + name + \n load error \n + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log(\nonChartboostFailToRecordClick \n + name + \n click error \n + e) },\n    onChartboostConfirmation : function () { cc.log(\nonChartboostConfirmation\n) },\n    onChartboostCompleteStore : function () { cc.log(\nonChartboostCompleteStore\n) },\n})\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost.show(name);\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost.setListener(listener);\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost.isAnyViewVisible();\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost.isAvailable(name);\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost.cache(name);\n\n\n\n\nsdkbox.PluginChartboost.setAutoCacheAds(shouldCache);\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.getAutoCacheAds();\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost.closeImpression();\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost.setStatusBarBehavior(behavior);\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost.didPassAgeGate(pass);\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost.handleOpenURL(url, sourceApp);\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost.setCustomID(customID);\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost.getCustomID();\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nsdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nonChartboostCached(name);\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay(name);\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay(name);\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss(name);\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose(name);\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick(name);\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward(name, reward);\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad(name, e);\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick(name, e);\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation();\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore();\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginachartboost\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Chartboost JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginChartboostJS.hpp \n#include  PluginChartboostJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginChartboostJS);\nsc- addRegisterCallback(register_all_PluginChartboostJS_helper);  Initialize Chartboost  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginChartboost.init();  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost.show( Default );\n// To use customized location\nsdkbox.PluginChartboost.show( your_ad_name );  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost.setListener({\n    onChartboostCached : function (name) { cc.log( onChartboostCached   + name) },\n    onChartboostShouldDisplay : function (name) { cc.log( onChartboostShouldDisplay   + name) },\n    onChartboostDisplay : function (name) { cc.log( onChartboostDisplay   + name) },\n    onChartboostDismiss : function (name) { cc.log( onChartboostDismiss   + name) },\n    onChartboostClose : function (name) { cc.log( onChartboostClose   + name) },\n    onChartboostClick : function (name) { cc.log( onChartboostClick   + name) },\n    onChartboostReward : function (name, reward) { cc.log( onChartboostReward   + name +   reward   + reward) },\n    onChartboostFailedToLoad : function (name, e) { cc.log( onChartboostFailedToLoad   + name +   load error   + e) },\n    onChartboostFailToRecordClick : function (name, e) { cc.log( onChartboostFailToRecordClick   + name +   click error   + e) },\n    onChartboostConfirmation : function () { cc.log( onChartboostConfirmation ) },\n    onChartboostCompleteStore : function () { cc.log( onChartboostCompleteStore ) },\n})", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost.init();   initialize the plugin instance.   sdkbox.PluginChartboost.show(name);   show ad by specifying ad name.   sdkbox.PluginChartboost.setListener(listener);   creates the an optional listener.   sdkbox.PluginChartboost.isAnyViewVisible();   check to see if any views are visible.   sdkbox.PluginChartboost.isAvailable(name);   is the specified ad available?   sdkbox.PluginChartboost.cache(name);  sdkbox.PluginChartboost.setAutoCacheAds(shouldCache);   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost.getAutoCacheAds();   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost.closeImpression();   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost.setStatusBarBehavior(behavior);   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost.didPassAgeGate(pass);   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   sdkbox.PluginChartboost.setShouldPauseClickForConfirmation(shouldPause);   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost.handleOpenURL(url, sourceApp);   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost.setCustomID(customID);   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost.getCustomID();   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   sdkbox.PluginChartboost.setShouldRequestInterstitialsInFirstSession(shouldRequest);   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost.setShouldDisplayLoadingViewForMoreApps(shouldDisplay);   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   sdkbox.PluginChartboost.setShouldPrefetchVideoContent(shouldPrefetch);   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  onChartboostCached(name);   there is cached content   onChartboostShouldDisplay(name);   should Chartboost display   onChartboostDisplay(name);   Charboost ad has displayed   onChartboostDismiss(name);   Chartboost ad has been dismissed   onChartboostClose(name);   Chartboost is not running   onChartboostClick(name);   Chartboost ad was clicked on   onChartboostReward(name, reward);   Chartboost reward was given   onChartboostFailedToLoad(name, e);   Chartboost failed to load   onChartboostFailToRecordClick(name, e);   Chartboost failed to record click   onChartboostConfirmation();   Chartboost confirmation   onChartboostCompleteStore();   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar   Copy the  pluginachartboost  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/chartboost/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/", 
            "text": "Chartboost\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import chartboost\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Chartboost configuration, you need to replace \nCHARTBOOST ID\n and \nCHARTBOOST SIGNATURE\n items with your specific \nChartboost\n account information.\n\n\nChartboost\n:{\n    \nid\n:\nCHARTBOOST ID\n,\n    \nsignature\n:\nCHARTBOOST SIGNATURE\n,\n    \nads\n:{\n        \nDefault\n:{\n            \ntype\n:\ninterstitial\n\n        },\n        \nLevel Complete\n:{\n            \ntype\n:\nrewarded_video\n\n        },\n        \nMoreApp\n:{\n            \ntype\n:\nmore_app\n\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginChartboostLua.hpp\n\n#include \nPluginChartboostLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginChartboostLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginChartboostLua.hpp\n\n#include \nPluginChartboostLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginChartboostLua(tolua_s);\n    register_all_PluginChartboostLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize Chartboost\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginChartboost:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code:\n\n\n// To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show(\nDefault\n)\n// To use customized location\nsdkbox.PluginChartboost:show(\nyour_ad_name\n)\n\n\n\n\nCatch Chartboost events (optional)\n\n\nThis allows you to catch the \nChartboost\n events so that you can perform operations such as providing player rewards for viewing ads.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginChartboost:setListener(function(args)\n    if \nonChartboostCached\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCached\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostShouldDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostShouldDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDisplay\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDisplay\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostDismiss\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostDismiss\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClose\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClose\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostClick\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostClick\n)\n        print(\nname:\n, args.name)\n    elseif \nonChartboostReward\n == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print(\nonChartboostReward\n)\n        print(\nname:\n, args.name)\n        print(\nreward:\n, reward)\n    elseif \nonChartboostFailedToLoad\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailedToLoad\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostFailToRecordClick\n == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print(\nonChartboostFailToRecordClick\n)\n        print(\nname:\n, args.name)\n        print(\nerror:\n, e)\n    elseif \nonChartboostConfirmation\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostConfirmation\n)\n    elseif \nonChartboostCompleteStore\n == args.func then\n        local name = args.name -- string\n        print(\nonChartboostCompleteStore\n)\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginChartboost:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginChartboost:show(name)\n\n\n\n\n\n\nshow ad by specifying ad name.\n\n\n\n\nsdkbox.PluginChartboost:setListener(listener)\n\n\n\n\n\n\ncreates the an optional listener.\n\n\n\n\nsdkbox.PluginChartboost:isAnyViewVisible()\n\n\n\n\n\n\ncheck to see if any views are visible.\n\n\n\n\nsdkbox.PluginChartboost:isAvailable(name)\n\n\n\n\n\n\nis the specified ad available?\n\n\n\n\nsdkbox.PluginChartboost:cache(name)\n\n\n\n\nsdkbox.PluginChartboost:setAutoCacheAds(shouldCache)\n\n\n\n\n\n\nset to enable and disable the auto cache feature (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:getAutoCacheAds()\n\n\n\n\n\n\nget the current auto cache behavior (Enabled by default).\n\n\n\n\nsdkbox.PluginChartboost:closeImpression()\n\n\n\n\n\n\nclose any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).\n\n\n\n\nsdkbox.PluginChartboost:setStatusBarBehavior(behavior)\n\n\n\n\n\n\nset to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).\n\n\n\n\nsdkbox.PluginChartboost:didPassAgeGate(pass)\n\n\n\n\n\n\nconfirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause)\n\n\n\n\n\n\ndecide if Chartboost SDK should block for an age gate.\n\n\n\n\nsdkbox.PluginChartboost:handleOpenURL(url, sourceApp)\n\n\n\n\n\n\nopens a \"deep link\" URL for a Chartboost Custom Scheme.\n\n\n\n\nsdkbox.PluginChartboost:setCustomID(customID)\n\n\n\n\n\n\nset a custom identifier to send in the POST body for all Chartboost API server requests.\n\n\n\n\nsdkbox.PluginChartboost:getCustomID()\n\n\n\n\n\n\nget the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.\n\n\n\n\nsdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest)\n\n\n\n\n\n\ndecide if Chartboost SDK should show interstitials in the first session.\n\n\n\n\nsdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay)\n\n\n\n\n\n\ndecide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.\n\n\n\n\nsdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch)\n\n\n\n\n\n\ndecide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.\n\n\n\n\nListeners\n\n\nonChartboostCached(name)\n\n\n\n\n\n\nthere is cached content\n\n\n\n\nonChartboostShouldDisplay(name)\n\n\n\n\n\n\nshould Chartboost display\n\n\n\n\nonChartboostDisplay(name)\n\n\n\n\n\n\nCharboost ad has displayed\n\n\n\n\nonChartboostDismiss(name)\n\n\n\n\n\n\nChartboost ad has been dismissed\n\n\n\n\nonChartboostClose(name)\n\n\n\n\n\n\nChartboost is not running\n\n\n\n\nonChartboostClick(name)\n\n\n\n\n\n\nChartboost ad was clicked on\n\n\n\n\nonChartboostReward(name, reward)\n\n\n\n\n\n\nChartboost reward was given\n\n\n\n\nonChartboostFailedToLoad(name, e)\n\n\n\n\n\n\nChartboost failed to load\n\n\n\n\nonChartboostFailToRecordClick(name, e)\n\n\n\n\n\n\nChartboost failed to record click\n\n\n\n\nonChartboostConfirmation()\n\n\n\n\n\n\nChartboost confirmation\n\n\n\n\nonChartboostCompleteStore()\n\n\n\n\n\n\nChartboost complete store\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nChartboost\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginChartboost.framework\n\n\nChartboost.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nFoundation.framework\n\n\nCoreGraphics.framework\n\n\nUIKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nchartboost.jar\n\n\nPluginChartboost.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginachartboost\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep class com.chartboost.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Chartboost plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import chartboost", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Chartboost configuration, you need to replace  CHARTBOOST ID  and  CHARTBOOST SIGNATURE  items with your specific  Chartboost  account information.  Chartboost :{\n     id : CHARTBOOST ID ,\n     signature : CHARTBOOST SIGNATURE ,\n     ads :{\n         Default :{\n             type : interstitial \n        },\n         Level Complete :{\n             type : rewarded_video \n        },\n         MoreApp :{\n             type : more_app \n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginChartboostLua.hpp \n#include  PluginChartboostLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginChartboostLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginChartboostLua.hpp \n#include  PluginChartboostLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginChartboostLua(tolua_s);\n    register_all_PluginChartboostLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize Chartboost  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginChartboost:init()  Showing Ads  Display an ad where ever you want from your code:  // To use the Chartboost predefined locations\nsdkbox.PluginChartboost:show( Default )\n// To use customized location\nsdkbox.PluginChartboost:show( your_ad_name )  Catch Chartboost events (optional)  This allows you to catch the  Chartboost  events so that you can perform operations such as providing player rewards for viewing ads.   Create a listener (demonstrated by logging events):   sdkbox.PluginChartboost:setListener(function(args)\n    if  onChartboostCached  == args.func then\n        local name = args.name -- string\n        print( onChartboostCached )\n        print( name: , args.name)\n    elseif  onChartboostShouldDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostShouldDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDisplay  == args.func then\n        local name = args.name -- string\n        print( onChartboostDisplay )\n        print( name: , args.name)\n    elseif  onChartboostDismiss  == args.func then\n        local name = args.name -- string\n        print( onChartboostDismiss )\n        print( name: , args.name)\n    elseif  onChartboostClose  == args.func then\n        local name = args.name -- string\n        print( onChartboostClose )\n        print( name: , args.name)\n    elseif  onChartboostClick  == args.func then\n        local name = args.name -- string\n        print( onChartboostClick )\n        print( name: , args.name)\n    elseif  onChartboostReward  == args.func then\n        local name = args.name -- string\n        local reward = args.reward -- int\n        print( onChartboostReward )\n        print( name: , args.name)\n        print( reward: , reward)\n    elseif  onChartboostFailedToLoad  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailedToLoad )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostFailToRecordClick  == args.func then\n        local name = args.name -- string\n        local e = args.e -- int\n        print( onChartboostFailToRecordClick )\n        print( name: , args.name)\n        print( error: , e)\n    elseif  onChartboostConfirmation  == args.func then\n        local name = args.name -- string\n        print( onChartboostConfirmation )\n    elseif  onChartboostCompleteStore  == args.func then\n        local name = args.name -- string\n        print( onChartboostCompleteStore )\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginChartboost:init()   initialize the plugin instance.   sdkbox.PluginChartboost:show(name)   show ad by specifying ad name.   sdkbox.PluginChartboost:setListener(listener)   creates the an optional listener.   sdkbox.PluginChartboost:isAnyViewVisible()   check to see if any views are visible.   sdkbox.PluginChartboost:isAvailable(name)   is the specified ad available?   sdkbox.PluginChartboost:cache(name)  sdkbox.PluginChartboost:setAutoCacheAds(shouldCache)   set to enable and disable the auto cache feature (Enabled by default).   sdkbox.PluginChartboost:getAutoCacheAds()   get the current auto cache behavior (Enabled by default).   sdkbox.PluginChartboost:closeImpression()   close any visible Chartboost impressions (interstitials, more apps, rewarded\nvideo, etc..) and the loading view (if visible).   sdkbox.PluginChartboost:setStatusBarBehavior(behavior)   set to control how the fullscreen ad units should interact with the status bar.\n(CBStatusBarBehaviorIgnore by default).   sdkbox.PluginChartboost:didPassAgeGate(pass)   confirm if an age gate passed or failed. When specified Chartboost will wait for\ncall before showing the IOS App Store.   sdkbox.PluginChartboost:setShouldPauseClickForConfirmation(shouldPause)   decide if Chartboost SDK should block for an age gate.   sdkbox.PluginChartboost:handleOpenURL(url, sourceApp)   opens a \"deep link\" URL for a Chartboost Custom Scheme.   sdkbox.PluginChartboost:setCustomID(customID)   set a custom identifier to send in the POST body for all Chartboost API server requests.   sdkbox.PluginChartboost:getCustomID()   get the current custom identifier being sent in the POST body for all Chartboost\nAPI server requests.   sdkbox.PluginChartboost:setShouldRequestInterstitialsInFirstSession(shouldRequest)   decide if Chartboost SDK should show interstitials in the first session.   sdkbox.PluginChartboost:setShouldDisplayLoadingViewForMoreApps(shouldDisplay)   decide if Chartboost SDK should show a loading view while preparing to display\nthe \"more applications\" UI.   sdkbox.PluginChartboost:setShouldPrefetchVideoContent(shouldPrefetch)   decide if Chartboost SDK will attempt to fetch videos from the Chartboost API\nservers.   Listeners  onChartboostCached(name)   there is cached content   onChartboostShouldDisplay(name)   should Chartboost display   onChartboostDisplay(name)   Charboost ad has displayed   onChartboostDismiss(name)   Chartboost ad has been dismissed   onChartboostClose(name)   Chartboost is not running   onChartboostClick(name)   Chartboost ad was clicked on   onChartboostReward(name, reward)   Chartboost reward was given   onChartboostFailedToLoad(name, e)   Chartboost failed to load   onChartboostFailToRecordClick(name, e)   Chartboost failed to record click   onChartboostConfirmation()   Chartboost confirmation   onChartboostCompleteStore()   Chartboost complete store", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Chartboost  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginChartboost.framework  Chartboost.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  Foundation.framework  CoreGraphics.framework  UIKit.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   chartboost.jar  PluginChartboost.jar  sdkbox.jar   Copy the  pluginachartboost  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginChartboost\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginchartboost)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/chartboost/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep class com.chartboost.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\nUsage\n\n\nInitialize Facebook\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginFacebook/PluginFacebook.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFacebook::init();\n}\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox::PluginFacebook::login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout.\n\n\nsdkbox::PluginFacebook::logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox::PluginFacebook::isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nSDKBOX provides the most commonly used permissions:\n\n\n\n\nFB_PERM_READ_PUBLIC_PROFILE\n\n\nFB_PERM_READ_EMAIL\n\n\nFB_PERM_READ_USER_FRIENDS\n\n\nFB_PERM_PUBLISH_POST\n\n\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox::PluginFacebook::requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox::PluginFacebook::requestPublishPermissions({FB_PERM_PUBLISH_POST});\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the user's wall\nshare a link:\n\n\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox::PluginFacebook::share(info);\n\n\n\n\nshare a photo:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox::PluginFacebook::dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using the \napi\n function\n\n\nFor example, to get the friend list:\n\n\nsdkbox::PluginFacebook::FBAPIParam params;\nsdkbox::PluginFacebook::api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::FacebookListener\n and override the functions listed:\n\n\n\n\n#include \nPluginFacebook/PluginFacebook.h\n\nclass MyClass : public sdkbox::FacebookListener\n{\nprivate:\n  void onLogin(bool isLogin, const std::string\n msg);\n  void onPermission(bool isLogin, const std::string\n msg);\n  void onAPI(const std::string\n tag, const std::string\n jsonData);\n  void onSharedSuccess(const std::string\n message);\n  void onSharedFailed(const std::string\n message);\n  void onSharedCancel();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginFacebook::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( FacebookListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for facebook events\n\n\n\n\nstatic FacebookListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void login ( ) ;\n\n\n\n\n\n\nlog in\n\n\n\n\nstatic void requestReadPermissions ( const std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nstatic void requestPublishPermissions ( const std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nstatic void logout ( ) ;\n\n\n\n\n\n\nlog out\n\n\n\n\nstatic bool isLoggedIn ( ) ;\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nstatic std::string getUserID ( ) ;\n\n\n\n\n\n\nget UserID\n\n\n\n\nstatic std::string getAccessToken ( ) ;\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nstatic std::vector \nstd::string\n getPermissionList ( ) ;\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nstatic void share ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\nshare\n\n\n\n\nstatic void dialog ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nstatic std::string getSDKVersion ( ) ;\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nstatic void api ( const std::string \n path ,\n                  const std::string \n method ,\n                  const FBAPIParam \n params ,\n                  const std::string \n tag ) ;\n\n\n\n\n\n\nuse Facebook Open Graph api\nhttps://developers.facebook.com/docs/ios/graph\n\n\n\n\nstatic void fetchFriends ( ) ;\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nstatic std::vector \nFBGraphUser\n getFriends ( ) ;\n\n\n\n\n\n\nget friends info\n\n\n\n\nListeners\n\n\nvoid onLogin ( bool isLogin , const std::string \n msg );\n\n\n\n\nvoid onSharedSuccess ( const std::string \n message );\n\n\n\n\nvoid onSharedFailed ( const std::string \n message );\n\n\n\n\nvoid onSharedCancel ( );\n\n\n\n\nvoid onAPI ( const std::string \n key , const std::string \n jsonData );\n\n\n\n\nvoid onPermission ( bool isLogin , const std::string \n msg );\n\n\n\n\nvoid onFetchFriends ( bool ok , const std::string \n msg );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginfacebook\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#prerequisites", 
            "text": "For Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#usage", 
            "text": "Initialize Facebook  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginFacebook/PluginFacebook.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFacebook::init();\n}  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox::PluginFacebook::login();  If a user doesn't want to use Facebook functionality anymore, logout.  sdkbox::PluginFacebook::logout();  You can check whether user already logged in using  sdkbox::PluginFacebook::isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  SDKBOX provides the most commonly used permissions:   FB_PERM_READ_PUBLIC_PROFILE  FB_PERM_READ_EMAIL  FB_PERM_READ_USER_FRIENDS  FB_PERM_PUBLISH_POST   To request a permission, you do so by specifying what you want:  sdkbox::PluginFacebook::requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox::PluginFacebook::requestPublishPermissions({FB_PERM_PUBLISH_POST});  Share  There are two types of sharing functionality.   share  will automatically post to the user's wall\nshare a link:   sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox::PluginFacebook::share(info);  share a photo:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox::PluginFacebook::dialog(info);  share a photo with comments:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Graph API  You can perform  Graph API  using the  api  function  For example, to get the friend list:  sdkbox::PluginFacebook::FBAPIParam params;\nsdkbox::PluginFacebook::api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.   Allow your class to extend  sdkbox::FacebookListener  and override the functions listed:   #include  PluginFacebook/PluginFacebook.h \nclass MyClass : public sdkbox::FacebookListener\n{\nprivate:\n  void onLogin(bool isLogin, const std::string  msg);\n  void onPermission(bool isLogin, const std::string  msg);\n  void onAPI(const std::string  tag, const std::string  jsonData);\n  void onSharedSuccess(const std::string  message);\n  void onSharedFailed(const std::string  message);\n  void onSharedCancel();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginFacebook::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( FacebookListener * listener ) ;   Set listener to listen for facebook events   static FacebookListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void login ( ) ;   log in   static void requestReadPermissions ( const std::vector  std::string    permissions ) ;   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   static void requestPublishPermissions ( const std::vector  std::string    permissions ) ;   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   static void logout ( ) ;   log out   static bool isLoggedIn ( ) ;   Check whether the user logined or not   static std::string getUserID ( ) ;   get UserID   static std::string getAccessToken ( ) ;   get AccessToken   static std::vector  std::string  getPermissionList ( ) ;   get permissoin list   static void share ( const FBShareInfo   info ) ;   share   static void dialog ( const FBShareInfo   info ) ;   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   static std::string getSDKVersion ( ) ;   return the version of Facebook SDK   static void api ( const std::string   path ,\n                  const std::string   method ,\n                  const FBAPIParam   params ,\n                  const std::string   tag ) ;   use Facebook Open Graph api\nhttps://developers.facebook.com/docs/ios/graph   static void fetchFriends ( ) ;   fetch friends data from Facebook   static std::vector  FBGraphUser  getFriends ( ) ;   get friends info   Listeners  void onLogin ( bool isLogin , const std::string   msg );  void onSharedSuccess ( const std::string   message );  void onSharedFailed ( const std::string   message );  void onSharedCancel ( );  void onAPI ( const std::string   key , const std::string   jsonData );  void onPermission ( bool isLogin , const std::string   msg );  void onFetchFriends ( bool ok , const std::string   msg );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFacebook.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginfacebook  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  facebook_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__ \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/facebook/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v3-js/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Facebook JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFacebookJS.hpp\n\n#include \nPluginFacebookJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFacebookJS);\nsc-\naddRegisterCallback(register_all_PluginFacebookJS_helper);\n\n\n\n\nInitialize Facebook\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFacebook.init();\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox.PluginFacebook.login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout. using\n\n\nsdkbox.PluginFacebook.logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox.PluginFacebook.isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox.PluginFacebook.requestReadPermissions([\npublic_profile\n, \nemail\n]);\nsdkbox.PluginFacebook.requestPublishPermissions([\npublish_actions\n]);\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the user's wall\nshare a link:\n\n\n\n\nvar info = new Object();\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\nshare a photo:\n\n\nvar info = new Object();\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nvar info = new Object();\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nvar info = new Object();\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using the \napi\n function\n\n\nFor example, to get the friend list:\n\n\nvar params = new Object();\nsdkbox.PluginFacebook.api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\nsdkbox.PluginFacebook.setListener({\n    onLogin: function(isLogin, msg) {},\n    onAPI: function(tag, data) {},\n    onSharedSuccess: function(data) {},\n    onSharedFailed: function(data) {},\n    onSharedCancel: function() {},\n    onPermission: function(isLogin, msg) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFacebook.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFacebook.login();\n\n\n\n\n\n\nlog in\n\n\n\n\nsdkbox.PluginFacebook.requestReadPermissions(permissions);\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook.requestPublishPermissions(permissions);\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook.logout();\n\n\n\n\n\n\nlog out\n\n\n\n\nsdkbox.PluginFacebook.isLoggedIn();\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nsdkbox.PluginFacebook.getUserID();\n\n\n\n\n\n\nget UserID\n\n\n\n\nsdkbox.PluginFacebook.getAccessToken();\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nsdkbox.PluginFacebook.getPermissionList();\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\nshare\n\n\n\n\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nsdkbox.PluginFacebook.getSDKVersion();\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nsdkbox.PluginFacebook.fetchFriends();\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nListeners\n\n\nonLogin(isLogin, msg);\n\n\n\n\nonSharedSuccess(message);\n\n\n\n\nonSharedFailed(message);\n\n\n\n\nonSharedCancel();\n\n\n\n\nonAPI(key, jsonData);\n\n\n\n\nonPermission(isLogin, msg);\n\n\n\n\nonFetchFriends(ok, msg);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginfacebook\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#prerequisites", 
            "text": "For Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Facebook JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFacebookJS.hpp \n#include  PluginFacebookJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFacebookJS);\nsc- addRegisterCallback(register_all_PluginFacebookJS_helper);  Initialize Facebook  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFacebook.init();  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox.PluginFacebook.login();  If a user doesn't want to use Facebook functionality anymore, logout. using  sdkbox.PluginFacebook.logout();  You can check whether user already logged in using  sdkbox.PluginFacebook.isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  To request a permission, you do so by specifying what you want:  sdkbox.PluginFacebook.requestReadPermissions([ public_profile ,  email ]);\nsdkbox.PluginFacebook.requestPublishPermissions([ publish_actions ]);  Share  There are two types of sharing functionality.   share  will automatically post to the user's wall\nshare a link:   var info = new Object();\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.share(info);  share a photo:  var info = new Object();\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  var info = new Object();\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.dialog(info);  share a photo with comments:  var info = new Object();\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Graph API  You can perform  Graph API  using the  api  function  For example, to get the friend list:  var params = new Object();\nsdkbox.PluginFacebook.api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.  sdkbox.PluginFacebook.setListener({\n    onLogin: function(isLogin, msg) {},\n    onAPI: function(tag, data) {},\n    onSharedSuccess: function(data) {},\n    onSharedFailed: function(data) {},\n    onSharedCancel: function() {},\n    onPermission: function(isLogin, msg) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFacebook.init();   initialize the plugin instance.   sdkbox.PluginFacebook.login();   log in   sdkbox.PluginFacebook.requestReadPermissions(permissions);   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook.requestPublishPermissions(permissions);   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook.logout();   log out   sdkbox.PluginFacebook.isLoggedIn();   Check whether the user logined or not   sdkbox.PluginFacebook.getUserID();   get UserID   sdkbox.PluginFacebook.getAccessToken();   get AccessToken   sdkbox.PluginFacebook.getPermissionList();   get permissoin list   sdkbox.PluginFacebook.share(info);   share   sdkbox.PluginFacebook.dialog(info);   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   sdkbox.PluginFacebook.getSDKVersion();   return the version of Facebook SDK   sdkbox.PluginFacebook.fetchFriends();   fetch friends data from Facebook   Listeners  onLogin(isLogin, msg);  onSharedSuccess(message);  onSharedFailed(message);  onSharedCancel();  onAPI(key, jsonData);  onPermission(isLogin, msg);  onFetchFriends(ok, msg);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFacebook.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginfacebook  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  facebook_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__ \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/facebook/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nFacebook\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginFacebookLua.hpp\n\n#include \nPluginFacebookLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginFacebookLua(L);\n  register_all_PluginFacebookLua_helper(L);\n}\n\n\n\n\nInitialize Facebook\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginFacebook:init();\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox.PluginFacebook:login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout. using\n\n\nsdkbox.PluginFacebook:logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox.PluginFacebook:isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nSDKBOX provides the most commonly used permissions:\n\n\n\n\nFB_PERM_READ_PUBLIC_PROFILE\n\n\nFB_PERM_READ_EMAIL\n\n\nFB_PERM_READ_USER_FRIENDS\n\n\nFB_PERM_PUBLISH_POST\n\n\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox.PluginFacebook:requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox.PluginFacebook:requestPublishPermissions({FB_PERM_PUBLISH_POST});\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the user's wall\nshare a link:\n\n\n\n\nlocal info;\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook:share(info);\n\n\n\n\nshare a photo:\n\n\nlocal info;\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nlocal info;\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook:dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nlocal info;\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using \napi\n function\n\n\nFor example, to get the friend list:\n\n\nlocal params;\nsdkbox.PluginFacebook:api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\nsdkbox.PluginFacebook:setListener(function(args)\n    if \nonLogin\n == args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif \nonPermission\n ==  args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif \nonAPI\n ==  args.name then\n        local tag = args.tag;\n        local jsonData = args.jsonData;\n    elseif \nonSharedSuccess\n ==  args.name then\n        local msg = args.message\n    elseif \nonSharedFailed\n ==  args.name then\n        local msg = args.message\n    elseif \nonSharedCancel\n ==  args.name then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFacebook:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFacebook:login()\n\n\n\n\n\n\nlog in\n\n\n\n\nsdkbox.PluginFacebook:requestReadPermissions(permissions)\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook:requestPublishPermissions(permissions)\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook:logout()\n\n\n\n\n\n\nlog out\n\n\n\n\nsdkbox.PluginFacebook:isLoggedIn()\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nsdkbox.PluginFacebook:getUserID()\n\n\n\n\n\n\nget UserID\n\n\n\n\nsdkbox.PluginFacebook:getAccessToken()\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nsdkbox.PluginFacebook:getPermissionList()\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nsdkbox.PluginFacebook:share(info)\n\n\n\n\n\n\nshare\n\n\n\n\nsdkbox.PluginFacebook:dialog(info)\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nsdkbox.PluginFacebook:getSDKVersion()\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nsdkbox.PluginFacebook:fetchFriends()\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nListeners\n\n\nonLogin(isLogin, msg)\n\n\n\n\nonSharedSuccess(message)\n\n\n\n\nonSharedFailed(message)\n\n\n\n\nonSharedCancel()\n\n\n\n\nonAPI(key, jsonData)\n\n\n\n\nonPermission(isLogin, msg)\n\n\n\n\nonFetchFriends(ok, msg)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginfacebook\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#prerequisites", 
            "text": "For Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Facebook  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginFacebookLua.hpp \n#include  PluginFacebookLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginFacebookLua(L);\n  register_all_PluginFacebookLua_helper(L);\n}  Initialize Facebook  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginFacebook:init();  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox.PluginFacebook:login();  If a user doesn't want to use Facebook functionality anymore, logout. using  sdkbox.PluginFacebook:logout();  You can check whether user already logged in using  sdkbox.PluginFacebook:isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  SDKBOX provides the most commonly used permissions:   FB_PERM_READ_PUBLIC_PROFILE  FB_PERM_READ_EMAIL  FB_PERM_READ_USER_FRIENDS  FB_PERM_PUBLISH_POST   To request a permission, you do so by specifying what you want:  sdkbox.PluginFacebook:requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox.PluginFacebook:requestPublishPermissions({FB_PERM_PUBLISH_POST});  Share  There are two types of sharing functionality.   share  will automatically post to the user's wall\nshare a link:   local info;\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook:share(info);  share a photo:  local info;\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  local info;\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook:dialog(info);  share a photo with comments:  local info;\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook:dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Graph API  You can perform  Graph API  using  api  function  For example, to get the friend list:  local params;\nsdkbox.PluginFacebook:api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.  sdkbox.PluginFacebook:setListener(function(args)\n    if  onLogin  == args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif  onPermission  ==  args.name then\n        local isLogin = args.isLogin;\n        local msg = args.msg;\n    elseif  onAPI  ==  args.name then\n        local tag = args.tag;\n        local jsonData = args.jsonData;\n    elseif  onSharedSuccess  ==  args.name then\n        local msg = args.message\n    elseif  onSharedFailed  ==  args.name then\n        local msg = args.message\n    elseif  onSharedCancel  ==  args.name then\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFacebook:init()   initialize the plugin instance.   sdkbox.PluginFacebook:login()   log in   sdkbox.PluginFacebook:requestReadPermissions(permissions)   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook:requestPublishPermissions(permissions)   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook:logout()   log out   sdkbox.PluginFacebook:isLoggedIn()   Check whether the user logined or not   sdkbox.PluginFacebook:getUserID()   get UserID   sdkbox.PluginFacebook:getAccessToken()   get AccessToken   sdkbox.PluginFacebook:getPermissionList()   get permissoin list   sdkbox.PluginFacebook:share(info)   share   sdkbox.PluginFacebook:dialog(info)   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   sdkbox.PluginFacebook:getSDKVersion()   return the version of Facebook SDK   sdkbox.PluginFacebook:fetchFriends()   fetch friends data from Facebook   Listeners  onLogin(isLogin, msg)  onSharedSuccess(message)  onSharedFailed(message)  onSharedCancel()  onAPI(key, jsonData)  onPermission(isLogin, msg)  onFetchFriends(ok, msg)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFacebook.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginfacebook  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  facebook_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__ \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/facebook/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\nUsage\n\n\nInitialize Facebook\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginFacebook/PluginFacebook.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFacebook::init();\n}\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox::PluginFacebook::login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout.\n\n\nsdkbox::PluginFacebook::logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox::PluginFacebook::isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nSDKBOX provides the most commonly used permissions:\n\n\n\n\nFB_PERM_READ_PUBLIC_PROFILE\n\n\nFB_PERM_READ_EMAIL\n\n\nFB_PERM_READ_USER_FRIENDS\n\n\nFB_PERM_PUBLISH_POST\n\n\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox::PluginFacebook::requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox::PluginFacebook::requestPublishPermissions({FB_PERM_PUBLISH_POST});\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the user's wall\nshare a link:\n\n\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox::PluginFacebook::share(info);\n\n\n\n\nshare a photo:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox::PluginFacebook::dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nsdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using the \napi\n function\n\n\nFor example, to get the friend list:\n\n\nsdkbox::PluginFacebook::FBAPIParam params;\nsdkbox::PluginFacebook::api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::FacebookListener\n and override the functions listed:\n\n\n\n\n#include \nPluginFacebook/PluginFacebook.h\n\nclass MyClass : public sdkbox::FacebookListener\n{\nprivate:\n  void onLogin(bool isLogin, const std::string\n msg);\n  void onPermission(bool isLogin, const std::string\n msg);\n  void onAPI(const std::string\n tag, const std::string\n jsonData);\n  void onSharedSuccess(const std::string\n message);\n  void onSharedFailed(const std::string\n message);\n  void onSharedCancel();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginFacebook::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( FacebookListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for facebook events\n\n\n\n\nstatic FacebookListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void login ( ) ;\n\n\n\n\n\n\nlog in\n\n\n\n\nstatic void requestReadPermissions ( const std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nstatic void requestPublishPermissions ( const std::vector \nstd::string\n \n permissions ) ;\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nstatic void logout ( ) ;\n\n\n\n\n\n\nlog out\n\n\n\n\nstatic bool isLoggedIn ( ) ;\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nstatic std::string getUserID ( ) ;\n\n\n\n\n\n\nget UserID\n\n\n\n\nstatic std::string getAccessToken ( ) ;\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nstatic std::vector \nstd::string\n getPermissionList ( ) ;\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nstatic void share ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\nshare\n\n\n\n\nstatic void dialog ( const FBShareInfo \n info ) ;\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nstatic std::string getSDKVersion ( ) ;\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nstatic void api ( const std::string \n path ,\n                  const std::string \n method ,\n                  const FBAPIParam \n params ,\n                  const std::string \n tag ) ;\n\n\n\n\n\n\nuse Facebook Open Graph api\nhttps://developers.facebook.com/docs/ios/graph\n\n\n\n\nstatic void fetchFriends ( ) ;\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nstatic std::vector \nFBGraphUser\n getFriends ( ) ;\n\n\n\n\n\n\nget friends info\n\n\n\n\nListeners\n\n\nvoid onLogin ( bool isLogin , const std::string \n msg );\n\n\n\n\nvoid onSharedSuccess ( const std::string \n message );\n\n\n\n\nvoid onSharedFailed ( const std::string \n message );\n\n\n\n\nvoid onSharedCancel ( );\n\n\n\n\nvoid onAPI ( const std::string \n key , const std::string \n jsonData );\n\n\n\n\nvoid onPermission ( bool isLogin , const std::string \n msg );\n\n\n\n\nvoid onFetchFriends ( bool ok , const std::string \n msg );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginfacebook\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__}\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-19\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#prerequisites", 
            "text": "For Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#usage", 
            "text": "Initialize Facebook  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginFacebook/PluginFacebook.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFacebook::init();\n}  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox::PluginFacebook::login();  If a user doesn't want to use Facebook functionality anymore, logout.  sdkbox::PluginFacebook::logout();  You can check whether user already logged in using  sdkbox::PluginFacebook::isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  SDKBOX provides the most commonly used permissions:   FB_PERM_READ_PUBLIC_PROFILE  FB_PERM_READ_EMAIL  FB_PERM_READ_USER_FRIENDS  FB_PERM_PUBLISH_POST   To request a permission, you do so by specifying what you want:  sdkbox::PluginFacebook::requestReadPermissions({FB_PERM_READ_PUBLIC_PROFILE, FB_PERM_READ_USER_FRIENDS});\nsdkbox::PluginFacebook::requestPublishPermissions({FB_PERM_PUBLISH_POST});  Share  There are two types of sharing functionality.   share  will automatically post to the user's wall\nshare a link:   sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox::PluginFacebook::share(info);  share a photo:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_LINK;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox::PluginFacebook::dialog(info);  share a photo with comments:  sdkbox::FBShareInfo info;\ninfo.type  = sdkbox::FB_PHOTO;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox::PluginFacebook::dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Graph API  You can perform  Graph API  using the  api  function  For example, to get the friend list:  sdkbox::PluginFacebook::FBAPIParam params;\nsdkbox::PluginFacebook::api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.   Allow your class to extend  sdkbox::FacebookListener  and override the functions listed:   #include  PluginFacebook/PluginFacebook.h \nclass MyClass : public sdkbox::FacebookListener\n{\nprivate:\n  void onLogin(bool isLogin, const std::string  msg);\n  void onPermission(bool isLogin, const std::string  msg);\n  void onAPI(const std::string  tag, const std::string  jsonData);\n  void onSharedSuccess(const std::string  message);\n  void onSharedFailed(const std::string  message);\n  void onSharedCancel();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginFacebook::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( FacebookListener * listener ) ;   Set listener to listen for facebook events   static FacebookListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void login ( ) ;   log in   static void requestReadPermissions ( const std::vector  std::string    permissions ) ;   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   static void requestPublishPermissions ( const std::vector  std::string    permissions ) ;   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   static void logout ( ) ;   log out   static bool isLoggedIn ( ) ;   Check whether the user logined or not   static std::string getUserID ( ) ;   get UserID   static std::string getAccessToken ( ) ;   get AccessToken   static std::vector  std::string  getPermissionList ( ) ;   get permissoin list   static void share ( const FBShareInfo   info ) ;   share   static void dialog ( const FBShareInfo   info ) ;   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   static std::string getSDKVersion ( ) ;   return the version of Facebook SDK   static void api ( const std::string   path ,\n                  const std::string   method ,\n                  const FBAPIParam   params ,\n                  const std::string   tag ) ;   use Facebook Open Graph api\nhttps://developers.facebook.com/docs/ios/graph   static void fetchFriends ( ) ;   fetch friends data from Facebook   static std::vector  FBGraphUser  getFriends ( ) ;   get friends info   Listeners  void onLogin ( bool isLogin , const std::string   msg );  void onSharedSuccess ( const std::string   message );  void onSharedFailed ( const std::string   message );  void onSharedCancel ( );  void onAPI ( const std::string   key , const std::string   jsonData );  void onPermission ( bool isLogin , const std::string   msg );  void onFetchFriends ( bool ok , const std::string   msg );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFacebook.jar  sdkbox.jar   Copy the  pluginfacebook  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  facebook_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__} \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-19  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/facebook/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v2-js/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Facebook JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFacebookJS.hpp\n\n#include \nPluginFacebookJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFacebookJS);\nsc-\naddRegisterCallback(register_all_PluginFacebookJS_helper);\n\n\n\n\nInitialize Facebook\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFacebook.init();\n\n\n\n\nUsing Facebook\n\n\nLogin\n\n\nFirst the user needs to login to Facebook in order to use it.\n\n\nsdkbox.PluginFacebook.login();\n\n\n\n\nIf a user doesn't want to use Facebook functionality anymore, logout. using\n\n\nsdkbox.PluginFacebook.logout();\n\n\n\n\nYou can check whether user already logged in using\n\n\nsdkbox.PluginFacebook.isLoggedIn();\n\n\n\n\n\n\nNote: user only needs to perform login once, unless they logout\n\n\n\n\nPermissions\n\n\nFacebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission \nread\n and \npublish\n\nYou can get a complete list of permissions \nhere\n\n\nTo request a permission, you do so by specifying what you want:\n\n\nsdkbox.PluginFacebook.requestReadPermissions([\npublic_profile\n, \nemail\n]);\nsdkbox.PluginFacebook.requestPublishPermissions([\npublish_actions\n]);\n\n\n\n\nShare\n\n\nThere are two types of sharing functionality.\n\n\n\n\nshare\n will automatically post to the user's wall\nshare a link:\n\n\n\n\nvar info = new Object();\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\nshare a photo:\n\n\nvar info = new Object();\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\ndialog\n will show a dialog and prompt the user to write their own comments in addition:\n\n\n\n\npresent a share dialog:\n\n\nvar info = new Object();\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\nshare a photo with comments:\n\n\nvar info = new Object();\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nNote: sharing photo with comments requires the \nFacebook app\n to be installed on the device.\n\n\n\n\nGraph API\n\n\nYou can perform \nGraph API\n using the \napi\n function\n\n\nFor example, to get the friend list:\n\n\nvar params = new Object();\nsdkbox.PluginFacebook.api(\n/me/friendlists\n, \nGET\n, params, \n/me/friendlists\n);\n\n\n\n\nFacebook events\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\nsdkbox.PluginFacebook.setListener({\n    onLogin: function(isLogin, msg) {},\n    onAPI: function(tag, data) {},\n    onSharedSuccess: function(data) {},\n    onSharedFailed: function(data) {},\n    onSharedCancel: function() {},\n    onPermission: function(isLogin, msg) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFacebook.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFacebook.login();\n\n\n\n\n\n\nlog in\n\n\n\n\nsdkbox.PluginFacebook.requestReadPermissions(permissions);\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook.requestPublishPermissions(permissions);\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook.logout();\n\n\n\n\n\n\nlog out\n\n\n\n\nsdkbox.PluginFacebook.isLoggedIn();\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nsdkbox.PluginFacebook.getUserID();\n\n\n\n\n\n\nget UserID\n\n\n\n\nsdkbox.PluginFacebook.getAccessToken();\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nsdkbox.PluginFacebook.getPermissionList();\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\nshare\n\n\n\n\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nsdkbox.PluginFacebook.getSDKVersion();\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nsdkbox.PluginFacebook.fetchFriends();\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nListeners\n\n\nonLogin(isLogin, msg);\n\n\n\n\nonSharedSuccess(message);\n\n\n\n\nonSharedFailed(message);\n\n\n\n\nonSharedCancel();\n\n\n\n\nonAPI(key, jsonData);\n\n\n\n\nonPermission(isLogin, msg);\n\n\n\n\nonFetchFriends(ok, msg);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginfacebook\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__}\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-19\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#prerequisites", 
            "text": "For Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Facebook JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFacebookJS.hpp \n#include  PluginFacebookJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFacebookJS);\nsc- addRegisterCallback(register_all_PluginFacebookJS_helper);  Initialize Facebook  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFacebook.init();  Using Facebook  Login  First the user needs to login to Facebook in order to use it.  sdkbox.PluginFacebook.login();  If a user doesn't want to use Facebook functionality anymore, logout. using  sdkbox.PluginFacebook.logout();  You can check whether user already logged in using  sdkbox.PluginFacebook.isLoggedIn();   Note: user only needs to perform login once, unless they logout   Permissions  Facebook requires you to ask for the user's permission before you can perform actions, such as, posting on the user's behalf.\nThere are two types of permission  read  and  publish \nYou can get a complete list of permissions  here  To request a permission, you do so by specifying what you want:  sdkbox.PluginFacebook.requestReadPermissions([ public_profile ,  email ]);\nsdkbox.PluginFacebook.requestPublishPermissions([ publish_actions ]);  Share  There are two types of sharing functionality.   share  will automatically post to the user's wall\nshare a link:   var info = new Object();\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.share(info);  share a photo:  var info = new Object();\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);   dialog  will show a dialog and prompt the user to write their own comments in addition:   present a share dialog:  var info = new Object();\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.dialog(info);  share a photo with comments:  var info = new Object();\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);   Note: sharing photo with comments requires the  Facebook app  to be installed on the device.   Graph API  You can perform  Graph API  using the  api  function  For example, to get the friend list:  var params = new Object();\nsdkbox.PluginFacebook.api( /me/friendlists ,  GET , params,  /me/friendlists );  Facebook events  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.  sdkbox.PluginFacebook.setListener({\n    onLogin: function(isLogin, msg) {},\n    onAPI: function(tag, data) {},\n    onSharedSuccess: function(data) {},\n    onSharedFailed: function(data) {},\n    onSharedCancel: function() {},\n    onPermission: function(isLogin, msg) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFacebook.init();   initialize the plugin instance.   sdkbox.PluginFacebook.login();   log in   sdkbox.PluginFacebook.requestReadPermissions(permissions);   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook.requestPublishPermissions(permissions);   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook.logout();   log out   sdkbox.PluginFacebook.isLoggedIn();   Check whether the user logined or not   sdkbox.PluginFacebook.getUserID();   get UserID   sdkbox.PluginFacebook.getAccessToken();   get AccessToken   sdkbox.PluginFacebook.getPermissionList();   get permissoin list   sdkbox.PluginFacebook.share(info);   share   sdkbox.PluginFacebook.dialog(info);   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   sdkbox.PluginFacebook.getSDKVersion();   return the version of Facebook SDK   sdkbox.PluginFacebook.fetchFriends();   fetch friends data from Facebook   Listeners  onLogin(isLogin, msg);  onSharedSuccess(message);  onSharedFailed(message);  onSharedCancel();  onAPI(key, jsonData);  onPermission(isLogin, msg);  onFetchFriends(ok, msg);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFacebook.jar  sdkbox.jar   Copy the  pluginfacebook  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  facebook_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__} \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-19  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/facebook/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/", 
            "text": "Facebook\n\n\nPrerequisites\n\n\n\n\nFor Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import facebook\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Facebook Developer\nAnd created a new \nAPP\n on Facebook\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\nApply the code change to \nAppController.mm\n instead of \nAppDelegate.cpp\n\n\n\n\n#import \nFBSDKCoreKit/FBSDKCoreKit.h\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app-\nrun()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app-\nrun();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}\n\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Facebook follow \nAndroid Quick Start Guide\n\n\nOpen \nres/values/strings.xml\n and replace \nfacebook_app_id\n with your \nFacebook App ID\n\n\nOpen \nAndroidManifest.xml\n and replace \n_replace_with_your_app_id_\n with your \nFacebook App ID\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Facebook configuration you can enable/disable debug mode for Facebook here\n\n\nFacebook\n:\n{\n    \ndebug\n:true\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginFacebookLua.hpp\n\n#include \nPluginFacebookLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginFacebookLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginFacebookLua.hpp\n\n#include \nPluginFacebookLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginFacebookLua(tolua_s);\n    register_all_PluginFacebookLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize Facebook\n\n\n\n\nModify your app's \nInfo.plist\n to include the following additional keys, ensuring that you replace \n with yours:\n\n\n\n\nkey\nCFBundleURLTypes\n/key\n\n\narray\n\n\ndict\n    \nkey\nCFBundleURLName\n/key\n\n    \nstring\n/string\n\n    \nkey\nCFBundleURLSchemes\n/key\n\n    \narray\n\n        \nstring\nfb\nAPP ID\n/string\n\n    \n/array\n\n\n/dict\n\n\n/array\n\n\nkey\nFacebookAppID\n/key\n\n\nstring\nAPP ID\n/string\n\n\nkey\nFacebookDisplayName\n/key\n\n\nstring\nMyTestApp\n/string\n\n\n\n\n\nIf my Facebook \nAPP ID\n is \n655158077954837\n a completed example would be:\n\n\nkey\nCFBundleURLTypes\n/key\n\n\narray\n\n\ndict\n\n    \nkey\nCFBundleURLName\n/key\n\n    \nstring\n/string\n\n    \nkey\nCFBundleURLSchemes\n/key\n\n    \narray\n\n        \nstring\nfb655158077954837\n/string\n\n    \n/array\n\n\n/dict\n\n\n/array\n\n\nkey\nFacebookAppID\n/key\n\n\nstring\n655158077954837\n/string\n\n\nkey\nFacebookDisplayName\n/key\n\n\nstring\nMyTestApp\n/string\n\n\n\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginFacebook:init()\n\n\n\n\nUsing Facebook\n\n\nThere are many Facebook operations that you can take advantage of. Before using any of them it is necessary to call \nlogin()\n, example:\n\n\nsdkbox.PluginFacebook:login();\n\n\n\n\n\n\nYou can share links, example:\n\n\n\n\nFBShareInfo info;\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\nYou can share a link, but also comment on it at the same time. This requires the \nFacebook app\n to be installed on the device. Example:\n\n\n\n\nFBShareInfo info;\ninfo.type  = \nlink\n;\ninfo.link  = \nhttp://www.cocos2d-x.org\n;\ninfo.title = \ncocos2d-x\n;\ninfo.text  = \nBest Game Engine\n;\ninfo.image = \nhttp://cocos2d-x.org/images/logo.png\n;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nYou can share a photo example:\n\n\n\n\nFBShareInfo info;\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);\n\n\n\n\n\n\nYou can share a photo, but also comment on it at the same time, example:\n\n\n\n\nFBShareInfo info;\ninfo.type  = \nphoto\n;\ninfo.title = \nMy Photo\n;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);\n\n\n\n\n\n\nBesides logging in, you also will need to request \nread()\n and \npublish()\n permissions to post. Example:\n\n\n\n\nsdkbox.PluginFacebook.requestReadPermissions({FB_PERM_READ_USER_FRIENDS});\nsdkbox.PluginFacebook.requestPublishPermissions({FB_PERM_PUBLISH_POST});\n\n\n\n\n\n\nWhen are are finished, it is appropriate to call \nlogout()\n, example:\n\n\n\n\nsdkbox.PluginFacebook.logout();\n\n\n\n\nCatch Facebook events (optional)\n\n\nThis allows you to catch \nFacebook\n events so that you can perform operations after Facebook events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::FacebookListener\n and override the functions listed:\n\n\n\n\nsdkbox.PluginFacebook:setListener(function(event)\n    print(\nPluginFacebook callback\n)\n    dump(event)\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFacebook:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFacebook:login()\n\n\n\n\n\n\nlog in\n\n\n\n\nsdkbox.PluginFacebook:requestReadPermissions(permissions)\n\n\n\n\n\n\nlog in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook:requestPublishPermissions(permissions)\n\n\n\n\n\n\nlog in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions\n\n\n\n\nsdkbox.PluginFacebook:logout()\n\n\n\n\n\n\nlog out\n\n\n\n\nsdkbox.PluginFacebook:isLoggedIn()\n\n\n\n\n\n\nCheck whether the user logined or not\n\n\n\n\nsdkbox.PluginFacebook:getUserID()\n\n\n\n\n\n\nget UserID\n\n\n\n\nsdkbox.PluginFacebook:getAccessToken()\n\n\n\n\n\n\nget AccessToken\n\n\n\n\nsdkbox.PluginFacebook:getPermissionList()\n\n\n\n\n\n\nget permissoin list\n\n\n\n\nsdkbox.PluginFacebook:share(info)\n\n\n\n\n\n\nshare\n\n\n\n\nsdkbox.PluginFacebook:dialog(info)\n\n\n\n\n\n\nopen a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)\n\n\n\n\nsdkbox.PluginFacebook:getSDKVersion()\n\n\n\n\n\n\nreturn the version of Facebook SDK\n\n\n\n\nsdkbox.PluginFacebook:fetchFriends()\n\n\n\n\n\n\nfetch friends data from Facebook\n\n\n\n\nListeners\n\n\nonLogin(isLogin, msg)\n\n\n\n\nonSharedSuccess(message)\n\n\n\n\nonSharedFailed(message)\n\n\n\n\nonSharedCancel()\n\n\n\n\nonAPI(key, jsonData)\n\n\n\n\nonPermission(isLogin, msg)\n\n\n\n\nonFetchFriends(ok, msg)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFacebook\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFacebook.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFacebook.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginfacebook\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nfacebook_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.facebook.sdk.ApplicationId\n android:value=\n@string/facebook_app_id\n/\n\n\nactivity android:name=\ncom.facebook.FacebookActivity\n\n  android:configChanges=\n         \nkeyboard|keyboardHidden|screenLayout|screenSize|orientation\n\n  android:theme=\n@android:style/Theme.Translucent.NoTitleBar\n\n  android:label=\n@string/app_name\n /\n\n\n  \nprovider android:authorities=\ncom.facebook.app.FacebookContentProvider__replace_with_your_app_id__}\n\n  android:name=\ncom.facebook.FacebookContentProvider\n\n  android:exported=\ntrue\n /\n\n\n\n\n\nEdit strings.xml\n\n\nOpen \nres/values/strings.xml\n, Add a new string with the name\n\nfacebook_app_id\n and value as your Facebook App ID. Example:\n\n\n  \n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n  \nresources\n\n      \nstring name=\napp_name\nfacebook\n/string\n\n      \nstring name=\nfacebook_app_id\n280194012150923\n/string\n\n  \n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-19\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAdd following line to your \nproject.properties\n\n\nandroid.library.reference.1=./libs/facebook_lib\n\n\n\n\n\n\nNote: if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the final digit as \nandroid.library.reference.2\n, etc.\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#prerequisites", 
            "text": "For Android, Facebook requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Facebook plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import facebook", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#extra-steps", 
            "text": "The following step assuming you already registered as a Facebook Developer\nAnd created a new  APP  on Facebook  Setup iOS   Configure your  APP  following  iOS Quick Start Guide  Apply the code change to  AppController.mm  instead of  AppDelegate.cpp   #import  FBSDKCoreKit/FBSDKCoreKit.h \n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  // ...\n\n  //\n  // **************************\n  // !! IMPORTANT !!\n  // **************************\n  //\n  // call [[FBSDKApplicationDelegate sharedInstance] application:didFinishLaunchingWithOptions\n  // before app- run()\n\n  BOOL ret = [[FBSDKApplicationDelegate sharedInstance] application:application\n                                      didFinishLaunchingWithOptions:launchOptions];\n  app- run();\n  return ret;\n}\n\n- (BOOL)application:(UIApplication *)application\n            openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication\n         annotation:(id)annotation {\n  return [[FBSDKApplicationDelegate sharedInstance] application:application\n                                                         openURL:url\n                                               sourceApplication:sourceApplication\n                                                      annotation:annotation];\n}\n\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n  [FBSDKAppEvents activateApp];\n}  Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Facebook follow  Android Quick Start Guide  Open  res/values/strings.xml  and replace  facebook_app_id  with your  Facebook App ID  Open  AndroidManifest.xml  and replace  _replace_with_your_app_id_  with your  Facebook App ID  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Facebook configuration you can enable/disable debug mode for Facebook here  Facebook :\n{\n     debug :true\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginFacebookLua.hpp \n#include  PluginFacebookLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginFacebookLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginFacebookLua.hpp \n#include  PluginFacebookLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginFacebookLua(tolua_s);\n    register_all_PluginFacebookLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize Facebook   Modify your app's  Info.plist  to include the following additional keys, ensuring that you replace   with yours:   key CFBundleURLTypes /key  array  dict\n     key CFBundleURLName /key \n     string /string \n     key CFBundleURLSchemes /key \n     array \n         string fb APP ID /string \n     /array  /dict  /array  key FacebookAppID /key  string APP ID /string  key FacebookDisplayName /key  string MyTestApp /string   If my Facebook  APP ID  is  655158077954837  a completed example would be:  key CFBundleURLTypes /key  array  dict \n     key CFBundleURLName /key \n     string /string \n     key CFBundleURLSchemes /key \n     array \n         string fb655158077954837 /string \n     /array  /dict  /array  key FacebookAppID /key  string 655158077954837 /string  key FacebookDisplayName /key  string MyTestApp /string    Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginFacebook:init()  Using Facebook  There are many Facebook operations that you can take advantage of. Before using any of them it is necessary to call  login() , example:  sdkbox.PluginFacebook:login();   You can share links, example:   FBShareInfo info;\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.share(info);   You can share a link, but also comment on it at the same time. This requires the  Facebook app  to be installed on the device. Example:   FBShareInfo info;\ninfo.type  =  link ;\ninfo.link  =  http://www.cocos2d-x.org ;\ninfo.title =  cocos2d-x ;\ninfo.text  =  Best Game Engine ;\ninfo.image =  http://cocos2d-x.org/images/logo.png ;\nsdkbox.PluginFacebook.dialog(info);   You can share a photo example:   FBShareInfo info;\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.share(info);   You can share a photo, but also comment on it at the same time, example:   FBShareInfo info;\ninfo.type  =  photo ;\ninfo.title =  My Photo ;\ninfo.image = __path to image__;\nsdkbox.PluginFacebook.dialog(info);   Besides logging in, you also will need to request  read()  and  publish()  permissions to post. Example:   sdkbox.PluginFacebook.requestReadPermissions({FB_PERM_READ_USER_FRIENDS});\nsdkbox.PluginFacebook.requestPublishPermissions({FB_PERM_PUBLISH_POST});   When are are finished, it is appropriate to call  logout() , example:   sdkbox.PluginFacebook.logout();  Catch Facebook events (optional)  This allows you to catch  Facebook  events so that you can perform operations after Facebook events have occurred.   Allow your class to extend  sdkbox::FacebookListener  and override the functions listed:   sdkbox.PluginFacebook:setListener(function(event)\n    print( PluginFacebook callback )\n    dump(event)\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFacebook:init()   initialize the plugin instance.   sdkbox.PluginFacebook:login()   log in   sdkbox.PluginFacebook:requestReadPermissions(permissions)   log in with specific read permissions, conflict with publish permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook:requestPublishPermissions(permissions)   log in with specific public permissions\nhttps://developers.facebook.com/docs/facebook-login/permissions   sdkbox.PluginFacebook:logout()   log out   sdkbox.PluginFacebook:isLoggedIn()   Check whether the user logined or not   sdkbox.PluginFacebook:getUserID()   get UserID   sdkbox.PluginFacebook:getAccessToken()   get AccessToken   sdkbox.PluginFacebook:getPermissionList()   get permissoin list   sdkbox.PluginFacebook:share(info)   share   sdkbox.PluginFacebook:dialog(info)   open a dialog of Facebook app or WebDialog (dialog with photo only avaible with native Facebook app)   sdkbox.PluginFacebook:getSDKVersion()   return the version of Facebook SDK   sdkbox.PluginFacebook:fetchFriends()   fetch friends data from Facebook   Listeners  onLogin(isLogin, msg)  onSharedSuccess(message)  onSharedFailed(message)  onSharedCancel()  onAPI(key, jsonData)  onPermission(isLogin, msg)  onFetchFriends(ok, msg)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Facebook  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFacebook.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFacebook.jar  sdkbox.jar   Copy the  pluginfacebook  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  facebook_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.facebook.sdk.ApplicationId  android:value= @string/facebook_app_id /  activity android:name= com.facebook.FacebookActivity \n  android:configChanges=\n          keyboard|keyboardHidden|screenLayout|screenSize|orientation \n  android:theme= @android:style/Theme.Translucent.NoTitleBar \n  android:label= @string/app_name  / \n\n   provider android:authorities= com.facebook.app.FacebookContentProvider__replace_with_your_app_id__} \n  android:name= com.facebook.FacebookContentProvider \n  android:exported= true  /   Edit strings.xml  Open  res/values/strings.xml , Add a new string with the name facebook_app_id  and value as your Facebook App ID. Example:     ?xml version= 1.0  encoding= utf-8 ? \n   resources \n       string name= app_name facebook /string \n       string name= facebook_app_id 280194012150923 /string \n   /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFacebook\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfacebook)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-19  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  project.properties  Add following line to your  project.properties  android.library.reference.1=./libs/facebook_lib   Note: if you already have an  android.library.reference.1  you can add\nanother by incrementing the final digit as  android.library.reference.2 , etc.   Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/facebook/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/facebook_lib/libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nstartSession()\n are required. Example:\n\n\n#include \nPluginFlurryAnalytics/PluginFlurryAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nstd::string eventName = \ntest event1\n;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nstatic void setAppVersion ( const std::string \n version ) ;\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nstatic std::string getFlurryAgentVersion ( ) ;\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nstatic void setShowErrorInLogEnabled ( bool value ) ;\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nstatic void setDebugLogEnabled ( bool value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setLogLevel ( FA_FlurryLogLevel value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setSessionContinueSeconds ( float seconds ) ;\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nstatic void setCrashReportingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic void endSession ( ) ;\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nstatic bool activeSessionExists ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic std::string getSessionID ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic void pauseBackgroundSession ( ) ;\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ) ;\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        std::map \nstd::string ,\n                        std::string\n \n parameters ) ;\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ) ;\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName , bool timed ) ;\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventId ) ;\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            std::map \nstd::string ,\n                            std::string\n \n parameters ) ;\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nstatic void logError ( const std::string \n errorID ,\n                       const std::string \n message ,\n                       const std::string \n info ) ;\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nstatic void logPageView ( ) ;\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nstatic void setAge ( int age ) ;\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nstatic void setGender ( const std::string \n gender ) ;\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\n     static void setReportLocation ( bool reportLocation ) ;\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nstatic void clearLocation ( ) ;\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nstatic void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nstatic void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nstatic void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nstatic void setEventLoggingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nstatic void setPulseEnabled ( bool value ) ;\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nstatic void setListener ( FlurryAnalyticsListener * listener ) ;\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nstatic FlurryAnalyticsListener * getListener ( ) ;\n\n\n\n\n\n\nget listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listener, just set null, will not delete it\n        the user should delete listener self\n\n\n\n\nListeners\n\n\nvoid flurrySessionDidCreateWithInfo ( std::map \nstd::string ,\n                                      std::string\n \n info );\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginflurryanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\n2.3 Edit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#usage", 
            "text": "Initialize Flurry Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  startSession()  are required. Example:  #include  PluginFlurryAnalytics/PluginFlurryAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  std::string eventName =  test event1 ;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   init plugin, must be first invoke   static void setAppVersion ( const std::string   version ) ;   Explicitly specifies the App Version that Flurry will use to group Analytics data.   static std::string getFlurryAgentVersion ( ) ;   Retrieves the Flurry Agent Build Version.   static void setShowErrorInLogEnabled ( bool value ) ;   Displays an exception in the debug log if thrown during a Session.   static void setDebugLogEnabled ( bool value ) ;   Generates debug logs to console.   static void setLogLevel ( FA_FlurryLogLevel value ) ;   Generates debug logs to console.   static void setSessionContinueSeconds ( float seconds ) ;   Set the timeout for expiring a Flurry session.   static void setCrashReportingEnabled ( bool value ) ;   Enable automatic collection of crash reports.   static void startSession ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static void endSession ( ) ;   end session, just valid on Android   static bool activeSessionExists ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static std::string getSessionID ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static void pauseBackgroundSession ( ) ;   Pauses a Flurry session left running in background. on valid on iOS   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ) ;   Adds an SDK origin specified by  originName and  originVersion.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        std::map  std::string ,\n                        std::string    parameters ) ;   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        const std::string   parameters ) ;   just for lua, js binding, have the same function with addOrigin(string, string, map)   static int logEvent ( const std::string   eventName ) ;   Records a custom event specified by  eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ) ;   Records a custom parameterized event specified by  eventName with  parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ) ;   just for lua, js binding, have same function with logEvent(string, map)   static int logEvent ( const std::string   eventName , bool timed ) ;   Records a timed event specified by  eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ,\n                      bool timed ) ;   Records a custom parameterized timed event specified by  eventName with  parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ,\n                      bool timed ) ;   just for lua, js binding, have the same function with logEvent(string, map, bool)   static void endTimedEvent ( const std::string   eventId ) ;   End a timed event   static void endTimedEvent ( const std::string   eventName ,\n                            std::map  std::string ,\n                            std::string    parameters ) ;   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   static void endTimedEvent ( const std::string   eventName ,\n                            const std::string   parameters ) ;   just for lua, js binding, have same function with endTimeEvent(string, map)   static void logError ( const std::string   errorID ,\n                       const std::string   message ,\n                       const std::string   info ) ;   Records an app exception. Commonly used to catch unhandled exceptions.   static void logPageView ( ) ;   Explicitly track a page view during a session.   static void setUserID ( const std::string   userID ) ;   Assign a unique id for a user in your app.   static void setAge ( int age ) ;   Set your user's age in years.   static void setGender ( const std::string   gender ) ;   Set your user's gender.        static void setReportLocation ( bool reportLocation ) ;   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;   Set the location of the session.   static void clearLocation ( ) ;   clear the default location.valid on Android   static void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;   Set session to report when app closes.valid on iOS   static void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;   Set session to report when app is sent to the background.valid on iOS   static void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;   Set session to support background execution.valid on iOS   static void setEventLoggingEnabled ( bool value ) ;   Enable custom event logging.   static void setPulseEnabled ( bool value ) ;   Enables Flurry Pulse   static void setListener ( FlurryAnalyticsListener * listener ) ;   set listener for session callback   static FlurryAnalyticsListener * getListener ( ) ;   get listener   static void removeListener ( ) ;   remove listener, just set null, will not delete it\n        the user should delete listener self   Listeners  void flurrySessionDidCreateWithInfo ( std::map  std::string ,\n                                      std::string    info );   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginflurryanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   2.3 Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Flurry Analytics JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFlurryAnalyticsJS.hpp\n\n#include \nPluginFlurryAnalyticsJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS_helper);\n\n\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log(\nsession started\n)\n        console.log(\nAPIKey :\n + jsonInfo.apiKey + \n session id :\n + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAppVersion(version);\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLogLevel(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.activeSessionExists();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getSessionID();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.pauseBackgroundSession();\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName);\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logError(errorID, message, info);\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logPageView();\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setUserID(userID);\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAge(age);\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setGender(gender);\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.clearLocation();\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setPulseEnabled(value);\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setListener(listener);\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info);\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginflurryanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\n2.3 Edit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Flurry Analytics JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFlurryAnalyticsJS.hpp \n#include  PluginFlurryAnalyticsJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS_helper);  Initialize Flurry Analytics  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFlurryAnalytics.init();  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log( session started )\n        console.log( APIKey :  + jsonInfo.apiKey +   session id :  + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics.init();   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics.setAppVersion(version);   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setLogLevel(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics.startSession();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.endSession();   end session, just valid on Android   sdkbox.PluginFlurryAnalytics.activeSessionExists();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.getSessionID();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.pauseBackgroundSession();   Pauses a Flurry session left running in background. on valid on iOS   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);   Adds an SDK origin specified by  originName and  originVersion.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName);   Records a custom event specified by  eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   Records a custom parameterized event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);   Records a timed event specified by  eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   Records a custom parameterized timed event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);   End a timed event   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics.logError(errorID, message, info);   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics.logPageView();   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics.setUserID(userID);   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics.setAge(age);   Set your user's age in years.   sdkbox.PluginFlurryAnalytics.setGender(gender);   Set your user's gender.   sdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   sdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);   Set the location of the session.   sdkbox.PluginFlurryAnalytics.clearLocation();   clear the default location.valid on Android   sdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);   Set session to report when app closes.valid on iOS   sdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);   Set session to report when app is sent to the background.valid on iOS   sdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);   Set session to support background execution.valid on iOS   sdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);   Enable custom event logging.   sdkbox.PluginFlurryAnalytics.setPulseEnabled(value);   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics.setListener(listener);   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info);   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginflurryanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   2.3 Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nFlurryAnalytics\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginFlurryAnalyticsLua.hpp\n\n#include \nPluginFlurryAnalyticsLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginFlurryAnalyticsLua(L);\n  register_all_PluginFlurryAnalyticsLua_helper(L);\n}\n\n\n\n\nInitialize Flurry Analytics\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:init()\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nlocal eventName = \ntest event1\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName)\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print(\napiKey:\n, ret.apiKey, \nsessionId:\n, ret.sessionId)\n        -- check session state\n        print(\nFlurry analytics session exist: \n, f:activeSessionExists())\n        print(\nFlurry analytics session: \n, f:getSessionID())\n        local eventName = \ntest event1\n\n        sdkbox.PluginFlurryAnalytics:logEvent(eventName)\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics:init()\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAppVersion(version)\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getFlurryAgentVersion()\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value)\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value)\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLogLevel(value)\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds)\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value)\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endSession()\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:activeSessionExists()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getSessionID()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:pauseBackgroundSession()\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion)\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName)\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, timed)\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventId)\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logError(errorID, message, info)\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logPageView()\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setUserID(userID)\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAge(age)\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setGender(gender)\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation)\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy)\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:clearLocation()\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose)\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled)\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled)\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value)\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setPulseEnabled(value)\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setListener(listener)\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info)\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginflurryanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\n2.2 Edit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\n2.3 Edit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  FlurryAnalytics  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginFlurryAnalyticsLua.hpp \n#include  PluginFlurryAnalyticsLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginFlurryAnalyticsLua(L);\n  register_all_PluginFlurryAnalyticsLua_helper(L);\n}  Initialize Flurry Analytics   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginFlurryAnalytics:init()  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  local eventName =  test event1 \nsdkbox.PluginFlurryAnalytics:logEvent(eventName)  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print( apiKey: , ret.apiKey,  sessionId: , ret.sessionId)\n        -- check session state\n        print( Flurry analytics session exist:  , f:activeSessionExists())\n        print( Flurry analytics session:  , f:getSessionID())\n        local eventName =  test event1 \n        sdkbox.PluginFlurryAnalytics:logEvent(eventName)\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics:init()   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics:setAppVersion(version)   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics:getFlurryAgentVersion()   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value)   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value)   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setLogLevel(value)   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds)   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value)   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics:startSession()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:endSession()   end session, just valid on Android   sdkbox.PluginFlurryAnalytics:activeSessionExists()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:getSessionID()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:pauseBackgroundSession()   Pauses a Flurry session left running in background. on valid on iOS   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion)   Adds an SDK origin specified by  originName and  originVersion.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName)   Records a custom event specified by  eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)   Records a custom parameterized event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName, timed)   Records a timed event specified by  eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)   Records a custom parameterized timed event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventId)   End a timed event   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics:logError(errorID, message, info)   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics:logPageView()   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics:setUserID(userID)   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics:setAge(age)   Set your user's age in years.   sdkbox.PluginFlurryAnalytics:setGender(gender)   Set your user's gender.   sdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation)   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   sdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy)   Set the location of the session.   sdkbox.PluginFlurryAnalytics:clearLocation()   clear the default location.valid on Android   sdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose)   Set session to report when app closes.valid on iOS   sdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled)   Set session to report when app is sent to the background.valid on iOS   sdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled)   Set session to support background execution.valid on iOS   sdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value)   Enable custom event logging.   sdkbox.PluginFlurryAnalytics:setPulseEnabled(value)   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics:setListener(listener)   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info)   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginflurryanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  2.2 Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   2.3 Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/flurryanalytics/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nstartSession()\n are required. Example:\n\n\n#include \nPluginFlurryAnalytics/PluginFlurryAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nstd::string eventName = \ntest event1\n;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nstatic void setAppVersion ( const std::string \n version ) ;\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nstatic std::string getFlurryAgentVersion ( ) ;\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nstatic void setShowErrorInLogEnabled ( bool value ) ;\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nstatic void setDebugLogEnabled ( bool value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setLogLevel ( FA_FlurryLogLevel value ) ;\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nstatic void setSessionContinueSeconds ( float seconds ) ;\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nstatic void setCrashReportingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic void endSession ( ) ;\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nstatic bool activeSessionExists ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic std::string getSessionID ( ) ;\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nstatic void pauseBackgroundSession ( ) ;\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ) ;\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        std::map \nstd::string ,\n                        std::string\n \n parameters ) ;\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nstatic void addOrigin ( const std::string \n originName ,\n                        const std::string \n originVersion ,\n                        const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ) ;\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nstatic int logEvent ( const std::string \n eventName , bool timed ) ;\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      std::map \nstd::string ,\n                      std::string\n \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nstatic int logEvent ( const std::string \n eventName ,\n                      const std::string \n parameters ,\n                      bool timed ) ;\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventId ) ;\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            std::map \nstd::string ,\n                            std::string\n \n parameters ) ;\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nstatic void endTimedEvent ( const std::string \n eventName ,\n                            const std::string \n parameters ) ;\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nstatic void logError ( const std::string \n errorID ,\n                       const std::string \n message ,\n                       const std::string \n info ) ;\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nstatic void logPageView ( ) ;\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nstatic void setAge ( int age ) ;\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nstatic void setGender ( const std::string \n gender ) ;\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\n     static void setReportLocation ( bool reportLocation ) ;\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nstatic void clearLocation ( ) ;\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nstatic void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nstatic void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nstatic void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nstatic void setEventLoggingEnabled ( bool value ) ;\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nstatic void setPulseEnabled ( bool value ) ;\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nstatic void setListener ( FlurryAnalyticsListener * listener ) ;\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nstatic FlurryAnalyticsListener * getListener ( ) ;\n\n\n\n\n\n\nget listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listener, just set null, will not delete it\n        the user should delete listener self\n\n\n\n\nListeners\n\n\nvoid flurrySessionDidCreateWithInfo ( std::map \nstd::string ,\n                                      std::string\n \n info );\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginflurryanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#usage", 
            "text": "Initialize Flurry Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  startSession()  are required. Example:  #include  PluginFlurryAnalytics/PluginFlurryAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFlurryAnalytics::init();\n     // start session\n     sdkbox::PluginFlurryAnalytics::startSession();\n}  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  std::string eventName =  test event1 ;\nsdkbox::PluginFlurryAnalytics::logEvent(eventName);  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox::PluginFlurryAnalytics::endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   init plugin, must be first invoke   static void setAppVersion ( const std::string   version ) ;   Explicitly specifies the App Version that Flurry will use to group Analytics data.   static std::string getFlurryAgentVersion ( ) ;   Retrieves the Flurry Agent Build Version.   static void setShowErrorInLogEnabled ( bool value ) ;   Displays an exception in the debug log if thrown during a Session.   static void setDebugLogEnabled ( bool value ) ;   Generates debug logs to console.   static void setLogLevel ( FA_FlurryLogLevel value ) ;   Generates debug logs to console.   static void setSessionContinueSeconds ( float seconds ) ;   Set the timeout for expiring a Flurry session.   static void setCrashReportingEnabled ( bool value ) ;   Enable automatic collection of crash reports.   static void startSession ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static void endSession ( ) ;   end session, just valid on Android   static bool activeSessionExists ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static std::string getSessionID ( ) ;   Start a Flurry session for the project denoted by  apiKey.   static void pauseBackgroundSession ( ) ;   Pauses a Flurry session left running in background. on valid on iOS   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ) ;   Adds an SDK origin specified by  originName and  originVersion.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        std::map  std::string ,\n                        std::string    parameters ) ;   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   static void addOrigin ( const std::string   originName ,\n                        const std::string   originVersion ,\n                        const std::string   parameters ) ;   just for lua, js binding, have the same function with addOrigin(string, string, map)   static int logEvent ( const std::string   eventName ) ;   Records a custom event specified by  eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ) ;   Records a custom parameterized event specified by  eventName with  parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ) ;   just for lua, js binding, have same function with logEvent(string, map)   static int logEvent ( const std::string   eventName , bool timed ) ;   Records a timed event specified by  eventName.   static int logEvent ( const std::string   eventName ,\n                      std::map  std::string ,\n                      std::string    parameters ,\n                      bool timed ) ;   Records a custom parameterized timed event specified by  eventName with  parameters.   static int logEvent ( const std::string   eventName ,\n                      const std::string   parameters ,\n                      bool timed ) ;   just for lua, js binding, have the same function with logEvent(string, map, bool)   static void endTimedEvent ( const std::string   eventId ) ;   End a timed event   static void endTimedEvent ( const std::string   eventName ,\n                            std::map  std::string ,\n                            std::string    parameters ) ;   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   static void endTimedEvent ( const std::string   eventName ,\n                            const std::string   parameters ) ;   just for lua, js binding, have same function with endTimeEvent(string, map)   static void logError ( const std::string   errorID ,\n                       const std::string   message ,\n                       const std::string   info ) ;   Records an app exception. Commonly used to catch unhandled exceptions.   static void logPageView ( ) ;   Explicitly track a page view during a session.   static void setUserID ( const std::string   userID ) ;   Assign a unique id for a user in your app.   static void setAge ( int age ) ;   Set your user's age in years.   static void setGender ( const std::string   gender ) ;   Set your user's gender.        static void setReportLocation ( bool reportLocation ) ;   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          float horizontalAccuracy ,\n                          float verticalAccuracy ) ;   Set the location of the session.   static void clearLocation ( ) ;   clear the default location.valid on Android   static void setSessionReportsOnCloseEnabled ( bool sendSessionReportsOnClose ) ;   Set session to report when app closes.valid on iOS   static void setSessionReportsOnPauseEnabled ( bool setSessionReportsOnPauseEnabled ) ;   Set session to report when app is sent to the background.valid on iOS   static void setBackgroundSessionEnabled ( bool setBackgroundSessionEnabled ) ;   Set session to support background execution.valid on iOS   static void setEventLoggingEnabled ( bool value ) ;   Enable custom event logging.   static void setPulseEnabled ( bool value ) ;   Enables Flurry Pulse   static void setListener ( FlurryAnalyticsListener * listener ) ;   set listener for session callback   static FlurryAnalyticsListener * getListener ( ) ;   get listener   static void removeListener ( ) ;   remove listener, just set null, will not delete it\n        the user should delete listener self   Listeners  void flurrySessionDidCreateWithInfo ( std::map  std::string ,\n                                      std::string    info );   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar   Copy the  pluginflurryanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Flurry Analytics JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFlurryAnalyticsJS.hpp\n\n#include \nPluginFlurryAnalyticsJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc-\naddRegisterCallback(register_all_PluginFlurryAnalyticsJS_helper);\n\n\n\n\nInitialize Flurry Analytics\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log(\nsession started\n)\n        console.log(\nAPIKey :\n + jsonInfo.apiKey + \n session id :\n + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent(\ntest event2 js\n, JSON.stringify({\neKey1\n:\neVal1\n, \neKey2\n:\neVal2\n}));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics.init();\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAppVersion(version);\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLogLevel(value);\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.startSession();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endSession();\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.activeSessionExists();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.getSessionID();\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.pauseBackgroundSession();\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName);\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logError(errorID, message, info);\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.logPageView();\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setUserID(userID);\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setAge(age);\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setGender(gender);\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.clearLocation();\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setPulseEnabled(value);\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics.setListener(listener);\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info);\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginflurryanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Flurry Analytics JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFlurryAnalyticsJS.hpp \n#include  PluginFlurryAnalyticsJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS);\nsc- addRegisterCallback(register_all_PluginFlurryAnalyticsJS_helper);  Initialize Flurry Analytics  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFlurryAnalytics.init();  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics.init();\nsdkbox.PluginFlurryAnalytics.setListener({\n    flurrySessionDidCreateWithInfo:function(info) {\n        var jsonInfo = JSON.parse(info)\n        console.log( session started )\n        console.log( APIKey :  + jsonInfo.apiKey +   session id :  + jsonInfo.sessionId);\n        sdkbox.PluginFlurryAnalytics.logEvent( test event2 js , JSON.stringify({ eKey1 : eVal1 ,  eKey2 : eVal2 }));\n    }\n});\nsdkbox.PluginFlurryAnalytics.startSession();  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics.endSession();", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics.init();   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics.setAppVersion(version);   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics.getFlurryAgentVersion();   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics.setShowErrorInLogEnabled(value);   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics.setDebugLogEnabled(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setLogLevel(value);   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics.setSessionContinueSeconds(seconds);   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics.setCrashReportingEnabled(value);   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics.startSession();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.endSession();   end session, just valid on Android   sdkbox.PluginFlurryAnalytics.activeSessionExists();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.getSessionID();   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics.pauseBackgroundSession();   Pauses a Flurry session left running in background. on valid on iOS   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion);   Adds an SDK origin specified by  originName and  originVersion.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   sdkbox.PluginFlurryAnalytics.addOrigin(originName, originVersion, parameters);   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName);   Records a custom event specified by  eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   Records a custom parameterized event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters);   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics.logEvent(eventName, timed);   Records a timed event specified by  eventName.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   Records a custom parameterized timed event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics.logEvent(eventName, parameters, timed);   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventId);   End a timed event   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   sdkbox.PluginFlurryAnalytics.endTimedEvent(eventName, parameters);   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics.logError(errorID, message, info);   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics.logPageView();   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics.setUserID(userID);   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics.setAge(age);   Set your user's age in years.   sdkbox.PluginFlurryAnalytics.setGender(gender);   Set your user's gender.   sdkbox.PluginFlurryAnalytics.setReportLocation(reportLocation);   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   sdkbox.PluginFlurryAnalytics.setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy);   Set the location of the session.   sdkbox.PluginFlurryAnalytics.clearLocation();   clear the default location.valid on Android   sdkbox.PluginFlurryAnalytics.setSessionReportsOnCloseEnabled(sendSessionReportsOnClose);   Set session to report when app closes.valid on iOS   sdkbox.PluginFlurryAnalytics.setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled);   Set session to report when app is sent to the background.valid on iOS   sdkbox.PluginFlurryAnalytics.setBackgroundSessionEnabled(setBackgroundSessionEnabled);   Set session to support background execution.valid on iOS   sdkbox.PluginFlurryAnalytics.setEventLoggingEnabled(value);   Enable custom event logging.   sdkbox.PluginFlurryAnalytics.setPulseEnabled(value);   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics.setListener(listener);   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info);   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar   Copy the  pluginflurryanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/", 
            "text": "Flurry Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import flurryanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nAPI KEY\n  with your specific \nFlurry Analytics ID\n account information.\nHere is an example adding \nFlurryAnalytics\n to iOS:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true\n}\n\n\n\n\nAdding \nFlurryAnalytics\n to Android is a bit different as it supports \nlocations\n, \npulse\n and \norigin\n settings. Here is an example adding \nFlurryAnalytics\n to Android:\n\n\nFlurryAnalytics\n:{\n            \nAPIKey\n:\nAPI KEY\n,\n            \nAppVersion\n:\nV0.1\n,\n            \nDebug\n:false,\n            \nLogEvent\n:true,\n            \nLevel\n:2,\n            \nSessionTimeout\n:10,\n            \nCrashReport\n:true,\n            \nLocationReport\n:true,\n            \nDefLocationLat\n:104.06,\n            \nDefLocationLon\n:30.67,\n            \nPulse\n:true,\n            \nOrigin\n:[\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n,\n                    \nOriginParams\n:{\n                        \nKey1\n:\nVal1\n,\n                        \nKey2\n:\nVal2\n,\n                        \nKey3\n:\nVal3\n\n                    }\n                },\n                {\n                    \nOriginName\n:\nsdkbox\n,\n                    \nOriginVersion\n:\nv0.1\n\n                }\n            ]\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginFlurryAnalyticsLua.hpp\n\n#include \nPluginFlurryAnalyticsLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginFlurryAnalyticsLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginFlurryAnalyticsLua.hpp\n\n#include \nPluginFlurryAnalyticsLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginFlurryAnalyticsLua(tolua_s);\n    register_all_PluginFlurryAnalyticsLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize Flurry Analytics\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginFlurryAnalytics:init()\n\n\n\n\nUsing Flurry Analytics\n\n\nAfter initialization you can begin to use the Flurry Analytics functionality. Use \nlogevent\n where ever you want from your code:\n\n\nlocal eventName = \ntest event1\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName)\n\n\n\n\nCatch Flurry Analytics events (optional)\n\n\nThis allows you to catch the \nFlurryAnalytics\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print(\napiKey:\n, ret.apiKey, \nsessionId:\n, ret.sessionId)\n        -- check session state\n        print(\nFlurry analytics session exist: \n, f:activeSessionExists())\n        print(\nFlurry analytics session: \n, f:getSessionID())\n        local eventName = \ntest event1\n\n        sdkbox.PluginFlurryAnalytics:logEvent(eventName);\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\nEnding Flurry Analytics (Android only)\n\n\nWhen you are finished using \nFlurryAnalytics\n or when your games ends. It is necessary to end the \nFlurryAnalytics\n session. This is a requirement for Android but optional on iOS. Example:\n\n\n// end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFlurryAnalytics:init()\n\n\n\n\n\n\ninit plugin, must be first invoke\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAppVersion(version)\n\n\n\n\n\n\nExplicitly specifies the App Version that Flurry will use to group Analytics data.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getFlurryAgentVersion()\n\n\n\n\n\n\nRetrieves the Flurry Agent Build Version.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value)\n\n\n\n\n\n\nDisplays an exception in the debug log if thrown during a Session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value)\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLogLevel(value)\n\n\n\n\n\n\nGenerates debug logs to console.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds)\n\n\n\n\n\n\nSet the timeout for expiring a Flurry session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value)\n\n\n\n\n\n\nEnable automatic collection of crash reports.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:startSession()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endSession()\n\n\n\n\n\n\nend session, just valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:activeSessionExists()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:getSessionID()\n\n\n\n\n\n\nStart a Flurry session for the project denoted by  apiKey.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:pauseBackgroundSession()\n\n\n\n\n\n\nPauses a Flurry session left running in background. on valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion)\n\n\n\n\n\n\nAdds an SDK origin specified by  originName and  originVersion.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)\n\n\n\n\n\n\nAdds a custom parameterized origin specified by  originName with  originVersion and  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)\n\n\n\n\n\n\njust for lua, js binding, have the same function with addOrigin(string, string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName)\n\n\n\n\n\n\nRecords a custom event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)\n\n\n\n\n\n\nRecords a custom parameterized event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)\n\n\n\n\n\n\njust for lua, js binding, have same function with logEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, timed)\n\n\n\n\n\n\nRecords a timed event specified by  eventName.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)\n\n\n\n\n\n\nRecords a custom parameterized timed event specified by  eventName with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)\n\n\n\n\n\n\njust for lua, js binding, have the same function with logEvent(string, map, bool)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventId)\n\n\n\n\n\n\nEnd a timed event\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)\n\n\n\n\n\n\nEnds a timed event specified by  eventName and optionally updates parameters with  parameters.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)\n\n\n\n\n\n\njust for lua, js binding, have same function with endTimeEvent(string, map)\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logError(errorID, message, info)\n\n\n\n\n\n\nRecords an app exception. Commonly used to catch unhandled exceptions.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:logPageView()\n\n\n\n\n\n\nExplicitly track a page view during a session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setUserID(userID)\n\n\n\n\n\n\nAssign a unique id for a user in your app.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setAge(age)\n\n\n\n\n\n\nSet your user's age in years.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setGender(gender)\n\n\n\n\n\n\nSet your user's gender.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation)\n\n\n\n\n\n\nSet whether Flurry should record location via GPS. Defaults to true. valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy)\n\n\n\n\n\n\nSet the location of the session.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:clearLocation()\n\n\n\n\n\n\nclear the default location.valid on Android\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose)\n\n\n\n\n\n\nSet session to report when app closes.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled)\n\n\n\n\n\n\nSet session to report when app is sent to the background.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled)\n\n\n\n\n\n\nSet session to support background execution.valid on iOS\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value)\n\n\n\n\n\n\nEnable custom event logging.\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setPulseEnabled(value)\n\n\n\n\n\n\nEnables Flurry Pulse\n\n\n\n\nsdkbox.PluginFlurryAnalytics:setListener(listener)\n\n\n\n\n\n\nset listener for session callback\n\n\n\n\nListeners\n\n\nflurrySessionDidCreateWithInfo(info)\n\n\n\n\n\n\nInvoked when analytics session is created,\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nFlurryAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFlurryAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nFlurryAnalytics-5.5.0.jar\n\n\nPluginFlurryAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginflurryanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_COARSE_LOCATION\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn android.webkit.**\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Flurry Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import flurryanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  API KEY   with your specific  Flurry Analytics ID  account information.\nHere is an example adding  FlurryAnalytics  to iOS:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true\n}  Adding  FlurryAnalytics  to Android is a bit different as it supports  locations ,  pulse  and  origin  settings. Here is an example adding  FlurryAnalytics  to Android:  FlurryAnalytics :{\n             APIKey : API KEY ,\n             AppVersion : V0.1 ,\n             Debug :false,\n             LogEvent :true,\n             Level :2,\n             SessionTimeout :10,\n             CrashReport :true,\n             LocationReport :true,\n             DefLocationLat :104.06,\n             DefLocationLon :30.67,\n             Pulse :true,\n             Origin :[\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 ,\n                     OriginParams :{\n                         Key1 : Val1 ,\n                         Key2 : Val2 ,\n                         Key3 : Val3 \n                    }\n                },\n                {\n                     OriginName : sdkbox ,\n                     OriginVersion : v0.1 \n                }\n            ]\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#usage", 
            "text": "Modify Lua Code   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginFlurryAnalyticsLua.hpp \n#include  PluginFlurryAnalyticsLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginFlurryAnalyticsLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginFlurryAnalyticsLua.hpp \n#include  PluginFlurryAnalyticsLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginFlurryAnalyticsLua(tolua_s);\n    register_all_PluginFlurryAnalyticsLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize Flurry Analytics  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginFlurryAnalytics:init()  Using Flurry Analytics  After initialization you can begin to use the Flurry Analytics functionality. Use  logevent  where ever you want from your code:  local eventName =  test event1 \nsdkbox.PluginFlurryAnalytics:logEvent(eventName)  Catch Flurry Analytics events (optional)  This allows you to catch the  FlurryAnalytics  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginFlurryAnalytics:init()\nsdkbox.PluginFlurryAnalytics:setListener(function(data)\n        local ret = json.decode(data)\n        print( apiKey: , ret.apiKey,  sessionId: , ret.sessionId)\n        -- check session state\n        print( Flurry analytics session exist:  , f:activeSessionExists())\n        print( Flurry analytics session:  , f:getSessionID())\n        local eventName =  test event1 \n        sdkbox.PluginFlurryAnalytics:logEvent(eventName);\n    end)\nsdkbox.PluginFlurryAnalytics:startSession()  Ending Flurry Analytics (Android only)  When you are finished using  FlurryAnalytics  or when your games ends. It is necessary to end the  FlurryAnalytics  session. This is a requirement for Android but optional on iOS. Example:  // end session just valid on android, but it's ok to invoke it on iOS\nsdkbox.PluginFlurryAnalytics:endSession()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFlurryAnalytics:init()   init plugin, must be first invoke   sdkbox.PluginFlurryAnalytics:setAppVersion(version)   Explicitly specifies the App Version that Flurry will use to group Analytics data.   sdkbox.PluginFlurryAnalytics:getFlurryAgentVersion()   Retrieves the Flurry Agent Build Version.   sdkbox.PluginFlurryAnalytics:setShowErrorInLogEnabled(value)   Displays an exception in the debug log if thrown during a Session.   sdkbox.PluginFlurryAnalytics:setDebugLogEnabled(value)   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setLogLevel(value)   Generates debug logs to console.   sdkbox.PluginFlurryAnalytics:setSessionContinueSeconds(seconds)   Set the timeout for expiring a Flurry session.   sdkbox.PluginFlurryAnalytics:setCrashReportingEnabled(value)   Enable automatic collection of crash reports.   sdkbox.PluginFlurryAnalytics:startSession()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:endSession()   end session, just valid on Android   sdkbox.PluginFlurryAnalytics:activeSessionExists()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:getSessionID()   Start a Flurry session for the project denoted by  apiKey.   sdkbox.PluginFlurryAnalytics:pauseBackgroundSession()   Pauses a Flurry session left running in background. on valid on iOS   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion)   Adds an SDK origin specified by  originName and  originVersion.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)   Adds a custom parameterized origin specified by  originName with  originVersion and  parameters.   sdkbox.PluginFlurryAnalytics:addOrigin(originName, originVersion, parameters)   just for lua, js binding, have the same function with addOrigin(string, string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName)   Records a custom event specified by  eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)   Records a custom parameterized event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters)   just for lua, js binding, have same function with logEvent(string, map)   sdkbox.PluginFlurryAnalytics:logEvent(eventName, timed)   Records a timed event specified by  eventName.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)   Records a custom parameterized timed event specified by  eventName with  parameters.   sdkbox.PluginFlurryAnalytics:logEvent(eventName, parameters, timed)   just for lua, js binding, have the same function with logEvent(string, map, bool)   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventId)   End a timed event   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)   Ends a timed event specified by  eventName and optionally updates parameters with  parameters.   sdkbox.PluginFlurryAnalytics:endTimedEvent(eventName, parameters)   just for lua, js binding, have same function with endTimeEvent(string, map)   sdkbox.PluginFlurryAnalytics:logError(errorID, message, info)   Records an app exception. Commonly used to catch unhandled exceptions.   sdkbox.PluginFlurryAnalytics:logPageView()   Explicitly track a page view during a session.   sdkbox.PluginFlurryAnalytics:setUserID(userID)   Assign a unique id for a user in your app.   sdkbox.PluginFlurryAnalytics:setAge(age)   Set your user's age in years.   sdkbox.PluginFlurryAnalytics:setGender(gender)   Set your user's gender.   sdkbox.PluginFlurryAnalytics:setReportLocation(reportLocation)   Set whether Flurry should record location via GPS. Defaults to true. valid on Android   sdkbox.PluginFlurryAnalytics:setLatitude(latitude,\n                                          longitude,\n                                          horizontalAccuracy,\n                                          verticalAccuracy)   Set the location of the session.   sdkbox.PluginFlurryAnalytics:clearLocation()   clear the default location.valid on Android   sdkbox.PluginFlurryAnalytics:setSessionReportsOnCloseEnabled(sendSessionReportsOnClose)   Set session to report when app closes.valid on iOS   sdkbox.PluginFlurryAnalytics:setSessionReportsOnPauseEnabled(setSessionReportsOnPauseEnabled)   Set session to report when app is sent to the background.valid on iOS   sdkbox.PluginFlurryAnalytics:setBackgroundSessionEnabled(setBackgroundSessionEnabled)   Set session to support background execution.valid on iOS   sdkbox.PluginFlurryAnalytics:setEventLoggingEnabled(value)   Enable custom event logging.   sdkbox.PluginFlurryAnalytics:setPulseEnabled(value)   Enables Flurry Pulse   sdkbox.PluginFlurryAnalytics:setListener(listener)   set listener for session callback   Listeners  flurrySessionDidCreateWithInfo(info)   Invoked when analytics session is created,", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  FlurryAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFlurryAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   FlurryAnalytics-5.5.0.jar  PluginFlurryAnalytics.jar  sdkbox.jar   Copy the  pluginflurryanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name= android.permission.ACCESS_COARSE_LOCATION /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFlurryAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginflurryanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/flurryanalytics/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn android.webkit.**  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\nUsage\n\n\nInitialize Fyber\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginFyber/PluginFyber.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFyber::init();\n}\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default \nplacementId\n\n\nsdkbox::PluginFyber::showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom \nplacementId\n\n\nsdkbox::PluginFyber::showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for \nBrandEngage\n offers availability with \ndefault placementId\n:\n\n\nsdkbox::PluginFyber::requestOffers();\n\n\n\n\nQueries the server for \nBrandEngage\n offers availability with custom \nplacementId\n:\n\n\nsdkbox::PluginFyber::requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox::PluginFyber::requestOffers();\nsdkbox::PluginFyber::showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available:\n\n\nsdkbox::PluginFyber::requestInterstitial();\n\n\n\n\nShows an interstitial ad. Call \nrequestInterstitial\n first:\n\n\nsdkbox::PluginFyber::showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was invoked for the current user ID / app ID combination:\n\n\nsdkbox::PluginFyber::requestDeltaOfCoins();\n\n\n\n\nor:\n\n\nsdkbox::PluginFyber::requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::FyberListener\n and override the functions listed:\n\n\n\n\n#include \nPluginFyber/PluginFyber.h\n\nclass MyClass : public sdkbox::FyberListener\n{\nprivate:\n    void onVirtualCurrencyConnectorFailed(int error,\n                                                  const std::string\n errorCode,\n                                                  const std::string\n errorMsg);\n    void onVirtualCurrencyConnectorSuccess(double deltaOfCoins,\n                                                   const std::string\n currencyId,\n                                                   const std::string\n currencyName,\n                                                   const std::string\n transactionId);\n    void onCanShowInterstitial(bool canShowInterstitial);\n    void onInterstitialDidShow();\n    void onInterstitialDismiss(const std::string\n reason);\n    void onInterstitialFailed();\n    void onBrandEngageClientReceiveOffers(bool areOffersAvailable);\n    void onBrandEngageClientChangeStatus(int status, const std::string\n msg);\n    void onOfferWallFinish(int status);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginFyber::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( FyberListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for fyber events\n\n\n\n\nstatic FyberListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void showOfferWall ( const std::string \n placementId = \n ) ;\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nstatic void requestOffers ( const std::string \n placementId = \n ) ;\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nstatic void showOffers ( ) ;\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nstatic void requestInterstitial ( ) ;\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nstatic void showInterstitial ( ) ;\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nstatic void requestDeltaOfCoins ( const std::string \n currencyId = \n ) ;\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nvoid onVirtualCurrencyConnectorFailed ( int error ,\n                                        const std::string \n errorCode ,\n                                        const std::string \n errorMsg );\n\n\n\n\nvoid onVirtualCurrencyConnectorSuccess ( double deltaOfCoins ,\n                                         const std::string \n currencyId ,\n                                         const std::string \n currencyName ,\n                                         const std::string \n transactionId );\n\n\n\n\nvoid onCanShowInterstitial ( bool canShowInterstitial );\n\n\n\n\nvoid onInterstitialDidShow ( );\n\n\n\n\nvoid onInterstitialDismiss ( const std::string \n reason );\n\n\n\n\nvoid onInterstitialFailed ( );\n\n\n\n\nvoid onBrandEngageClientReceiveOffers ( bool areOffersAvailable );\n\n\n\n\nvoid onBrandEngageClientChangeStatus ( int status , const std::string \n msg );\n\n\n\n\nvoid onOfferWallFinish ( int status );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginfyber\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nfyber_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity android:name=\ncom.sponsorpay.publisher.ofw.SPOfferWallActivity\n android:configChanges=\norientation\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.interstitial.SPInterstitialActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.mbe.SPBrandEngageActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit \nproguard.cfg\n\n\n\n\n# Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#usage", 
            "text": "Initialize Fyber  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginFyber/PluginFyber.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFyber::init();\n}  Using Fyber  Offer Wall  Displaying the Offer Wall with default  placementId  sdkbox::PluginFyber::showOfferWall();  Displaying the Offer Wall with custom  placementId  sdkbox::PluginFyber::showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for  BrandEngage  offers availability with  default placementId :  sdkbox::PluginFyber::requestOffers();  Queries the server for  BrandEngage  offers availability with custom  placementId :  sdkbox::PluginFyber::requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox::PluginFyber::requestOffers();\nsdkbox::PluginFyber::showOffers();  Interstitials  Check if interstitial ads are available:  sdkbox::PluginFyber::requestInterstitial();  Shows an interstitial ad. Call  requestInterstitial  first:  sdkbox::PluginFyber::showInterstitial();  Fetches the amount of a given currency earned since the last time this method was invoked for the current user ID / app ID combination:  sdkbox::PluginFyber::requestDeltaOfCoins();  or:  sdkbox::PluginFyber::requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.   Allow your class to extend  sdkbox::FyberListener  and override the functions listed:   #include  PluginFyber/PluginFyber.h \nclass MyClass : public sdkbox::FyberListener\n{\nprivate:\n    void onVirtualCurrencyConnectorFailed(int error,\n                                                  const std::string  errorCode,\n                                                  const std::string  errorMsg);\n    void onVirtualCurrencyConnectorSuccess(double deltaOfCoins,\n                                                   const std::string  currencyId,\n                                                   const std::string  currencyName,\n                                                   const std::string  transactionId);\n    void onCanShowInterstitial(bool canShowInterstitial);\n    void onInterstitialDidShow();\n    void onInterstitialDismiss(const std::string  reason);\n    void onInterstitialFailed();\n    void onBrandEngageClientReceiveOffers(bool areOffersAvailable);\n    void onBrandEngageClientChangeStatus(int status, const std::string  msg);\n    void onOfferWallFinish(int status);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginFyber::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( FyberListener * listener ) ;   Set listener to listen for fyber events   static FyberListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void showOfferWall ( const std::string   placementId =   ) ;   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   static void requestOffers ( const std::string   placementId =   ) ;   Queries the server for BrandEngage offers availability.   static void showOffers ( ) ;   Starts running an available engagement.   static void requestInterstitial ( ) ;   Check if interstitial ads are available   static void showInterstitial ( ) ;   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   static void requestDeltaOfCoins ( const std::string   currencyId =   ) ;   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  void onVirtualCurrencyConnectorFailed ( int error ,\n                                        const std::string   errorCode ,\n                                        const std::string   errorMsg );  void onVirtualCurrencyConnectorSuccess ( double deltaOfCoins ,\n                                         const std::string   currencyId ,\n                                         const std::string   currencyName ,\n                                         const std::string   transactionId );  void onCanShowInterstitial ( bool canShowInterstitial );  void onInterstitialDidShow ( );  void onInterstitialDismiss ( const std::string   reason );  void onInterstitialFailed ( );  void onBrandEngageClientReceiveOffers ( bool areOffersAvailable );  void onBrandEngageClientChangeStatus ( int status , const std::string   msg );  void onOfferWallFinish ( int status );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFyber.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginfyber  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  fyber_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also a few necessary meta-data tags that also need to be added:  activity android:name= com.sponsorpay.publisher.ofw.SPOfferWallActivity  android:configChanges= orientation /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.interstitial.SPInterstitialActivity \n    android:hardwareAccelerated= true /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.mbe.SPBrandEngageActivity \n    android:hardwareAccelerated= true /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/fyber/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit  proguard.cfg   # Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v3-js/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Fyber JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFyberJS.hpp\n\n#include \nPluginFyberJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFyberJS);\nsc-\naddRegisterCallback(register_all_PluginFyberJS_helper);\n\n\n\n\nInitialize Fyber\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFyber.init();\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default placementId\n\n\nsdkbox.PluginFyber.showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom placementId\n\n\nsdkbox.PluginFyber.showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for BrandEngage offers availability with default placementId.\n\n\nsdkbox.PluginFyber.requestOffers();\n\n\n\n\nQueries the server for BrandEngage offers availability with custom placementId.\n\n\nsdkbox.PluginFyber.requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox.PluginFyber.requestOffers();\nsdkbox.PluginFyber.showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available\n\n\nsdkbox.PluginFyber.requestInterstitial();\n\n\n\n\nShows an interstitial ad. call \nrequestInterstitial\n first.\n\n\nsdkbox.PluginFyber.showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins();\n\n\n\n\nor\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\nsdkbox.PluginFyber.setListener({\n    onVirtualCurrencyConnectorFailed: function(error, errorCode, errorMsg) {},\n    onVirtualCurrencyConnectorSuccess: function(deltaOfCoins, currencyId, currencyName, transactionId) {},\n    onCanShowInterstitial: function(canShowInterstitial) {},\n    onInterstitialDidShow: function() {},\n    onInterstitialDismiss: function(reason) {},\n    onInterstitialFailed: function() {},\n    onBrandEngageClientReceiveOffers: function(areOffersAvailable) {},\n    onBrandEngageClientChangeStatus: function(status, msg) {},\n    onOfferWallFinish: function(status) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFyber.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFyber.showOfferWall(placementId);\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nsdkbox.PluginFyber.requestOffers(placementId);\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nsdkbox.PluginFyber.showOffers();\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nsdkbox.PluginFyber.requestInterstitial();\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nsdkbox.PluginFyber.showInterstitial();\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins(currencyId);\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nonVirtualCurrencyConnectorFailed(error, errorCode, errorMsg);\n\n\n\n\nonVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId);\n\n\n\n\nonCanShowInterstitial(canShowInterstitial);\n\n\n\n\nonInterstitialDidShow();\n\n\n\n\nonInterstitialDismiss(reason);\n\n\n\n\nonInterstitialFailed();\n\n\n\n\nonBrandEngageClientReceiveOffers(areOffersAvailable);\n\n\n\n\nonBrandEngageClientChangeStatus(status, msg);\n\n\n\n\nonOfferWallFinish(status);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginfyber\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nfyber_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity android:name=\ncom.sponsorpay.publisher.ofw.SPOfferWallActivity\n android:configChanges=\norientation\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.interstitial.SPInterstitialActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.mbe.SPBrandEngageActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit \nproguard.cfg\n\n\n\n\n# Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Fyber JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFyberJS.hpp \n#include  PluginFyberJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFyberJS);\nsc- addRegisterCallback(register_all_PluginFyberJS_helper);  Initialize Fyber  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFyber.init();  Using Fyber  Offer Wall  Displaying the Offer Wall with default placementId  sdkbox.PluginFyber.showOfferWall();  Displaying the Offer Wall with custom placementId  sdkbox.PluginFyber.showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for BrandEngage offers availability with default placementId.  sdkbox.PluginFyber.requestOffers();  Queries the server for BrandEngage offers availability with custom placementId.  sdkbox.PluginFyber.requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox.PluginFyber.requestOffers();\nsdkbox.PluginFyber.showOffers();  Interstitials  Check if interstitial ads are available  sdkbox.PluginFyber.requestInterstitial();  Shows an interstitial ad. call  requestInterstitial  first.  sdkbox.PluginFyber.showInterstitial();  Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.  sdkbox.PluginFyber.requestDeltaOfCoins();  or  sdkbox.PluginFyber.requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.  sdkbox.PluginFyber.setListener({\n    onVirtualCurrencyConnectorFailed: function(error, errorCode, errorMsg) {},\n    onVirtualCurrencyConnectorSuccess: function(deltaOfCoins, currencyId, currencyName, transactionId) {},\n    onCanShowInterstitial: function(canShowInterstitial) {},\n    onInterstitialDidShow: function() {},\n    onInterstitialDismiss: function(reason) {},\n    onInterstitialFailed: function() {},\n    onBrandEngageClientReceiveOffers: function(areOffersAvailable) {},\n    onBrandEngageClientChangeStatus: function(status, msg) {},\n    onOfferWallFinish: function(status) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFyber.init();   initialize the plugin instance.   sdkbox.PluginFyber.showOfferWall(placementId);   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   sdkbox.PluginFyber.requestOffers(placementId);   Queries the server for BrandEngage offers availability.   sdkbox.PluginFyber.showOffers();   Starts running an available engagement.   sdkbox.PluginFyber.requestInterstitial();   Check if interstitial ads are available   sdkbox.PluginFyber.showInterstitial();   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   sdkbox.PluginFyber.requestDeltaOfCoins(currencyId);   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  onVirtualCurrencyConnectorFailed(error, errorCode, errorMsg);  onVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId);  onCanShowInterstitial(canShowInterstitial);  onInterstitialDidShow();  onInterstitialDismiss(reason);  onInterstitialFailed();  onBrandEngageClientReceiveOffers(areOffersAvailable);  onBrandEngageClientChangeStatus(status, msg);  onOfferWallFinish(status);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFyber.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginfyber  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  fyber_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also a few necessary meta-data tags that also need to be added:  activity android:name= com.sponsorpay.publisher.ofw.SPOfferWallActivity  android:configChanges= orientation /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.interstitial.SPInterstitialActivity \n    android:hardwareAccelerated= true /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.mbe.SPBrandEngageActivity \n    android:hardwareAccelerated= true /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/fyber/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit  proguard.cfg   # Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nFyber\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginFyberLua.hpp\n\n#include \nPluginFyberLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginFyberLua(L);\n  register_all_PluginFyberLua_helper(L);\n}\n\n\n\n\nInitialize Fyber\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginFyber:init();\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default placementId\n\n\nsdkbox.PluginFyber:showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom placementId\n\n\nsdkbox.PluginFyber:showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for BrandEngage offers availability with default placementId.\n\n\nsdkbox.PluginFyber:requestOffers();\n\n\n\n\nQueries the server for BrandEngage offers availability with custom placementId.\n\n\nsdkbox.PluginFyber:requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox.PluginFyber:requestOffers();\nsdkbox.PluginFyber:showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available\n\n\nsdkbox.PluginFyber:requestInterstitial();\n\n\n\n\nShows an interstitial ad. call \nrequestInterstitial\n first.\n\n\nsdkbox.PluginFyber:showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins();\n\n\n\n\nor\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\nsdkbox.PluginFyber:setListener(function(args)\n    dump(args)\n    if args.name == \nonVirtualCurrencyConnectorFailed\n then\n    elseif args.name == \nonVirtualCurrencyConnectorSuccess\n then\n    elseif args.name == \nonCanShowInterstitial\n then\n    elseif args.name == \nonInterstitialDidShow\n then\n    elseif args.name == \nonInterstitialDismiss\n then\n    elseif args.name == \nonInterstitialFailed\n then\n    elseif args.name == \nonBrandEngageClientReceiveOffers\n then\n    elseif args.name == \nonBrandEngageClientChangeStatus\n then\n    elseif args.name == \nonOfferWallFinish\n then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFyber:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFyber:showOfferWall(placementId)\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nsdkbox.PluginFyber:requestOffers(placementId)\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nsdkbox.PluginFyber:showOffers()\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nsdkbox.PluginFyber:requestInterstitial()\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nsdkbox.PluginFyber:showInterstitial()\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins(currencyId)\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nonVirtualCurrencyConnectorFailed(error, errorCode, errorMsg)\n\n\n\n\nonVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId)\n\n\n\n\nonCanShowInterstitial(canShowInterstitial)\n\n\n\n\nonInterstitialDidShow()\n\n\n\n\nonInterstitialDismiss(reason)\n\n\n\n\nonInterstitialFailed()\n\n\n\n\nonBrandEngageClientReceiveOffers(areOffersAvailable)\n\n\n\n\nonBrandEngageClientChangeStatus(status, msg)\n\n\n\n\nonOfferWallFinish(status)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginfyber\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nfyber_lib\n directories from \nplugin/android/libs\n to your \nproj.android/libs/\n directory.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity android:name=\ncom.sponsorpay.publisher.ofw.SPOfferWallActivity\n android:configChanges=\norientation\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.interstitial.SPInterstitialActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.mbe.SPBrandEngageActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit \nproguard.cfg\n\n\n\n\n# Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Fyber  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginFyberLua.hpp \n#include  PluginFyberLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginFyberLua(L);\n  register_all_PluginFyberLua_helper(L);\n}  Initialize Fyber  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginFyber:init();  Using Fyber  Offer Wall  Displaying the Offer Wall with default placementId  sdkbox.PluginFyber:showOfferWall();  Displaying the Offer Wall with custom placementId  sdkbox.PluginFyber:showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for BrandEngage offers availability with default placementId.  sdkbox.PluginFyber:requestOffers();  Queries the server for BrandEngage offers availability with custom placementId.  sdkbox.PluginFyber:requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox.PluginFyber:requestOffers();\nsdkbox.PluginFyber:showOffers();  Interstitials  Check if interstitial ads are available  sdkbox.PluginFyber:requestInterstitial();  Shows an interstitial ad. call  requestInterstitial  first.  sdkbox.PluginFyber:showInterstitial();  Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.  sdkbox.PluginFyber:requestDeltaOfCoins();  or  sdkbox.PluginFyber:requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.  sdkbox.PluginFyber:setListener(function(args)\n    dump(args)\n    if args.name ==  onVirtualCurrencyConnectorFailed  then\n    elseif args.name ==  onVirtualCurrencyConnectorSuccess  then\n    elseif args.name ==  onCanShowInterstitial  then\n    elseif args.name ==  onInterstitialDidShow  then\n    elseif args.name ==  onInterstitialDismiss  then\n    elseif args.name ==  onInterstitialFailed  then\n    elseif args.name ==  onBrandEngageClientReceiveOffers  then\n    elseif args.name ==  onBrandEngageClientChangeStatus  then\n    elseif args.name ==  onOfferWallFinish  then\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFyber:init()   initialize the plugin instance.   sdkbox.PluginFyber:showOfferWall(placementId)   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   sdkbox.PluginFyber:requestOffers(placementId)   Queries the server for BrandEngage offers availability.   sdkbox.PluginFyber:showOffers()   Starts running an available engagement.   sdkbox.PluginFyber:requestInterstitial()   Check if interstitial ads are available   sdkbox.PluginFyber:showInterstitial()   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   sdkbox.PluginFyber:requestDeltaOfCoins(currencyId)   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  onVirtualCurrencyConnectorFailed(error, errorCode, errorMsg)  onVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId)  onCanShowInterstitial(canShowInterstitial)  onInterstitialDidShow()  onInterstitialDismiss(reason)  onInterstitialFailed()  onBrandEngageClientReceiveOffers(areOffersAvailable)  onBrandEngageClientChangeStatus(status, msg)  onOfferWallFinish(status)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFyber.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginfyber  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  fyber_lib  directories from  plugin/android/libs  to your  proj.android/libs/  directory.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   There are also a few necessary meta-data tags that also need to be added:  activity android:name= com.sponsorpay.publisher.ofw.SPOfferWallActivity  android:configChanges= orientation /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.interstitial.SPInterstitialActivity \n    android:hardwareAccelerated= true /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.mbe.SPBrandEngageActivity \n    android:hardwareAccelerated= true /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/fyber/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit  proguard.cfg   # Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\nUsage\n\n\nInitialize Fyber\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginFyber/PluginFyber.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFyber::init();\n}\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default \nplacementId\n\n\nsdkbox::PluginFyber::showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom \nplacementId\n\n\nsdkbox::PluginFyber::showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for \nBrandEngage\n offers availability with \ndefault placementId\n:\n\n\nsdkbox::PluginFyber::requestOffers();\n\n\n\n\nQueries the server for \nBrandEngage\n offers availability with custom \nplacementId\n:\n\n\nsdkbox::PluginFyber::requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox::PluginFyber::requestOffers();\nsdkbox::PluginFyber::showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available:\n\n\nsdkbox::PluginFyber::requestInterstitial();\n\n\n\n\nShows an interstitial ad. Call \nrequestInterstitial\n first:\n\n\nsdkbox::PluginFyber::showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was invoked for the current user ID / app ID combination:\n\n\nsdkbox::PluginFyber::requestDeltaOfCoins();\n\n\n\n\nor:\n\n\nsdkbox::PluginFyber::requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\n\n\nAllow your class to extend \nsdkbox::FyberListener\n and override the functions listed:\n\n\n\n\n#include \nPluginFyber/PluginFyber.h\n\nclass MyClass : public sdkbox::FyberListener\n{\nprivate:\n    void onVirtualCurrencyConnectorFailed(int error,\n                                                  const std::string\n errorCode,\n                                                  const std::string\n errorMsg);\n    void onVirtualCurrencyConnectorSuccess(double deltaOfCoins,\n                                                   const std::string\n currencyId,\n                                                   const std::string\n currencyName,\n                                                   const std::string\n transactionId);\n    void onCanShowInterstitial(bool canShowInterstitial);\n    void onInterstitialDidShow();\n    void onInterstitialDismiss(const std::string\n reason);\n    void onInterstitialFailed();\n    void onBrandEngageClientReceiveOffers(bool areOffersAvailable);\n    void onBrandEngageClientChangeStatus(int status, const std::string\n msg);\n    void onOfferWallFinish(int status);\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginFyber::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( FyberListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for fyber events\n\n\n\n\nstatic FyberListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void showOfferWall ( const std::string \n placementId = \n ) ;\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nstatic void requestOffers ( const std::string \n placementId = \n ) ;\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nstatic void showOffers ( ) ;\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nstatic void requestInterstitial ( ) ;\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nstatic void showInterstitial ( ) ;\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nstatic void requestDeltaOfCoins ( const std::string \n currencyId = \n ) ;\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nvoid onVirtualCurrencyConnectorFailed ( int error ,\n                                        const std::string \n errorCode ,\n                                        const std::string \n errorMsg );\n\n\n\n\nvoid onVirtualCurrencyConnectorSuccess ( double deltaOfCoins ,\n                                         const std::string \n currencyId ,\n                                         const std::string \n currencyName ,\n                                         const std::string \n transactionId );\n\n\n\n\nvoid onCanShowInterstitial ( bool canShowInterstitial );\n\n\n\n\nvoid onInterstitialDidShow ( );\n\n\n\n\nvoid onInterstitialDismiss ( const std::string \n reason );\n\n\n\n\nvoid onInterstitialFailed ( );\n\n\n\n\nvoid onBrandEngageClientReceiveOffers ( bool areOffersAvailable );\n\n\n\n\nvoid onBrandEngageClientChangeStatus ( int status , const std::string \n msg );\n\n\n\n\nvoid onOfferWallFinish ( int status );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginfyber\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity android:name=\ncom.sponsorpay.publisher.ofw.SPOfferWallActivity\n android:configChanges=\norientation\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.interstitial.SPInterstitialActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.mbe.SPBrandEngageActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit \nproguard.cfg\n\n\n\n\n# Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#usage", 
            "text": "Initialize Fyber  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginFyber/PluginFyber.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginFyber::init();\n}  Using Fyber  Offer Wall  Displaying the Offer Wall with default  placementId  sdkbox::PluginFyber::showOfferWall();  Displaying the Offer Wall with custom  placementId  sdkbox::PluginFyber::showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for  BrandEngage  offers availability with  default placementId :  sdkbox::PluginFyber::requestOffers();  Queries the server for  BrandEngage  offers availability with custom  placementId :  sdkbox::PluginFyber::requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox::PluginFyber::requestOffers();\nsdkbox::PluginFyber::showOffers();  Interstitials  Check if interstitial ads are available:  sdkbox::PluginFyber::requestInterstitial();  Shows an interstitial ad. Call  requestInterstitial  first:  sdkbox::PluginFyber::showInterstitial();  Fetches the amount of a given currency earned since the last time this method was invoked for the current user ID / app ID combination:  sdkbox::PluginFyber::requestDeltaOfCoins();  or:  sdkbox::PluginFyber::requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.   Allow your class to extend  sdkbox::FyberListener  and override the functions listed:   #include  PluginFyber/PluginFyber.h \nclass MyClass : public sdkbox::FyberListener\n{\nprivate:\n    void onVirtualCurrencyConnectorFailed(int error,\n                                                  const std::string  errorCode,\n                                                  const std::string  errorMsg);\n    void onVirtualCurrencyConnectorSuccess(double deltaOfCoins,\n                                                   const std::string  currencyId,\n                                                   const std::string  currencyName,\n                                                   const std::string  transactionId);\n    void onCanShowInterstitial(bool canShowInterstitial);\n    void onInterstitialDidShow();\n    void onInterstitialDismiss(const std::string  reason);\n    void onInterstitialFailed();\n    void onBrandEngageClientReceiveOffers(bool areOffersAvailable);\n    void onBrandEngageClientChangeStatus(int status, const std::string  msg);\n    void onOfferWallFinish(int status);\n};   Create a  listener  that handles callbacks:   sdkbox::PluginFyber::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void setListener ( FyberListener * listener ) ;   Set listener to listen for fyber events   static FyberListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void showOfferWall ( const std::string   placementId =   ) ;   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   static void requestOffers ( const std::string   placementId =   ) ;   Queries the server for BrandEngage offers availability.   static void showOffers ( ) ;   Starts running an available engagement.   static void requestInterstitial ( ) ;   Check if interstitial ads are available   static void showInterstitial ( ) ;   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   static void requestDeltaOfCoins ( const std::string   currencyId =   ) ;   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  void onVirtualCurrencyConnectorFailed ( int error ,\n                                        const std::string   errorCode ,\n                                        const std::string   errorMsg );  void onVirtualCurrencyConnectorSuccess ( double deltaOfCoins ,\n                                         const std::string   currencyId ,\n                                         const std::string   currencyName ,\n                                         const std::string   transactionId );  void onCanShowInterstitial ( bool canShowInterstitial );  void onInterstitialDidShow ( );  void onInterstitialDismiss ( const std::string   reason );  void onInterstitialFailed ( );  void onBrandEngageClientReceiveOffers ( bool areOffersAvailable );  void onBrandEngageClientChangeStatus ( int status , const std::string   msg );  void onOfferWallFinish ( int status );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFyber.jar  sdkbox.jar   Copy the  pluginfyber  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  activity android:name= com.sponsorpay.publisher.ofw.SPOfferWallActivity  android:configChanges= orientation /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.interstitial.SPInterstitialActivity \n    android:hardwareAccelerated= true /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.mbe.SPBrandEngageActivity \n    android:hardwareAccelerated= true /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/fyber/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit  proguard.cfg   # Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v2-js/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Fyber JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginFyberJS.hpp\n\n#include \nPluginFyberJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginFyberJS);\nsc-\naddRegisterCallback(register_all_PluginFyberJS_helper);\n\n\n\n\nInitialize Fyber\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginFyber.init();\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default placementId\n\n\nsdkbox.PluginFyber.showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom placementId\n\n\nsdkbox.PluginFyber.showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for BrandEngage offers availability with default placementId.\n\n\nsdkbox.PluginFyber.requestOffers();\n\n\n\n\nQueries the server for BrandEngage offers availability with custom placementId.\n\n\nsdkbox.PluginFyber.requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox.PluginFyber.requestOffers();\nsdkbox.PluginFyber.showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available\n\n\nsdkbox.PluginFyber.requestInterstitial();\n\n\n\n\nShows an interstitial ad. call \nrequestInterstitial\n first.\n\n\nsdkbox.PluginFyber.showInterstitial();\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins();\n\n\n\n\nor\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins(\ncurrencyId\n)\n\n\n\n\nFyber events\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\nsdkbox.PluginFyber.setListener({\n    onVirtualCurrencyConnectorFailed: function(error, errorCode, errorMsg) {},\n    onVirtualCurrencyConnectorSuccess: function(deltaOfCoins, currencyId, currencyName, transactionId) {},\n    onCanShowInterstitial: function(canShowInterstitial) {},\n    onInterstitialDidShow: function() {},\n    onInterstitialDismiss: function(reason) {},\n    onInterstitialFailed: function() {},\n    onBrandEngageClientReceiveOffers: function(areOffersAvailable) {},\n    onBrandEngageClientChangeStatus: function(status, msg) {},\n    onOfferWallFinish: function(status) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFyber.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFyber.showOfferWall(placementId);\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nsdkbox.PluginFyber.requestOffers(placementId);\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nsdkbox.PluginFyber.showOffers();\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nsdkbox.PluginFyber.requestInterstitial();\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nsdkbox.PluginFyber.showInterstitial();\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nsdkbox.PluginFyber.requestDeltaOfCoins(currencyId);\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nonVirtualCurrencyConnectorFailed(error, errorCode, errorMsg);\n\n\n\n\nonVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId);\n\n\n\n\nonCanShowInterstitial(canShowInterstitial);\n\n\n\n\nonInterstitialDidShow();\n\n\n\n\nonInterstitialDismiss(reason);\n\n\n\n\nonInterstitialFailed();\n\n\n\n\nonBrandEngageClientReceiveOffers(areOffersAvailable);\n\n\n\n\nonBrandEngageClientChangeStatus(status, msg);\n\n\n\n\nonOfferWallFinish(status);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginfyber\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity android:name=\ncom.sponsorpay.publisher.ofw.SPOfferWallActivity\n android:configChanges=\norientation\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.interstitial.SPInterstitialActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.mbe.SPBrandEngageActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit \nproguard.cfg\n\n\n\n\n# Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Fyber JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginFyberJS.hpp \n#include  PluginFyberJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginFyberJS);\nsc- addRegisterCallback(register_all_PluginFyberJS_helper);  Initialize Fyber  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginFyber.init();  Using Fyber  Offer Wall  Displaying the Offer Wall with default placementId  sdkbox.PluginFyber.showOfferWall();  Displaying the Offer Wall with custom placementId  sdkbox.PluginFyber.showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for BrandEngage offers availability with default placementId.  sdkbox.PluginFyber.requestOffers();  Queries the server for BrandEngage offers availability with custom placementId.  sdkbox.PluginFyber.requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox.PluginFyber.requestOffers();\nsdkbox.PluginFyber.showOffers();  Interstitials  Check if interstitial ads are available  sdkbox.PluginFyber.requestInterstitial();  Shows an interstitial ad. call  requestInterstitial  first.  sdkbox.PluginFyber.showInterstitial();  Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.  sdkbox.PluginFyber.requestDeltaOfCoins();  or  sdkbox.PluginFyber.requestDeltaOfCoins( currencyId )  Fyber events  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.  sdkbox.PluginFyber.setListener({\n    onVirtualCurrencyConnectorFailed: function(error, errorCode, errorMsg) {},\n    onVirtualCurrencyConnectorSuccess: function(deltaOfCoins, currencyId, currencyName, transactionId) {},\n    onCanShowInterstitial: function(canShowInterstitial) {},\n    onInterstitialDidShow: function() {},\n    onInterstitialDismiss: function(reason) {},\n    onInterstitialFailed: function() {},\n    onBrandEngageClientReceiveOffers: function(areOffersAvailable) {},\n    onBrandEngageClientChangeStatus: function(status, msg) {},\n    onOfferWallFinish: function(status) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginFyber.init();   initialize the plugin instance.   sdkbox.PluginFyber.showOfferWall(placementId);   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   sdkbox.PluginFyber.requestOffers(placementId);   Queries the server for BrandEngage offers availability.   sdkbox.PluginFyber.showOffers();   Starts running an available engagement.   sdkbox.PluginFyber.requestInterstitial();   Check if interstitial ads are available   sdkbox.PluginFyber.showInterstitial();   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   sdkbox.PluginFyber.requestDeltaOfCoins(currencyId);   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  onVirtualCurrencyConnectorFailed(error, errorCode, errorMsg);  onVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId);  onCanShowInterstitial(canShowInterstitial);  onInterstitialDidShow();  onInterstitialDismiss(reason);  onInterstitialFailed();  onBrandEngageClientReceiveOffers(areOffersAvailable);  onBrandEngageClientChangeStatus(status, msg);  onOfferWallFinish(status);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFyber.jar  sdkbox.jar   Copy the  pluginfyber  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  activity android:name= com.sponsorpay.publisher.ofw.SPOfferWallActivity  android:configChanges= orientation /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.interstitial.SPInterstitialActivity \n    android:hardwareAccelerated= true /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.mbe.SPBrandEngageActivity \n    android:hardwareAccelerated= true /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/fyber/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit  proguard.cfg   # Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/", 
            "text": "Fyber\n\n\nPrerequisites\n\n\n\n\nFor Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.\n\n\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import fyber\n\n\n\n\nExtra steps\n\n\nThe following step assuming you already registered as a Fyber Developer\nAnd created a new \nAPP\n on Fyber\n\n\nSetup iOS\n\n\n\n\nConfigure your \nAPP\n following \niOS Quick Start Guide\n\n\n\n\nSetup Android\n\n\n\n\nMake sure \njava -version\n \n= 1.7\n\n\nConfigure your \nAPP\n on Fyber follow \nAndroid Quick Start Guide\n\n\nOpen \nproject.properties\n and change target to \ntarget=android-15\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically create a sample configuration \nsdkbox_config.json\n for you\n\n\nHere is an example of the Fyber configuration you can enable/disable debug mode for Fyber here\n\n\nFyber\n:\n{\n    \ndebug\n:true,\n    \nappid\n:\n12345\n,\n    \ntoken\n:\n34a9643edf4d3052d2bc1928b2e34d00\n\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginFyberLua.hpp\n\n#include \nPluginFyberLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginFyberLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginFyberLua.hpp\n\n#include \nPluginFyberLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginFyberLua(tolua_s);\n    register_all_PluginFyberLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize Fyber\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginFyber:init()\n\n\n\n\nUsing Fyber\n\n\nOffer Wall\n\n\nDisplaying the Offer Wall with default placementId\n\n\nsdkbox.PluginFyber:showOfferWall();\n\n\n\n\nDisplaying the Offer Wall with custom placementId\n\n\nsdkbox.PluginFyber:showOfferWall(\ncoins\n);\n\n\n\n\nRewarded Video\n\n\n\n\niOS configure follow \nrewarded-video-iOS\n\n\nAndroid configure follow \nrewarded-video-android\n\n\n\n\nQueries the server for BrandEngage offers availability with default placementId.\n\n\nsdkbox.PluginFyber:requestOffers();\n\n\n\n\nQueries the server for BrandEngage offers availability with custom placementId.\n\n\nsdkbox.PluginFyber:requestOffers(\ncoins\n);\n\n\n\n\nDisplay an available rewarded video, call \nrequestOffers()\n first and then \nshowOffers()\n. Developer can \nrequestOffers()\n anytime, then \nshowOffers()\n without any delay:\n\n\nsdkbox.PluginFyber:requestOffers();\nsdkbox.PluginFyber:showOffers();\n\n\n\n\nInterstitials\n\n\nCheck if interstitial ads are available\n\n\nsdkbox.PluginFyber:requestInterstitial();\n\n\n\n\nShows an interstitial ad. call \nrequestInterstitial\n first.\n\n\nsdkbox.PluginFyber:showInterstitial();\n\n\n\n\nCatch Fyber events (optional)\n\n\nThis allows you to catch \nFyber\n events so that you can perform operations after Fyber events have occurred.\n\n\nsdkbox.PluginFyber:setListener(function(args)\n    dump(args)\n    if args.name == \nonVirtualCurrencyConnectorFailed\n then\n    elseif args.name == \nonVirtualCurrencyConnectorSuccess\n then\n    elseif args.name == \nonCanShowInterstitial\n then\n    elseif args.name == \nonInterstitialDidShow\n then\n    elseif args.name == \nonInterstitialDismiss\n then\n    elseif args.name == \nonInterstitialFailed\n then\n    elseif args.name == \nonBrandEngageClientReceiveOffers\n then\n    elseif args.name == \nonBrandEngageClientChangeStatus\n then\n    elseif args.name == \nonOfferWallFinish\n then\n    end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginFyber:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginFyber:showOfferWall(placementId)\n\n\n\n\n\n\nPresents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.\n\n\n\n\nsdkbox.PluginFyber:requestOffers(placementId)\n\n\n\n\n\n\nQueries the server for BrandEngage offers availability.\n\n\n\n\nsdkbox.PluginFyber:showOffers()\n\n\n\n\n\n\nStarts running an available engagement.\n\n\n\n\nsdkbox.PluginFyber:requestInterstitial()\n\n\n\n\n\n\nCheck if interstitial ads are available\n\n\n\n\nsdkbox.PluginFyber:showInterstitial()\n\n\n\n\n\n\nShows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.\n\n\n\n\nsdkbox.PluginFyber:requestDeltaOfCoins(currencyId)\n\n\n\n\n\n\nFetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.\n\n\n\n\nListeners\n\n\nonVirtualCurrencyConnectorFailed(error, errorCode, errorMsg)\n\n\n\n\nonVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId)\n\n\n\n\nonCanShowInterstitial(canShowInterstitial)\n\n\n\n\nonInterstitialDidShow()\n\n\n\n\nonInterstitialDismiss(reason)\n\n\n\n\nonInterstitialFailed()\n\n\n\n\nonBrandEngageClientReceiveOffers(areOffersAvailable)\n\n\n\n\nonBrandEngageClientChangeStatus(status, msg)\n\n\n\n\nonOfferWallFinish(status)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nFyber\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginFyber.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nCoreGraphics.framework\n\n\nCoreLocation.framework\n\n\nCoreTelephony.framework\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nSecurity.framework\n\n\nCFNetwork.framework\n\n\n\n\nAdd separate linker flags to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load PluginFyber.framework/PluginFyber\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginFyber.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginfyber\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.READ_PHONE_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_WIFI_STATE\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nactivity android:name=\ncom.sponsorpay.publisher.ofw.SPOfferWallActivity\n android:configChanges=\norientation\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.interstitial.SPInterstitialActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\nactivity\n    android:configChanges=\nscreenSize|orientation\n\n    android:name=\ncom.sponsorpay.publisher.mbe.SPBrandEngageActivity\n\n    android:hardwareAccelerated=\ntrue\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-14\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit \nproguard.cfg\n\n\n\n\n# Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#fyber", 
            "text": "", 
            "title": "Fyber"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#prerequisites", 
            "text": "For Android, Fyber requires a minimum version of 4.0.3. This version is newer than what the other SDKBOX plugins require.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Fyber plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import fyber", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#extra-steps", 
            "text": "The following step assuming you already registered as a Fyber Developer\nAnd created a new  APP  on Fyber  Setup iOS   Configure your  APP  following  iOS Quick Start Guide   Setup Android   Make sure  java -version   = 1.7  Configure your  APP  on Fyber follow  Android Quick Start Guide  Open  project.properties  and change target to  target=android-15", 
            "title": "Extra steps"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically create a sample configuration  sdkbox_config.json  for you  Here is an example of the Fyber configuration you can enable/disable debug mode for Fyber here  Fyber :\n{\n     debug :true,\n     appid : 12345 ,\n     token : 34a9643edf4d3052d2bc1928b2e34d00 \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginFyberLua.hpp \n#include  PluginFyberLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginFyberLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginFyberLua.hpp \n#include  PluginFyberLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginFyberLua(tolua_s);\n    register_all_PluginFyberLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize Fyber   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginFyber:init()  Using Fyber  Offer Wall  Displaying the Offer Wall with default placementId  sdkbox.PluginFyber:showOfferWall();  Displaying the Offer Wall with custom placementId  sdkbox.PluginFyber:showOfferWall( coins );  Rewarded Video   iOS configure follow  rewarded-video-iOS  Android configure follow  rewarded-video-android   Queries the server for BrandEngage offers availability with default placementId.  sdkbox.PluginFyber:requestOffers();  Queries the server for BrandEngage offers availability with custom placementId.  sdkbox.PluginFyber:requestOffers( coins );  Display an available rewarded video, call  requestOffers()  first and then  showOffers() . Developer can  requestOffers()  anytime, then  showOffers()  without any delay:  sdkbox.PluginFyber:requestOffers();\nsdkbox.PluginFyber:showOffers();  Interstitials  Check if interstitial ads are available  sdkbox.PluginFyber:requestInterstitial();  Shows an interstitial ad. call  requestInterstitial  first.  sdkbox.PluginFyber:showInterstitial();  Catch Fyber events (optional)  This allows you to catch  Fyber  events so that you can perform operations after Fyber events have occurred.  sdkbox.PluginFyber:setListener(function(args)\n    dump(args)\n    if args.name ==  onVirtualCurrencyConnectorFailed  then\n    elseif args.name ==  onVirtualCurrencyConnectorSuccess  then\n    elseif args.name ==  onCanShowInterstitial  then\n    elseif args.name ==  onInterstitialDidShow  then\n    elseif args.name ==  onInterstitialDismiss  then\n    elseif args.name ==  onInterstitialFailed  then\n    elseif args.name ==  onBrandEngageClientReceiveOffers  then\n    elseif args.name ==  onBrandEngageClientChangeStatus  then\n    elseif args.name ==  onOfferWallFinish  then\n    end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginFyber:init()   initialize the plugin instance.   sdkbox.PluginFyber:showOfferWall(placementId)   Presents the SponsorPay Mobile OfferWall as a child view controller of your own view controller.   sdkbox.PluginFyber:requestOffers(placementId)   Queries the server for BrandEngage offers availability.   sdkbox.PluginFyber:showOffers()   Starts running an available engagement.   sdkbox.PluginFyber:requestInterstitial()   Check if interstitial ads are available   sdkbox.PluginFyber:showInterstitial()   Shows an interstitial ad. Check first that one is ready to be shown with requestInterstitial.   sdkbox.PluginFyber:requestDeltaOfCoins(currencyId)   Fetches the amount of a given currency earned since the last time this method was\ninvoked for the current user ID / app ID combination.   Listeners  onVirtualCurrencyConnectorFailed(error, errorCode, errorMsg)  onVirtualCurrencyConnectorSuccess(deltaOfCoins,\n                                   currencyId,\n                                   currencyName,\n                                   transactionId)  onCanShowInterstitial(canShowInterstitial)  onInterstitialDidShow()  onInterstitialDismiss(reason)  onInterstitialFailed()  onBrandEngageClientReceiveOffers(areOffersAvailable)  onBrandEngageClientChangeStatus(status, msg)  onOfferWallFinish(status)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe Fyber  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginFyber.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  CoreGraphics.framework  CoreLocation.framework  CoreTelephony.framework  MediaPlayer.framework  QuartzCore.framework  StoreKit.framework  SystemConfiguration.framework  Security.framework  CFNetwork.framework   Add separate linker flags to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load PluginFyber.framework/PluginFyber   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginFyber.jar  sdkbox.jar   Copy the  pluginfyber  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.READ_PHONE_STATE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.ACCESS_WIFI_STATE  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  activity android:name= com.sponsorpay.publisher.ofw.SPOfferWallActivity  android:configChanges= orientation /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.interstitial.SPInterstitialActivity \n    android:hardwareAccelerated= true /  activity\n    android:configChanges= screenSize|orientation \n    android:name= com.sponsorpay.publisher.mbe.SPBrandEngageActivity \n    android:hardwareAccelerated= true /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginFyber\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginfyber)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-14  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/fyber/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit  proguard.cfg   # Fyber Mediation\n\n-keep class com.sponsorpay.mediation.** { *;}\n\n-keepattributes JavascriptInterface\n\n-keep class com.sponsorpay.publisher.mbe.mediation.SPBrandEngageMediationJSInterface {\n    void setValue(java.lang.String);\n}\n\n-keep class android.webkit.JavascriptInterface\n\n# Google Advertising Id\n\n-keep class com.google.android.gms.ads.identifier.** { *; }  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginGoogleAnalytics/PluginGoogleAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox::PluginGoogleAnalytics::stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox::PluginGoogleAnalytics::startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nstatic void stopSession ( ) ;\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nstatic void dispatchHits ( ) ;\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nstatic void dispatchPeriodically ( int seconds ) ;\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nstatic void stopPeriodicalDispatch ( ) ;\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nstatic void logScreen ( string title ) ;\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nstatic void logEvent ( string eventCategory ,\n                       string eventAction ,\n                       string eventLabel ,\n                       int value ) ;\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nstatic void logException ( string exceptionDescription , bool isFatal ) ;\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nstatic void logTiming ( string timingCategory ,\n                        int timingInterval ,\n                        string timingName ,\n                        string timingLabel ) ;\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nstatic void logSocial ( string socialNetwork ,\n                        string socialAction ,\n                        string socialTarget ) ;\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nstatic void setDryRun ( bool dr ) ;\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nstatic void enableAdvertisingTracking ( bool e ) ;\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nstatic void createTracker ( string trackerId ) ;\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nstatic void enableTracker ( string trackerId ) ;\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \nplugingoogleanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n  \nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n  \nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file must be placed in \nproj.android/res/values/\n. This file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#usage", 
            "text": "Initialize Google Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginGoogleAnalytics/PluginGoogleAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}  You can always manually stop recording events at any time by calling:  sdkbox::PluginGoogleAnalytics::stopSession();  However, in-order to record events again you must then manually call:  sdkbox::PluginGoogleAnalytics::startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void startSession ( ) ;   The analytics session is being explicitly started at plugin initialization time.   static void stopSession ( ) ;   You normally will never stop a session manually.   static void dispatchHits ( ) ;   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   static void dispatchPeriodically ( int seconds ) ;   Change the dispatch info time period to the desired amount of seconds.   static void stopPeriodicalDispatch ( ) ;   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   static void logScreen ( string title ) ;   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   static void logEvent ( string eventCategory ,\n                       string eventAction ,\n                       string eventLabel ,\n                       int value ) ;   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   static void logException ( string exceptionDescription , bool isFatal ) ;   Log an exception. It is a basic support for in-app events.   static void logTiming ( string timingCategory ,\n                        int timingInterval ,\n                        string timingName ,\n                        string timingLabel ) ;   Measure a time inside the application.   static void logSocial ( string socialNetwork ,\n                        string socialAction ,\n                        string socialTarget ) ;   Log a social event.   static void setDryRun ( bool dr ) ;   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   static void enableAdvertisingTracking ( bool e ) ;   Enable advertising tracking when in google's ad vendors.   static void createTracker ( string trackerId ) ;   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   static void enableTracker ( string trackerId ) ;   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  plugingoogleanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  / \n   uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  / \n   uses-permission android:name= android.permission.WAKE_LOCK  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file must be placed in  proj.android/res/values/ . This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/googleanalytics/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Google Analytics JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginGoogleAnalyticsJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginGoogleAnalyticsJS);\n\n\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchPeriodically(seconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logScreen(title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value);\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.setDryRun(dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.createTracker(trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableTracker(trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \nplugingoogleanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n  \nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n  \nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file must be placed in \nproj.android/res/values/\n. This file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Google Analytics JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginGoogleAnalyticsJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginGoogleAnalyticsJS);  Initialize Google Analytics  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginGoogleAnalytics.init();  You can always manually stop recording events at any time by calling:  sdkbox.PluginGoogleAnalytics.stopSession();  However, in-order to record events again you must then manually call:  sdkbox.PluginGoogleAnalytics.startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginGoogleAnalytics.init();   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics.startSession();   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics.stopSession();   You normally will never stop a session manually.   sdkbox.PluginGoogleAnalytics.dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics.dispatchPeriodically(seconds);   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   sdkbox.PluginGoogleAnalytics.logScreen(title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   sdkbox.PluginGoogleAnalytics.logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value);   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   sdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);   Log an exception. It is a basic support for in-app events.   sdkbox.PluginGoogleAnalytics.logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel);   Measure a time inside the application.   sdkbox.PluginGoogleAnalytics.logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget);   Log a social event.   sdkbox.PluginGoogleAnalytics.setDryRun(dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics.createTracker(trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics.enableTracker(trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  plugingoogleanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  / \n   uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  / \n   uses-permission android:name= android.permission.WAKE_LOCK  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file must be placed in  proj.android/res/values/ . This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/googleanalytics/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nGoogleAnalytics\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginGoogleAnalyticsLua.hpp\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginGoogleAnalyticsLua(L);\n}\n\n\n\n\nInitialize Google Analytics\n\n\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:init()\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox.PluginGoogleAnalytics:stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox.PluginGoogleAnalytics:startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginGoogleAnalytics:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:startSession()\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopSession()\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchHits()\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchPeriodically(seconds)\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch()\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logScreen(title)\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value)\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal)\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel)\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget)\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:setDryRun(dr)\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e)\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:createTracker(trackerId)\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableTracker(trackerId)\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \nplugingoogleanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\n  \nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n  \nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n  \nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file must be placed in \nproj.android/res/values/\n. This file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  GoogleAnalytics  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginGoogleAnalyticsLua.hpp   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginGoogleAnalyticsLua(L);\n}  Initialize Google Analytics   Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginGoogleAnalytics:init()  You can always manually stop recording events at any time by calling:  sdkbox.PluginGoogleAnalytics:stopSession();  However, in-order to record events again you must then manually call:  sdkbox.PluginGoogleAnalytics:startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginGoogleAnalytics:init()   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics:startSession()   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics:stopSession()   You normally will never stop a session manually.   sdkbox.PluginGoogleAnalytics:dispatchHits()   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics:dispatchPeriodically(seconds)   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch()   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   sdkbox.PluginGoogleAnalytics:logScreen(title)   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   sdkbox.PluginGoogleAnalytics:logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value)   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   sdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal)   Log an exception. It is a basic support for in-app events.   sdkbox.PluginGoogleAnalytics:logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel)   Measure a time inside the application.   sdkbox.PluginGoogleAnalytics:logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget)   Log a social event.   sdkbox.PluginGoogleAnalytics:setDryRun(dr)   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e)   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics:createTracker(trackerId)   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics:enableTracker(trackerId)   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  plugingoogleanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :     uses-permission android:name= android.permission.INTERNET  / \n   uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  / \n   uses-permission android:name= android.permission.WAKE_LOCK  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file must be placed in  proj.android/res/values/ . This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/googleanalytics/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\nUsage\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginGoogleAnalytics/PluginGoogleAnalytics.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox::PluginGoogleAnalytics::stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox::PluginGoogleAnalytics::startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void startSession ( ) ;\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nstatic void stopSession ( ) ;\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nstatic void dispatchHits ( ) ;\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nstatic void dispatchPeriodically ( int seconds ) ;\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nstatic void stopPeriodicalDispatch ( ) ;\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nstatic void logScreen ( string title ) ;\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nstatic void logEvent ( string eventCategory ,\n                       string eventAction ,\n                       string eventLabel ,\n                       int value ) ;\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nstatic void logException ( string exceptionDescription , bool isFatal ) ;\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nstatic void logTiming ( string timingCategory ,\n                        int timingInterval ,\n                        string timingName ,\n                        string timingLabel ) ;\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nstatic void logSocial ( string socialNetwork ,\n                        string socialAction ,\n                        string socialTarget ) ;\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nstatic void setDryRun ( bool dr ) ;\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nstatic void enableAdvertisingTracking ( bool e ) ;\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nstatic void createTracker ( string trackerId ) ;\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nstatic void enableTracker ( string trackerId ) ;\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \nplugingoogleanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file must be placed in \nproj.android/res/xml/\n. This file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#usage", 
            "text": "Initialize Google Analytics  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginGoogleAnalytics/PluginGoogleAnalytics.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginGoogleAnalytics::init();\n}  You can always manually stop recording events at any time by calling:  sdkbox::PluginGoogleAnalytics::stopSession();  However, in-order to record events again you must then manually call:  sdkbox::PluginGoogleAnalytics::startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void startSession ( ) ;   The analytics session is being explicitly started at plugin initialization time.   static void stopSession ( ) ;   You normally will never stop a session manually.   static void dispatchHits ( ) ;   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   static void dispatchPeriodically ( int seconds ) ;   Change the dispatch info time period to the desired amount of seconds.   static void stopPeriodicalDispatch ( ) ;   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   static void logScreen ( string title ) ;   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   static void logEvent ( string eventCategory ,\n                       string eventAction ,\n                       string eventLabel ,\n                       int value ) ;   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   static void logException ( string exceptionDescription , bool isFatal ) ;   Log an exception. It is a basic support for in-app events.   static void logTiming ( string timingCategory ,\n                        int timingInterval ,\n                        string timingName ,\n                        string timingLabel ) ;   Measure a time inside the application.   static void logSocial ( string socialNetwork ,\n                        string socialAction ,\n                        string socialTarget ) ;   Log a social event.   static void setDryRun ( bool dr ) ;   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   static void enableAdvertisingTracking ( bool e ) ;   Enable advertising tracking when in google's ad vendors.   static void createTracker ( string trackerId ) ;   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   static void enableTracker ( string trackerId ) ;   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar   Copy the  plugingoogleanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.WAKE_LOCK  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file must be placed in  proj.android/res/xml/ . This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/googleanalytics/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Google Analytics JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginGoogleAnalyticsJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginGoogleAnalyticsJS);\n\n\n\n\nInitialize Google Analytics\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginGoogleAnalytics.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.startSession();\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopSession();\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchHits();\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.dispatchPeriodically(seconds);\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logScreen(title);\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value);\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel);\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget);\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.setDryRun(dr);\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.createTracker(trackerId);\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics.enableTracker(trackerId);\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \nplugingoogleanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file must be placed in \nproj.android/res/xml/\n. This file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Google Analytics JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginGoogleAnalyticsJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginGoogleAnalyticsJS);  Initialize Google Analytics  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginGoogleAnalytics.init();  You can always manually stop recording events at any time by calling:  sdkbox.PluginGoogleAnalytics.stopSession();  However, in-order to record events again you must then manually call:  sdkbox.PluginGoogleAnalytics.startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginGoogleAnalytics.init();   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics.startSession();   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics.stopSession();   You normally will never stop a session manually.   sdkbox.PluginGoogleAnalytics.dispatchHits();   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics.dispatchPeriodically(seconds);   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics.stopPeriodicalDispatch();   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   sdkbox.PluginGoogleAnalytics.logScreen(title);   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   sdkbox.PluginGoogleAnalytics.logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value);   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   sdkbox.PluginGoogleAnalytics.logException(exceptionDescription, isFatal);   Log an exception. It is a basic support for in-app events.   sdkbox.PluginGoogleAnalytics.logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel);   Measure a time inside the application.   sdkbox.PluginGoogleAnalytics.logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget);   Log a social event.   sdkbox.PluginGoogleAnalytics.setDryRun(dr);   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics.enableAdvertisingTracking(e);   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics.createTracker(trackerId);   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics.enableTracker(trackerId);   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar   Copy the  plugingoogleanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.WAKE_LOCK  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file must be placed in  proj.android/res/xml/ . This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/googleanalytics/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/", 
            "text": "Google Analytics\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import googleanalytics\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Google Analytics configuration, you need to replace \nTRACKING_CODE\n  with your specific \nGoogle Analytics Tracking Code\n account information.\n\n\nGoogleAnalytics\n : {\n    \ntrackingCode\n : \nTRACKING_CODE\n\n}\n\n\n\n\nTracker\n\n\nA \ntracker\n is used to aggregate the tracked events. There are some considerations that the developer must review:\n\n\n\n\n\n\nYou must create a mobile tracker or reuse a previously created one.\n\n\n\n\n\n\nIf the tracker is new, it will take up to 24 hours to show tracking data.\n\n\n\n\n\n\nOnce you see some historical activity on the tracker, you can see realtime data as well, not before.\n\n\n\n\n\n\nYou can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).\n\n\n\n\n\n\nIf no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to \nstartSession()\n should be performed.\n\n\n\n\n\n\nWhether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.\n\n\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginGoogleAnalyticsLua.hpp\n\n#include \nPluginGoogleAnalyticsLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginGoogleAnalyticsLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginGoogleAnalyticsLua.hpp\n\n#include \nPluginGoogleAnalyticsLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginGoogleAnalyticsLua(tolua_s);\n    register_all_PluginGoogleAnalyticsLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize Google Analytics\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginGoogleAnalytics:init()\n\n\n\n\nYou can always manually stop recording events at any time by calling:\n\n\nsdkbox.PluginGoogleAnalytics:stopSession();\n\n\n\n\nHowever, in-order to record events again you must then manually call:\n\n\nsdkbox.PluginGoogleAnalytics:startSession();\n\n\n\n\nLogged data usually shows up within one day.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginGoogleAnalytics:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:startSession()\n\n\n\n\n\n\nThe analytics session is being explicitly started at plugin initialization time.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopSession()\n\n\n\n\n\n\nYou normally will never stop a session manually.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchHits()\n\n\n\n\n\n\nManually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:dispatchPeriodically(seconds)\n\n\n\n\n\n\nChange the dispatch info time period to the desired amount of seconds.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch()\n\n\n\n\n\n\nStop periodically sending info. Then manually the \ndispatchPeridically\n\nor \ndispatchHits\n should be called.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logScreen(title)\n\n\n\n\n\n\nLog screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value)\n\n\n\n\n\n\nGoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal)\n\n\n\n\n\n\nLog an exception. It is a basic support for in-app events.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel)\n\n\n\n\n\n\nMeasure a time inside the application.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget)\n\n\n\n\n\n\nLog a social event.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:setDryRun(dr)\n\n\n\n\n\n\nWhile running on dry run, the tracked events won't be sent to the actual\nanalytics account.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e)\n\n\n\n\n\n\nEnable advertising tracking when in google's ad vendors.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:createTracker(trackerId)\n\n\n\n\n\n\nCreate a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.\n\n\n\n\nsdkbox.PluginGoogleAnalytics:enableTracker(trackerId)\n\n\n\n\n\n\nEnable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of\nthe\nGoogleAnalytics\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginGoogleAnalytics.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreData.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nlibAdIdAccess.a\n\n\nAdSupport.framework\n\n\n\n\nAdd a linker flag, if your setup requires it, to:\n\nTarget -\n Build Settings -\n Linking -\n Other Linker Flags\n:\n\n\n\n\n-force_load /path/to/libAdIdAccess.a\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGoogleAnalytics.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \nplugingoogleanalytics\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\nandroid.permission.WAKE_LOCK\n /\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nThere are also a few necessary meta-data tags that also need to be added:\n\n\nmeta-data android:name=\ncom.google.android.gms.version\n\n    android:value=\n@integer/google_play_services_version\n /\n\n\nmeta-data\n    android:name=\ncom.google.android.gms.analytics.globalConfigResource\n\n    android:resource=\n@xml/global_tracker\n /\n\n\n\n\n\nEdit the meta-data files\n\n\nIn the step above a file named \nglobal_tracker.xml\n was specified. This file must be placed in \nproj.android/res/xml/\n. This file needs to contain required settings. The contents of this file could be something like this:\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \ninteger name=\nga_dispatchPeriod\n300\n/integer\n\n    \nstring name=\nga_logLevel\nverbose\n/string\n\n\n/resources\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Google Analytics plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import googleanalytics", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Google Analytics configuration, you need to replace  TRACKING_CODE   with your specific  Google Analytics Tracking Code  account information.  GoogleAnalytics  : {\n     trackingCode  :  TRACKING_CODE \n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#tracker", 
            "text": "A  tracker  is used to aggregate the tracked events. There are some considerations that the developer must review:    You must create a mobile tracker or reuse a previously created one.    If the tracker is new, it will take up to 24 hours to show tracking data.    Once you see some historical activity on the tracker, you can see realtime data as well, not before.    You can create as many trackers as you wish, but the plugin configuration only allows to define one (the base use case).    If no tracker is set in the configuration, there will be no tracking session. This means that at a later time, a new (or more) tracker can be created. In this case, a explicit call to  startSession()  should be performed.    Whether the tracker is set in the plugin configuration or manually created, all tracking events will be sent to the server automatically. The implementation buffers tracking events and sends them to the server it batches.", 
            "title": "Tracker"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginGoogleAnalyticsLua.hpp \n#include  PluginGoogleAnalyticsLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginGoogleAnalyticsLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginGoogleAnalyticsLua.hpp \n#include  PluginGoogleAnalyticsLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginGoogleAnalyticsLua(tolua_s);\n    register_all_PluginGoogleAnalyticsLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize Google Analytics  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginGoogleAnalytics:init()  You can always manually stop recording events at any time by calling:  sdkbox.PluginGoogleAnalytics:stopSession();  However, in-order to record events again you must then manually call:  sdkbox.PluginGoogleAnalytics:startSession();  Logged data usually shows up within one day.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginGoogleAnalytics:init()   initialize the plugin instance.   sdkbox.PluginGoogleAnalytics:startSession()   The analytics session is being explicitly started at plugin initialization time.   sdkbox.PluginGoogleAnalytics:stopSession()   You normally will never stop a session manually.   sdkbox.PluginGoogleAnalytics:dispatchHits()   Manually request dispatch of hits. By default, data is dispatched from the\nGoogle Analytics SDK for Android every 5 minutes.   sdkbox.PluginGoogleAnalytics:dispatchPeriodically(seconds)   Change the dispatch info time period to the desired amount of seconds.   sdkbox.PluginGoogleAnalytics:stopPeriodicalDispatch()   Stop periodically sending info. Then manually the  dispatchPeridically \nor  dispatchHits  should be called.   sdkbox.PluginGoogleAnalytics:logScreen(title)   Log screen info. title is the title of a screen. Screens are logical units\ninside your app you'd like to identify at analytics panel.   sdkbox.PluginGoogleAnalytics:logEvent(eventCategory,\n                                       eventAction,\n                                       eventLabel,\n                                       value)   GoogleAnalytics::logEvent(\"Achievement\", \"Unlocked\", \"Slay 10 dragons\", 5);   sdkbox.PluginGoogleAnalytics:logException(exceptionDescription, isFatal)   Log an exception. It is a basic support for in-app events.   sdkbox.PluginGoogleAnalytics:logTiming(timingCategory,\n                                        timingInterval,\n                                        timingName,\n                                        timingLabel)   Measure a time inside the application.   sdkbox.PluginGoogleAnalytics:logSocial(socialNetwork,\n                                        socialAction,\n                                        socialTarget)   Log a social event.   sdkbox.PluginGoogleAnalytics:setDryRun(dr)   While running on dry run, the tracked events won't be sent to the actual\nanalytics account.   sdkbox.PluginGoogleAnalytics:enableAdvertisingTracking(e)   Enable advertising tracking when in google's ad vendors.   sdkbox.PluginGoogleAnalytics:createTracker(trackerId)   Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.\nIf the tracker already existed, no new tracker will be created. In any case, the\ntracker associated with tracker id will be set as default tracker for  analytics\noperations.   sdkbox.PluginGoogleAnalytics:enableTracker(trackerId)   Enable a tracker identified by a trackerId. If the tracker does not exist,\nnothing will happen.   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of\nthe GoogleAnalytics  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginGoogleAnalytics.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreData.framework  Security.framework  SystemConfiguration.framework  libz.dylib  libsqlite3.dylib  libAdIdAccess.a  AdSupport.framework   Add a linker flag, if your setup requires it, to: Target -  Build Settings -  Linking -  Other Linker Flags :   -force_load /path/to/libAdIdAccess.a   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGoogleAnalytics.jar  sdkbox.jar   Copy the  plugingoogleanalytics  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= android.permission.WAKE_LOCK  /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   There are also a few necessary meta-data tags that also need to be added:  meta-data android:name= com.google.android.gms.version \n    android:value= @integer/google_play_services_version  /  meta-data\n    android:name= com.google.android.gms.analytics.globalConfigResource \n    android:resource= @xml/global_tracker  /   Edit the meta-data files  In the step above a file named  global_tracker.xml  was specified. This file must be placed in  proj.android/res/xml/ . This file needs to contain required settings. The contents of this file could be something like this:  ?xml version= 1.0  encoding= utf-8 ?  resources \n     integer name= ga_dispatchPeriod 300 /integer \n     string name= ga_logLevel verbose /string  /resources   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginGoogleAnalytics\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugingoogleanalytics)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/googleanalytics/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -libraryjars libs/android-support-v4.jar\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginIAP/PluginIAP.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::IAP::init();\n}\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox::IAP::refresh()\n.\n\n\n\n\nonProductRequestSuccess\n will be trigged if retrieved successfully.\n\n\nonProductRequestFailure\n will be trigged if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox::IAP::purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox::IAP::restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\n\n\nAllow your class to extend \nsdkbox::IAPListener\n:\n\n\n\n\n    #include \nPluginIAP/PluginIAP.h\n\n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const\n p) override;\n        virtual void onFailure(sdkbox::Product const\n p, const std::string \nmsg)\n           override;\n        virtual void onCanceled(sdkbox::Product const\n p) override;\n        virtual void onRestored(sdkbox::Product const\n p) override;\n        virtual void onProductRequestSuccess(std::vector\nsdkbox::Product\n const \nproducts)\n        override;\n        virtual void onProductRequestFailure(const std::string \nmsg) override;\n    }\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::IAP::setListener(listener);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nstatic void setDebug ( bool debug ) ;\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nstatic void purchase ( const std::string \n name ) ;\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nstatic void refresh ( ) ;\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nstatic void restore ( ) ;\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nstatic void setListener ( IAPListener * listener ) ;\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nvoid onInitialized ( bool ok );\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nvoid onSuccess ( const Product \n p );\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nvoid onFailure ( const Product \n p , const std::string \n msg );\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nvoid onCanceled ( const Product \n p );\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nvoid onRestored ( const Product \n p );\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nvoid onProductRequestSuccess ( const std::vector \nProduct\n \n products );\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nvoid onProductRequestFailure ( const std::string \n msg );\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nvoid onRestoreComplete ( bool ok , const std::string \n msg );\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nproj.android/libs\n\n\n\n\n\n\nCopy the \npluginiap\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 - v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#usage", 
            "text": "Initialize IAP  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginIAP/PluginIAP.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::IAP::init();\n}  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox::IAP::refresh() .   onProductRequestSuccess  will be trigged if retrieved successfully.  onProductRequestFailure  will be trigged if exception occurs.   Make a purchase  To make a purchase call  sdkbox::IAP::purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox::IAP::restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.   Allow your class to extend  sdkbox::IAPListener :       #include  PluginIAP/PluginIAP.h \n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const  p) override;\n        virtual void onFailure(sdkbox::Product const  p, const std::string  msg)\n           override;\n        virtual void onCanceled(sdkbox::Product const  p) override;\n        virtual void onRestored(sdkbox::Product const  p) override;\n        virtual void onProductRequestSuccess(std::vector sdkbox::Product  const  products)\n        override;\n        virtual void onProductRequestFailure(const std::string  msg) override;\n    }   Create a  listener  that handles callbacks:   sdkbox::IAP::setListener(listener);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   Initialize SDKBox IAP   static void setDebug ( bool debug ) ;   Enable/disable debug logging   static void purchase ( const std::string   name ) ;   Make a purchase request   static void refresh ( ) ;   Refresh the IAP data(title, price, description)   static void restore ( ) ;   Restore purchase   static void setListener ( IAPListener * listener ) ;   Set listener for IAP   static void removeListener ( ) ;   Remove listener for IAP   Listeners  void onInitialized ( bool ok );   Called when IAP initialized   void onSuccess ( const Product   p );   Called when an IAP processed successfully   void onFailure ( const Product   p , const std::string   msg );   Called when an IAP fails   void onCanceled ( const Product   p );   Called when user canceled the IAP   void onRestored ( const Product   p );   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   void onProductRequestSuccess ( const std::vector  Product    products );   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   void onProductRequestFailure ( const std::string   msg );   Called when the product request fails   void onRestoreComplete ( bool ok , const std::string   msg );   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  cocos2d/cocos/platform/android/java/libs    If you're using cocos2d-js or lua copy the  jar  files to:  frameworks/cocos2d-x/cocos/platform/android/java/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  proj.android/libs    Copy the  pluginiap  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 - v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/iap/v3-js/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the IAP JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginIAPJS.hpp\n\n#include \nPluginIAPJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginIAPJS);\nsc-\naddRegisterCallback(register_all_PluginIAPJS_helper);\n\n\n\n\nInitialize IAP\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.IAP.init();\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP.refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP.purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP.restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i \n products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP.setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP.purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP.refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP.restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP.setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP.removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nonInitialized(ok);\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nonSuccess(p);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nonFailure(p, msg);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nonCanceled(p);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nonRestored(p);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nonProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nonProductRequestFailure(msg);\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nonRestoreComplete(ok, msg);\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nproj.android/libs\n\n\n\n\n\n\nCopy the \npluginiap\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 - v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/iap/v3-js/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the IAP JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginIAPJS.hpp \n#include  PluginIAPJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginIAPJS);\nsc- addRegisterCallback(register_all_PluginIAPJS_helper);  Initialize IAP  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.IAP.init();  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP.refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP.purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP.restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i   products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-js/#api-reference", 
            "text": "Methods  sdkbox.IAP.init();   Initialize SDKBox IAP   sdkbox.IAP.setDebug(debug);   Enable/disable debug logging   sdkbox.IAP.purchase(name);   Make a purchase request   sdkbox.IAP.refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP.restore();   Restore purchase   sdkbox.IAP.setListener(listener);   Set listener for IAP   sdkbox.IAP.removeListener();   Remove listener for IAP   Listeners  onInitialized(ok);   Called when IAP initialized   onSuccess(p);   Called when an IAP processed successfully   onFailure(p, msg);   Called when an IAP fails   onCanceled(p);   Called when user canceled the IAP   onRestored(p);   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   onProductRequestFailure(msg);   Called when the product request fails   onRestoreComplete(ok, msg);   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  cocos2d/cocos/platform/android/java/libs    If you're using cocos2d-js or lua copy the  jar  files to:  frameworks/cocos2d-x/cocos/platform/android/java/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  proj.android/libs    Copy the  pluginiap  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 - v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/iap/v3-lua/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nIAP\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginIAPLua.hpp\n\n#include \nPluginIAPLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginIAPLua(L);\n  register_all_PluginIAPLua_helper(L);\n}\n\n\n\n\nInitialize IAP\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.IAP:init()\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP:refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP:purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP:restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP:setListener(function(args)\n        if \nonSuccess\n == args.event then\n                local product = args.product\n                dump(product, \nonSuccess:\n)\n        elseif \nonFailure\n == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product, \nonFailure:\n)\n                print(\nmsg:\n, msg)\n        elseif \nonCanceled\n == args.event then\n                local product = args.product\n                dump(product, \nonCanceled:\n)\n        elseif \nonRestored\n == args.event then\n                local product = args.product\n                dump(product, \nonRestored:\n)\n        elseif \nonProductRequestSuccess\n == args.event then\n                local products = args.products\n                dump(products, \nonProductRequestSuccess:\n)\n        elseif \nonProductRequestFailure\n == args.event then\n                local msg = args.msg\n                print(\nmsg:\n, msg)\n        else\n                print(\nunknow event \n, args.event)\n        end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP:init()\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP:setDebug(debug)\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP:purchase(name)\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP:refresh()\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP:restore()\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP:setListener(listener)\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP:removeListener()\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nonInitialized(ok)\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nonSuccess(p)\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nonFailure(p, msg)\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nonCanceled(p)\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nonRestored(p)\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nonProductRequestSuccess(products)\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nonProductRequestFailure(msg)\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nonRestoreComplete(ok, msg)\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\nproj.android/libs\n\n\n\n\n\n\nCopy the \npluginiap\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 - v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  IAP  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginIAPLua.hpp \n#include  PluginIAPLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginIAPLua(L);\n  register_all_PluginIAPLua_helper(L);\n}  Initialize IAP   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.IAP:init()  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP:refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP:purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP:restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP:setListener(function(args)\n        if  onSuccess  == args.event then\n                local product = args.product\n                dump(product,  onSuccess: )\n        elseif  onFailure  == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product,  onFailure: )\n                print( msg: , msg)\n        elseif  onCanceled  == args.event then\n                local product = args.product\n                dump(product,  onCanceled: )\n        elseif  onRestored  == args.event then\n                local product = args.product\n                dump(product,  onRestored: )\n        elseif  onProductRequestSuccess  == args.event then\n                local products = args.products\n                dump(products,  onProductRequestSuccess: )\n        elseif  onProductRequestFailure  == args.event then\n                local msg = args.msg\n                print( msg: , msg)\n        else\n                print( unknow event  , args.event)\n        end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.IAP:init()   Initialize SDKBox IAP   sdkbox.IAP:setDebug(debug)   Enable/disable debug logging   sdkbox.IAP:purchase(name)   Make a purchase request   sdkbox.IAP:refresh()   Refresh the IAP data(title, price, description)   sdkbox.IAP:restore()   Restore purchase   sdkbox.IAP:setListener(listener)   Set listener for IAP   sdkbox.IAP:removeListener()   Remove listener for IAP   Listeners  onInitialized(ok)   Called when IAP initialized   onSuccess(p)   Called when an IAP processed successfully   onFailure(p, msg)   Called when an IAP fails   onCanceled(p)   Called when user canceled the IAP   onRestored(p)   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   onProductRequestSuccess(products)   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   onProductRequestFailure(msg)   Called when the product request fails   onRestoreComplete(ok, msg)   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar     If you're using cocos2d-x from source copy the  jar  files to:  cocos2d/cocos/platform/android/java/libs    If you're using cocos2d-js or lua copy the  jar  files to:  frameworks/cocos2d-x/cocos/platform/android/java/libs    If you're using prebuilt cocos2d-x copy the  jar  files to:  proj.android/libs    Copy the  pluginiap  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 - v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/iap/v2-cpp/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize IAP\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginIAP/PluginIAP.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::IAP::init();\n}\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox::IAP::refresh()\n.\n\n\n\n\nonProductRequestSuccess\n will be trigged if retrieved successfully.\n\n\nonProductRequestFailure\n will be trigged if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox::IAP::purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox::IAP::restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\n\n\nAllow your class to extend \nsdkbox::IAPListener\n:\n\n\n\n\n    #include \nPluginIAP/PluginIAP.h\n\n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const\n p) override;\n        virtual void onFailure(sdkbox::Product const\n p, const std::string \nmsg)\n           override;\n        virtual void onCanceled(sdkbox::Product const\n p) override;\n        virtual void onRestored(sdkbox::Product const\n p) override;\n        virtual void onProductRequestSuccess(std::vector\nsdkbox::Product\n const \nproducts)\n        override;\n        virtual void onProductRequestFailure(const std::string \nmsg) override;\n    }\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::IAP::setListener(listener);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nstatic void setDebug ( bool debug ) ;\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nstatic void purchase ( const std::string \n name ) ;\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nstatic void refresh ( ) ;\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nstatic void restore ( ) ;\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nstatic void setListener ( IAPListener * listener ) ;\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nvoid onInitialized ( bool ok );\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nvoid onSuccess ( const Product \n p );\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nvoid onFailure ( const Product \n p , const std::string \n msg );\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nvoid onCanceled ( const Product \n p );\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nvoid onRestored ( const Product \n p );\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nvoid onProductRequestSuccess ( const std::vector \nProduct\n \n products );\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nvoid onProductRequestFailure ( const std::string \n msg );\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nvoid onRestoreComplete ( bool ok , const std::string \n msg );\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginiap\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#usage", 
            "text": "Initialize IAP  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginIAP/PluginIAP.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::IAP::init();\n}  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox::IAP::refresh() .   onProductRequestSuccess  will be trigged if retrieved successfully.  onProductRequestFailure  will be trigged if exception occurs.   Make a purchase  To make a purchase call  sdkbox::IAP::purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox::IAP::restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.   Allow your class to extend  sdkbox::IAPListener :       #include  PluginIAP/PluginIAP.h \n    class MyClass : public sdkbox::IAPListener\n    {\n    private:\n        virtual void onSuccess(sdkbox::Product const  p) override;\n        virtual void onFailure(sdkbox::Product const  p, const std::string  msg)\n           override;\n        virtual void onCanceled(sdkbox::Product const  p) override;\n        virtual void onRestored(sdkbox::Product const  p) override;\n        virtual void onProductRequestSuccess(std::vector sdkbox::Product  const  products)\n        override;\n        virtual void onProductRequestFailure(const std::string  msg) override;\n    }   Create a  listener  that handles callbacks:   sdkbox::IAP::setListener(listener);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   Initialize SDKBox IAP   static void setDebug ( bool debug ) ;   Enable/disable debug logging   static void purchase ( const std::string   name ) ;   Make a purchase request   static void refresh ( ) ;   Refresh the IAP data(title, price, description)   static void restore ( ) ;   Restore purchase   static void setListener ( IAPListener * listener ) ;   Set listener for IAP   static void removeListener ( ) ;   Remove listener for IAP   Listeners  void onInitialized ( bool ok );   Called when IAP initialized   void onSuccess ( const Product   p );   Called when an IAP processed successfully   void onFailure ( const Product   p , const std::string   msg );   Called when an IAP fails   void onCanceled ( const Product   p );   Called when user canceled the IAP   void onRestored ( const Product   p );   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   void onProductRequestSuccess ( const std::vector  Product    products );   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   void onProductRequestFailure ( const std::string   msg );   Called when the product request fails   void onRestoreComplete ( bool ok , const std::string   msg );   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar   Copy the  pluginiap  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/iap/v2-js/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the IAP JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginIAPJS.hpp\n\n#include \nPluginIAPJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginIAPJS);\nsc-\naddRegisterCallback(register_all_PluginIAPJS_helper);\n\n\n\n\nInitialize IAP\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.IAP.init();\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP.refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP.purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP.restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i \n products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP.init();\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP.setDebug(debug);\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP.purchase(name);\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP.refresh();\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP.restore();\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP.setListener(listener);\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP.removeListener();\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nonInitialized(ok);\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nonSuccess(p);\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nonFailure(p, msg);\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nonCanceled(p);\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nonRestored(p);\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nonProductRequestSuccess(products);\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nonProductRequestFailure(msg);\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nonRestoreComplete(ok, msg);\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginiap\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/iap/v2-js/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the IAP JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginIAPJS.hpp \n#include  PluginIAPJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginIAPJS);\nsc- addRegisterCallback(register_all_PluginIAPJS_helper);  Initialize IAP  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.IAP.init();  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP.refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP.purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP.restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP.setListener({\n    onSuccess : function (product) {\n        //Purchase success\n    },\n    onFailure : function (product, msg) {\n        //Purchase failed\n        //msg is the error message\n    },\n    onCanceled : function (product) {\n        //Purchase was canceled by user\n    },\n    onRestored : function (product) {\n        //Purchase restored\n    },\n    onProductRequestSuccess : function (products) {\n        //Returns you the data for all the iap products\n        //You can get each item using following method\n        for (var i = 0; i   products.length; i++) {\n            // loop\n        }\n    },\n    onProductRequestFailure : function (msg) {\n        //When product refresh request fails.\n    }\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-js/#api-reference", 
            "text": "Methods  sdkbox.IAP.init();   Initialize SDKBox IAP   sdkbox.IAP.setDebug(debug);   Enable/disable debug logging   sdkbox.IAP.purchase(name);   Make a purchase request   sdkbox.IAP.refresh();   Refresh the IAP data(title, price, description)   sdkbox.IAP.restore();   Restore purchase   sdkbox.IAP.setListener(listener);   Set listener for IAP   sdkbox.IAP.removeListener();   Remove listener for IAP   Listeners  onInitialized(ok);   Called when IAP initialized   onSuccess(p);   Called when an IAP processed successfully   onFailure(p, msg);   Called when an IAP fails   onCanceled(p);   Called when user canceled the IAP   onRestored(p);   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   onProductRequestSuccess(products);   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   onProductRequestFailure(msg);   Called when the product request fails   onRestoreComplete(ok, msg);   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar   Copy the  pluginiap  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/iap/v2-lua/", 
            "text": "In-App Purchase\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import iap\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the IAP configuration, you need to replace \nput the product id for ios here\n with the product id from your \niTunes Connect\n or  replace \nput your googleplay key here\n from your \nGoogle Play Console\n\n\nios\n :\n{\n    \niap\n:{\n        \nitems\n:{\n            \nremove_ads\n:{\n                \nid\n:\nput the product id for ios here\n\n            }\n        }\n    }\n},\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n\n          }\n        }\n    }\n}\n\n\n\n\nIf you have IAP items that are \nnon-consumable\n, it is also necessary to supply this for each item in your \nsdkbox_config.json\n. Only \nAndroid\n requires this step. Taking the same \njson\n above your config might now look like this example:\n\n\nandroid\n:\n{\n    \niap\n:{\n        \nkey\n:\nput your googleplay key here\n,\n        \nitems\n:{\n          \nremove_ads\n:{\n              \nid\n:\nput the product id for android here\n,\n              \ntype\n:\nnon_consumable\n\n          }\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginIAPLua.hpp\n\n#include \nPluginIAPLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginIAPLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginIAPLua.hpp\n\n#include \nPluginIAPLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginIAPLua(tolua_s);\n    register_all_PluginIAPLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize IAP\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.IAP:init()\n\n\n\n\nRetrieve latest Product data\n\n\nIt's always a good idea to retrieve the latest product data from store when your game starts.\n\n\nTo retrieve latest IAP data, simply call \nsdkbox.IAP:refresh()\n.\n\n\n\n\nonProductRequestSuccess\n if retrieved successfully.\n\n\nonProductRequestFailure\n if exception occurs.\n\n\n\n\nMake a purchase\n\n\nTo make a purchase call \nsdkbox.IAP:purchase(name)\n\n\nNote:\n \nname\n is the name of the IAP item in your config file under \nitems\n tag, not the product id you set in iTunes or GooglePlay Store\n\n\n\n\nonSuccess\n will be triggered if purchase is successful.\n\n\nonFailure\n will be triggered if purchase fails.\n\n\nonCanceled\n will be triggered if purchase is canceled by user.\n\n\n\n\nRestore purchase\n\n\nTo restore purchase call \nsdkbox.IAP:restore()\n.\n\n\n\n\nonRestored\n will be triggered if restore is successful.\n\n\n\n\nNote:\n \nonRestored\n could be triggered multiple times\n\n\nHandling Purchase Events\n\n\nThis allows you to catch the \nIAP\n events so that you can perform operations based upon the response from your players and IAP servers.\n\n\nsdkbox.IAP:setListener(function(args)\n        if \nonSuccess\n == args.event then\n                local product = args.product\n                dump(product, \nonSuccess:\n)\n        elseif \nonFailure\n == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product, \nonFailure:\n)\n                print(\nmsg:\n, msg)\n        elseif \nonCanceled\n == args.event then\n                local product = args.product\n                dump(product, \nonCanceled:\n)\n        elseif \nonRestored\n == args.event then\n                local product = args.product\n                dump(product, \nonRestored:\n)\n        elseif \nonProductRequestSuccess\n == args.event then\n                local products = args.products\n                dump(products, \nonProductRequestSuccess:\n)\n        elseif \nonProductRequestFailure\n == args.event then\n                local msg = args.msg\n                print(\nmsg:\n, msg)\n        else\n                print(\nunknow event \n, args.event)\n        end\nend)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.IAP:init()\n\n\n\n\n\n\nInitialize SDKBox IAP\n\n\n\n\nsdkbox.IAP:setDebug(debug)\n\n\n\n\n\n\nEnable/disable debug logging\n\n\n\n\nsdkbox.IAP:purchase(name)\n\n\n\n\n\n\nMake a purchase request\n\n\n\n\nsdkbox.IAP:refresh()\n\n\n\n\n\n\nRefresh the IAP data(title, price, description)\n\n\n\n\nsdkbox.IAP:restore()\n\n\n\n\n\n\nRestore purchase\n\n\n\n\nsdkbox.IAP:setListener(listener)\n\n\n\n\n\n\nSet listener for IAP\n\n\n\n\nsdkbox.IAP:removeListener()\n\n\n\n\n\n\nRemove listener for IAP\n\n\n\n\nListeners\n\n\nonInitialized(ok)\n\n\n\n\n\n\nCalled when IAP initialized\n\n\n\n\nonSuccess(p)\n\n\n\n\n\n\nCalled when an IAP processed successfully\n\n\n\n\nonFailure(p, msg)\n\n\n\n\n\n\nCalled when an IAP fails\n\n\n\n\nonCanceled(p)\n\n\n\n\n\n\nCalled when user canceled the IAP\n\n\n\n\nonRestored(p)\n\n\n\n\n\n\nCalled when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP\n\n\n\n\nonProductRequestSuccess(products)\n\n\n\n\n\n\nCalled the product request is successful, usually developers use product request to update the latest info(title, price) from IAP\n\n\n\n\nonProductRequestFailure(msg)\n\n\n\n\n\n\nCalled when the product request fails\n\n\n\n\nonRestoreComplete(ok, msg)\n\n\n\n\n\n\nCalled when the restore completed\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nIAP\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginIAP.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginGooglePlay.jar\n\n\nPluginIAP.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginiap\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional dependencies to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#in-app-purchase", 
            "text": "", 
            "title": "In-App Purchase"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX IAP plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import iap", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the IAP configuration, you need to replace  put the product id for ios here  with the product id from your  iTunes Connect  or  replace  put your googleplay key here  from your  Google Play Console  ios  :\n{\n     iap :{\n         items :{\n             remove_ads :{\n                 id : put the product id for ios here \n            }\n        }\n    }\n}, android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here \n          }\n        }\n    }\n}  If you have IAP items that are  non-consumable , it is also necessary to supply this for each item in your  sdkbox_config.json . Only  Android  requires this step. Taking the same  json  above your config might now look like this example:  android :\n{\n     iap :{\n         key : put your googleplay key here ,\n         items :{\n           remove_ads :{\n               id : put the product id for android here ,\n               type : non_consumable \n          }\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginIAPLua.hpp \n#include  PluginIAPLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginIAPLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginIAPLua.hpp \n#include  PluginIAPLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginIAPLua(tolua_s);\n    register_all_PluginIAPLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize IAP  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.IAP:init()  Retrieve latest Product data  It's always a good idea to retrieve the latest product data from store when your game starts.  To retrieve latest IAP data, simply call  sdkbox.IAP:refresh() .   onProductRequestSuccess  if retrieved successfully.  onProductRequestFailure  if exception occurs.   Make a purchase  To make a purchase call  sdkbox.IAP:purchase(name)  Note:   name  is the name of the IAP item in your config file under  items  tag, not the product id you set in iTunes or GooglePlay Store   onSuccess  will be triggered if purchase is successful.  onFailure  will be triggered if purchase fails.  onCanceled  will be triggered if purchase is canceled by user.   Restore purchase  To restore purchase call  sdkbox.IAP:restore() .   onRestored  will be triggered if restore is successful.   Note:   onRestored  could be triggered multiple times  Handling Purchase Events  This allows you to catch the  IAP  events so that you can perform operations based upon the response from your players and IAP servers.  sdkbox.IAP:setListener(function(args)\n        if  onSuccess  == args.event then\n                local product = args.product\n                dump(product,  onSuccess: )\n        elseif  onFailure  == args.event then\n                local product = args.product\n                local msg = args.msg\n                dump(product,  onFailure: )\n                print( msg: , msg)\n        elseif  onCanceled  == args.event then\n                local product = args.product\n                dump(product,  onCanceled: )\n        elseif  onRestored  == args.event then\n                local product = args.product\n                dump(product,  onRestored: )\n        elseif  onProductRequestSuccess  == args.event then\n                local products = args.products\n                dump(products,  onProductRequestSuccess: )\n        elseif  onProductRequestFailure  == args.event then\n                local msg = args.msg\n                print( msg: , msg)\n        else\n                print( unknow event  , args.event)\n        end\nend)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.IAP:init()   Initialize SDKBox IAP   sdkbox.IAP:setDebug(debug)   Enable/disable debug logging   sdkbox.IAP:purchase(name)   Make a purchase request   sdkbox.IAP:refresh()   Refresh the IAP data(title, price, description)   sdkbox.IAP:restore()   Restore purchase   sdkbox.IAP:setListener(listener)   Set listener for IAP   sdkbox.IAP:removeListener()   Remove listener for IAP   Listeners  onInitialized(ok)   Called when IAP initialized   onSuccess(p)   Called when an IAP processed successfully   onFailure(p, msg)   Called when an IAP fails   onCanceled(p)   Called when user canceled the IAP   onRestored(p)   Called when server returns the IAP items user already purchased\n@note this callback will be called multiple times if there are multiple IAP   onProductRequestSuccess(products)   Called the product request is successful, usually developers use product request to update the latest info(title, price) from IAP   onProductRequestFailure(msg)   Called when the product request fails   onRestoreComplete(ok, msg)   Called when the restore completed", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  IAP  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginIAP.framework   The above frameworks depend upon other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  StoreKit.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/iap/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginGooglePlay.jar  PluginIAP.jar  sdkbox.jar   Copy the  pluginiap  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional dependencies to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginIAP\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginiap)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginKochava/PluginKochava.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox::PluginKochava::trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox::PluginKochava::spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox::PluginKochava::sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just\nneed to pass the \n.\n\n\nCatch Kochava events (optional)\n\n\nThis allows you to poll and catch \nKochava\n events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a \nlambda\n function:\n\n\nauto callback = [](const std::map\nstd::string, std::string\n* attribution)\n{\n  if (attribution)\n  {\n      typedef std::map\nstd::string, std::string\n map_type;\n      const map_type\n m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type\n kv = * it;\n          printf(\n%s -\n %s\n, kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);\n\n\n\n\nNote\n: Asking for attribution data could take a while. You can  poll\n \ngetAttributionData()\n until you get something back that is not \nnull\n.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nstatic void shutdown ( ) ;\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nstatic void enableLogging ( bool enabled ) ;\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nstatic void trackEvent ( const char * event , const char * value ) ;\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nstatic void spatialEvent ( const char * title , float x , float y , float z ) ;\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nstatic void setLimitAdTracking ( bool limitAdTracking ) ;\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nstatic const std::map \nstd::string , std::string\n * retrieveAttribution ( ) ;\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nstatic void sendDeepLink ( const char * url , const char * application ) ;\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nstatic void setAttributionCallback ( kochavaCallbackDict callback ) ;\n\n\n\n\n\n\nspecify callback for attribution\n\n\n\n\nstatic void setBeaconCallback ( kochavaCallbackString callback ) ;\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginkochava\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#usage", 
            "text": "Initialize Kochava  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginKochava/PluginKochava.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox::PluginKochava::trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox::PluginKochava::spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox::PluginKochava::sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just\nneed to pass the  .  Catch Kochava events (optional)  This allows you to poll and catch  Kochava  events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a  lambda  function:  auto callback = [](const std::map std::string, std::string * attribution)\n{\n  if (attribution)\n  {\n      typedef std::map std::string, std::string  map_type;\n      const map_type  m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type  kv = * it;\n          printf( %s -  %s , kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);  Note : Asking for attribution data could take a while. You can  poll\n  getAttributionData()  until you get something back that is not  null .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   init the kochava service   static void shutdown ( ) ;   shutdown the kochava service   static void enableLogging ( bool enabled ) ;   enable kochava api logging   static void trackEvent ( const char * event , const char * value ) ;   track a single event   static void spatialEvent ( const char * title , float x , float y , float z ) ;   spatial event to help visualize data   static void setLimitAdTracking ( bool limitAdTracking ) ;   turn on/off ad tracking   static const std::map  std::string , std::string  * retrieveAttribution ( ) ;   returns the attribution data   static void sendDeepLink ( const char * url , const char * application ) ;   send a referral to where your app was opened from.   static void setAttributionCallback ( kochavaCallbackDict callback ) ;   specify callback for attribution   static void setBeaconCallback ( kochavaCallbackString callback ) ;   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginkochava  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/kochava/v3-js/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Kochava JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginKochavaJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginKochavaJS);\n\n\n\n\nInitialize Kochava\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava.trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nsdkbox.PluginKochava.shutdown();\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nsdkbox.PluginKochava.enableLogging(enabled);\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nsdkbox.PluginKochava.trackEvent(event, value);\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(title, x, y, z);\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nsdkbox.PluginKochava.setLimitAdTracking(limitAdTracking);\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nsdkbox.PluginKochava.retrieveAttribution();\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(url, application);\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nsdkbox.PluginKochava.setBeaconCallback(callback);\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginkochava\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "js"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Kochava JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginKochavaJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginKochavaJS);  Initialize Kochava  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginKochava.init();  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava.trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava.spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava.sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava.init();   init the kochava service   sdkbox.PluginKochava.shutdown();   shutdown the kochava service   sdkbox.PluginKochava.enableLogging(enabled);   enable kochava api logging   sdkbox.PluginKochava.trackEvent(event, value);   track a single event   sdkbox.PluginKochava.spatialEvent(title, x, y, z);   spatial event to help visualize data   sdkbox.PluginKochava.setLimitAdTracking(limitAdTracking);   turn on/off ad tracking   sdkbox.PluginKochava.retrieveAttribution();   returns the attribution data   sdkbox.PluginKochava.sendDeepLink(url, application);   send a referral to where your app was opened from.   sdkbox.PluginKochava.setBeaconCallback(callback);   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginkochava  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/kochava/v3-lua/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nKochava\n with Lua. \nNote:\n this takes a parameter of \nlua_State*\n:\n\n\n\n\n#include \nPluginKochavaLua.hpp\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginKochavaLua(\nlua_State*\n);\n}\n\n\n\n\nInitialize Kochava\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginKochava:init()\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava:trackEvent(\nEVENT\n, \nVALUE\n)\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n)\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(\nURI\n, \nYOUR APP\n)\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava:init()\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nsdkbox.PluginKochava:shutdown()\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nsdkbox.PluginKochava:enableLogging(enabled)\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nsdkbox.PluginKochava:trackEvent(event, value)\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(title, x, y, z)\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nsdkbox.PluginKochava:setLimitAdTracking(limitAdTracking)\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nsdkbox.PluginKochava:retrieveAttribution()\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(url, application)\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nsdkbox.PluginKochava:setBeaconCallback(callback)\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginkochava\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#usage", 
            "text": "Modify Lua Code   Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Kochava  with Lua.  Note:  this takes a parameter of  lua_State* :   #include  PluginKochavaLua.hpp   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginKochavaLua( lua_State* );\n}  Initialize Kochava   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginKochava:init()  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava:trackEvent( EVENT ,  VALUE )   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava:spatialEvent( TITLE ,  X ,  Y ,  Z )   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava:sendDeepLink( URI ,  YOUR APP )  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava:init()   init the kochava service   sdkbox.PluginKochava:shutdown()   shutdown the kochava service   sdkbox.PluginKochava:enableLogging(enabled)   enable kochava api logging   sdkbox.PluginKochava:trackEvent(event, value)   track a single event   sdkbox.PluginKochava:spatialEvent(title, x, y, z)   spatial event to help visualize data   sdkbox.PluginKochava:setLimitAdTracking(limitAdTracking)   turn on/off ad tracking   sdkbox.PluginKochava:retrieveAttribution()   returns the attribution data   sdkbox.PluginKochava:sendDeepLink(url, application)   send a referral to where your app was opened from.   sdkbox.PluginKochava:setBeaconCallback(callback)   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginkochava  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nInitialize Kochava\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginKochava/PluginKochava.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox::PluginKochava::trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox::PluginKochava::spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox::PluginKochava::sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just\nneed to pass the \n.\n\n\nCatch Kochava events (optional)\n\n\nThis allows you to poll and catch \nKochava\n events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a \nlambda\n function:\n\n\nauto callback = [](const std::map\nstd::string, std::string\n* attribution)\n{\n  if (attribution)\n  {\n      typedef std::map\nstd::string, std::string\n map_type;\n      const map_type\n m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type\n kv = * it;\n          printf(\n%s -\n %s\n, kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);\n\n\n\n\nNote\n: Asking for attribution data could take a while. You can  poll\n \ngetAttributionData()\n until you get something back that is not \nnull\n.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nstatic void shutdown ( ) ;\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nstatic void enableLogging ( bool enabled ) ;\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nstatic void trackEvent ( const char * event , const char * value ) ;\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nstatic void spatialEvent ( const char * title , float x , float y , float z ) ;\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nstatic void setLimitAdTracking ( bool limitAdTracking ) ;\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nstatic const std::map \nstd::string , std::string\n * retrieveAttribution ( ) ;\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nstatic void sendDeepLink ( const char * url , const char * application ) ;\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nstatic void setAttributionCallback ( kochavaCallbackDict callback ) ;\n\n\n\n\n\n\nspecify callback for attribution\n\n\n\n\nstatic void setBeaconCallback ( kochavaCallbackString callback ) ;\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginkochava\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok\nto overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#usage", 
            "text": "Initialize Kochava  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginKochava/PluginKochava.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginKochava::init();\n}  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox::PluginKochava::trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox::PluginKochava::spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox::PluginKochava::sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just\nneed to pass the  .  Catch Kochava events (optional)  This allows you to poll and catch  Kochava  events so that you get notified when\nreferral or attribution data is returned from the server or secondly get notified\nwhen a user has crossed a beacon boundary, i.e. the user is near a Starbucks or\nperhaps walks into a Starbucks. The implementation here is simple using a  lambda  function:  auto callback = [](const std::map std::string, std::string * attribution)\n{\n  if (attribution)\n  {\n      typedef std::map std::string, std::string  map_type;\n      const map_type  m = * attribution;\n\n      for (map_type::const_iterator it = m.begin(); it != m.end(); ++it)\n      {\n          const map_type::value_type  kv = * it;\n          printf( %s -  %s , kv.first.c_str(), kv.second.c_str());\n      }\n  }\n};\n\nsdkbox::PluginKochava::setAttributionCallback(callback);  Note : Asking for attribution data could take a while. You can  poll\n  getAttributionData()  until you get something back that is not  null .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   init the kochava service   static void shutdown ( ) ;   shutdown the kochava service   static void enableLogging ( bool enabled ) ;   enable kochava api logging   static void trackEvent ( const char * event , const char * value ) ;   track a single event   static void spatialEvent ( const char * title , float x , float y , float z ) ;   spatial event to help visualize data   static void setLimitAdTracking ( bool limitAdTracking ) ;   turn on/off ad tracking   static const std::map  std::string , std::string  * retrieveAttribution ( ) ;   returns the attribution data   static void sendDeepLink ( const char * url , const char * application ) ;   send a referral to where your app was opened from.   static void setAttributionCallback ( kochavaCallbackDict callback ) ;   specify callback for attribution   static void setBeaconCallback ( kochavaCallbackString callback ) ;   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar   Copy the  pluginkochava  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok\nto overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/kochava/v2-js/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Kochava JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginKochavaJS.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginKochavaJS);\n\n\n\n\nInitialize Kochava\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava.trackEvent(\nEVENT\n, \nVALUE\n);\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n);\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(\nURI\n, \nYOUR APP\n);\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava.init();\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nsdkbox.PluginKochava.shutdown();\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nsdkbox.PluginKochava.enableLogging(enabled);\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nsdkbox.PluginKochava.trackEvent(event, value);\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nsdkbox.PluginKochava.spatialEvent(title, x, y, z);\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nsdkbox.PluginKochava.setLimitAdTracking(limitAdTracking);\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nsdkbox.PluginKochava.retrieveAttribution();\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nsdkbox.PluginKochava.sendDeepLink(url, application);\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nsdkbox.PluginKochava.setBeaconCallback(callback);\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginkochava\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok\nto overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "js"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Kochava JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginKochavaJS.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginKochavaJS);  Initialize Kochava  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginKochava.init();  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava.trackEvent( EVENT ,  VALUE );   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava.spatialEvent( TITLE ,  X ,  Y ,  Z );   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava.sendDeepLink( URI ,  YOUR APP );  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava.init();   init the kochava service   sdkbox.PluginKochava.shutdown();   shutdown the kochava service   sdkbox.PluginKochava.enableLogging(enabled);   enable kochava api logging   sdkbox.PluginKochava.trackEvent(event, value);   track a single event   sdkbox.PluginKochava.spatialEvent(title, x, y, z);   spatial event to help visualize data   sdkbox.PluginKochava.setLimitAdTracking(limitAdTracking);   turn on/off ad tracking   sdkbox.PluginKochava.retrieveAttribution();   returns the attribution data   sdkbox.PluginKochava.sendDeepLink(url, application);   send a referral to where your app was opened from.   sdkbox.PluginKochava.setBeaconCallback(callback);   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar   Copy the  pluginkochava  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok\nto overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/kochava/v2-lua/", 
            "text": "Kochava\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import kochava\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Kochava configuration, you need to replace\n\nKOCHAVA_APP_ID\n with your specific \nKochava\n account information.\nHere is an example adding \nKochava\n:\n\n\nkochava\n :\n{\n    \nkochavaAppId\n : \nKOCHAVA_APP_ID\n,\n    \nenableLogging\n : 1,\n    \nretrieveAttribution\n : 1\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginKochavaLua.hpp\n\n#include \nPluginKochavaLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginKochavaLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginKochavaLua.hpp\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginKochavaLua(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize Kochava\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginKochava:init()\n\n\n\n\nTracking Events\n\n\nKochava provides tracking \ncustom\n, \nspatial\n or \nreferral\n events.\n\n\n\n\nTracking a \ncustom\n event:\n\n\n\n\nsdkbox.PluginKochava:trackEvent(\nEVENT\n, \nVALUE\n)\n\n\n\n\n\n\nTracking a \nspatial\n event, by providing a title and position in the world:\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(\nTITLE\n, \nX\n, \nY\n, \nZ\n)\n\n\n\n\n\n\nTracking a \nreferral\n event (also known as a deep link):\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(\nURI\n, \nYOUR APP\n)\n\n\n\n\nNote:\n On Android, the 2nd parameter (\n) is not used. You just need to pass the \n.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginKochava:init()\n\n\n\n\n\n\ninit the kochava service\n\n\n\n\nsdkbox.PluginKochava:shutdown()\n\n\n\n\n\n\nshutdown the kochava service\n\n\n\n\nsdkbox.PluginKochava:enableLogging(enabled)\n\n\n\n\n\n\nenable kochava api logging\n\n\n\n\nsdkbox.PluginKochava:trackEvent(event, value)\n\n\n\n\n\n\ntrack a single event\n\n\n\n\nsdkbox.PluginKochava:spatialEvent(title, x, y, z)\n\n\n\n\n\n\nspatial event to help visualize data\n\n\n\n\nsdkbox.PluginKochava:setLimitAdTracking(limitAdTracking)\n\n\n\n\n\n\nturn on/off ad tracking\n\n\n\n\nsdkbox.PluginKochava:retrieveAttribution()\n\n\n\n\n\n\nreturns the attribution data\n\n\n\n\nsdkbox.PluginKochava:sendDeepLink(url, application)\n\n\n\n\n\n\nsend a referral to where your app was opened from.\n\n\n\n\nsdkbox.PluginKochava:setBeaconCallback(callback)\n\n\n\n\n\n\nspecify beacon transition callback\n\n\n\n\nListeners\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nKochava\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginKochava.framework\n\n\n\n\nThe above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\nFoundation.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nCoreLocation.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nKochavaSDK.jar\n\n\nPluginKochava.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginkochava\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok\nto overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name =\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.ACCESS_WIFI_STATE\n/\n\n\nuses-permission android:name =\nandroid.permission.READ_PHONE_STATE\n/\n\n\n\n\n\nAdditionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the \napplication tags\n, this is needed for the Google Play referral data capture:\n\n\nreceiver android:name =\ncom.kochava.android.tracker.ReferralCapture\n\n  android:exported =\ntrue\n \n\n  \nintent-filter\n\n  \naction android:name =\ncom.android.vending.INSTALL_REFERRER\n /\n\n  \n/intent-filter\n\n  \n/receiver\n\n  \nmeta-data\n    android:name =\ncom.google.android.gms.version\n\n    android:value =\n@integer/google_play_services_version\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#kochava", 
            "text": "", 
            "title": "Kochava"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Kochava plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import kochava", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Kochava configuration, you need to replace KOCHAVA_APP_ID  with your specific  Kochava  account information.\nHere is an example adding  Kochava :  kochava  :\n{\n     kochavaAppId  :  KOCHAVA_APP_ID ,\n     enableLogging  : 1,\n     retrieveAttribution  : 1\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginKochavaLua.hpp \n#include  PluginKochavaLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginKochavaLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginKochavaLua.hpp \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginKochavaLua(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize Kochava  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginKochava:init()  Tracking Events  Kochava provides tracking  custom ,  spatial  or  referral  events.   Tracking a  custom  event:   sdkbox.PluginKochava:trackEvent( EVENT ,  VALUE )   Tracking a  spatial  event, by providing a title and position in the world:   sdkbox.PluginKochava:spatialEvent( TITLE ,  X ,  Y ,  Z )   Tracking a  referral  event (also known as a deep link):   sdkbox.PluginKochava:sendDeepLink( URI ,  YOUR APP )  Note:  On Android, the 2nd parameter ( ) is not used. You just need to pass the  .", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginKochava:init()   init the kochava service   sdkbox.PluginKochava:shutdown()   shutdown the kochava service   sdkbox.PluginKochava:enableLogging(enabled)   enable kochava api logging   sdkbox.PluginKochava:trackEvent(event, value)   track a single event   sdkbox.PluginKochava:spatialEvent(title, x, y, z)   spatial event to help visualize data   sdkbox.PluginKochava:setLimitAdTracking(limitAdTracking)   turn on/off ad tracking   sdkbox.PluginKochava:retrieveAttribution()   returns the attribution data   sdkbox.PluginKochava:sendDeepLink(url, application)   send a referral to where your app was opened from.   sdkbox.PluginKochava:setBeaconCallback(callback)   specify beacon transition callback   Listeners", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Kochava  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginKochava.framework   The above frameworks depend upon a number of other frameworks. You also need\nto add the following system frameworks, if you don't already have them:   Security.framework  SystemConfiguration.framework  UIKit.framework  Foundation.framework  AdSupport.framework  iAd.framework  CoreLocation.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/kochava/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   KochavaSDK.jar  PluginKochava.jar  sdkbox.jar   Copy the  pluginkochava  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok\nto overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name = android.permission.INTERNET /  uses-permission android:name = android.permission.ACCESS_NETWORK_STATE /  uses-permission android:name = android.permission.ACCESS_WIFI_STATE /  uses-permission android:name = android.permission.READ_PHONE_STATE /   Additionally, you will need to add the Kochava broadcast receiver and the\nfollowing meta-data tag between the  application tags , this is needed for the Google Play referral data capture:  receiver android:name = com.kochava.android.tracker.ReferralCapture \n  android:exported = true   \n   intent-filter \n   action android:name = com.android.vending.INSTALL_REFERRER  / \n   /intent-filter \n   /receiver \n   meta-data\n    android:name = com.google.android.gms.version \n    android:value = @integer/google_play_services_version /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginKochava\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginkochava)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/review/v3-cpp/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nExtra steps for Android\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Review\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginReview/PluginReview.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginReview::init();\n}\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox::PluginReview::setTitle(\ncustom title\n);\nsdkbox::PluginReview::setMessage(\ncustom message\n);\nsdkbox::PluginReview::setCancelButtonTitle(\ncustom cancel\n);\nsdkbox::PluginReview::setRateButtonTitle(\ncustom rate\n);\nsdkbox::PluginReview::setRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n to display rate prompt:\n\n\nsdkbox::PluginReview::show();\n\n\n\n\nIf you set \nUserEventLimit\n to something other than 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n to increase user event count. Example:\n\n\nsdkbox::PluginReview::userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::ReviewListener\n\n\n\n\n#include \nPluginReview/PluginReview.h\n\nclass MyClass : public sdkbox::ReviewListener\n{\nprivate:\n    void onDisplayAlert();\n    void onDeclineToRate();\n    void onRate();\n    void onRemindLater();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginReview::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( ReviewListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic ReviewListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void show ( bool force = false ) ;\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nstatic void userDidSignificantEvent ( bool canPromptForRating ) ;\n\n\n\n\nstatic void setTitle ( const std::string \n title ) ;\n\n\n\n\nstatic void setMessage ( const std::string \n message ) ;\n\n\n\n\nstatic void setCancelButtonTitle ( const std::string \n cancelTitle ) ;\n\n\n\n\nstatic void setRateButtonTitle ( const std::string \n rateTitle ) ;\n\n\n\n\nstatic void setRateLaterButtonTitle ( const std::string \n rateLaterTitle ) ;\n\n\n\n\nListeners\n\n\nvoid onDisplayAlert ( );\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nvoid onDeclineToRate ( );\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nvoid onRate ( );\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nvoid onRemindLater ( );\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginreview\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproj.android\n directory.\nmake your android project reference the \nplugin_review_res_project\n project.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#extra-steps-for-android", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#usage", 
            "text": "Initialize Review  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginReview/PluginReview.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginReview::init();\n}  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox::PluginReview::setTitle( custom title );\nsdkbox::PluginReview::setMessage( custom message );\nsdkbox::PluginReview::setCancelButtonTitle( custom cancel );\nsdkbox::PluginReview::setRateButtonTitle( custom rate );\nsdkbox::PluginReview::setRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  to display rate prompt:  sdkbox::PluginReview::show();  If you set  UserEventLimit  to something other than 0 in  sdkbox.config , you must call  userDidSignificantEvent  to increase user event count. Example:  sdkbox::PluginReview::userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::ReviewListener   #include  PluginReview/PluginReview.h \nclass MyClass : public sdkbox::ReviewListener\n{\nprivate:\n    void onDisplayAlert();\n    void onDeclineToRate();\n    void onRate();\n    void onRemindLater();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginReview::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( ReviewListener * listener ) ;   Set listener to listen for adcolony events   static ReviewListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void show ( bool force = false ) ;   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   static void userDidSignificantEvent ( bool canPromptForRating ) ;  static void setTitle ( const std::string   title ) ;  static void setMessage ( const std::string   message ) ;  static void setCancelButtonTitle ( const std::string   cancelTitle ) ;  static void setRateButtonTitle ( const std::string   rateTitle ) ;  static void setRateLaterButtonTitle ( const std::string   rateLaterTitle ) ;  Listeners  void onDisplayAlert ( );   trigger when alert prompt show   void onDeclineToRate ( );   trigger when user refuse to rate   void onRate ( );   trigger when user want to rate   void onRemindLater ( );   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginReview.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginreview  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  plugin_review_res_project  directory from  plugin/android  to your  proj.android  directory.\nmake your android project reference the  plugin_review_res_project  project.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/review/v3-js/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nExtra steps for Android\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Review JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginReviewJS.hpp\n\n#include \nPluginReviewJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginReviewJS);\nsc-\naddRegisterCallback(register_all_PluginReviewJS_helper);\n\n\n\n\nInitialize Review\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginReview.init();\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox.PluginReview.setTitle(\ncustom title\n);\nsdkbox.PluginReview.setMessage(\ncustom message\n);\nsdkbox.PluginReview.setCancelButtonTitle(\ncustom cancel\n);\nsdkbox.PluginReview.setRateButtonTitle(\ncustom rate\n);\nsdkbox.PluginReview.setRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n try to display rate prompt:\n\n\nsdkbox.PluginReview.show();\n\n\n\n\nIf you set \nUserEventLimit\n not 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n increase user event count: \nuserDidSignificantEvent\n increase user event count\n\n\nsdkbox.PluginReview.userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nvar plugin = sdkbox.PluginReview\nplugin.setListener({\n  onDisplayAlert: function(data) {cc.log(\ndidDisplayAlert\n)},\n  onDeclineToRate: function(data) { cc.log(\ndidDeclineToRate\n) },\n  onRate: function(data) { cc.log(\ndidToRate\n) },\n  onRemindLater: function(data) { cc.log(\ndidToRemindLater\n) }\n})\nplugin.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginReview.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginReview.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginReview.show(force);\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nsdkbox.PluginReview.userDidSignificantEvent(canPromptForRating);\n\n\n\n\nsdkbox.PluginReview.setTitle(title);\n\n\n\n\nsdkbox.PluginReview.setMessage(message);\n\n\n\n\nsdkbox.PluginReview.setCancelButtonTitle(cancelTitle);\n\n\n\n\nsdkbox.PluginReview.setRateButtonTitle(rateTitle);\n\n\n\n\nsdkbox.PluginReview.setRateLaterButtonTitle(rateLaterTitle);\n\n\n\n\nListeners\n\n\nonDisplayAlert();\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nonDeclineToRate();\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nonRate();\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nonRemindLater();\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginreview\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproj.android\n directory.\nmake your android project reference the \nplugin_review_res_project\n project.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp", 
            "title": "js"
        }, 
        {
            "location": "/plugins/review/v3-js/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v3-js/#extra-steps-for-android", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/review/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Review JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginReviewJS.hpp \n#include  PluginReviewJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginReviewJS);\nsc- addRegisterCallback(register_all_PluginReviewJS_helper);  Initialize Review  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginReview.init();  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox.PluginReview.setTitle( custom title );\nsdkbox.PluginReview.setMessage( custom message );\nsdkbox.PluginReview.setCancelButtonTitle( custom cancel );\nsdkbox.PluginReview.setRateButtonTitle( custom rate );\nsdkbox.PluginReview.setRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  try to display rate prompt:  sdkbox.PluginReview.show();  If you set  UserEventLimit  not 0 in  sdkbox.config , you must call  userDidSignificantEvent  increase user event count:  userDidSignificantEvent  increase user event count  sdkbox.PluginReview.userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:  var plugin = sdkbox.PluginReview\nplugin.setListener({\n  onDisplayAlert: function(data) {cc.log( didDisplayAlert )},\n  onDeclineToRate: function(data) { cc.log( didDeclineToRate ) },\n  onRate: function(data) { cc.log( didToRate ) },\n  onRemindLater: function(data) { cc.log( didToRemindLater ) }\n})\nplugin.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginReview.init();   initialize the plugin instance.   sdkbox.PluginReview.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginReview.show(force);   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   sdkbox.PluginReview.userDidSignificantEvent(canPromptForRating);  sdkbox.PluginReview.setTitle(title);  sdkbox.PluginReview.setMessage(message);  sdkbox.PluginReview.setCancelButtonTitle(cancelTitle);  sdkbox.PluginReview.setRateButtonTitle(rateTitle);  sdkbox.PluginReview.setRateLaterButtonTitle(rateLaterTitle);  Listeners  onDisplayAlert();   trigger when alert prompt show   onDeclineToRate();   trigger when user refuse to rate   onRate();   trigger when user want to rate   onRemindLater();   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginReview.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginreview  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  plugin_review_res_project  directory from  plugin/android  to your  proj.android  directory.\nmake your android project reference the  plugin_review_res_project  project.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/review/v3-lua/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nExtra steps for Android\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nReview\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginReviewLua.hpp\n\n#include \nPluginReviewLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginReviewLua(L);\n  register_PluginReviewLua_helper(L);\n}\n\n\n\n\nInitialize Review\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginReview:init()\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox.PluginReview:setCustomPromptTitle(\ncustom title\n);\nsdkbox.PluginReview:setCustomPromptMessage(\ncustom message\n);\nsdkbox.PluginReview:setCustomPromptCancelButtonTitle(\ncustom cancel\n);\nsdkbox.PluginReview:setCustomPromptRateButtonTitle(\ncustom rate\n);\nsdkbox.PluginReview:setCustomPromptRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n try to display rate prompt:\n\n\nsdkbox.PluginReview:show();\n\n\n\n\nIf you set \nUserEventLimit\n not 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n increase user event count: \nuserDidSignificantEvent\n increase user event count\n\n\nsdkbox.PluginReview:userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nlocal plugin = sdkbox.PluginReview\nplugin:setListener(function(args)\n    local event = args.event\n    if \ndidDisplayAlert\n == event then\n        print(\ndidDisplayAlert\n)\n    elseif \ndidDeclineToRate\n == event then\n        print(\ndidDeclineToRate\n)\n    elseif \ndidToRate\n == event then\n        print(\ndidToRate\n)\n    elseif \ndidToRemindLater\n == event then\n        print(\ndidToRemindLater\n)\n    end\nend)\nplugin:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginReview:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginReview:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginReview:show(force)\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nsdkbox.PluginReview:userDidSignificantEvent(canPromptForRating)\n\n\n\n\nsdkbox.PluginReview:setTitle(title)\n\n\n\n\nsdkbox.PluginReview:setMessage(message)\n\n\n\n\nsdkbox.PluginReview:setCancelButtonTitle(cancelTitle)\n\n\n\n\nsdkbox.PluginReview:setRateButtonTitle(rateTitle)\n\n\n\n\nsdkbox.PluginReview:setRateLaterButtonTitle(rateLaterTitle)\n\n\n\n\nListeners\n\n\nonDisplayAlert()\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nonDeclineToRate()\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nonRate()\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nonRemindLater()\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginreview\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproj.android\n directory.\nmake your android project reference the \nplugin_review_res_project\n project.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/review/v3-lua/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v3-lua/#extra-steps-for-android", 
            "text": "Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/review/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Review  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginReviewLua.hpp \n#include  PluginReviewLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginReviewLua(L);\n  register_PluginReviewLua_helper(L);\n}  Initialize Review  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginReview:init()  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox.PluginReview:setCustomPromptTitle( custom title );\nsdkbox.PluginReview:setCustomPromptMessage( custom message );\nsdkbox.PluginReview:setCustomPromptCancelButtonTitle( custom cancel );\nsdkbox.PluginReview:setCustomPromptRateButtonTitle( custom rate );\nsdkbox.PluginReview:setCustomPromptRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  try to display rate prompt:  sdkbox.PluginReview:show();  If you set  UserEventLimit  not 0 in  sdkbox.config , you must call  userDidSignificantEvent  increase user event count:  userDidSignificantEvent  increase user event count  sdkbox.PluginReview:userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:  local plugin = sdkbox.PluginReview\nplugin:setListener(function(args)\n    local event = args.event\n    if  didDisplayAlert  == event then\n        print( didDisplayAlert )\n    elseif  didDeclineToRate  == event then\n        print( didDeclineToRate )\n    elseif  didToRate  == event then\n        print( didToRate )\n    elseif  didToRemindLater  == event then\n        print( didToRemindLater )\n    end\nend)\nplugin:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginReview:init()   initialize the plugin instance.   sdkbox.PluginReview:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginReview:show(force)   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   sdkbox.PluginReview:userDidSignificantEvent(canPromptForRating)  sdkbox.PluginReview:setTitle(title)  sdkbox.PluginReview:setMessage(message)  sdkbox.PluginReview:setCancelButtonTitle(cancelTitle)  sdkbox.PluginReview:setRateButtonTitle(rateTitle)  sdkbox.PluginReview:setRateLaterButtonTitle(rateLaterTitle)  Listeners  onDisplayAlert()   trigger when alert prompt show   onDeclineToRate()   trigger when user refuse to rate   onRate()   trigger when user want to rate   onRemindLater()   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginReview.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginreview  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  plugin_review_res_project  directory from  plugin/android  to your  proj.android  directory.\nmake your android project reference the  plugin_review_res_project  project.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/review/v2-cpp/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nExtra steps for Android\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Review\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginReview/PluginReview.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginReview::init();\n}\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox::PluginReview::setTitle(\ncustom title\n);\nsdkbox::PluginReview::setMessage(\ncustom message\n);\nsdkbox::PluginReview::setCancelButtonTitle(\ncustom cancel\n);\nsdkbox::PluginReview::setRateButtonTitle(\ncustom rate\n);\nsdkbox::PluginReview::setRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n to display rate prompt:\n\n\nsdkbox::PluginReview::show();\n\n\n\n\nIf you set \nUserEventLimit\n to something other than 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n to increase user event count. Example:\n\n\nsdkbox::PluginReview::userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::ReviewListener\n\n\n\n\n#include \nPluginReview/PluginReview.h\n\nclass MyClass : public sdkbox::ReviewListener\n{\nprivate:\n    void onDisplayAlert();\n    void onDeclineToRate();\n    void onRate();\n    void onRemindLater();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginReview::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener ( ReviewListener * listener ) ;\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nstatic ReviewListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void show ( bool force = false ) ;\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nstatic void userDidSignificantEvent ( bool canPromptForRating ) ;\n\n\n\n\nstatic void setTitle ( const std::string \n title ) ;\n\n\n\n\nstatic void setMessage ( const std::string \n message ) ;\n\n\n\n\nstatic void setCancelButtonTitle ( const std::string \n cancelTitle ) ;\n\n\n\n\nstatic void setRateButtonTitle ( const std::string \n rateTitle ) ;\n\n\n\n\nstatic void setRateLaterButtonTitle ( const std::string \n rateLaterTitle ) ;\n\n\n\n\nListeners\n\n\nvoid onDisplayAlert ( );\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nvoid onDeclineToRate ( );\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nvoid onRate ( );\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nvoid onRemindLater ( );\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginreview\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproj.android\n directory.\nmake your android project reference the \nplugin_review_res_project\n project.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#extra-steps-for-android", 
            "text": "Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#usage", 
            "text": "Initialize Review  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginReview/PluginReview.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginReview::init();\n}  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox::PluginReview::setTitle( custom title );\nsdkbox::PluginReview::setMessage( custom message );\nsdkbox::PluginReview::setCancelButtonTitle( custom cancel );\nsdkbox::PluginReview::setRateButtonTitle( custom rate );\nsdkbox::PluginReview::setRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  to display rate prompt:  sdkbox::PluginReview::show();  If you set  UserEventLimit  to something other than 0 in  sdkbox.config , you must call  userDidSignificantEvent  to increase user event count. Example:  sdkbox::PluginReview::userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::ReviewListener   #include  PluginReview/PluginReview.h \nclass MyClass : public sdkbox::ReviewListener\n{\nprivate:\n    void onDisplayAlert();\n    void onDeclineToRate();\n    void onRate();\n    void onRemindLater();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginReview::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#api-reference", 
            "text": "Methods  static bool init ( ) ;   initialize the plugin instance.   static void setListener ( ReviewListener * listener ) ;   Set listener to listen for adcolony events   static ReviewListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   Remove the listener, and can't listen to events anymore   static void show ( bool force = false ) ;   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   static void userDidSignificantEvent ( bool canPromptForRating ) ;  static void setTitle ( const std::string   title ) ;  static void setMessage ( const std::string   message ) ;  static void setCancelButtonTitle ( const std::string   cancelTitle ) ;  static void setRateButtonTitle ( const std::string   rateTitle ) ;  static void setRateLaterButtonTitle ( const std::string   rateLaterTitle ) ;  Listeners  void onDisplayAlert ( );   trigger when alert prompt show   void onDeclineToRate ( );   trigger when user refuse to rate   void onRate ( );   trigger when user want to rate   void onRemindLater ( );   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginReview.jar  sdkbox.jar   Copy the  pluginreview  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  plugin_review_res_project  directory from  plugin/android  to your  proj.android  directory.\nmake your android project reference the  plugin_review_res_project  project.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/review/v2-js/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nExtra steps for Android\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Review JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginReviewJS.hpp\n\n#include \nPluginReviewJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginReviewJS);\nsc-\naddRegisterCallback(register_all_PluginReviewJS_helper);\n\n\n\n\nInitialize Review\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginReview.init();\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox.PluginReview.setTitle(\ncustom title\n);\nsdkbox.PluginReview.setMessage(\ncustom message\n);\nsdkbox.PluginReview.setCancelButtonTitle(\ncustom cancel\n);\nsdkbox.PluginReview.setRateButtonTitle(\ncustom rate\n);\nsdkbox.PluginReview.setRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n try to display rate prompt:\n\n\nsdkbox.PluginReview.show();\n\n\n\n\nIf you set \nUserEventLimit\n not 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n increase user event count: \nuserDidSignificantEvent\n increase user event count\n\n\nsdkbox.PluginReview.userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nvar plugin = sdkbox.PluginReview\nplugin.setListener({\n  onDisplayAlert: function(data) {cc.log(\ndidDisplayAlert\n)},\n  onDeclineToRate: function(data) { cc.log(\ndidDeclineToRate\n) },\n  onRate: function(data) { cc.log(\ndidToRate\n) },\n  onRemindLater: function(data) { cc.log(\ndidToRemindLater\n) }\n})\nplugin.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginReview.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginReview.setListener(listener);\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginReview.show(force);\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nsdkbox.PluginReview.userDidSignificantEvent(canPromptForRating);\n\n\n\n\nsdkbox.PluginReview.setTitle(title);\n\n\n\n\nsdkbox.PluginReview.setMessage(message);\n\n\n\n\nsdkbox.PluginReview.setCancelButtonTitle(cancelTitle);\n\n\n\n\nsdkbox.PluginReview.setRateButtonTitle(rateTitle);\n\n\n\n\nsdkbox.PluginReview.setRateLaterButtonTitle(rateLaterTitle);\n\n\n\n\nListeners\n\n\nonDisplayAlert();\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nonDeclineToRate();\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nonRate();\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nonRemindLater();\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginreview\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproj.android\n directory.\nmake your android project reference the \nplugin_review_res_project\n project.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp", 
            "title": "js"
        }, 
        {
            "location": "/plugins/review/v2-js/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v2-js/#extra-steps-for-android", 
            "text": "Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/review/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Review JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginReviewJS.hpp \n#include  PluginReviewJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginReviewJS);\nsc- addRegisterCallback(register_all_PluginReviewJS_helper);  Initialize Review  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginReview.init();  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox.PluginReview.setTitle( custom title );\nsdkbox.PluginReview.setMessage( custom message );\nsdkbox.PluginReview.setCancelButtonTitle( custom cancel );\nsdkbox.PluginReview.setRateButtonTitle( custom rate );\nsdkbox.PluginReview.setRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  try to display rate prompt:  sdkbox.PluginReview.show();  If you set  UserEventLimit  not 0 in  sdkbox.config , you must call  userDidSignificantEvent  increase user event count:  userDidSignificantEvent  increase user event count  sdkbox.PluginReview.userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:  var plugin = sdkbox.PluginReview\nplugin.setListener({\n  onDisplayAlert: function(data) {cc.log( didDisplayAlert )},\n  onDeclineToRate: function(data) { cc.log( didDeclineToRate ) },\n  onRate: function(data) { cc.log( didToRate ) },\n  onRemindLater: function(data) { cc.log( didToRemindLater ) }\n})\nplugin.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginReview.init();   initialize the plugin instance.   sdkbox.PluginReview.setListener(listener);   Set listener to listen for adcolony events   sdkbox.PluginReview.show(force);   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   sdkbox.PluginReview.userDidSignificantEvent(canPromptForRating);  sdkbox.PluginReview.setTitle(title);  sdkbox.PluginReview.setMessage(message);  sdkbox.PluginReview.setCancelButtonTitle(cancelTitle);  sdkbox.PluginReview.setRateButtonTitle(rateTitle);  sdkbox.PluginReview.setRateLaterButtonTitle(rateLaterTitle);  Listeners  onDisplayAlert();   trigger when alert prompt show   onDeclineToRate();   trigger when user refuse to rate   onRate();   trigger when user want to rate   onRemindLater();   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginReview.jar  sdkbox.jar   Copy the  pluginreview  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  plugin_review_res_project  directory from  plugin/android  to your  proj.android  directory.\nmake your android project reference the  plugin_review_res_project  project.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/review/v2-lua/", 
            "text": "Ratings \n Reviews\n\n\nThis is a plugin that will help remind your users to rate and review your app on the App Store.\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Ratings \n Reviews plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import review\n\n\n\n\nExtra steps for Android\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the configuration.\n\n\nReview\n:{\n    \nios\n: {\n        \nReview\n:{\n            \nAppID\n:\n587767923\n,            //appid, valid on ios\n            \nDayLimit\n: 0,                  //days before rate prompt show\n            \nLaunchLimit\n: 3,               //launch times before rate prompt show\n            \nUserEventLimit\n: 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n            \nDayForReminding\n: 1,           //days after user selected reminding later button\n            \nLaunchForReminding\n: 2,        //launch times after user selected reminding later button\n            \ntryPromptWhenInit\n: true       //try to display prompt when plugin initialization\n        }\n    },\n    \nandroid\n: {\n        \nReview\n:{\n            \nDayLimit\n: 0,\n            \nLaunchLimit\n: 3,\n            \nUserEventLimit\n: 0,\n            \nDayForReminding\n: 1,\n            \nLaunchForReminding\n: 2,\n            \ntryPromptWhenInit\n: true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\n\n\nModify \nClasses/AppDelegate.cpp\nto include the following headers:\n\n\n\n\n#include \nPluginReviewLua.hpp\n\n#include \nPluginReviewLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginReviewLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginReviewLua.hpp\n\n#include \nPluginReviewLuaHelper.hpp\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginReviewLua(tolua_s);\n    register_all_PluginReviewLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize Review\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginReview:init()\n\n\n\n\nSetting Review (optional)\n\n\nYou can set a custom string for the rate prompt, if you don't want to use the default string.\n\n\nNote:\n if you set \ntryPromptWhenInit\n to \ntrue\n which is in \nsdkbox.config\n, you must call the following functions before \ninit()\n:\n\n\nsdkbox.PluginReview:setTitle(\ncustom title\n);\nsdkbox.PluginReview:setMessage(\ncustom message\n);\nsdkbox.PluginReview:setCancelButtonTitle(\ncustom cancel\n);\nsdkbox.PluginReview:setRateButtonTitle(\ncustom rate\n);\nsdkbox.PluginReview:setRateLaterButtonTitle(\ncustom rate later\n);\n\n\n\n\nAfter initialization you can begin to use the Review functionality.\nUse \nshow\n try to display rate prompt:\n\n\nsdkbox.PluginReview:show();\n\n\n\n\nIf you set \nUserEventLimit\n not 0 in \nsdkbox.config\n, you must call \nuserDidSignificantEvent\n increase user event count:\n\n\nsdkbox.PluginReview:userDidSignificantEvent(true);\n\n\n\n\nCatch Review events (optional)\n\n\nThis allows you to catch the \nReview\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nlocal plugin = sdkbox.PluginReview\nplugin:setListener(function(args)\n    local event = args.event\n    if \nonDisplayAlert\n == event then\n        print(\ndidDisplayAlert\n)\n    elseif \nonDeclineToRate\n == event then\n        print(\ndidDeclineToRate\n)\n    elseif \nonRate\n == event then\n        print(\ndidToRate\n)\n    elseif \nonRemindLater\n == event then\n        print(\ndidToRemindLater\n)\n    end\nend)\nplugin:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginReview:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginReview:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for adcolony events\n\n\n\n\nsdkbox.PluginReview:show(force)\n\n\n\n\n\n\nTells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call \nshow\n with \nfalse\n or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item \ntryPromptWhenInit\n in sdkbox.config is false, you can call this try to show prompt\nif you call \nshow\n with \ntrue\n params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug\n\n\n\n\nsdkbox.PluginReview:userDidSignificantEvent(canPromptForRating)\n\n\n\n\nsdkbox.PluginReview:setTitle(title)\n\n\n\n\nsdkbox.PluginReview:setMessage(message)\n\n\n\n\nsdkbox.PluginReview:setCancelButtonTitle(cancelTitle)\n\n\n\n\nsdkbox.PluginReview:setRateButtonTitle(rateTitle)\n\n\n\n\nsdkbox.PluginReview:setRateLaterButtonTitle(rateLaterTitle)\n\n\n\n\nListeners\n\n\nonDisplayAlert()\n\n\n\n\n\n\ntrigger when alert prompt show\n\n\n\n\nonDeclineToRate()\n\n\n\n\n\n\ntrigger when user refuse to rate\n\n\n\n\nonRate()\n\n\n\n\n\n\ntrigger when user want to rate\n\n\n\n\nonRemindLater()\n\n\n\n\n\n\ntrigger when user want to remind later\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks or folder from the \nplugins/ios\n folder of the \nReview\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginReview.framework\n\n\nplugin_review_res_bundle\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginReview.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginreview\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nCopy the \nplugin_review_res_project\n directory from \nplugin/android\n to your \nproj.android\n directory.\nmake your android project reference the \nplugin_review_res_project\n project.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/review/v2-lua/#ratings-reviews", 
            "text": "This is a plugin that will help remind your users to rate and review your app on the App Store.", 
            "title": "Ratings &amp; Reviews"
        }, 
        {
            "location": "/plugins/review/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Ratings   Reviews plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import review", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/review/v2-lua/#extra-steps-for-android", 
            "text": "Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Extra steps for Android"
        }, 
        {
            "location": "/plugins/review/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the configuration.  Review :{\n     ios : {\n         Review :{\n             AppID : 587767923 ,            //appid, valid on ios\n             DayLimit : 0,                  //days before rate prompt show\n             LaunchLimit : 3,               //launch times before rate prompt show\n             UserEventLimit : 0,            //user event times before rate prompt show, user event increase by invoke userDidSignificantEvent\n             DayForReminding : 1,           //days after user selected reminding later button\n             LaunchForReminding : 2,        //launch times after user selected reminding later button\n             tryPromptWhenInit : true       //try to display prompt when plugin initialization\n        }\n    },\n     android : {\n         Review :{\n             DayLimit : 0,\n             LaunchLimit : 3,\n             UserEventLimit : 0,\n             DayForReminding : 1,\n             LaunchForReminding : 2,\n             tryPromptWhenInit : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/review/v2-lua/#usage", 
            "text": "Modify Lua Code   Modify  Classes/AppDelegate.cpp to include the following headers:   #include  PluginReviewLua.hpp \n#include  PluginReviewLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginReviewLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginReviewLua.hpp \n#include  PluginReviewLuaHelper.hpp \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginReviewLua(tolua_s);\n    register_all_PluginReviewLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize Review  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginReview:init()  Setting Review (optional)  You can set a custom string for the rate prompt, if you don't want to use the default string.  Note:  if you set  tryPromptWhenInit  to  true  which is in  sdkbox.config , you must call the following functions before  init() :  sdkbox.PluginReview:setTitle( custom title );\nsdkbox.PluginReview:setMessage( custom message );\nsdkbox.PluginReview:setCancelButtonTitle( custom cancel );\nsdkbox.PluginReview:setRateButtonTitle( custom rate );\nsdkbox.PluginReview:setRateLaterButtonTitle( custom rate later );  After initialization you can begin to use the Review functionality.\nUse  show  try to display rate prompt:  sdkbox.PluginReview:show();  If you set  UserEventLimit  not 0 in  sdkbox.config , you must call  userDidSignificantEvent  increase user event count:  sdkbox.PluginReview:userDidSignificantEvent(true);  Catch Review events (optional)  This allows you to catch the  Review  events so that you can perform operations based upon responses. A simple example might look like this:  local plugin = sdkbox.PluginReview\nplugin:setListener(function(args)\n    local event = args.event\n    if  onDisplayAlert  == event then\n        print( didDisplayAlert )\n    elseif  onDeclineToRate  == event then\n        print( didDeclineToRate )\n    elseif  onRate  == event then\n        print( didToRate )\n    elseif  onRemindLater  == event then\n        print( didToRemindLater )\n    end\nend)\nplugin:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/review/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginReview:init()   initialize the plugin instance.   sdkbox.PluginReview:setListener(listener)   Set listener to listen for adcolony events   sdkbox.PluginReview:show(force)   Tells 'SDKBox review plugin' to try and show the prompt (a rating alert).\nif you call  show  with  false  or null params,\nthe prompt will be showed if there is connection available,\nthe user hasn't declined to rate or hasn't rated current version.\nif the item  tryPromptWhenInit  in sdkbox.config is false, you can call this try to show prompt\nif you call  show  with  true  params\nthe prompt will be showed without checks (the prompt is always displayed).\nThe case where you should call this is if your app has an\nexplicit \"Rate this app\" command somewhere. This is similar to rateApp,\nbut instead of jumping to the review directly, an intermediary prompt is displayed.\nanother case is for debug   sdkbox.PluginReview:userDidSignificantEvent(canPromptForRating)  sdkbox.PluginReview:setTitle(title)  sdkbox.PluginReview:setMessage(message)  sdkbox.PluginReview:setCancelButtonTitle(cancelTitle)  sdkbox.PluginReview:setRateButtonTitle(rateTitle)  sdkbox.PluginReview:setRateLaterButtonTitle(rateLaterTitle)  Listeners  onDisplayAlert()   trigger when alert prompt show   onDeclineToRate()   trigger when user refuse to rate   onRate()   trigger when user want to rate   onRemindLater()   trigger when user want to remind later", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/review/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/review/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks or folder from the  plugins/ios  folder of the  Review  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginReview.framework  plugin_review_res_bundle   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/review/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginReview.jar  sdkbox.jar   Copy the  pluginreview  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Copy the  plugin_review_res_project  directory from  plugin/android  to your  proj.android  directory.\nmake your android project reference the  plugin_review_res_project  project.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginReview\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginreview)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the \nKnowledge Base\n.\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\nUsage\n\n\nInitialize SoomlaGrow\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginSoomlaGrow/PluginSoomlaGrow.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginSoomlaGrow::init();\n}\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n or \ngetUserInsightInfo()\n wherever you want from your code:\n\n\nsdkbox::PluginSoomlaGrow::refreshInsight();\nstd::string jsonStr = sdkbox::PluginSoomlaGrow::getUserInsightInfo();\n\n\n\n\nCatch GROW events (optional)\n\n\nThis allows you to catch the \nGROW\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::SoomlaGrowListener\n\n\n\n\n#include \nPluginSoomlaGrow/PluginSoomlaGrow.h\n\nclass MyClass : public sdkbox::SoomlaGrowListener\n{\nprivate:\n    void onHighWayInitialized();\n    void onHighWayConnected();\n    void onHighWayDisconnected();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginSoomlaGrow::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener(SoomlaGrowListener* listener);\n\n\n\n\n\n\nSet listener to listen for different events (list below)\n\n\n\n\nstatic SoomlaGrowListener* getListener();\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void refreshInsight();\n\n\n\n\n\n\nRefreshed GROW's Insights information from the server\n\n\n\n\nstatic std::string getUserInsightInfo();\n\n\n\n\n\n\nget user insight info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nvoid onHighWayInitialized();\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nvoid onHighWayConnected();\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nvoid onHighWayDisconnected();\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSoomlaGrow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginsoomlagrow\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#usage", 
            "text": "Initialize SoomlaGrow  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginSoomlaGrow/PluginSoomlaGrow.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginSoomlaGrow::init();\n}  Using GROW's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight  or  getUserInsightInfo()  wherever you want from your code:  sdkbox::PluginSoomlaGrow::refreshInsight();\nstd::string jsonStr = sdkbox::PluginSoomlaGrow::getUserInsightInfo();  Catch GROW events (optional)  This allows you to catch the  GROW  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::SoomlaGrowListener   #include  PluginSoomlaGrow/PluginSoomlaGrow.h \nclass MyClass : public sdkbox::SoomlaGrowListener\n{\nprivate:\n    void onHighWayInitialized();\n    void onHighWayConnected();\n    void onHighWayDisconnected();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginSoomlaGrow::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#api-reference", 
            "text": "Methods  static bool init();   initialize the plugin instance.   static void setListener(SoomlaGrowListener* listener);   Set listener to listen for different events (list below)   static SoomlaGrowListener* getListener();   Get the listener   static void removeListener();   Remove the listener, and can't listen to events anymore   static void refreshInsight();   Refreshed GROW's Insights information from the server   static std::string getUserInsightInfo();   get user insight info\n Note: the returned value may be empty   Listeners  void onHighWayInitialized();   This event is triggered once the highway initialized.   void onHighWayConnected();   This event is triggered once the highway is connected to server.   void onHighWayDisconnected();   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SoomlaGrow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginsoomlagrow  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the \nKnowledge Base\n.\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the GROW JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginSoomlaGrowJS.hpp\n\n#include \nPluginSoomlaGrowJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginSoomlaGrowJS);\nsc-\naddRegisterCallback(register_all_PluginSoomlaGrowJS_helper);\n\n\n\n\nInitialize SoomlaGrow\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginSoomlaGrow.init();\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n, 'getUserInsightInfo' wherever you want from your code:\n\n\nsdkbox.PluginSoomlaGrow.refreshInsight()\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()\n\n\n\n\nCatch SoomlaGrow events (optional)\n\n\nThis allows you to catch the \nGROW\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginSoomlaGrow.setListener({\n            onHighWayInitialized: function(data) {cc.log(\nonHighWayInitialized\n)},\n            onHighWayConnected: function(data) { cc.log(\nonHighWayConnected\n) },\n            onHighWayDisconnected: function(data) { cc.log(\nonHighWayDisconnected\n) }\n            })\nsdkbox.PluginSoomlaGrow.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginSoomlaGrow.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginSoomlaGrow.setListener(listener);\n\n\n\n\n\n\nSet listener to listen to GROW events\n\n\n\n\nsdkbox.PluginSoomlaGrow.refreshInsight()\n\n\n\n\n\n\nRefreshed Insights information from the server\n\n\n\n\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()\n\n\n\n\n\n\nget user insights info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nonHighWayInitialized()\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nonHighWayConnected()\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nonHighWayDisconnected()\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSoomlaGrow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginsoomlagrow\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the GROW JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginSoomlaGrowJS.hpp \n#include  PluginSoomlaGrowJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginSoomlaGrowJS);\nsc- addRegisterCallback(register_all_PluginSoomlaGrowJS_helper);  Initialize SoomlaGrow  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginSoomlaGrow.init();  Using GROW's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight , 'getUserInsightInfo' wherever you want from your code:  sdkbox.PluginSoomlaGrow.refreshInsight()\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()  Catch SoomlaGrow events (optional)  This allows you to catch the  GROW  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginSoomlaGrow.setListener({\n            onHighWayInitialized: function(data) {cc.log( onHighWayInitialized )},\n            onHighWayConnected: function(data) { cc.log( onHighWayConnected ) },\n            onHighWayDisconnected: function(data) { cc.log( onHighWayDisconnected ) }\n            })\nsdkbox.PluginSoomlaGrow.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginSoomlaGrow.init();   initialize the plugin instance.   sdkbox.PluginSoomlaGrow.setListener(listener);   Set listener to listen to GROW events   sdkbox.PluginSoomlaGrow.refreshInsight()   Refreshed Insights information from the server   sdkbox.PluginSoomlaGrow.getUserInsightInfo()   get user insights info\n Note: the returned value may be empty   Listeners  onHighWayInitialized()   This event is triggered once the highway initialized.   onHighWayConnected()   This event is triggered once the highway is connected to server.   onHighWayDisconnected()   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SoomlaGrow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginsoomlagrow  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the \nKnowledge Base\n.\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nSoomlaGrow\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginSoomlaGrowLua.hpp\n\n#include \nPluginSoomlaGrowLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginSoomlaGrowLua(L);\n  register_PluginSoomlaGrowLua_helper(L);\n}\n\n\n\n\nInitialize SoomlaGrow\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n, \ngetUserInsightInfo\n wherever you want from your code:\n\n\nsdkbox.PluginSoomlaGrow:refreshInsight()\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()\n\n\n\n\nCatch GROW events (optional)\n\n\nThis allows you to catch the \nGROW\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginSoomlaGrow:setListener(function(data)\n            if \nonHighWayInitialized\n == data.event then\n                //highway initialized\n            elseif \nonHighWayConnected\n == data.event then\n                //highway connected\n            elseif \nonHighWayDisconnected\n == data.event then\n                //highway disconnected\n            end\n        end)\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginSoomlaGrow:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for GROW events\n\n\n\n\nsdkbox.PluginSoomlaGrow:refreshInsight()\n\n\n\n\n\n\nRefreshed Insights information from the server\n\n\n\n\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()\n\n\n\n\n\n\nget user insight info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nonHighWayInitialized()\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nonHighWayConnected()\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nonHighWayDisconnected()\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSoomlaGrow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \npluginsoomlagrow\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  SoomlaGrow  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginSoomlaGrowLua.hpp \n#include  PluginSoomlaGrowLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginSoomlaGrowLua(L);\n  register_PluginSoomlaGrowLua_helper(L);\n}  Initialize SoomlaGrow  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginSoomlaGrow:init()  Using GROW's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight ,  getUserInsightInfo  wherever you want from your code:  sdkbox.PluginSoomlaGrow:refreshInsight()\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()  Catch GROW events (optional)  This allows you to catch the  GROW  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginSoomlaGrow:setListener(function(data)\n            if  onHighWayInitialized  == data.event then\n                //highway initialized\n            elseif  onHighWayConnected  == data.event then\n                //highway connected\n            elseif  onHighWayDisconnected  == data.event then\n                //highway disconnected\n            end\n        end)\nsdkbox.PluginSoomlaGrow:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginSoomlaGrow:init()   initialize the plugin instance.   sdkbox.PluginSoomlaGrow:setListener(listener)   Set listener to listen for GROW events   sdkbox.PluginSoomlaGrow:refreshInsight()   Refreshed Insights information from the server   sdkbox.PluginSoomlaGrow:getUserInsightInfo()   get user insight info\n Note: the returned value may be empty   Listeners  onHighWayInitialized()   This event is triggered once the highway initialized.   onHighWayConnected()   This event is triggered once the highway is connected to server.   onHighWayDisconnected()   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SoomlaGrow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginsoomlagrow  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the \nKnowledge Base\n.\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\nUsage\n\n\nInitialize SoomlaGrow\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers:\n\n\n#include \nPluginSoomlaGrow/PluginSoomlaGrow.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginSoomlaGrow::init();\n}\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n or \ngetUserInsightInfo()\n wherever you want from your code:\n\n\nsdkbox::PluginSoomlaGrow::refreshInsight();\nstd::string jsonStr = sdkbox::PluginSoomlaGrow::getUserInsightInfo();\n\n\n\n\nCatch GROW events (optional)\n\n\nThis allows you to catch the \nGROW\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\n\n\nAllow your class to extend \nsdkbox::SoomlaGrowListener\n\n\n\n\n#include \nPluginSoomlaGrow/PluginSoomlaGrow.h\n\nclass MyClass : public sdkbox::SoomlaGrowListener\n{\nprivate:\n    void onHighWayInitialized();\n    void onHighWayConnected();\n    void onHighWayDisconnected();\n};\n\n\n\n\n\n\nCreate a \nlistener\n that handles callbacks:\n\n\n\n\nsdkbox::PluginSoomlaGrow::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic bool init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void setListener(SoomlaGrowListener* listener);\n\n\n\n\n\n\nSet listener to listen for different events (list below)\n\n\n\n\nstatic SoomlaGrowListener* getListener();\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener();\n\n\n\n\n\n\nRemove the listener, and can't listen to events anymore\n\n\n\n\nstatic void refreshInsight();\n\n\n\n\n\n\nRefreshed GROW's Insights information from the server\n\n\n\n\nstatic std::string getUserInsightInfo();\n\n\n\n\n\n\nget user insight info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nvoid onHighWayInitialized();\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nvoid onHighWayConnected();\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nvoid onHighWayDisconnected();\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSoomlaGrow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginsoomlagrow\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#usage", 
            "text": "Initialize SoomlaGrow  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers:  #include  PluginSoomlaGrow/PluginSoomlaGrow.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginSoomlaGrow::init();\n}  Using GROW's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight  or  getUserInsightInfo()  wherever you want from your code:  sdkbox::PluginSoomlaGrow::refreshInsight();\nstd::string jsonStr = sdkbox::PluginSoomlaGrow::getUserInsightInfo();  Catch GROW events (optional)  This allows you to catch the  GROW  events so that you can perform operations based upon responses. A simple example might look like this:   Allow your class to extend  sdkbox::SoomlaGrowListener   #include  PluginSoomlaGrow/PluginSoomlaGrow.h \nclass MyClass : public sdkbox::SoomlaGrowListener\n{\nprivate:\n    void onHighWayInitialized();\n    void onHighWayConnected();\n    void onHighWayDisconnected();\n};   Create a  listener  that handles callbacks:   sdkbox::PluginSoomlaGrow::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#api-reference", 
            "text": "Methods  static bool init();   initialize the plugin instance.   static void setListener(SoomlaGrowListener* listener);   Set listener to listen for different events (list below)   static SoomlaGrowListener* getListener();   Get the listener   static void removeListener();   Remove the listener, and can't listen to events anymore   static void refreshInsight();   Refreshed GROW's Insights information from the server   static std::string getUserInsightInfo();   get user insight info\n Note: the returned value may be empty   Listeners  void onHighWayInitialized();   This event is triggered once the highway initialized.   void onHighWayConnected();   This event is triggered once the highway is connected to server.   void onHighWayDisconnected();   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SoomlaGrow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar   Copy the  pluginsoomlagrow  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the \nKnowledge Base\n.\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the GROW JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginSoomlaGrowJS.hpp\n\n#include \nPluginSoomlaGrowJSHelper.hpp\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginSoomlaGrowJS);\nsc-\naddRegisterCallback(register_all_PluginSoomlaGrowJS_helper);\n\n\n\n\nInitialize SoomlaGrow\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginSoomlaGrow.init();\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use the Insights functionality. Use \nrefreshInsight\n, 'getUserInsightInfo' wherever you want from your code:\n\n\nsdkbox.PluginSoomlaGrow.refreshInsight()\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()\n\n\n\n\nCatch SoomlaGrow events (optional)\n\n\nThis allows you to catch the \nGROW\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginSoomlaGrow.setListener({\n            onHighWayInitialized: function(data) {cc.log(\nonHighWayInitialized\n)},\n            onHighWayConnected: function(data) { cc.log(\nonHighWayConnected\n) },\n            onHighWayDisconnected: function(data) { cc.log(\nonHighWayDisconnected\n) }\n            })\nsdkbox.PluginSoomlaGrow.init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginSoomlaGrow.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginSoomlaGrow.setListener(listener);\n\n\n\n\n\n\nSet listener to listen to GROW events\n\n\n\n\nsdkbox.PluginSoomlaGrow.refreshInsight()\n\n\n\n\n\n\nRefreshed Insights information from the server\n\n\n\n\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()\n\n\n\n\n\n\nget user insights info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nonHighWayInitialized()\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nonHighWayConnected()\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nonHighWayDisconnected()\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSoomlaGrow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginsoomlagrow\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the GROW JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginSoomlaGrowJS.hpp \n#include  PluginSoomlaGrowJSHelper.hpp    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginSoomlaGrowJS);\nsc- addRegisterCallback(register_all_PluginSoomlaGrowJS_helper);  Initialize SoomlaGrow  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginSoomlaGrow.init();  Using GROW's Insights module  After initialization you can begin to use the Insights functionality. Use  refreshInsight , 'getUserInsightInfo' wherever you want from your code:  sdkbox.PluginSoomlaGrow.refreshInsight()\nsdkbox.PluginSoomlaGrow.getUserInsightInfo()  Catch SoomlaGrow events (optional)  This allows you to catch the  GROW  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginSoomlaGrow.setListener({\n            onHighWayInitialized: function(data) {cc.log( onHighWayInitialized )},\n            onHighWayConnected: function(data) { cc.log( onHighWayConnected ) },\n            onHighWayDisconnected: function(data) { cc.log( onHighWayDisconnected ) }\n            })\nsdkbox.PluginSoomlaGrow.init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginSoomlaGrow.init();   initialize the plugin instance.   sdkbox.PluginSoomlaGrow.setListener(listener);   Set listener to listen to GROW events   sdkbox.PluginSoomlaGrow.refreshInsight()   Refreshed Insights information from the server   sdkbox.PluginSoomlaGrow.getUserInsightInfo()   get user insights info\n Note: the returned value may be empty   Listeners  onHighWayInitialized()   This event is triggered once the highway initialized.   onHighWayConnected()   This event is triggered once the highway is connected to server.   onHighWayDisconnected()   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SoomlaGrow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar   Copy the  pluginsoomlagrow  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/", 
            "text": "GROW\n\n\nGROW is \nSOOMLA\n's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the \nKnowledge Base\n.\n\n\nIntegration\n\n\n\n\n\n\nIf you still didn't sign up on the GROW Dashboard, go ahead and do it \nhere\n.\n\n\n\n\n\n\nOpen a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.\n\n\n\n\n\n\nbash\n  $ sdkbox import soomlagrow\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nres/sdkbox_config.json\n, that you will have to modify before you use in your own app.\n\n\nHere is an example of the GROW configuration, you need to replace \ngameKey\n and \nenvkey\n items with the ones you were given by the \nGROW Dashboard\n. You will probably use the same \ngameKey\n and \nenvKey\n for Android and iOS but you will still need to specify it twice, once for each platform. Example:\n\n\nios\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\nandroid\n :\n{\n  \nsoomlaGrow\n:{\n              \ngameKey\n:\n0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553\n,\n              \nenvKey\n:\n8b865add-4541-4db1-be18-f6c7e5e00564\n\n          }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\n\n\nModify \nClasses/AppDelegate.cpp\nto include the following headers:\n\n\n\n\n#include \nPluginSoomlaGrowLua.hpp\n\n#include \nPluginSoomlaGrowLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginSoomlaGrowLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginSoomlaGrowLua.hpp\n\n#include \nPluginSoomlaGrowLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginSoomlaGrowLua(tolua_s);\n    register_PluginSoomlaGrowLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize GROW\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\nUsing GROW's Insights module\n\n\nAfter initialization you can begin to use GROW's Insights functionality. Use \nrefreshInsight\n, 'getUserInsightInfo' wherever you want from your code:\n\n\nsdkbox.PluginSoomlaGrow:refreshInsight()\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()\n\n\n\n\nCatch GROW events (optional)\n\n\nThis allows you to catch the \nGROW\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginSoomlaGrow:setListener(function(data)\n            if \nonHighWayInitialized\n == data.event then\n                //highway initialized\n            elseif \nonHighWayConnected\n == data.event then\n                //highway connected\n            elseif \nonHighWayDisconnected\n == data.event then\n                //highway disconnected\n            end\n        end)\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginSoomlaGrow:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginSoomlaGrow:setListener(listener)\n\n\n\n\n\n\nSet listener to listen for GROW events\n\n\n\n\nsdkbox.PluginSoomlaGrow:refreshInsight()\n\n\n\n\n\n\nRefreshed Insights information from the server\n\n\n\n\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()\n\n\n\n\n\n\nget user insight info\n Note: the returned value may be empty\n\n\n\n\nListeners\n\n\nonHighWayInitialized()\n\n\n\n\n\n\nThis event is triggered once the highway initialized.\n\n\n\n\nonHighWayConnected()\n\n\n\n\n\n\nThis event is triggered once the highway is connected to server.\n\n\n\n\nonHighWayDisconnected()\n\n\n\n\n\n\nThis event is triggered once the highway disconnect from the server.\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nSoomlaGrow\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginSoomlaGrow.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nSecurity.framework\n\n\nlibsqlite3.0.dylib\n\n\nStoreKit.framework\n\n\nCFNetwork.framework\n\n\nlibicucore.dylib\n\n\nSystemConfguration.framework\n\n\nAdSupport.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nSoomlaGrowLite.jar\n\n\nPluginSoomlaGrow.jar\n\n\nsdkbox.jar\n\n\n\n\nCopy the \npluginsoomlagrow\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\nuses-permission android:name=\ncom.android.vending.BILLING\n/\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_STATIC_LIBRARIES\n:\n\n\nLOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (release, optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#grow", 
            "text": "GROW is  SOOMLA 's flagship, community-driven, data network. Mobile game studios can take advantage of GROW's Anaytics, Whales Reports and Insights in order to gain valuable knowledge about users' behavior in other games.\nInformation about GROW can be found on the  Knowledge Base .", 
            "title": "GROW"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#integration", 
            "text": "If you still didn't sign up on the GROW Dashboard, go ahead and do it  here .    Open a terminal and use the following command to install GROW's SDKBOX plugin. Make sure you setup SDKBOX installer correctly.    bash\n  $ sdkbox import soomlagrow", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  res/sdkbox_config.json , that you will have to modify before you use in your own app.  Here is an example of the GROW configuration, you need to replace  gameKey  and  envkey  items with the ones you were given by the  GROW Dashboard . You will probably use the same  gameKey  and  envKey  for Android and iOS but you will still need to specify it twice, once for each platform. Example:  ios  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n} android  :\n{\n   soomlaGrow :{\n               gameKey : 0cbc07e3-0f0c-4b68-bb0c-061c1b5fb553 ,\n               envKey : 8b865add-4541-4db1-be18-f6c7e5e00564 \n          }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#usage", 
            "text": "Modify Lua Code   Modify  Classes/AppDelegate.cpp to include the following headers:   #include  PluginSoomlaGrowLua.hpp \n#include  PluginSoomlaGrowLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginSoomlaGrowLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginSoomlaGrowLua.hpp \n#include  PluginSoomlaGrowLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginSoomlaGrowLua(tolua_s);\n    register_PluginSoomlaGrowLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize GROW  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginSoomlaGrow:init()  Using GROW's Insights module  After initialization you can begin to use GROW's Insights functionality. Use  refreshInsight , 'getUserInsightInfo' wherever you want from your code:  sdkbox.PluginSoomlaGrow:refreshInsight()\nsdkbox.PluginSoomlaGrow:getUserInsightInfo()  Catch GROW events (optional)  This allows you to catch the  GROW  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginSoomlaGrow:setListener(function(data)\n            if  onHighWayInitialized  == data.event then\n                //highway initialized\n            elseif  onHighWayConnected  == data.event then\n                //highway connected\n            elseif  onHighWayDisconnected  == data.event then\n                //highway disconnected\n            end\n        end)\nsdkbox.PluginSoomlaGrow:init()", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginSoomlaGrow:init()   initialize the plugin instance.   sdkbox.PluginSoomlaGrow:setListener(listener)   Set listener to listen for GROW events   sdkbox.PluginSoomlaGrow:refreshInsight()   Refreshed Insights information from the server   sdkbox.PluginSoomlaGrow:getUserInsightInfo()   get user insight info\n Note: the returned value may be empty   Listeners  onHighWayInitialized()   This event is triggered once the highway initialized.   onHighWayConnected()   This event is triggered once the highway is connected to server.   onHighWayDisconnected()   This event is triggered once the highway disconnect from the server.", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  SoomlaGrow  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginSoomlaGrow.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   Security.framework  libsqlite3.0.dylib  StoreKit.framework  CFNetwork.framework  libicucore.dylib  SystemConfguration.framework  AdSupport.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/soomlagrow/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   SoomlaGrowLite.jar  PluginSoomlaGrow.jar  sdkbox.jar   Copy the  pluginsoomlagrow  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /  uses-permission android:name= com.android.vending.BILLING /   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_STATIC_LIBRARIES :  LOCAL_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_STATIC_LIBRARIES += PluginSoomlaGrow\nLOCAL_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginsoomlagrow)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }  Proguard (release, optional)   Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   # If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/tune/v3-cpp/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nmeasureSession()\n are required. Example:\n\n\n#include \nPluginTune/PluginTune.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\n{\n    PluginTune::measureEventName(\npurchase\n);\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName = \npurchase2\n;\n    event.refId     = \nRJ1357\n;\n    event.searchString = \nsweet crisp red apples\n;\n    event.attribute1 = \ncrisp\n;\n    event.attribute2 = \nred\n;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}\n\n\n\n\nNotice that at the end of the \nevent\n \nPluginTune::measureEvent(event)\n was called. This takes care of logging our event.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void setListener ( TuneListener * listener ) ;\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nstatic TuneListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove the listener, and can't listen to events anymore\n\n\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nstatic void setDebugMode ( bool enable ) ;\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nstatic void setAllowDuplicateRequests ( bool allow ) ;\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nstatic void checkForDeferredDeeplinkWithTimeout ( double timeout ) ;\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nstatic void automateIapEventMeasurement ( bool automate ) ;\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nstatic void setFacebookEventLogging ( bool logging , bool limit ) ;\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nstatic void setExistingUser ( bool existingUser ) ;\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nstatic void setAppleAdvertisingIdentifier ( const std::string \n appleAdvertisingIdentifier ,\n                                            bool adTrackingEnabled ) ;\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nstatic void setAppleVendorIdentifier ( const std::string \n appleVendorIdentifier ) ;\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nstatic void setCurrencyCode ( const std::string \n currencyCode ) ;\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nstatic void setJailbroken ( bool jailbroken ) ;\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nstatic void setPackageName ( const std::string \n packageName ) ;\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nstatic void setShouldAutoDetectJailbroken ( bool autoDetect ) ;\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nstatic void setShouldAutoGenerateAppleVendorIdentifier ( bool autoGenerate ) ;\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nstatic void setSiteId ( const std::string \n siteId ) ;\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nstatic void setTRUSTeId ( const std::string \n tpid ) ;\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nstatic void setUserEmail ( const std::string \n userEmail ) ;\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nstatic void setUserId ( const std::string \n userId ) ;\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nstatic void setUserName ( const std::string \n userName ) ;\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nstatic void setPhoneNumber ( const std::string \n phoneNumber ) ;\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nstatic void setFacebookUserId ( const std::string \n facebookUserId ) ;\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nstatic void setTwitterUserId ( const std::string \n twitterUserId ) ;\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nstatic void setGoogleUserId ( const std::string \n googleUserId ) ;\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nstatic void setAge ( int userAge ) ;\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nstatic void setGender ( Gender userGender ) ;\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nstatic void setLatitude ( double latitude , double longitude ) ;\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          double altitude ) ;\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nstatic void setAppAdTracking ( bool enable ) ;\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nstatic void setPayingUser ( bool isPayingUser ) ;\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nstatic void setPreloadData ( const TunePreloadData \n preloadData ) ;\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nstatic void setPreloadDataForScript ( const std::string \n jsonString ) ;\n\n\n\n\nstatic std::string matId ( ) ;\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nstatic std::string openLogId ( ) ;\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nstatic bool isPayingUser ( ) ;\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nstatic void measureSession ( ) ;\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nstatic void measureEventName ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nstatic void measureEventId ( int eventId ) ;\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nstatic void measureEvent ( const TuneEvent \n event ) ;\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nstatic void measureEventForScript ( const std::string \n jsonString ) ;\n\n\n\n\nstatic void setUseCookieTracking ( bool enable ) ;\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nstatic void setRedirectUrl ( const std::string \n redirectUrl ) ;\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nstatic void startAppToAppTracking ( const std::string \n targetAppPackageName ,\n                                    const std::string \n targetAppAdvertiserId ,\n                                    const std::string \n targetAdvertiserOfferId ,\n                                    const std::string \n targetAdvertiserPublisherId ,\n                                    bool shouldRedirect ) ;\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nstatic void applicationDidOpenURL ( const std::string \n urlString ,\n                                    const std::string \n sourceApplication ) ;\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nvoid onMobileAppTrackerEnqueuedActionWithReferenceId ( const std::string \n referenceId );\n\n\n\n\nvoid onMobileAppTrackerDidSucceedWithData ( const std::string \n data );\n\n\n\n\nvoid onMobileAppTrackerDidFailWithError ( const std::string \n errorString );\n\n\n\n\nvoid onMobileAppTrackerDidReceiveDeeplink ( const std::string \n deeplink ,\n                                            bool timeout );\n\n\n\n\nvoid onMobileAppTrackerDidFailDeeplinkWithError ( const std::string \n errorString );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \nplugintune\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#usage", 
            "text": "Initialize Tune  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  measureSession()  are required. Example:  #include  PluginTune/PluginTune.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  {\n    PluginTune::measureEventName( purchase );\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName =  purchase2 ;\n    event.refId     =  RJ1357 ;\n    event.searchString =  sweet crisp red apples ;\n    event.attribute1 =  crisp ;\n    event.attribute2 =  red ;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}  Notice that at the end of the  event   PluginTune::measureEvent(event)  was called. This takes care of logging our event.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#api-reference", 
            "text": "Methods  static void setListener ( TuneListener * listener ) ;   set a listener to listen for event changes.   static TuneListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   remove the listener, and can't listen to events anymore   static void init ( ) ;   init the instance.   static void setDebugMode ( bool enable ) ;   Specifies that the server responses should include debug information.   static void setAllowDuplicateRequests ( bool allow ) ;   Set to YES to allow duplicate requests to be registered with the MAT server.   static void checkForDeferredDeeplinkWithTimeout ( double timeout ) ;   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   static void automateIapEventMeasurement ( bool automate ) ;   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   static void setFacebookEventLogging ( bool logging , bool limit ) ;   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   static void setExistingUser ( bool existingUser ) ;   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   static void setAppleAdvertisingIdentifier ( const std::string   appleAdvertisingIdentifier ,\n                                            bool adTrackingEnabled ) ;   Set the Apple Advertising Identifier available in iOS 6.   static void setAppleVendorIdentifier ( const std::string   appleVendorIdentifier ) ;   Set the Apple Vendor Identifier available in iOS 6.   static void setCurrencyCode ( const std::string   currencyCode ) ;   Sets the currency code.   static void setJailbroken ( bool jailbroken ) ;   Sets the jailbroken device flag.   static void setPackageName ( const std::string   packageName ) ;   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   static void setShouldAutoDetectJailbroken ( bool autoDetect ) ;   Specifies if the sdk should auto detect if the iOS device is jailbroken.   static void setShouldAutoGenerateAppleVendorIdentifier ( bool autoGenerate ) ;   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   static void setSiteId ( const std::string   siteId ) ;   Sets the site ID.   static void setTRUSTeId ( const std::string   tpid ) ;   Set the TRUSTe Trusted Preference Identifier (TPID).   static void setUserEmail ( const std::string   userEmail ) ;   Sets the user's email address.   static void setUserId ( const std::string   userId ) ;   Sets the user ID.   static void setUserName ( const std::string   userName ) ;   Sets the user's name.   static void setPhoneNumber ( const std::string   phoneNumber ) ;   Sets the user's phone number.   static void setFacebookUserId ( const std::string   facebookUserId ) ;   Set user's Facebook ID.   static void setTwitterUserId ( const std::string   twitterUserId ) ;   Set user's Twitter ID.   static void setGoogleUserId ( const std::string   googleUserId ) ;   Set user's Google ID.   static void setAge ( int userAge ) ;   Sets the user's age.   static void setGender ( Gender userGender ) ;   Sets the user's gender.   static void setLatitude ( double latitude , double longitude ) ;   Sets the user's location.   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          double altitude ) ;   Sets the user's location including altitude.   static void setAppAdTracking ( bool enable ) ;   Set app-level ad-tracking.   static void setPayingUser ( bool isPayingUser ) ;   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   static void setPreloadData ( const TunePreloadData   preloadData ) ;   Sets publisher information for attribution.   static void setPreloadDataForScript ( const std::string   jsonString ) ;  static std::string matId ( ) ;   Get the MAT ID for this installation (mat_id).   static std::string openLogId ( ) ;   Get the MAT log ID for the first app open (open_log_id).   static bool isPayingUser ( ) ;   Get whether the user is revenue-generating.   static void measureSession ( ) ;   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   static void measureEventName ( const std::string   eventName ) ;   Record an event for an Event Name.   static void measureEventId ( int eventId ) ;   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   static void measureEvent ( const TuneEvent   event ) ;   Record an event with a MATEvent.   static void measureEventForScript ( const std::string   jsonString ) ;  static void setUseCookieTracking ( bool enable ) ;   Sets whether or not to use cookie based tracking.   static void setRedirectUrl ( const std::string   redirectUrl ) ;   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   static void startAppToAppTracking ( const std::string   targetAppPackageName ,\n                                    const std::string   targetAppAdvertiserId ,\n                                    const std::string   targetAdvertiserOfferId ,\n                                    const std::string   targetAdvertiserPublisherId ,\n                                    bool shouldRedirect ) ;   Start an app-to-app tracking session on the MAT server.   static void applicationDidOpenURL ( const std::string   urlString ,\n                                    const std::string   sourceApplication ) ;   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  void onMobileAppTrackerEnqueuedActionWithReferenceId ( const std::string   referenceId );  void onMobileAppTrackerDidSucceedWithData ( const std::string   data );  void onMobileAppTrackerDidFailWithError ( const std::string   errorString );  void onMobileAppTrackerDidReceiveDeeplink ( const std::string   deeplink ,\n                                            bool timeout );  void onMobileAppTrackerDidFailDeeplinkWithError ( const std::string   errorString );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  plugintune  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/tune/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v3-js/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Tune JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginTuneJS.hpp\n\n#include \nPluginTuneJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginTuneJS);\nsc-\naddRegisterCallback(register_all_PluginTuneJS_helper);\n\n\n\n\nInitialize Tune\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginTune.init();\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune.measureEventName(\nlogin\n);\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName = \npurchase\n;\nevent.refId = \nRJ1357\n;\nevent.searchString = \nsweet srisp red apples\n;\nevent.attribute1 = \nsrisp\n;\nevent.attribute2 = \nred\n;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEvent(JSON.stringify(event));\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data, timeout) {},\n  onFailDeeplink: function(errorString) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune.setListener(listener);\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginTune.init();\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nsdkbox.PluginTune.setDebugMode(enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune.setAllowDuplicateRequests(allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nsdkbox.PluginTune.automateIapEventMeasurement(automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune.setFacebookEventLogging(logging, limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune.setExistingUser(existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setCurrencyCode(currencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune.setJailbroken(jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune.setPackageName(packageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune.setSiteId(siteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune.setTRUSTeId(tpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune.setUserEmail(userEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune.setUserId(userId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune.setUserName(userName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune.setPhoneNumber(phoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune.setFacebookUserId(facebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune.setTwitterUserId(twitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune.setGoogleUserId(googleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune.setAge(userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune.setGender(userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude, altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune.setAppAdTracking(enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune.setPayingUser(isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune.setPreloadData(preloadData);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune.matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune.openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune.isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune.measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune.measureEventName(eventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune.measureEventId(eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune.measureEvent(event);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune.setUseCookieTracking(enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune.setRedirectUrl(redirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nonEnqueuedAction(referenceId);\n\n\n\n\nonSucceed(data);\n\n\n\n\nonFailed(errorString);\n\n\n\n\nonReceiveDeeplink(deeplink, timeout);\n\n\n\n\nonMobileAppTrackerDidFailDeeplinkWithError(errorString);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \nplugintune\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/tune/v3-js/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Tune JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginTuneJS.hpp \n#include  PluginTuneJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginTuneJS);\nsc- addRegisterCallback(register_all_PluginTuneJS_helper);  Initialize Tune  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginTune.init();  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune.measureEventName( login );\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName =  purchase ;\nevent.refId =  RJ1357 ;\nevent.searchString =  sweet srisp red apples ;\nevent.attribute1 =  srisp ;\nevent.attribute2 =  red ;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEvent(JSON.stringify(event));  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data, timeout) {},\n  onFailDeeplink: function(errorString) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginTune.setListener(listener);   set a listener to listen for event changes.   sdkbox.PluginTune.init();   init the instance.   sdkbox.PluginTune.setDebugMode(enable);   Specifies that the server responses should include debug information.   sdkbox.PluginTune.setAllowDuplicateRequests(allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   sdkbox.PluginTune.automateIapEventMeasurement(automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune.setFacebookEventLogging(logging, limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   sdkbox.PluginTune.setExistingUser(existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune.setCurrencyCode(currencyCode);   Sets the currency code.   sdkbox.PluginTune.setJailbroken(jailbroken);   Sets the jailbroken device flag.   sdkbox.PluginTune.setPackageName(packageName);   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   sdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   sdkbox.PluginTune.setSiteId(siteId);   Sets the site ID.   sdkbox.PluginTune.setTRUSTeId(tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune.setUserEmail(userEmail);   Sets the user's email address.   sdkbox.PluginTune.setUserId(userId);   Sets the user ID.   sdkbox.PluginTune.setUserName(userName);   Sets the user's name.   sdkbox.PluginTune.setPhoneNumber(phoneNumber);   Sets the user's phone number.   sdkbox.PluginTune.setFacebookUserId(facebookUserId);   Set user's Facebook ID.   sdkbox.PluginTune.setTwitterUserId(twitterUserId);   Set user's Twitter ID.   sdkbox.PluginTune.setGoogleUserId(googleUserId);   Set user's Google ID.   sdkbox.PluginTune.setAge(userAge);   Sets the user's age.   sdkbox.PluginTune.setGender(userGender);   Sets the user's gender.   sdkbox.PluginTune.setLatitude(latitude, longitude);   Sets the user's location.   sdkbox.PluginTune.setLatitude(latitude, longitude, altitude);   Sets the user's location including altitude.   sdkbox.PluginTune.setAppAdTracking(enable);   Set app-level ad-tracking.   sdkbox.PluginTune.setPayingUser(isPayingUser);   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune.setPreloadData(preloadData);   Sets publisher information for attribution.   sdkbox.PluginTune.matId();   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune.openLogId();   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune.isPayingUser();   Get whether the user is revenue-generating.   sdkbox.PluginTune.measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune.measureEventName(eventName);   Record an event for an Event Name.   sdkbox.PluginTune.measureEventId(eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune.measureEvent(event);   Record an event with a MATEvent.   sdkbox.PluginTune.setUseCookieTracking(enable);   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune.setRedirectUrl(redirectUrl);   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect);   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  onEnqueuedAction(referenceId);  onSucceed(data);  onFailed(errorString);  onReceiveDeeplink(deeplink, timeout);  onMobileAppTrackerDidFailDeeplinkWithError(errorString);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  plugintune  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/tune/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v3-lua/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nTune\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginTuneLua.hpp\n\n#include \nPluginTuneLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginTuneLua(L);\n  register_all_PluginTuneLua_helper(L);\n}\n\n\n\n\nInitialize Tune\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginTune:init()\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune:measureEventName(\nlogin\n)\nsdkbox.PluginTune:measureEventId(0123456789)\n\nlocal event = {}\nevent.eventName = \npurchase\n\nevent.refId = \nRJ1357\n\nevent.searchString = \nsweet srisp red apples\n\nevent.attribute1 = \nsrisp\n\nevent.attribute2 = \nred\n\nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune:setListener(function(eventName, eventData, timeout)\n        -- the third param \ntimeout\n valid, when eventName equal \nonReceiveDeeplink\n\n        print(eventName, eventData)\n    end)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune:setListener(listener)\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginTune:init()\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nsdkbox.PluginTune:setDebugMode(enable)\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune:setAllowDuplicateRequests(allow)\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout)\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nsdkbox.PluginTune:automateIapEventMeasurement(automate)\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune:setFacebookEventLogging(logging, limit)\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune:setExistingUser(existingUser)\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled)\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier)\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setCurrencyCode(currencyCode)\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune:setJailbroken(jailbroken)\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune:setPackageName(packageName)\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect)\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate)\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune:setSiteId(siteId)\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune:setTRUSTeId(tpid)\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune:setUserEmail(userEmail)\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune:setUserId(userId)\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune:setUserName(userName)\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune:setPhoneNumber(phoneNumber)\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune:setFacebookUserId(facebookUserId)\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune:setTwitterUserId(twitterUserId)\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune:setGoogleUserId(googleUserId)\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune:setAge(userAge)\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune:setGender(userGender)\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude)\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude, altitude)\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune:setAppAdTracking(enable)\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune:setPayingUser(isPayingUser)\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune:setPreloadData(preloadData)\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune:matId()\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune:openLogId()\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune:isPayingUser()\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune:measureSession()\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune:measureEventName(eventName)\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune:measureEventId(eventId)\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune:measureEvent(event)\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune:setUseCookieTracking(enable)\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune:setRedirectUrl(redirectUrl)\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect)\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication)\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nonEnqueuedAction(referenceId)\n\n\n\n\nonSucceed(data)\n\n\n\n\nonFailed(errorString)\n\n\n\n\nonReceiveDeeplink(deeplink, timeout)\n\n\n\n\nonMobileAppTrackerDidFailDeeplinkWithError(errorString)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\nCopy the \nplugintune\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Tune  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginTuneLua.hpp \n#include  PluginTuneLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginTuneLua(L);\n  register_all_PluginTuneLua_helper(L);\n}  Initialize Tune  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginTune:init()  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune:measureEventName( login )\nsdkbox.PluginTune:measureEventId(0123456789)\n\nlocal event = {}\nevent.eventName =  purchase \nevent.refId =  RJ1357 \nevent.searchString =  sweet srisp red apples \nevent.attribute1 =  srisp \nevent.attribute2 =  red \nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune:setListener(function(eventName, eventData, timeout)\n        -- the third param  timeout  valid, when eventName equal  onReceiveDeeplink \n        print(eventName, eventData)\n    end)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginTune:setListener(listener)   set a listener to listen for event changes.   sdkbox.PluginTune:init()   init the instance.   sdkbox.PluginTune:setDebugMode(enable)   Specifies that the server responses should include debug information.   sdkbox.PluginTune:setAllowDuplicateRequests(allow)   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout)   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   sdkbox.PluginTune:automateIapEventMeasurement(automate)   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune:setFacebookEventLogging(logging, limit)   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   sdkbox.PluginTune:setExistingUser(existingUser)   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled)   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier)   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune:setCurrencyCode(currencyCode)   Sets the currency code.   sdkbox.PluginTune:setJailbroken(jailbroken)   Sets the jailbroken device flag.   sdkbox.PluginTune:setPackageName(packageName)   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   sdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect)   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate)   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   sdkbox.PluginTune:setSiteId(siteId)   Sets the site ID.   sdkbox.PluginTune:setTRUSTeId(tpid)   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune:setUserEmail(userEmail)   Sets the user's email address.   sdkbox.PluginTune:setUserId(userId)   Sets the user ID.   sdkbox.PluginTune:setUserName(userName)   Sets the user's name.   sdkbox.PluginTune:setPhoneNumber(phoneNumber)   Sets the user's phone number.   sdkbox.PluginTune:setFacebookUserId(facebookUserId)   Set user's Facebook ID.   sdkbox.PluginTune:setTwitterUserId(twitterUserId)   Set user's Twitter ID.   sdkbox.PluginTune:setGoogleUserId(googleUserId)   Set user's Google ID.   sdkbox.PluginTune:setAge(userAge)   Sets the user's age.   sdkbox.PluginTune:setGender(userGender)   Sets the user's gender.   sdkbox.PluginTune:setLatitude(latitude, longitude)   Sets the user's location.   sdkbox.PluginTune:setLatitude(latitude, longitude, altitude)   Sets the user's location including altitude.   sdkbox.PluginTune:setAppAdTracking(enable)   Set app-level ad-tracking.   sdkbox.PluginTune:setPayingUser(isPayingUser)   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune:setPreloadData(preloadData)   Sets publisher information for attribution.   sdkbox.PluginTune:matId()   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune:openLogId()   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune:isPayingUser()   Get whether the user is revenue-generating.   sdkbox.PluginTune:measureSession()   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune:measureEventName(eventName)   Record an event for an Event Name.   sdkbox.PluginTune:measureEventId(eventId)   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune:measureEvent(event)   Record an event with a MATEvent.   sdkbox.PluginTune:setUseCookieTracking(enable)   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune:setRedirectUrl(redirectUrl)   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect)   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication)   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  onEnqueuedAction(referenceId)  onSucceed(data)  onFailed(errorString)  onReceiveDeeplink(deeplink, timeout)  onMobileAppTrackerDidFailDeeplinkWithError(errorString)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  plugintune  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/tune/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nInitialize Tune\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. \ninit()\n and \nmeasureSession()\n are required. Example:\n\n\n#include \nPluginTune/PluginTune.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\n{\n    PluginTune::measureEventName(\npurchase\n);\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName = \npurchase2\n;\n    event.refId     = \nRJ1357\n;\n    event.searchString = \nsweet crisp red apples\n;\n    event.attribute1 = \ncrisp\n;\n    event.attribute2 = \nred\n;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}\n\n\n\n\nNotice that at the end of the \nevent\n \nPluginTune::measureEvent(event)\n was called. This takes care of logging our event.\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void setListener ( TuneListener * listener ) ;\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nstatic TuneListener * getListener ( ) ;\n\n\n\n\n\n\nGet the listener\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove the listener, and can't listen to events anymore\n\n\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nstatic void setDebugMode ( bool enable ) ;\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nstatic void setAllowDuplicateRequests ( bool allow ) ;\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nstatic void checkForDeferredDeeplinkWithTimeout ( double timeout ) ;\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nstatic void automateIapEventMeasurement ( bool automate ) ;\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nstatic void setFacebookEventLogging ( bool logging , bool limit ) ;\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nstatic void setExistingUser ( bool existingUser ) ;\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nstatic void setAppleAdvertisingIdentifier ( const std::string \n appleAdvertisingIdentifier ,\n                                            bool adTrackingEnabled ) ;\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nstatic void setAppleVendorIdentifier ( const std::string \n appleVendorIdentifier ) ;\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nstatic void setCurrencyCode ( const std::string \n currencyCode ) ;\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nstatic void setJailbroken ( bool jailbroken ) ;\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nstatic void setPackageName ( const std::string \n packageName ) ;\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nstatic void setShouldAutoDetectJailbroken ( bool autoDetect ) ;\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nstatic void setShouldAutoGenerateAppleVendorIdentifier ( bool autoGenerate ) ;\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nstatic void setSiteId ( const std::string \n siteId ) ;\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nstatic void setTRUSTeId ( const std::string \n tpid ) ;\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nstatic void setUserEmail ( const std::string \n userEmail ) ;\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nstatic void setUserId ( const std::string \n userId ) ;\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nstatic void setUserName ( const std::string \n userName ) ;\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nstatic void setPhoneNumber ( const std::string \n phoneNumber ) ;\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nstatic void setFacebookUserId ( const std::string \n facebookUserId ) ;\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nstatic void setTwitterUserId ( const std::string \n twitterUserId ) ;\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nstatic void setGoogleUserId ( const std::string \n googleUserId ) ;\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nstatic void setAge ( int userAge ) ;\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nstatic void setGender ( Gender userGender ) ;\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nstatic void setLatitude ( double latitude , double longitude ) ;\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nstatic void setLatitude ( double latitude ,\n                          double longitude ,\n                          double altitude ) ;\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nstatic void setAppAdTracking ( bool enable ) ;\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nstatic void setPayingUser ( bool isPayingUser ) ;\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nstatic void setPreloadData ( const TunePreloadData \n preloadData ) ;\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nstatic void setPreloadDataForScript ( const std::string \n jsonString ) ;\n\n\n\n\nstatic std::string matId ( ) ;\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nstatic std::string openLogId ( ) ;\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nstatic bool isPayingUser ( ) ;\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nstatic void measureSession ( ) ;\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nstatic void measureEventName ( const std::string \n eventName ) ;\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nstatic void measureEventId ( int eventId ) ;\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nstatic void measureEvent ( const TuneEvent \n event ) ;\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nstatic void measureEventForScript ( const std::string \n jsonString ) ;\n\n\n\n\nstatic void setUseCookieTracking ( bool enable ) ;\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nstatic void setRedirectUrl ( const std::string \n redirectUrl ) ;\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nstatic void startAppToAppTracking ( const std::string \n targetAppPackageName ,\n                                    const std::string \n targetAppAdvertiserId ,\n                                    const std::string \n targetAdvertiserOfferId ,\n                                    const std::string \n targetAdvertiserPublisherId ,\n                                    bool shouldRedirect ) ;\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nstatic void applicationDidOpenURL ( const std::string \n urlString ,\n                                    const std::string \n sourceApplication ) ;\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nvoid onMobileAppTrackerEnqueuedActionWithReferenceId ( const std::string \n referenceId );\n\n\n\n\nvoid onMobileAppTrackerDidSucceedWithData ( const std::string \n data );\n\n\n\n\nvoid onMobileAppTrackerDidFailWithError ( const std::string \n errorString );\n\n\n\n\nvoid onMobileAppTrackerDidReceiveDeeplink ( const std::string \n deeplink ,\n                                            bool timeout );\n\n\n\n\nvoid onMobileAppTrackerDidFailDeeplinkWithError ( const std::string \n errorString );\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\nCopy the \nplugintune\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\n    APP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#usage", 
            "text": "Initialize Tune  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers.  init()  and  measureSession()  are required. Example:  #include  PluginTune/PluginTune.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginTune::init();\n     sdkbox::PluginTune::measureSession();\n}  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  {\n    PluginTune::measureEventName( purchase );\n    PluginTune::measureEventId(1122334455);\n        TuneEvent event;\n    event.eventName =  purchase2 ;\n    event.refId     =  RJ1357 ;\n    event.searchString =  sweet crisp red apples ;\n    event.attribute1 =  crisp ;\n    event.attribute2 =  red ;\n    event.quantity = 3;\n    PluginTune::measureEvent(event);\n}  Notice that at the end of the  event   PluginTune::measureEvent(event)  was called. This takes care of logging our event.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#api-reference", 
            "text": "Methods  static void setListener ( TuneListener * listener ) ;   set a listener to listen for event changes.   static TuneListener * getListener ( ) ;   Get the listener   static void removeListener ( ) ;   remove the listener, and can't listen to events anymore   static void init ( ) ;   init the instance.   static void setDebugMode ( bool enable ) ;   Specifies that the server responses should include debug information.   static void setAllowDuplicateRequests ( bool allow ) ;   Set to YES to allow duplicate requests to be registered with the MAT server.   static void checkForDeferredDeeplinkWithTimeout ( double timeout ) ;   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   static void automateIapEventMeasurement ( bool automate ) ;   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   static void setFacebookEventLogging ( bool logging , bool limit ) ;   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   static void setExistingUser ( bool existingUser ) ;   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   static void setAppleAdvertisingIdentifier ( const std::string   appleAdvertisingIdentifier ,\n                                            bool adTrackingEnabled ) ;   Set the Apple Advertising Identifier available in iOS 6.   static void setAppleVendorIdentifier ( const std::string   appleVendorIdentifier ) ;   Set the Apple Vendor Identifier available in iOS 6.   static void setCurrencyCode ( const std::string   currencyCode ) ;   Sets the currency code.   static void setJailbroken ( bool jailbroken ) ;   Sets the jailbroken device flag.   static void setPackageName ( const std::string   packageName ) ;   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   static void setShouldAutoDetectJailbroken ( bool autoDetect ) ;   Specifies if the sdk should auto detect if the iOS device is jailbroken.   static void setShouldAutoGenerateAppleVendorIdentifier ( bool autoGenerate ) ;   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   static void setSiteId ( const std::string   siteId ) ;   Sets the site ID.   static void setTRUSTeId ( const std::string   tpid ) ;   Set the TRUSTe Trusted Preference Identifier (TPID).   static void setUserEmail ( const std::string   userEmail ) ;   Sets the user's email address.   static void setUserId ( const std::string   userId ) ;   Sets the user ID.   static void setUserName ( const std::string   userName ) ;   Sets the user's name.   static void setPhoneNumber ( const std::string   phoneNumber ) ;   Sets the user's phone number.   static void setFacebookUserId ( const std::string   facebookUserId ) ;   Set user's Facebook ID.   static void setTwitterUserId ( const std::string   twitterUserId ) ;   Set user's Twitter ID.   static void setGoogleUserId ( const std::string   googleUserId ) ;   Set user's Google ID.   static void setAge ( int userAge ) ;   Sets the user's age.   static void setGender ( Gender userGender ) ;   Sets the user's gender.   static void setLatitude ( double latitude , double longitude ) ;   Sets the user's location.   static void setLatitude ( double latitude ,\n                          double longitude ,\n                          double altitude ) ;   Sets the user's location including altitude.   static void setAppAdTracking ( bool enable ) ;   Set app-level ad-tracking.   static void setPayingUser ( bool isPayingUser ) ;   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   static void setPreloadData ( const TunePreloadData   preloadData ) ;   Sets publisher information for attribution.   static void setPreloadDataForScript ( const std::string   jsonString ) ;  static std::string matId ( ) ;   Get the MAT ID for this installation (mat_id).   static std::string openLogId ( ) ;   Get the MAT log ID for the first app open (open_log_id).   static bool isPayingUser ( ) ;   Get whether the user is revenue-generating.   static void measureSession ( ) ;   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   static void measureEventName ( const std::string   eventName ) ;   Record an event for an Event Name.   static void measureEventId ( int eventId ) ;   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   static void measureEvent ( const TuneEvent   event ) ;   Record an event with a MATEvent.   static void measureEventForScript ( const std::string   jsonString ) ;  static void setUseCookieTracking ( bool enable ) ;   Sets whether or not to use cookie based tracking.   static void setRedirectUrl ( const std::string   redirectUrl ) ;   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   static void startAppToAppTracking ( const std::string   targetAppPackageName ,\n                                    const std::string   targetAppAdvertiserId ,\n                                    const std::string   targetAdvertiserOfferId ,\n                                    const std::string   targetAdvertiserPublisherId ,\n                                    bool shouldRedirect ) ;   Start an app-to-app tracking session on the MAT server.   static void applicationDidOpenURL ( const std::string   urlString ,\n                                    const std::string   sourceApplication ) ;   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  void onMobileAppTrackerEnqueuedActionWithReferenceId ( const std::string   referenceId );  void onMobileAppTrackerDidSucceedWithData ( const std::string   data );  void onMobileAppTrackerDidFailWithError ( const std::string   errorString );  void onMobileAppTrackerDidReceiveDeeplink ( const std::string   deeplink ,\n                                            bool timeout );  void onMobileAppTrackerDidFailDeeplinkWithError ( const std::string   errorString );", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar   Copy the  plugintune  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:      APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/tune/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v2-js/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Tune JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginTuneJS.hpp\n\n#include \nPluginTuneJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginTuneJS);\nsc-\naddRegisterCallback(register_all_PluginTuneJS_helper);\n\n\n\n\nInitialize Tune\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginTune.init();\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune.measureEventName(\nlogin\n);\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName = \npurchase\n;\nevent.refId = \nRJ1357\n;\nevent.searchString = \nsweet srisp red apples\n;\nevent.attribute1 = \nsrisp\n;\nevent.attribute2 = \nred\n;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEvent(JSON.stringify(event));\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data, timeout) {},\n  onFailDeeplink: function(errorString) {}\n});\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune.setListener(listener);\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginTune.init();\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nsdkbox.PluginTune.setDebugMode(enable);\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune.setAllowDuplicateRequests(allow);\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nsdkbox.PluginTune.automateIapEventMeasurement(automate);\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune.setFacebookEventLogging(logging, limit);\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune.setExistingUser(existingUser);\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled);\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune.setCurrencyCode(currencyCode);\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune.setJailbroken(jailbroken);\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune.setPackageName(packageName);\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune.setSiteId(siteId);\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune.setTRUSTeId(tpid);\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune.setUserEmail(userEmail);\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune.setUserId(userId);\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune.setUserName(userName);\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune.setPhoneNumber(phoneNumber);\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune.setFacebookUserId(facebookUserId);\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune.setTwitterUserId(twitterUserId);\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune.setGoogleUserId(googleUserId);\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune.setAge(userAge);\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune.setGender(userGender);\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude);\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune.setLatitude(latitude, longitude, altitude);\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune.setAppAdTracking(enable);\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune.setPayingUser(isPayingUser);\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune.setPreloadData(preloadData);\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune.matId();\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune.openLogId();\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune.isPayingUser();\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune.measureSession();\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune.measureEventName(eventName);\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune.measureEventId(eventId);\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune.measureEvent(event);\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune.setUseCookieTracking(enable);\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune.setRedirectUrl(redirectUrl);\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect);\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nonEnqueuedAction(referenceId);\n\n\n\n\nonSucceed(data);\n\n\n\n\nonFailed(errorString);\n\n\n\n\nonReceiveDeeplink(deeplink, timeout);\n\n\n\n\nonMobileAppTrackerDidFailDeeplinkWithError(errorString);\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\nCopy the \nplugintune\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\n    APP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/tune/v2-js/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Tune JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginTuneJS.hpp \n#include  PluginTuneJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginTuneJS);\nsc- addRegisterCallback(register_all_PluginTuneJS_helper);  Initialize Tune  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginTune.init();  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune.measureEventName( login );\nsdkbox.PluginTune.measureEventId(0123456789);\n\nvar event = {};\nevent.eventName =  purchase ;\nevent.refId =  RJ1357 ;\nevent.searchString =  sweet srisp red apples ;\nevent.attribute1 =  srisp ;\nevent.attribute2 =  red ;\nevent.quantity = 3;\nsdkbox.PluginTune.measureEvent(JSON.stringify(event));  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune.setListener({\n  onEnqueuedAction: function(data) {},\n  onSucceed: function(data) {},\n  onFailed: function(data) {},\n  onReceiveDeeplink: function(data, timeout) {},\n  onFailDeeplink: function(errorString) {}\n});", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginTune.setListener(listener);   set a listener to listen for event changes.   sdkbox.PluginTune.init();   init the instance.   sdkbox.PluginTune.setDebugMode(enable);   Specifies that the server responses should include debug information.   sdkbox.PluginTune.setAllowDuplicateRequests(allow);   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune.checkForDeferredDeeplinkWithTimeout(timeout);   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   sdkbox.PluginTune.automateIapEventMeasurement(automate);   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune.setFacebookEventLogging(logging, limit);   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   sdkbox.PluginTune.setExistingUser(existingUser);   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune.setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled);   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune.setAppleVendorIdentifier(appleVendorIdentifier);   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune.setCurrencyCode(currencyCode);   Sets the currency code.   sdkbox.PluginTune.setJailbroken(jailbroken);   Sets the jailbroken device flag.   sdkbox.PluginTune.setPackageName(packageName);   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   sdkbox.PluginTune.setShouldAutoDetectJailbroken(autoDetect);   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune.setShouldAutoGenerateAppleVendorIdentifier(autoGenerate);   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   sdkbox.PluginTune.setSiteId(siteId);   Sets the site ID.   sdkbox.PluginTune.setTRUSTeId(tpid);   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune.setUserEmail(userEmail);   Sets the user's email address.   sdkbox.PluginTune.setUserId(userId);   Sets the user ID.   sdkbox.PluginTune.setUserName(userName);   Sets the user's name.   sdkbox.PluginTune.setPhoneNumber(phoneNumber);   Sets the user's phone number.   sdkbox.PluginTune.setFacebookUserId(facebookUserId);   Set user's Facebook ID.   sdkbox.PluginTune.setTwitterUserId(twitterUserId);   Set user's Twitter ID.   sdkbox.PluginTune.setGoogleUserId(googleUserId);   Set user's Google ID.   sdkbox.PluginTune.setAge(userAge);   Sets the user's age.   sdkbox.PluginTune.setGender(userGender);   Sets the user's gender.   sdkbox.PluginTune.setLatitude(latitude, longitude);   Sets the user's location.   sdkbox.PluginTune.setLatitude(latitude, longitude, altitude);   Sets the user's location including altitude.   sdkbox.PluginTune.setAppAdTracking(enable);   Set app-level ad-tracking.   sdkbox.PluginTune.setPayingUser(isPayingUser);   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune.setPreloadData(preloadData);   Sets publisher information for attribution.   sdkbox.PluginTune.matId();   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune.openLogId();   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune.isPayingUser();   Get whether the user is revenue-generating.   sdkbox.PluginTune.measureSession();   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune.measureEventName(eventName);   Record an event for an Event Name.   sdkbox.PluginTune.measureEventId(eventId);   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune.measureEvent(event);   Record an event with a MATEvent.   sdkbox.PluginTune.setUseCookieTracking(enable);   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune.setRedirectUrl(redirectUrl);   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune.startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect);   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune.applicationDidOpenURL(urlString, sourceApplication);   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  onEnqueuedAction(referenceId);  onSucceed(data);  onFailed(errorString);  onReceiveDeeplink(deeplink, timeout);  onMobileAppTrackerDidFailDeeplinkWithError(errorString);", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar   Copy the  plugintune  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:      APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/tune/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/tune/v2-lua/", 
            "text": "Tune\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import tune\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Tune configuration, you need to replace\n\nTUNE ID\n and \nTUNE KEY\n  with your specific \nTune ID\n account information.\nHere is an example adding \nTune\n:\n\n\nTune\n:{\n    \nid\n:\nTUNE ID\n,\n    \nkey\n:\nTUNE KEY\n,\n    \ndebug\n:false\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginTuneLua.hpp\n\n#include \nPluginTuneLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginTuneLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginTuneLua.hpp\n\n#include \nPluginTuneLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginTuneLua(tolua_s);\n    register_all_PluginTuneLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize Tune\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginTune:init()\n\n\n\n\nUsing Tune\n\n\nAfter initialization you can begin to use the Tune functionality. Tune uses a concept of \nevents\n (also known as \nMAT Native Event Types\n). You log \nevents\n that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:\n\n\nsdkbox.PluginTune:measureEventName(\nlogin\n);\nsdkbox.PluginTune:measureEventId(0123456789);\nlocal event = {}\nevent.eventName = \npurchase\n\nevent.refId = \nRJ1357\n\nevent.searchString = \nsweet srisp red apples\n\nevent.attribute1 = \nsrisp\n\nevent.attribute2 = \nred\n\nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))\n\n\n\n\nCatch Tune events (optional)\n\n\nThis allows you to catch the \nTune\n events so that you can perform operations based upon responses. A simple example might look like this:\n\n\nsdkbox.PluginTune:setListener(function(eventName, eventData, timeout)\n        -- the third param \ntimeout\n valid, when eventName equal \nonReceiveDeeplink\n\n       print(eventName, eventData)\n   end)\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginTune:setListener(listener)\n\n\n\n\n\n\nset a listener to listen for event changes.\n\n\n\n\nsdkbox.PluginTune:init()\n\n\n\n\n\n\ninit the instance.\n\n\n\n\nsdkbox.PluginTune:setDebugMode(enable)\n\n\n\n\n\n\nSpecifies that the server responses should include debug information.\n\n\n\n\nsdkbox.PluginTune:setAllowDuplicateRequests(allow)\n\n\n\n\n\n\nSet to YES to allow duplicate requests to be registered with the MAT server.\n\n\n\n\nsdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout)\n\n\n\n\n\n\nCheck for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.\n\n\n\n\nsdkbox.PluginTune:automateIapEventMeasurement(automate)\n\n\n\n\n\n\nEnable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.\n\n\n\n\nsdkbox.PluginTune:setFacebookEventLogging(logging, limit)\n\n\n\n\n\n\nSet whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.\n\n\n\n\nsdkbox.PluginTune:setExistingUser(existingUser)\n\n\n\n\n\n\nSet whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.\n\n\n\n\nsdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled)\n\n\n\n\n\n\nSet the Apple Advertising Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier)\n\n\n\n\n\n\nSet the Apple Vendor Identifier available in iOS 6.\n\n\n\n\nsdkbox.PluginTune:setCurrencyCode(currencyCode)\n\n\n\n\n\n\nSets the currency code.\n\n\n\n\nsdkbox.PluginTune:setJailbroken(jailbroken)\n\n\n\n\n\n\nSets the jailbroken device flag.\n\n\n\n\nsdkbox.PluginTune:setPackageName(packageName)\n\n\n\n\n\n\nSets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect)\n\n\n\n\n\n\nSpecifies if the sdk should auto detect if the iOS device is jailbroken.\n\n\n\n\nsdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate)\n\n\n\n\n\n\nSpecifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.\n\n\n\n\nsdkbox.PluginTune:setSiteId(siteId)\n\n\n\n\n\n\nSets the site ID.\n\n\n\n\nsdkbox.PluginTune:setTRUSTeId(tpid)\n\n\n\n\n\n\nSet the TRUSTe Trusted Preference Identifier (TPID).\n\n\n\n\nsdkbox.PluginTune:setUserEmail(userEmail)\n\n\n\n\n\n\nSets the user's email address.\n\n\n\n\nsdkbox.PluginTune:setUserId(userId)\n\n\n\n\n\n\nSets the user ID.\n\n\n\n\nsdkbox.PluginTune:setUserName(userName)\n\n\n\n\n\n\nSets the user's name.\n\n\n\n\nsdkbox.PluginTune:setPhoneNumber(phoneNumber)\n\n\n\n\n\n\nSets the user's phone number.\n\n\n\n\nsdkbox.PluginTune:setFacebookUserId(facebookUserId)\n\n\n\n\n\n\nSet user's Facebook ID.\n\n\n\n\nsdkbox.PluginTune:setTwitterUserId(twitterUserId)\n\n\n\n\n\n\nSet user's Twitter ID.\n\n\n\n\nsdkbox.PluginTune:setGoogleUserId(googleUserId)\n\n\n\n\n\n\nSet user's Google ID.\n\n\n\n\nsdkbox.PluginTune:setAge(userAge)\n\n\n\n\n\n\nSets the user's age.\n\n\n\n\nsdkbox.PluginTune:setGender(userGender)\n\n\n\n\n\n\nSets the user's gender.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude)\n\n\n\n\n\n\nSets the user's location.\n\n\n\n\nsdkbox.PluginTune:setLatitude(latitude, longitude, altitude)\n\n\n\n\n\n\nSets the user's location including altitude.\n\n\n\n\nsdkbox.PluginTune:setAppAdTracking(enable)\n\n\n\n\n\n\nSet app-level ad-tracking.\n\n\n\n\nsdkbox.PluginTune:setPayingUser(isPayingUser)\n\n\n\n\n\n\nSet whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.\n\n\n\n\nsdkbox.PluginTune:setPreloadData(preloadData)\n\n\n\n\n\n\nSets publisher information for attribution.\n\n\n\n\nsdkbox.PluginTune:matId()\n\n\n\n\n\n\nGet the MAT ID for this installation (mat_id).\n\n\n\n\nsdkbox.PluginTune:openLogId()\n\n\n\n\n\n\nGet the MAT log ID for the first app open (open_log_id).\n\n\n\n\nsdkbox.PluginTune:isPayingUser()\n\n\n\n\n\n\nGet whether the user is revenue-generating.\n\n\n\n\nsdkbox.PluginTune:measureSession()\n\n\n\n\n\n\nTo be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.\n\n\n\n\nsdkbox.PluginTune:measureEventName(eventName)\n\n\n\n\n\n\nRecord an event for an Event Name.\n\n\n\n\nsdkbox.PluginTune:measureEventId(eventId)\n\n\n\n\n\n\nRecord an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.\n\n\n\n\nsdkbox.PluginTune:measureEvent(event)\n\n\n\n\n\n\nRecord an event with a MATEvent.\n\n\n\n\nsdkbox.PluginTune:setUseCookieTracking(enable)\n\n\n\n\n\n\nSets whether or not to use cookie based tracking.\n\n\n\n\nsdkbox.PluginTune:setRedirectUrl(redirectUrl)\n\n\n\n\n\n\nSets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.\n\n\n\n\nsdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect)\n\n\n\n\n\n\nStart an app-to-app tracking session on the MAT server.\n\n\n\n\nsdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication)\n\n\n\n\n\n\nRecord the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.\n\n\n\n\nListeners\n\n\nonEnqueuedAction(referenceId)\n\n\n\n\nonSucceed(data)\n\n\n\n\nonFailed(errorString)\n\n\n\n\nonReceiveDeeplink(deeplink, timeout)\n\n\n\n\nonMobileAppTrackerDidFailDeeplinkWithError(errorString)\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nTune\n bundle into your Xcode project, check \nCopy items if needed\n when adding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginTune.framework\n\n\nMobileAppTracker.framework\n\n\n\n\nThe above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:\n\n\n\n\nCoreTelephony.framework\n\n\nSecurity.framework\n\n\nSystemConfiguration.framework\n\n\nAdSupport.framework\n\n\niAd.framework\n\n\nMobileCoreServices.framework\n\n\nStoreKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nPluginTune.jar\n\n\nsdkbox.jar\n\n\nMobileAppTracker-3.9.jar\n\n\n\n\nCopy the \nplugintune\n and \nsdkbox\n directories from \nplugin/android/jni\n to your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n/\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n/\n\n\n\n\n\nTo enable \nhardware acceleration\n in your \napplication tag\n. This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.\n\n\nandroid:hardwareAccelerated=\ntrue\n /\n\n\n\n\n\nIt is also necessary to create an \napplication tag\n:\n\n\napplication ... \n\n    \nreceiver android:name=\ncom.mobileapptracker.Tracker\n\n        \nintent-filter\n\n            \naction android:name=\ncom.android.vending.INSTALL_REFERRER\n /\n\n        \n/intent-filter\n\n    \n/receiver\n\n    \nmeta-data android:name=\ncom.google.android.gms.version\n\n               android:value=\n@integer/google_play_services_version\n /\n\n\n/application\n\n\n\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\n    APP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.\n\n\nModify \nproject.properties\n\n\nAn \nAndroid Library Reference\n for \nGoogle Play Services\n is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the\n\nsdk installer\n and choose \nextras-\ngoogle play services\n. Here is an example of what this line could look like:\n\n\nandroid.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib\n\n\n\n\nNote:\n if you already have an \nandroid.library.reference.1\n you can add\nanother by incrementing the number as \nandroid.library.reference.2\n, etc.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#tune", 
            "text": "", 
            "title": "Tune"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Tune plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import tune", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Tune configuration, you need to replace TUNE ID  and  TUNE KEY   with your specific  Tune ID  account information.\nHere is an example adding  Tune :  Tune :{\n     id : TUNE ID ,\n     key : TUNE KEY ,\n     debug :false\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#usage", 
            "text": "Modify Lua Code   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginTuneLua.hpp \n#include  PluginTuneLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginTuneLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginTuneLua.hpp \n#include  PluginTuneLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginTuneLua(tolua_s);\n    register_all_PluginTuneLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize Tune  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginTune:init()  Using Tune  After initialization you can begin to use the Tune functionality. Tune uses a concept of  events  (also known as  MAT Native Event Types ). You log  events  that you care about and you can later view them using the web-based report viewer. Tune provides a structure for these events in their documentation. Example:  sdkbox.PluginTune:measureEventName( login );\nsdkbox.PluginTune:measureEventId(0123456789);\nlocal event = {}\nevent.eventName =  purchase \nevent.refId =  RJ1357 \nevent.searchString =  sweet srisp red apples \nevent.attribute1 =  srisp \nevent.attribute2 =  red \nevent.quantity = 3\nsdkbox.PluginTune:measureEventForScript(json.encode(event))  Catch Tune events (optional)  This allows you to catch the  Tune  events so that you can perform operations based upon responses. A simple example might look like this:  sdkbox.PluginTune:setListener(function(eventName, eventData, timeout)\n        -- the third param  timeout  valid, when eventName equal  onReceiveDeeplink \n       print(eventName, eventData)\n   end)", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginTune:setListener(listener)   set a listener to listen for event changes.   sdkbox.PluginTune:init()   init the instance.   sdkbox.PluginTune:setDebugMode(enable)   Specifies that the server responses should include debug information.   sdkbox.PluginTune:setAllowDuplicateRequests(allow)   Set to YES to allow duplicate requests to be registered with the MAT server.   sdkbox.PluginTune:checkForDeferredDeeplinkWithTimeout(timeout)   Check for a deferred deeplink entry point upon app installation.\nThis is safe to call at every app launch, since the function does nothing\nunless this is the first launch.   sdkbox.PluginTune:automateIapEventMeasurement(automate)   Enable automatic measurement of app store in-app-purchase events. When enabled, your code\nshould not explicitly measure events for successful purchases related to StoreKit to avoid event duplication.   sdkbox.PluginTune:setFacebookEventLogging(logging, limit)   Set whether the MAT events should also be logged to the Facebook SDK. This flag is ignored\nif the Facebook SDK is not present.   sdkbox.PluginTune:setExistingUser(existingUser)   Set whether this is an existing user or a new one. This is generally used to\ndistinguish users who were using previous versions of the app, prior to\nintegration of the MAT SDK. The default is to assume a new user.   sdkbox.PluginTune:setAppleAdvertisingIdentifier(appleAdvertisingIdentifier,\n                                                 adTrackingEnabled)   Set the Apple Advertising Identifier available in iOS 6.   sdkbox.PluginTune:setAppleVendorIdentifier(appleVendorIdentifier)   Set the Apple Vendor Identifier available in iOS 6.   sdkbox.PluginTune:setCurrencyCode(currencyCode)   Sets the currency code.   sdkbox.PluginTune:setJailbroken(jailbroken)   Sets the jailbroken device flag.   sdkbox.PluginTune:setPackageName(packageName)   Sets the package name (bundle identifier).\nDefaults to the Bundle Identifier of the app that is running the sdk.   sdkbox.PluginTune:setShouldAutoDetectJailbroken(autoDetect)   Specifies if the sdk should auto detect if the iOS device is jailbroken.   sdkbox.PluginTune:setShouldAutoGenerateAppleVendorIdentifier(autoGenerate)   Specifies if the sdk should pull the Apple Vendor Identifier from the device.\nNote that setting to false will clear any previously set value for the property.   sdkbox.PluginTune:setSiteId(siteId)   Sets the site ID.   sdkbox.PluginTune:setTRUSTeId(tpid)   Set the TRUSTe Trusted Preference Identifier (TPID).   sdkbox.PluginTune:setUserEmail(userEmail)   Sets the user's email address.   sdkbox.PluginTune:setUserId(userId)   Sets the user ID.   sdkbox.PluginTune:setUserName(userName)   Sets the user's name.   sdkbox.PluginTune:setPhoneNumber(phoneNumber)   Sets the user's phone number.   sdkbox.PluginTune:setFacebookUserId(facebookUserId)   Set user's Facebook ID.   sdkbox.PluginTune:setTwitterUserId(twitterUserId)   Set user's Twitter ID.   sdkbox.PluginTune:setGoogleUserId(googleUserId)   Set user's Google ID.   sdkbox.PluginTune:setAge(userAge)   Sets the user's age.   sdkbox.PluginTune:setGender(userGender)   Sets the user's gender.   sdkbox.PluginTune:setLatitude(latitude, longitude)   Sets the user's location.   sdkbox.PluginTune:setLatitude(latitude, longitude, altitude)   Sets the user's location including altitude.   sdkbox.PluginTune:setAppAdTracking(enable)   Set app-level ad-tracking.   sdkbox.PluginTune:setPayingUser(isPayingUser)   Set whether the user is generating revenue for the app or not.\nIf measureEvent is called with a non-zero revenue, this is automatically set to YES.   sdkbox.PluginTune:setPreloadData(preloadData)   Sets publisher information for attribution.   sdkbox.PluginTune:matId()   Get the MAT ID for this installation (mat_id).   sdkbox.PluginTune:openLogId()   Get the MAT log ID for the first app open (open_log_id).   sdkbox.PluginTune:isPayingUser()   Get whether the user is revenue-generating.   sdkbox.PluginTune:measureSession()   To be called when an app opens; typically in the AppDelegate::applicationWillEnterForeground() event.   sdkbox.PluginTune:measureEventName(eventName)   Record an event for an Event Name.   sdkbox.PluginTune:measureEventId(eventId)   Record an event by providing the equivalent Event ID defined on the MobileAppTracking dashboard.   sdkbox.PluginTune:measureEvent(event)   Record an event with a MATEvent.   sdkbox.PluginTune:setUseCookieTracking(enable)   Sets whether or not to use cookie based tracking.   sdkbox.PluginTune:setRedirectUrl(redirectUrl)   Sets a url to be used with app-to-app tracking so that\nthe sdk can open the download (redirect) url. This is\nused in conjunction with the setTracking:advertiserId:offerId:publisherId:redirect: method.   sdkbox.PluginTune:startAppToAppTracking(targetAppPackageName,\n                                         targetAppAdvertiserId,\n                                         targetAdvertiserOfferId,\n                                         targetAdvertiserPublisherId,\n                                         shouldRedirect)   Start an app-to-app tracking session on the MAT server.   sdkbox.PluginTune:applicationDidOpenURL(urlString, sourceApplication)   Record the URL and Source when an application is opened via a URL scheme.\nThis typically occurs during OAUTH or when an app exits and is returned\nto via a URL. The data will be sent to the HasOffers server when the next\nmeasureXXX method is called so that a Re-Engagement can be recorded.   Listeners  onEnqueuedAction(referenceId)  onSucceed(data)  onFailed(errorString)  onReceiveDeeplink(deeplink, timeout)  onMobileAppTrackerDidFailDeeplinkWithError(errorString)", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Tune  bundle into your Xcode project, check  Copy items if needed  when adding frameworks:   sdkbox.framework  PluginTune.framework  MobileAppTracker.framework   The above frameworks depend upon other frameworks. You also need to add the\nfollowing system frameworks, if you don't already have them:   CoreTelephony.framework  Security.framework  SystemConfiguration.framework  AdSupport.framework  iAd.framework  MobileCoreServices.framework  StoreKit.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/tune/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   PluginTune.jar  sdkbox.jar  MobileAppTracker-3.9.jar   Copy the  plugintune  and  sdkbox  directories from  plugin/android/jni  to your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE /   To enable  hardware acceleration  in your  application tag . This tag is\noptional on newer sdk versions and doesn't work on version 2.3.3.  android:hardwareAccelerated= true  /   It is also necessary to create an  application tag :  application ...  \n     receiver android:name= com.mobileapptracker.Tracker \n         intent-filter \n             action android:name= com.android.vending.INSTALL_REFERRER  / \n         /intent-filter \n     /receiver \n     meta-data android:name= com.google.android.gms.version \n               android:value= @integer/google_play_services_version  /  /application   Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginTune\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./plugintune)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:      APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/tune/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -keep public class com.mobileapptracker.** {\n    public *;\n}\n\n-keep class * extends java.util.ListResourceBundle {\n    protected Object[][] getContents();\n}\n\n-keep public class com.google.android.gms.common.internal.safeparcel.SafeParcelable {\n    public static final *** NULL;\n}\n\n-keepnames @com.google.android.gms.common.annotation.KeepName class *\n-keepclassmembernames class * {\n    @com.google.android.gms.common.annotation.KeepName *;\n}\n\n-keepnames class * implements android.os.Parcelable {\n    public static final ** CREATOR;\n}  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.  Modify  project.properties  An  Android Library Reference  for  Google Play Services  is required. The\npath will be different depending upon your setup. Also, this is an additional\ndownload that does not come as part of a standard install. To install use the sdk installer  and choose  extras- google play services . Here is an example of what this line could look like:  android.library.reference.1=\n../android/sdk.latest/extras/google/google_play_services/libproject/\ngoogle-play-services_lib  Note:  if you already have an  android.library.reference.1  you can add\nanother by incrementing the number as  android.library.reference.2 , etc.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. Example:\n\n\n#include \nPluginVungle/PluginVungle.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox::PluginVungle::show(\nvideo\n);\nsdkbox::PluginVungle::show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can pause or resume\nyour game.\n\n\n\n\nAllow your class to extend \nsdkbox::VungleListener\n\n\n\n\n#include \nPluginVungle/PluginVungle.h\n\nclass MyClass : public sdkbox::VungleListener, public Ref\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleAdViewed(bool isComplete);\n  void onVungleAdReward(const std::string\n name) {\n        cocos2d::Director::getInstance()-\ngetScheduler()-\nperformFunctionInCocosThread([=](){\n            //change ui\n        })\n    }\n}\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\n\n\nCreate a \nlistener\n that handles callbacks (optional):\n\n\n\n\nsdkbox::PluginVungle::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nstatic void setListener ( VungleListener * listener ) ;\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nstatic VungleListener * getListener ( ) ;\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nstatic void setDebug ( bool enable ) ;\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nstatic bool isCacheAvailable ( ) ;\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nvoid onVungleCacheAvailable ( );\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nvoid onVungleStarted ( );\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nvoid onVungleFinished ( );\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nvoid onVungleAdViewed ( bool isComplete );\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nvoid onVungleAdReward( std::string adName );\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\n\n\nCopy the \npluginvungle\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#usage", 
            "text": "Initialize Vungle  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers. Example:  #include  PluginVungle/PluginVungle.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox::PluginVungle::show( video );\nsdkbox::PluginVungle::show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can pause or resume\nyour game.   Allow your class to extend  sdkbox::VungleListener   #include  PluginVungle/PluginVungle.h \nclass MyClass : public sdkbox::VungleListener, public Ref\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleAdViewed(bool isComplete);\n  void onVungleAdReward(const std::string  name) {\n        cocos2d::Director::getInstance()- getScheduler()- performFunctionInCocosThread([=](){\n            //change ui\n        })\n    }\n}  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.   Create a  listener  that handles callbacks (optional):   sdkbox::PluginVungle::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   show ad with a provided name.   static void setListener ( VungleListener * listener ) ;   set provided listener.   static VungleListener * getListener ( ) ;   get provided listener.   static void removeListener ( ) ;   remove listeners.   static void setDebug ( bool enable ) ;   enable or disable debug mode.   static bool isCacheAvailable ( ) ;   is there a cached video available.   static void setUserID ( const std::string   userID ) ;   sets the userID for rewarded ads.   Listeners  void onVungleCacheAvailable ( );   ad cache is available.   void onVungleStarted ( );   Vungle is running and available.   void onVungleFinished ( );   Vungle is not running/has stopped.   void onVungleAdViewed ( bool isComplete );   Vungle ad has been viewed.   void onVungleAdReward( std::string adName );   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginvungle  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/vungle/v3-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v3-js/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Vungle JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginVungleJS.hpp\n\n#include \nPluginVungleJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginVungleJS);\nsc-\naddRegisterCallback(register_all_PluginVungleJS_helper);\n\n\n\n\nInitialize Vungle\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle.show(\nvideo\n);\nsdkbox.PluginVungle.show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log(\nonVungleCacheAvailable\n) },\n    onVungleStarted : function() { cc.log(\nonVungleStarted\n) },\n    onVungleFinished : function() { cc.log(\nonVungleFinished\n) },\n    onVungleAdViewed : function(isComplete) { cc.log(\nonVungleAdViewed\n + isComplete) },\n    onVungleAdReward : function(name) { cc.log(\nreward received:\n + name) }\n})\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle.show(name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle.setDebug(enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle.isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle.setUserID(userID);\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable();\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted();\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished();\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed(isComplete);\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nonVungleAdReward(adName);\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\n\n\nCopy the \npluginvungle\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Vungle JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginVungleJS.hpp \n#include  PluginVungleJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginVungleJS);\nsc- addRegisterCallback(register_all_PluginVungleJS_helper);  Initialize Vungle  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginVungle.init();  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle.show( video );\nsdkbox.PluginVungle.show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log( onVungleCacheAvailable ) },\n    onVungleStarted : function() { cc.log( onVungleStarted ) },\n    onVungleFinished : function() { cc.log( onVungleFinished ) },\n    onVungleAdViewed : function(isComplete) { cc.log( onVungleAdViewed  + isComplete) },\n    onVungleAdReward : function(name) { cc.log( reward received:  + name) }\n})  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle.init();   initialize the plugin instance.   sdkbox.PluginVungle.show(name);   show ad with a provided name.   sdkbox.PluginVungle.setDebug(enable);   enable or disable debug mode.   sdkbox.PluginVungle.isCacheAvailable();   is there a cached video available.   sdkbox.PluginVungle.setUserID(userID);   sets the userID for rewarded ads.   Listeners  onVungleCacheAvailable();   ad cache is available.   onVungleStarted();   Vungle is running and available.   onVungleFinished();   Vungle is not running/has stopped.   onVungleAdViewed(isComplete);   Vungle ad has been viewed.   onVungleAdReward(adName);   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v3-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginvungle  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/vungle/v3-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify Lua Code\n\n\nModify \n./frameworks/runtime-src/Classes/lua_module_register.h\n to include the necessary headers and calls to register \nVungle\n with Lua. Note this takes a parameter of \nlua_State*\n:\n\n\n#include \nPluginVungleLua.hpp\n\n#include \nPluginVungleLuaHelper.h\n\n\n\n\n\nstatic int lua_module_register(lua_State* L)\n{\n  register_all_PluginVungleLua(L);\n  register_all_PluginVungleLua_helper(L);\n}\n\n\n\n\nInitialize Vungle\n\n\n\n\nmodify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\n\n\nsdkbox.PluginVungle:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle:show(\nvideo\n)\nsdkbox.PluginVungle:show(\nreward\n)\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle:setListener(function(name, args)\n    if \nonVungleCacheAvailable\n == name then\n        print(\nonVungleCacheAvailable\n)\n    elseif \nonVungleStarted\n ==  name then\n        print(\nonVungleStarted\n)\n    elseif \nonVungleFinished\n ==  name then\n        print(\nonVungleFinished\n)\n    elseif \nonVungleAdViewed\n ==  name then\n        print(\nonVungleAdViewed:\n, args)\n    elseif \nonVungleAdReward\n ==  name then\n        print(\nonVungleAdReward:\n, args)\n    end\nend)\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle:show(name)\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle:setDebug(enable)\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle:isCacheAvailable()\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle:setUserID(userID)\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable()\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted()\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished()\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed(isComplete)\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nonVungleAdReward(adName);\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\n\n\nIf you're using cocos2d-x from source copy the \njar\n files to:\n\n\n\n\ncocos2d/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using cocos2d-js or lua copy the \njar\n files to:\n\n\n\n\nframeworks/cocos2d-x/cocos/platform/android/java/libs\n\n\n\n\n\n\nIf you're using prebuilt cocos2d-x copy the \njar\n files to:\n\n\n\n\nproj.android/libs\n\n\n\n\nCopy the \npluginvungle\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nNote:\n It is important to make sure these statements are above the existing \n$(call import-module,./prebuilt-mk)\n statement, if you are using the pre-built libraries.\n\n\nModify \nApplication.mk\n (Cocos2d-x v3.0 to v3.2 only)\n\n\nEdit \nproj.android/jni/Application.mk\n to make sure \nAPP_STL\n is defined\ncorrectly. If \nApplication.mk\n contains \nAPP_STL := c++_static\n, it should be\nchanged to:\n\n\nAPP_STL := gnustl_static\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \nCocos2dxActivity.java\n\n\n\n\n\n\nIf you're using cocos2d-x from source, assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java\n\n\n\n\n\n\nIf you're using the prebuilt cocos2d-x libraries assuming you are in the \nproj.android\n directory, \nCocos2dxActivity.java\n is located:\n\n\n./src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nNote:\n When using Cocos2d-x from source, different versions have \nCocos2dxActivity.java\n in a different location. One way to find the location is to look in \nproj.android/project.properties\n. Example:\n  \nandroid.library.reference.1=../../cocos2d-x/cocos/platform/android/java\n\n\nIn this case, \nCocos2dxActivity.java\n should be located at:\n\n\n../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java\n\n\n\n\n\n\nModify \nCocos2dxActivity.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify \nCocos2dxActivity.java\n to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. The placement of this call is important. It must be done after the call to \nonLoadNativeLibraries();\n. Example:\n\n\n\n\nonLoadNativeLibraries();\nSDKBox.init(this);\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#usage", 
            "text": "Modify Lua Code  Modify  ./frameworks/runtime-src/Classes/lua_module_register.h  to include the necessary headers and calls to register  Vungle  with Lua. Note this takes a parameter of  lua_State* :  #include  PluginVungleLua.hpp \n#include  PluginVungleLuaHelper.h   static int lua_module_register(lua_State* L)\n{\n  register_all_PluginVungleLua(L);\n  register_all_PluginVungleLua_helper(L);\n}  Initialize Vungle   modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.   sdkbox.PluginVungle:init()  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle:show( video )\nsdkbox.PluginVungle:show( reward )  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle:setListener(function(name, args)\n    if  onVungleCacheAvailable  == name then\n        print( onVungleCacheAvailable )\n    elseif  onVungleStarted  ==  name then\n        print( onVungleStarted )\n    elseif  onVungleFinished  ==  name then\n        print( onVungleFinished )\n    elseif  onVungleAdViewed  ==  name then\n        print( onVungleAdViewed: , args)\n    elseif  onVungleAdReward  ==  name then\n        print( onVungleAdReward: , args)\n    end\nend)  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle:init()   initialize the plugin instance.   sdkbox.PluginVungle:show(name)   show ad with a provided name.   sdkbox.PluginVungle:setDebug(enable)   enable or disable debug mode.   sdkbox.PluginVungle:isCacheAvailable()   is there a cached video available.   sdkbox.PluginVungle:setUserID(userID)   sets the userID for rewarded ads.   Listeners  onVungleCacheAvailable()   ad cache is available.   onVungleStarted()   Vungle is running and available.   onVungleFinished()   Vungle is not running/has stopped.   onVungleAdViewed(isComplete)   Vungle ad has been viewed.   onVungleAdReward(adName);   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar    If you're using cocos2d-x from source copy the  jar  files to:   cocos2d/cocos/platform/android/java/libs   If you're using cocos2d-js or lua copy the  jar  files to:   frameworks/cocos2d-x/cocos/platform/android/java/libs   If you're using prebuilt cocos2d-x copy the  jar  files to:   proj.android/libs  Copy the  pluginvungle  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Note:  It is important to make sure these statements are above the existing  $(call import-module,./prebuilt-mk)  statement, if you are using the pre-built libraries.  Modify  Application.mk  (Cocos2d-x v3.0 to v3.2 only)  Edit  proj.android/jni/Application.mk  to make sure  APP_STL  is defined\ncorrectly. If  Application.mk  contains  APP_STL := c++_static , it should be\nchanged to:  APP_STL := gnustl_static  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  Cocos2dxActivity.java    If you're using cocos2d-x from source, assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/\nlib/Cocos2dxActivity.java    If you're using the prebuilt cocos2d-x libraries assuming you are in the  proj.android  directory,  Cocos2dxActivity.java  is located:  ./src/org/cocos2dx/lib/Cocos2dxActivity.java    Note:  When using Cocos2d-x from source, different versions have  Cocos2dxActivity.java  in a different location. One way to find the location is to look in  proj.android/project.properties . Example:\n   android.library.reference.1=../../cocos2d-x/cocos/platform/android/java  In this case,  Cocos2dxActivity.java  should be located at:  ../../cocos2d-x/cocos/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java   Modify  Cocos2dxActivity.java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify  Cocos2dxActivity.java  to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . The placement of this call is important. It must be done after the call to  onLoadNativeLibraries(); . Example:   onLoadNativeLibraries();\nSDKBox.init(this);    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/vungle/v3-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nInitialize Vungle\n\n\nInitialize the plugin where appropriate in your code. We recommend to do this in the \nAppDelegate::applicationDidFinishLaunching()\n or \nAppController:didFinishLaunchingWithOptions()\n. Make sure to include the appropriate headers. Example:\n\n\n#include \nPluginVungle/PluginVungle.h\n\nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox::PluginVungle::show(\nvideo\n);\nsdkbox::PluginVungle::show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can pause or resume\nyour game.\n\n\n\n\nAllow your class to extend \nsdkbox::VungleListener\n\n\n\n\n#include \nPluginVungle/PluginVungle.h\n\nclass MyClass : public sdkbox::VungleListener, public Ref\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleAdViewed(bool isComplete);\n  void onVungleAdReward(const std::string\n name) {\n        cocos2d::Director::getInstance()-\ngetScheduler()-\nperformFunctionInCocosThread([=](){\n            //change ui\n        })\n    }\n}\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\n\n\nCreate a \nlistener\n that handles callbacks (optional):\n\n\n\n\nsdkbox::PluginVungle::setListener(this);\n\n\n\n\nAPI Reference\n\n\nMethods\n\n\nstatic void init ( ) ;\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nstatic void show ( const std::string \n name ) ;\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nstatic void setListener ( VungleListener * listener ) ;\n\n\n\n\n\n\nset provided listener.\n\n\n\n\nstatic VungleListener * getListener ( ) ;\n\n\n\n\n\n\nget provided listener.\n\n\n\n\nstatic void removeListener ( ) ;\n\n\n\n\n\n\nremove listeners.\n\n\n\n\nstatic void setDebug ( bool enable ) ;\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nstatic bool isCacheAvailable ( ) ;\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nstatic void setUserID ( const std::string \n userID ) ;\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nvoid onVungleCacheAvailable ( );\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nvoid onVungleStarted ( );\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nvoid onVungleFinished ( );\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nvoid onVungleAdViewed ( bool isComplete );\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nvoid onVungleAdReward( std::string adName );\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\nCopy the \npluginvungle\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "c++"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#usage", 
            "text": "Initialize Vungle  Initialize the plugin where appropriate in your code. We recommend to do this in the  AppDelegate::applicationDidFinishLaunching()  or  AppController:didFinishLaunchingWithOptions() . Make sure to include the appropriate headers. Example:  #include  PluginVungle/PluginVungle.h \nAppDelegate::applicationDidFinishLaunching()\n{\n     sdkbox::PluginVungle::init();\n}  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox::PluginVungle::show( video );\nsdkbox::PluginVungle::show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can pause or resume\nyour game.   Allow your class to extend  sdkbox::VungleListener   #include  PluginVungle/PluginVungle.h \nclass MyClass : public sdkbox::VungleListener, public Ref\n{\nprivate:\n  void onVungleCacheAvailable();\n  void onVungleStarted();\n  void onVungleFinished();\n  void onVungleAdViewed(bool isComplete);\n  void onVungleAdReward(const std::string  name) {\n        cocos2d::Director::getInstance()- getScheduler()- performFunctionInCocosThread([=](){\n            //change ui\n        })\n    }\n}  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.   Create a  listener  that handles callbacks (optional):   sdkbox::PluginVungle::setListener(this);", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#api-reference", 
            "text": "Methods  static void init ( ) ;   initialize the plugin instance.   static void show ( const std::string   name ) ;   show ad with a provided name.   static void setListener ( VungleListener * listener ) ;   set provided listener.   static VungleListener * getListener ( ) ;   get provided listener.   static void removeListener ( ) ;   remove listeners.   static void setDebug ( bool enable ) ;   enable or disable debug mode.   static bool isCacheAvailable ( ) ;   is there a cached video available.   static void setUserID ( const std::string   userID ) ;   sets the userID for rewarded ads.   Listeners  void onVungleCacheAvailable ( );   ad cache is available.   void onVungleStarted ( );   Vungle is running and available.   void onVungleFinished ( );   Vungle is not running/has stopped.   void onVungleAdViewed ( bool isComplete );   Vungle ad has been viewed.   void onVungleAdReward( std::string adName );   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar   Copy the  pluginvungle  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/vungle/v2-cpp/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v2-js/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nRegister Javascript Functions\n\n\nYou need to register all the Vungle JS functions with cocos2d-x before using them.\n\n\nTo do this:\n* Modify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n to include the following headers:\n\n\n#include \nPluginVungleJS.hpp\n\n#include \nPluginVungleJSHelper.h\n\n\n\n\n\n\n\nModify \n./frameworks/runtime-src/Classes/AppDelegate.cpp\n make sure to call:\n\n\n\n\nsc-\naddRegisterCallback(register_all_PluginVungleJS);\nsc-\naddRegisterCallback(register_all_PluginVungleJS_helper);\n\n\n\n\nInitialize Vungle\n\n\nInitialize the plugin by calling \ninit()\n where appropriate in your code. We\nrecommend to do this in the \napp.js\n. Example:\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle.show(\nvideo\n);\nsdkbox.PluginVungle.show(\nreward\n);\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log(\nonVungleCacheAvailable\n) },\n    onVungleStarted : function() { cc.log(\nonVungleStarted\n) },\n    onVungleFinished : function() { cc.log(\nonVungleFinished\n) },\n    onVungleAdViewed : function(isComplete) { cc.log(\nonVungleAdViewed\n + isComplete) },\n    onVungleAdReward : function(name) { cc.log(\nreward received:\n + name) }\n})\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle.init();\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle.show(name);\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle.setDebug(enable);\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle.isCacheAvailable();\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle.setUserID(userID);\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable();\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted();\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished();\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed(isComplete);\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nonVungleAdReward(adName);\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\nCopy the \npluginvungle\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/jsbindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "js"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#usage", 
            "text": "Register Javascript Functions  You need to register all the Vungle JS functions with cocos2d-x before using them.  To do this:\n* Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  to include the following headers:  #include  PluginVungleJS.hpp \n#include  PluginVungleJSHelper.h    Modify  ./frameworks/runtime-src/Classes/AppDelegate.cpp  make sure to call:   sc- addRegisterCallback(register_all_PluginVungleJS);\nsc- addRegisterCallback(register_all_PluginVungleJS_helper);  Initialize Vungle  Initialize the plugin by calling  init()  where appropriate in your code. We\nrecommend to do this in the  app.js . Example:  sdkbox.PluginVungle.init();  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle.show( video );\nsdkbox.PluginVungle.show( reward );  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle.setListener({\n    onVungleCacheAvailable : function() { cc.log( onVungleCacheAvailable ) },\n    onVungleStarted : function() { cc.log( onVungleStarted ) },\n    onVungleFinished : function() { cc.log( onVungleFinished ) },\n    onVungleAdViewed : function(isComplete) { cc.log( onVungleAdViewed  + isComplete) },\n    onVungleAdReward : function(name) { cc.log( reward received:  + name) }\n})  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle.init();   initialize the plugin instance.   sdkbox.PluginVungle.show(name);   show ad with a provided name.   sdkbox.PluginVungle.setDebug(enable);   enable or disable debug mode.   sdkbox.PluginVungle.isCacheAvailable();   is there a cached video available.   sdkbox.PluginVungle.setUserID(userID);   sets the userID for rewarded ads.   Listeners  onVungleCacheAvailable();   ad cache is available.   onVungleStarted();   Vungle is running and available.   onVungleFinished();   Vungle is not running/has stopped.   onVungleAdViewed(isComplete);   Vungle ad has been viewed.   onVungleAdReward(adName);   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework   Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v2-js/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar   Copy the  pluginvungle  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/jsbindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                  ../../Classes/AppDelegate.cpp \\\n                  ../../Classes/HelloWorldScene.cpp \\\n                                    ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/vungle/v2-js/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/", 
            "text": "Vungle\n\n\nIntegration\n\n\nOpen a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.\n\n\n$ sdkbox import vungle\n\n\n\n\nConfiguration\n\n\nSDKBOX Installer will automatically inject a sample configuration to your \nsdkbox_config.json\n, that you have to modify it before you can use it for your own app\n\n\nHere is an example of the Vungle configuration, you need to replace \nvungle id\n  with your specific \nVungle\n Publisher account information.\nHere is an example adding \nVungle\n to iOS:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n\n        },\n        \nreward\n:{\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nAdding \nVungle\n to Android is a bit different as it supports \nsound\n and\n\nbackbutton\n settings. Here is an example adding \nVungle\n to Android:\n\n\nVungle\n :\n{\n    \nid\n:\nvungle id\n,\n    \nads\n:{\n        \nvideo\n:{\n            \nsound\n : true,\n            \nbackbutton\n : true\n        },\n        \nreward\n:{\n            \nsound\n : false,\n            \nbackbutton\n : false,\n            \nincentivized\n : true\n        }\n    }\n}\n\n\n\n\nUsage\n\n\nModify \nAppDelegate.cpp\n\n\n\n\nModify \nClasses/AppDelegate.cpp\n to include the following headers:\n\n\n\n\n#include \nPluginVungleLua.hpp\n\n#include \nPluginVungleLuaHelper.h\n\n\n\n\n\n\n\nSecond, We need to register the plugin with Lua. This is done by making a call to \nregister_all_PluginVungleLua(\nlua_State*\n);\n.\n\n\n\n\nNote:\n It is important to note that this call must be made after \nlua_State *tolua_s = pStack-\ngetLuaState();\n and before \ntolua_extensions_ccb_open(tolua_s);\n.\n\n\nHere is an example of what this might look like for you:\n\n\n\n#include \nPluginVungleLua.hpp\n\n#include \nPluginVungleLuaHelper.h\n\nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack-\ngetLuaState();\n    register_all_PluginVungleLua(tolua_s);\n    register_all_PluginVungleLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}\n\n\n\n\nInitialize Vungle\n\n\nModify your Lua code to \ninit()\n the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.\n\n\nsdkbox.PluginVungle:init()\n\n\n\n\nShowing Ads\n\n\nDisplay an ad where ever you want from your code, either \nvideo\n or \nreward\n:\n\n\nsdkbox.PluginVungle:show(\nvideo\n)\nsdkbox.PluginVungle:show(\nreward\n)\n\n\n\n\nCatch Vungle events (optional)\n\n\nThis allows you to catch the \nVungle\n events so that you can perform operations such as providing player rewards for watching the video.\n\n\n\n\nCreate a listener (demonstrated by logging events):\n\n\n\n\nsdkbox.PluginVungle:setListener(function(name, args)\n    if \nonVungleCacheAvailable\n == name then\n        print(\nonVungleCacheAvailable\n)\n    elseif \nonVungleStarted\n ==  name then\n        print(\nonVungleStarted\n)\n    elseif \nonVungleFinished\n ==  name then\n        print(\nonVungleFinished\n)\n    elseif \nonVungleAdViewed\n ==  name then\n        print(\nonVungleAdViewed:\n, args)\n    elseif \nonVungleAdReward\n ==  name then\n        print(\nonVungleAdReward:\n, args)\n    end\nend)\n\n\n\n\nNote:\n DONOT change your game uiNode in the \nonVungleAdViewed\n or \nonVungleAdReward\n immediately, becase the cocos opengl is disable when \nVungle\n send \nonVungleAdViewed\n or \nonVungleAdReward\n. use \nschedule\n delay change ui.\n\n\nAPI Reference\n\n\nMethods\n\n\nsdkbox.PluginVungle:init()\n\n\n\n\n\n\ninitialize the plugin instance.\n\n\n\n\nsdkbox.PluginVungle:show(name)\n\n\n\n\n\n\nshow ad with a provided name.\n\n\n\n\nsdkbox.PluginVungle:setDebug(enable)\n\n\n\n\n\n\nenable or disable debug mode.\n\n\n\n\nsdkbox.PluginVungle:isCacheAvailable()\n\n\n\n\n\n\nis there a cached video available.\n\n\n\n\nsdkbox.PluginVungle:setUserID(userID)\n\n\n\n\n\n\nsets the userID for rewarded ads.\n\n\n\n\nListeners\n\n\nonVungleCacheAvailable()\n\n\n\n\n\n\nad cache is available.\n\n\n\n\nonVungleStarted()\n\n\n\n\n\n\nVungle is running and available.\n\n\n\n\nonVungleFinished()\n\n\n\n\n\n\nVungle is not running/has stopped.\n\n\n\n\nonVungleAdViewed(isComplete)\n\n\n\n\n\n\nVungle ad has been viewed.\n\n\n\n\nonVungleAdReward(adName);\n\n\n\n\n\n\nfind out which video is reward\n\n\n\n\nManual Integration\n\n\nIf the \nSDKBOX Installer\n \nfails\n to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please \ndo not\n complete anymore of this document. It is not necessary.\n\n\nThese steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.\n\n\nManual Integration For iOS\n\n\nDrag and drop the following frameworks from the \nplugins/ios\n folder of the \nVungle\n bundle into your Xcode project, check \nCopy items if needed\n when\nadding frameworks:\n\n\n\n\nsdkbox.framework\n\n\nPluginVungle.framework\n\n\nVungleSDK.framework\n\n\n\n\nThe above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:\n\n\n\n\nAdSupport.framework\n\n\nAudioToolbox.framework\n\n\nAVFoundation.framework\n\n\nCFNetwork.framework\n\n\nCoreGraphics.framework\n\n\nCoreMedia.framework\n\n\nFoundation.framework\n\n\nlibz.dylib\n\n\nlibsqlite3.dylib\n\n\nMediaPlayer.framework\n\n\nQuartzCore.framework\n\n\nSecurity.framework\n\n\nStoreKit.framework\n\n\nSystemConfiguration.framework\n\n\nUIKit.framework\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using \nFile -\n Add files to...\n.\n\n\nManual Integration For Android.\n\n\nCopy Files\n\n\nCopy the following \njar\n files from \nplugin/android/libs\n folder of this\nbundle into your project\u2019s \nproj.android/libs\n folder.\n\n\n\n\nvungle-publisher-adaptive-id-3.3.0..jar\n\n\nPluginVungle.jar\n\n\nsdkbox.jar\n\n\nsupport-v4-18.0.0.jar\n\n\nnineoldandroids-2.4.0.jar\n\n\njavax.inject-1.jar\n\n\ndagger-1.2.2.jar\n\n\n\n\nCopy the \npluginvungle\n and \nsdkbox\n directories from \nplugin/android/jni\n\nto your \nproj.android/jni/\n directory. If the \nsdkbox\n folder exists, it's ok to overwrite it.\n\n\nEdit \nAndroidManifest.xml\n\n\nInclude the following permissions above the \napplication tag\n:\n\n\nuses-permission android:name=\nandroid.permission.INTERNET\n /\n\n\nuses-permission android:name=\nandroid.permission.WRITE_EXTERNAL_STORAGE\n /\n\n\nuses-permission android:name=\nandroid.permission.ACCESS_NETWORK_STATE\n /\n\n\n\n\n\nCopy and paste the following activity definitions just before the end of the\n\napplication tags\n, near the bottom.\n\n\nactivity\n  android:name=\ncom.vungle.publisher.FullScreenAdActivity\n\n  android:configChanges=\nkeyboardHidden|orientation\n\n  android:theme=\n@android:style/Theme.NoTitleBar.Fullscreen\n/\n\n\n\n\n\nNote:\n if your application targets below \nAPI 13\n, you will likely need to remove the \nconfigChanges\n property of the above \nactivity tags\n.\n\n\nEdit \nAndroid.mk\n\n\nEdit \nproj.android/jni/Android.mk\n to:\n\n\nAdd additional requirements to \nLOCAL_WHOLE_STATIC_LIBRARIES\n:\n\n\nLOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox\n\n\n\n\nAdd a call to:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n\n\n\n\nbefore any \nimport-module\n statements.\n\n\nAdd additional \nimport-module\n statements at the end:\n\n\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nThis means that your ordering should look similar to this:\n\n\n$(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)\n\n\n\n\nEdit \nAplication.mk\n\n\nEdit \nproj.android/jni/Application.mk\n to:\n\n\nAdd \nAPP_PATFORM\n version requirements:\n\n\nAPP_PLATFORM := android-9\n\n\n\n\nCopy all source and header files from \nplugin/luabindings/\n to your projects \nClasses\n folder.\n\n\nAdd all \n.cpp\n files, that you just copied, to \nAndroid.mk\n in the \nLOCAL_SRC_FILES\n section. Example\n\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp\n\n\n\n\nModify \n.java\n\n\n\n\nModify \nproj.android/src/\n/\n.java\n to add the following imports:\n\n\n\n\nimport android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;\n\n\n\n\n\n\nSecond, modify the class to edit the \nonCreate(final Bundle savedInstanceState)\n function to add a call to \nSDKBox.init(this);\n. Example of what this might look like for you:\n\n\n\n\nprotected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}\n\n\n\n\n\n\n\n\nLast, we need to insert the proper \noverrides\n code. There are a few rules here.\n\n\n\n\n\n\nIf the method listed has not been defined, \nadd it\n.\n\n\n\n\n\n\nIf the method listed has been defined, add the calls to \nSDKBox\n in the \nsame\n existing function.\n\n\n\n\n\n\n\n\n\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }\n\n\n\n\nProguard (optional)\n\n\n\n\nEdit \nproject.properties\n  to specify a \nProguard\n configuration file. Example:\n\n\n\n\nproguard.config=proguard.cfg\n\n\n\n\n\n\nEdit the file you specified to include the following:\n\n\n\n\n-dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*\n\n\n\n\nNote:\n Proguard only works with \nRelease\n builds (i.e \ncocos run -m release\n) debug builds do not invoke Proguard rules.", 
            "title": "lua"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#integration", 
            "text": "Open a terminal and use the following command to install the SDKBOX Vungle plugin. Make sure you setup SDKBOX installer correctly.  $ sdkbox import vungle", 
            "title": "Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#configuration", 
            "text": "SDKBOX Installer will automatically inject a sample configuration to your  sdkbox_config.json , that you have to modify it before you can use it for your own app  Here is an example of the Vungle configuration, you need to replace  vungle id   with your specific  Vungle  Publisher account information.\nHere is an example adding  Vungle  to iOS:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n\n        },\n         reward :{\n             incentivized  : true\n        }\n    }\n}  Adding  Vungle  to Android is a bit different as it supports  sound  and backbutton  settings. Here is an example adding  Vungle  to Android:  Vungle  :\n{\n     id : vungle id ,\n     ads :{\n         video :{\n             sound  : true,\n             backbutton  : true\n        },\n         reward :{\n             sound  : false,\n             backbutton  : false,\n             incentivized  : true\n        }\n    }\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#usage", 
            "text": "Modify  AppDelegate.cpp   Modify  Classes/AppDelegate.cpp  to include the following headers:   #include  PluginVungleLua.hpp \n#include  PluginVungleLuaHelper.h    Second, We need to register the plugin with Lua. This is done by making a call to  register_all_PluginVungleLua( lua_State* ); .   Note:  It is important to note that this call must be made after  lua_State *tolua_s = pStack- getLuaState();  and before  tolua_extensions_ccb_open(tolua_s); .  Here is an example of what this might look like for you:  #include  PluginVungleLua.hpp \n#include  PluginVungleLuaHelper.h \nbool AppDelegate::applicationDidFinishLaunching()\n{\n    lua_State *tolua_s = pStack- getLuaState();\n    register_all_PluginVungleLua(tolua_s);\n    register_all_PluginVungleLua_helper(tolua_s);\n    tolua_extensions_ccb_open(tolua_s);\n}  Initialize Vungle  Modify your Lua code to  init()  the plugin. This can be done anyplace, however it must be done before trying to use the plugin's features.  sdkbox.PluginVungle:init()  Showing Ads  Display an ad where ever you want from your code, either  video  or  reward :  sdkbox.PluginVungle:show( video )\nsdkbox.PluginVungle:show( reward )  Catch Vungle events (optional)  This allows you to catch the  Vungle  events so that you can perform operations such as providing player rewards for watching the video.   Create a listener (demonstrated by logging events):   sdkbox.PluginVungle:setListener(function(name, args)\n    if  onVungleCacheAvailable  == name then\n        print( onVungleCacheAvailable )\n    elseif  onVungleStarted  ==  name then\n        print( onVungleStarted )\n    elseif  onVungleFinished  ==  name then\n        print( onVungleFinished )\n    elseif  onVungleAdViewed  ==  name then\n        print( onVungleAdViewed: , args)\n    elseif  onVungleAdReward  ==  name then\n        print( onVungleAdReward: , args)\n    end\nend)  Note:  DONOT change your game uiNode in the  onVungleAdViewed  or  onVungleAdReward  immediately, becase the cocos opengl is disable when  Vungle  send  onVungleAdViewed  or  onVungleAdReward . use  schedule  delay change ui.", 
            "title": "Usage"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#api-reference", 
            "text": "Methods  sdkbox.PluginVungle:init()   initialize the plugin instance.   sdkbox.PluginVungle:show(name)   show ad with a provided name.   sdkbox.PluginVungle:setDebug(enable)   enable or disable debug mode.   sdkbox.PluginVungle:isCacheAvailable()   is there a cached video available.   sdkbox.PluginVungle:setUserID(userID)   sets the userID for rewarded ads.   Listeners  onVungleCacheAvailable()   ad cache is available.   onVungleStarted()   Vungle is running and available.   onVungleFinished()   Vungle is not running/has stopped.   onVungleAdViewed(isComplete)   Vungle ad has been viewed.   onVungleAdReward(adName);   find out which video is reward", 
            "title": "API Reference"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#manual-integration", 
            "text": "If the  SDKBOX Installer   fails  to complete successfully, it is possible to integrate SDKBOX manually. If the installer complete successfully, please  do not  complete anymore of this document. It is not necessary.  These steps are listed last in this document on purpose as they are seldom needed. If you find yourself using these steps, please, after completing, double back and re-read the steps above for other integration items.", 
            "title": "Manual Integration"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#manual-integration-for-ios", 
            "text": "Drag and drop the following frameworks from the  plugins/ios  folder of the  Vungle  bundle into your Xcode project, check  Copy items if needed  when\nadding frameworks:   sdkbox.framework  PluginVungle.framework  VungleSDK.framework   The above frameworks depend upon a large number of other frameworks. You also need to add the following system frameworks, if you don't already have them:   AdSupport.framework  AudioToolbox.framework  AVFoundation.framework  CFNetwork.framework  CoreGraphics.framework  CoreMedia.framework  Foundation.framework  libz.dylib  libsqlite3.dylib  MediaPlayer.framework  QuartzCore.framework  Security.framework  StoreKit.framework  SystemConfiguration.framework  UIKit.framework   Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add these same files, that you just copied, to Xcode by either dragging and dropping them into Xcode or by using  File -  Add files to... .", 
            "title": "Manual Integration For iOS"
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#manual-integration-for-android", 
            "text": "Copy Files  Copy the following  jar  files from  plugin/android/libs  folder of this\nbundle into your project\u2019s  proj.android/libs  folder.   vungle-publisher-adaptive-id-3.3.0..jar  PluginVungle.jar  sdkbox.jar  support-v4-18.0.0.jar  nineoldandroids-2.4.0.jar  javax.inject-1.jar  dagger-1.2.2.jar   Copy the  pluginvungle  and  sdkbox  directories from  plugin/android/jni \nto your  proj.android/jni/  directory. If the  sdkbox  folder exists, it's ok to overwrite it.  Edit  AndroidManifest.xml  Include the following permissions above the  application tag :  uses-permission android:name= android.permission.INTERNET  /  uses-permission android:name= android.permission.WRITE_EXTERNAL_STORAGE  /  uses-permission android:name= android.permission.ACCESS_NETWORK_STATE  /   Copy and paste the following activity definitions just before the end of the application tags , near the bottom.  activity\n  android:name= com.vungle.publisher.FullScreenAdActivity \n  android:configChanges= keyboardHidden|orientation \n  android:theme= @android:style/Theme.NoTitleBar.Fullscreen /   Note:  if your application targets below  API 13 , you will likely need to remove the  configChanges  property of the above  activity tags .  Edit  Android.mk  Edit  proj.android/jni/Android.mk  to:  Add additional requirements to  LOCAL_WHOLE_STATIC_LIBRARIES :  LOCAL_WHOLE_STATIC_LIBRARIES += android_native_app_glue\nLOCAL_LDLIBS += -landroid\nLOCAL_LDLIBS += -llog\nLOCAL_WHOLE_STATIC_LIBRARIES += PluginVungle\nLOCAL_WHOLE_STATIC_LIBRARIES += sdkbox  Add a call to:  $(call import-add-path,$(LOCAL_PATH))  before any  import-module  statements.  Add additional  import-module  statements at the end:  $(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  This means that your ordering should look similar to this:  $(call import-add-path,$(LOCAL_PATH))\n$(call import-module, ./sdkbox)\n$(call import-module, ./pluginvungle)  Edit  Aplication.mk  Edit  proj.android/jni/Application.mk  to:  Add  APP_PATFORM  version requirements:  APP_PLATFORM := android-9  Copy all source and header files from  plugin/luabindings/  to your projects  Classes  folder.  Add all  .cpp  files, that you just copied, to  Android.mk  in the  LOCAL_SRC_FILES  section. Example  LOCAL_SRC_FILES := hellocpp/main.cpp \\\n                ../../Classes/AppDelegate.cpp \\\n                ../../Classes/HelloWorldScene.cpp \\\n                                ../../Classes/NewSourceFile.cpp  Modify  .java   Modify  proj.android/src/ / .java  to add the following imports:   import android.content.Intent;\nimport com.sdkbox.plugin.SDKBox;   Second, modify the class to edit the  onCreate(final Bundle savedInstanceState)  function to add a call to  SDKBox.init(this); . Example of what this might look like for you:   protected void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  SDKBox.init(this);\n}    Last, we need to insert the proper  overrides  code. There are a few rules here.    If the method listed has not been defined,  add it .    If the method listed has been defined, add the calls to  SDKBox  in the  same  existing function.          @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n          if(!SDKBox.onActivityResult(requestCode, resultCode, data)) {\n            super.onActivityResult(requestCode, resultCode, data);\n          }\n    }\n    @Override\n    protected void onStart() {\n          super.onStart();\n          SDKBox.onStart();\n    }\n    @Override\n    protected void onStop() {\n          super.onStop();\n          SDKBox.onStop();\n    }\n    @Override\n    protected void onResume() {\n          super.onResume();\n          SDKBox.onResume();\n    }\n    @Override\n    protected void onPause() {\n          super.onPause();\n          SDKBox.onPause();\n    }\n    @Override\n    public void onBackPressed() {\n          if(!SDKBox.onBackPressed()) {\n            super.onBackPressed();\n          }\n    }", 
            "title": "Manual Integration For Android."
        }, 
        {
            "location": "/plugins/vungle/v2-lua/#proguard-optional", 
            "text": "Edit  project.properties   to specify a  Proguard  configuration file. Example:   proguard.config=proguard.cfg   Edit the file you specified to include the following:   -dontwarn com.vungle.**\n-keep class com.vungle.** { public *; }\n-keep class javax.inject.*  Note:  Proguard only works with  Release  builds (i.e  cocos run -m release ) debug builds do not invoke Proguard rules.", 
            "title": "Proguard (optional)"
        }, 
        {
            "location": "/release-note/", 
            "text": "Release Notes\n\n\n\n\n1.2.5 Release Notes\n\n\nHighlight\n\n\n\n\nwe created Review\nRating plugin that developer can use to prompt user to rate their app\n\n\n\n\nBugfix\n\n\nFix Android-Studio integration\n\n\nFix vungle isCacheAvailable function\n\n\nFix AdColony failed to get reward\n\n\nPlugins can't work together\n\n\n1.2.4 Release Notes\n\n\nFix installer failed to find ANDROID_LIB directory issue\n\n\n1.2.3 Release Notes\n\n\nHighlight\n\n\n\n\n1.2.3 Fixes some major bugs for the plugins, we strongly recommend updating older versions to 1.2.3\n\n\n\n\nBugfix\n\n\nSometimes using callbacks will result in sprites show up as black, this is due to invoking cocos2d-x from a different thread\n\nIAP: item description can't contain newline\n\n\nFacebook: missing api function for js/lua binding\n\n\nInstaller: fix COCOS_CONSOLE_ROOT invalid error\n\n\nAdColony\n\n\nChangelog\n\n\n\n\nUpdate AdColony iOS SDK to 2.5.3\n\n\nregister_PluginAdColonyLua_helper\n -\n \nregister_all_PluginAdColonyLua_helper\n\n\n#include \"PluginAdColonyLuaHelper.hpp\"\n -\n \n#include \"PluginAdColonyLuaHelper.h\"\n\n\n#include \"PluginAdColonyJSHelper.hpp\"\n -\n \n#include \"PluginAdColonyJSHelper.h\"\n\n\n\n\nAgeCheq\n\n\nChangelog\n\n\n\n\nregister_PluginAgeCheqLua_helper\n -\n \nregister_all_PluginAgeCheqLua_helper\n\n\n#include \"PluginAgeCheqLuaHelper.hpp\"\n -\n \n#include \"PluginAgeCheqLuaHelper.h\"\n\n\n#include \"PluginAgeCheqJSHelper.hpp\"\n -\n \n#include \"PluginAgeCheqJSHelper.h\"\n\n\n\n\nChartboost\n\n\nChangelog\n\n\n\n\nregister_PluginChartboostJS_helper\n -\n \nregister_all_PluginChartboostJS_helper\n\n\nregister_PluginChartboostLua_helper\n -\n \nregister_all_PluginChartboostLua_helper\n\n\nUpdate Chartboost iOS SDK to 5.5.3\n\n\nUpdate Chartboost Android SDK to 5.5.3\n\n\n#include \"PluginChartboostLuaHelper.hpp\"\n -\n \n#include \"PluginChartboostLuaHelper.h\"\n\n\n\n\nFacebook\n\n\nChangelog\n\n\n\n\nregister_PluginFacebookJS_helper\n -\n \nregister_all_PluginFacebookJS_helper\n\n\nregister_PluginFacebookLua_helper\n -\n \nregister_all_PluginFacebookLua_helper\n\n\nUpdate Facebook iOS SDK to 4.5.1\n\n\nUpdate Facebook Android SDK to 4.5.1\n\n\n#include \"PluginFacebookLuaHelper.hpp\"\n -\n \n#include \"PluginFacebookLuaHelper.h\"\n\n\n\n\nFlurry Analytics\n\n\nChangelog\n\n\n\n\nregister_PluginFlurryAnalyticsJS_helper\n -\n \nregister_all_PluginFlurryAnalyticsJS_helper\n\n\nregister_PluginFlurryAnalyticsLua_helper\n -\n \nregister_all_PluginFlurryAnalyticsLua_helper\n\n\nUpdate Flurry iOS SDK to 6.7.0\n\n\nUpdate Flurry Android SDK to 5.6.0\n\n\n#include \"PluginFlurryAnalyticsLuaHelper.hpp\"\n -\n \n#include \"PluginFlurryAnalyticsLuaHelper.h\"\n\n\n\n\nGoogle Analytics\n\n\nChangelog\n\n\n\n\n#include \"PluginGoogleAnalyticsLuaHelper.hpp\"\n -\n \n#include \"PluginGoogleAnalyticsLuaHelper.h\"\n\n\n\n\nIAP\n\n\nChangelog\n\n\n\n\nregister_PluginIAPLua_helper\n -\n \nregister_all_PluginIAPLua_helper\n\n\n#include \"PluginIAPLuaHelper.hpp\"\n -\n \n#include \"PluginIAPLuaHelper.h\"\n\n\n#include \"PluginIAPJSHelper.hpp\"\n -\n \n#include \"PluginIAPJSHelper.h\"\n\n\n\n\nTune\n\n\n\n\nregister_PluginTuneJS_helper\n -\n \nregister_all_PluginTuneJS_helper\n\n\nregister_PluginTuneLua_helper\n -\n \nregister_all_PluginTuneLua_helper\n\n\nUpdate MobileAppTracker Android SDK to 3.10.1\n\n\n#include \"PluginTuneLuaHelper.hpp\"\n -\n \n#include \"PluginTuneLuaHelper.h\"\n\n\n\n\nVungle\n\n\nChangelog\n\n\n\n\nregister_PluginVungleJS_helper\n -\n \nregister_all_PluginVungleJS_helper\n\n\nregister_PluginVungleLua_helper\n -\n \nregister_all_PluginVungleLua_helper\n\n\n#include \"PluginVungleLuaHelper.hpp\"\n -\n \n#include \"PluginVungleLuaHelper.h\"\n\n\n\n\n1.2.2 Release Notes\n\n\nHighlight\n\n\n\n\nInstaller will automatically modify \nCocos2dxActivity.java\n for you\n\n\nFacebook Plugin supports \ngetFriends()\n function\n\n\nIAP supports \nonRestoreComplete()\n callback\n\n\nIAP will auto consume items if\n\n\n\n\nBugfix\n\n\nIAP: Item already owned\n\n[Facebook: FB_PHOTO is not defined] (http://discuss.cocos2d-x.org/t/facebook-fb-photo-is-not-defined/23064)\n\nFacebook: Facebook plugin failed to work with Cocos2d-js 3.0\n\n\nChartboost: too much recursion\n\n\n1.2.1 Release Notes\n\n\nHighlight\n\n\nFacebook plugin\n is here.\n\n\nBugfix\n\n\nIAP JS crash\n\n\nIAP crash on devices don't have google play\n\n\n1.2.0\n\n\nRelease AgeCheq Plugin.\nSDKBOX IAP Supports non-consumable\nChinese version of documentation relased\nBug fixes\n\n\n1.1.6\n\n\nSDKBOX now supports install plugin online\nSDKBOX online documentation\nUpgrade Vugnle SDK to new version\n * iOS: 3.1.2\n * Android: 3.3.1\n\n\n1.1.5\n\n\nFix SDKBOX conflicts with Plugin-x\n\n\n1.1.4\n\n\nFix SDKBOX IAP plugin return invalid pricing data", 
            "title": "About"
        }, 
        {
            "location": "/release-note/#release-notes", 
            "text": "", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release-note/#125-release-notes", 
            "text": "", 
            "title": "1.2.5 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight", 
            "text": "we created Review Rating plugin that developer can use to prompt user to rate their app", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix", 
            "text": "Fix Android-Studio integration  Fix vungle isCacheAvailable function  Fix AdColony failed to get reward  Plugins can't work together", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#124-release-notes", 
            "text": "Fix installer failed to find ANDROID_LIB directory issue", 
            "title": "1.2.4 Release Notes"
        }, 
        {
            "location": "/release-note/#123-release-notes", 
            "text": "", 
            "title": "1.2.3 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_1", 
            "text": "1.2.3 Fixes some major bugs for the plugins, we strongly recommend updating older versions to 1.2.3", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix_1", 
            "text": "Sometimes using callbacks will result in sprites show up as black, this is due to invoking cocos2d-x from a different thread IAP: item description can't contain newline  Facebook: missing api function for js/lua binding  Installer: fix COCOS_CONSOLE_ROOT invalid error", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#adcolony", 
            "text": "", 
            "title": "AdColony"
        }, 
        {
            "location": "/release-note/#changelog", 
            "text": "Update AdColony iOS SDK to 2.5.3  register_PluginAdColonyLua_helper  -   register_all_PluginAdColonyLua_helper  #include \"PluginAdColonyLuaHelper.hpp\"  -   #include \"PluginAdColonyLuaHelper.h\"  #include \"PluginAdColonyJSHelper.hpp\"  -   #include \"PluginAdColonyJSHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#agecheq", 
            "text": "", 
            "title": "AgeCheq"
        }, 
        {
            "location": "/release-note/#changelog_1", 
            "text": "register_PluginAgeCheqLua_helper  -   register_all_PluginAgeCheqLua_helper  #include \"PluginAgeCheqLuaHelper.hpp\"  -   #include \"PluginAgeCheqLuaHelper.h\"  #include \"PluginAgeCheqJSHelper.hpp\"  -   #include \"PluginAgeCheqJSHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#chartboost", 
            "text": "", 
            "title": "Chartboost"
        }, 
        {
            "location": "/release-note/#changelog_2", 
            "text": "register_PluginChartboostJS_helper  -   register_all_PluginChartboostJS_helper  register_PluginChartboostLua_helper  -   register_all_PluginChartboostLua_helper  Update Chartboost iOS SDK to 5.5.3  Update Chartboost Android SDK to 5.5.3  #include \"PluginChartboostLuaHelper.hpp\"  -   #include \"PluginChartboostLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#facebook", 
            "text": "", 
            "title": "Facebook"
        }, 
        {
            "location": "/release-note/#changelog_3", 
            "text": "register_PluginFacebookJS_helper  -   register_all_PluginFacebookJS_helper  register_PluginFacebookLua_helper  -   register_all_PluginFacebookLua_helper  Update Facebook iOS SDK to 4.5.1  Update Facebook Android SDK to 4.5.1  #include \"PluginFacebookLuaHelper.hpp\"  -   #include \"PluginFacebookLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#flurry-analytics", 
            "text": "", 
            "title": "Flurry Analytics"
        }, 
        {
            "location": "/release-note/#changelog_4", 
            "text": "register_PluginFlurryAnalyticsJS_helper  -   register_all_PluginFlurryAnalyticsJS_helper  register_PluginFlurryAnalyticsLua_helper  -   register_all_PluginFlurryAnalyticsLua_helper  Update Flurry iOS SDK to 6.7.0  Update Flurry Android SDK to 5.6.0  #include \"PluginFlurryAnalyticsLuaHelper.hpp\"  -   #include \"PluginFlurryAnalyticsLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#google-analytics", 
            "text": "", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/release-note/#changelog_5", 
            "text": "#include \"PluginGoogleAnalyticsLuaHelper.hpp\"  -   #include \"PluginGoogleAnalyticsLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#iap", 
            "text": "", 
            "title": "IAP"
        }, 
        {
            "location": "/release-note/#changelog_6", 
            "text": "register_PluginIAPLua_helper  -   register_all_PluginIAPLua_helper  #include \"PluginIAPLuaHelper.hpp\"  -   #include \"PluginIAPLuaHelper.h\"  #include \"PluginIAPJSHelper.hpp\"  -   #include \"PluginIAPJSHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#tune", 
            "text": "register_PluginTuneJS_helper  -   register_all_PluginTuneJS_helper  register_PluginTuneLua_helper  -   register_all_PluginTuneLua_helper  Update MobileAppTracker Android SDK to 3.10.1  #include \"PluginTuneLuaHelper.hpp\"  -   #include \"PluginTuneLuaHelper.h\"", 
            "title": "Tune"
        }, 
        {
            "location": "/release-note/#vungle", 
            "text": "", 
            "title": "Vungle"
        }, 
        {
            "location": "/release-note/#changelog_7", 
            "text": "register_PluginVungleJS_helper  -   register_all_PluginVungleJS_helper  register_PluginVungleLua_helper  -   register_all_PluginVungleLua_helper  #include \"PluginVungleLuaHelper.hpp\"  -   #include \"PluginVungleLuaHelper.h\"", 
            "title": "Changelog"
        }, 
        {
            "location": "/release-note/#122-release-notes", 
            "text": "", 
            "title": "1.2.2 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_2", 
            "text": "Installer will automatically modify  Cocos2dxActivity.java  for you  Facebook Plugin supports  getFriends()  function  IAP supports  onRestoreComplete()  callback  IAP will auto consume items if", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix_2", 
            "text": "IAP: Item already owned \n[Facebook: FB_PHOTO is not defined] (http://discuss.cocos2d-x.org/t/facebook-fb-photo-is-not-defined/23064) Facebook: Facebook plugin failed to work with Cocos2d-js 3.0  Chartboost: too much recursion", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#121-release-notes", 
            "text": "", 
            "title": "1.2.1 Release Notes"
        }, 
        {
            "location": "/release-note/#highlight_3", 
            "text": "Facebook plugin  is here.", 
            "title": "Highlight"
        }, 
        {
            "location": "/release-note/#bugfix_3", 
            "text": "IAP JS crash  IAP crash on devices don't have google play", 
            "title": "Bugfix"
        }, 
        {
            "location": "/release-note/#120", 
            "text": "Release AgeCheq Plugin.\nSDKBOX IAP Supports non-consumable\nChinese version of documentation relased\nBug fixes", 
            "title": "1.2.0"
        }, 
        {
            "location": "/release-note/#116", 
            "text": "SDKBOX now supports install plugin online\nSDKBOX online documentation\nUpgrade Vugnle SDK to new version\n * iOS: 3.1.2\n * Android: 3.3.1", 
            "title": "1.1.6"
        }, 
        {
            "location": "/release-note/#115", 
            "text": "Fix SDKBOX conflicts with Plugin-x", 
            "title": "1.1.5"
        }, 
        {
            "location": "/release-note/#114", 
            "text": "Fix SDKBOX IAP plugin return invalid pricing data", 
            "title": "1.1.4"
        }
    ]
}